<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1. Two Sum</title>
    <url>/2023/11/30/1-Two-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/two-sum/">1. Two Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a></p>
<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>
<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>
<p>You can return the answer in any order.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we <span class="built_in">return</span> [0, 1].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,4], target = 6</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,3], target = 6</span><br><span class="line">Output: [0,1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>2 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>4</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; target &lt;&#x3D; 10<sup>9</sup></li>
<li><strong>Only one valid answer exists.</strong></li>
</ul>
<p><strong>Follow-up:</strong> Can you come up with an algorithm that is less than O(n<sup>2</sup>)time complexity?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use map</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">count</span>(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;m[target - nums[i]], i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            m[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>10. Regular Expression Matching</title>
    <url>/2024/10/03/10-Regular-Expression-Matching/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/regular-expression-matching/description/">10. Regular Expression Matching</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an input string <code>s</code>and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>
<ul>
<li><code>&#39;.&#39;</code> Matches any single character.​​​​</li>
<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>
</ul>
<p>The matching should cover the <strong>entire</strong>  input string (not partial).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aa&quot;</span>, p = <span class="string">&quot;a&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: <span class="string">&quot;a&quot;</span> does not match the entire string <span class="string">&quot;aa&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aa&quot;</span>, p = <span class="string">&quot;a*&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: <span class="string">&#x27;*&#x27;</span> means zero or more of the preceding element, <span class="string">&#x27;a&#x27;</span>. Therefore, by repeating <span class="string">&#x27;a&#x27;</span> once, it becomes <span class="string">&quot;aa&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;ab&quot;</span>, p = <span class="string">&quot;.*&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: <span class="string">&quot;.*&quot;</span> means <span class="string">&quot;zero or more (*) of any character (.)&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length&lt;= 20</code></li>
<li><code>1 &lt;= p.length&lt;= 20</code></li>
<li><code>s</code> contains only lowercase English letters.</li>
<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and<code>&#39;*&#39;</code>.</li>
<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string s_, p_;</span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]: is it possible to match</span></span><br><span class="line">    <span class="comment">// when we are at index i in s and index j in p</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        s_ = s;</span><br><span class="line">        p_ = p;</span><br><span class="line">        dp.<span class="built_in">resize</span>(s.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(p.<span class="built_in">size</span>(), <span class="number">-1</span>));</span><br><span class="line">        <span class="type">bool</span> res = <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> idx1, <span class="type">int</span> idx2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx1 == s_.<span class="built_in">size</span>() &amp;&amp; idx2 == p_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx2 == p_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx1 == s_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="comment">// it means we cannot match an empty string</span></span><br><span class="line">            <span class="keyword">if</span> (idx2 == p_.<span class="built_in">size</span>() - <span class="number">1</span> || p_[idx2 + <span class="number">1</span>] != <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// try to match an empty string</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">traverse</span>(idx1, idx2 + <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[idx1][idx2] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[idx1][idx2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// the three cases we can continue:</span></span><br><span class="line">        <span class="comment">// 1. s[idx1] = p[idx2]</span></span><br><span class="line">        <span class="comment">// 2. s[idx1] != p[idx2] but p[idx2] = &#x27;.&#x27;</span></span><br><span class="line">        <span class="comment">// 3. s[idx2 + 1] = &#x27;*&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (s_[idx1] != p_[idx2] &amp;&amp; p_[idx2] != <span class="string">&#x27;.&#x27;</span> &amp;&amp;</span><br><span class="line">            !(idx2 + <span class="number">1</span> &lt; p_.<span class="built_in">size</span>() &amp;&amp; p_[idx2 + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> res = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// the next item is not *, which means either the character</span></span><br><span class="line">        <span class="comment">// at idx1 and idx2 match or p_[idx2] = &#x27;.&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (idx2 == p_.<span class="built_in">size</span>() - <span class="number">1</span> || p_[idx2 + <span class="number">1</span>] != <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            res = <span class="built_in">traverse</span>(idx1 + <span class="number">1</span>, idx2 + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// it&#x27;s a empty string match, i.e. any character with * is empty</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s_[idx1] != p_[idx2] &amp;&amp; p_[idx2] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            res = <span class="built_in">traverse</span>(idx1, idx2 + <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// we need to decide how many characters to match with *</span></span><br><span class="line">            <span class="type">char</span> c = s_[idx1];</span><br><span class="line">            res = <span class="built_in">traverse</span>(idx1, idx2 + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = idx1; i &lt; s_.<span class="built_in">size</span>() &amp;&amp; (s_[i] == c || p_[idx2] == <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                 i++) &#123;</span><br><span class="line">                res |= <span class="built_in">traverse</span>(i + <span class="number">1</span>, idx2 + <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[idx1][idx2] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>100. Same Tree</title>
    <url>/2024/06/19/100-Same-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/same-tree/description/">100. Same Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p>
<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg" style="width: 622px; height: 182px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: p = [1,2,3], q = [1,2,3]</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg" style="width: 382px; height: 182px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: p = [1,2], q = [1,null,2]</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg" style="width: 622px; height: 182px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: p = [1,2,1], q = [1,1,2]</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in both trees is in the range <code>[0, 100]</code>.</li>
<li><code>-10^4 &lt;= Node.val &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!p &amp;&amp; !q) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!p || !q) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;val != q-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isSameTree</span>(p-&gt;left, q-&gt;left) &amp;&amp; <span class="built_in">isSameTree</span>(p-&gt;right, q-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1008. Construct Binary Search Tree from Preorder Traversal</title>
    <url>/2024/07/13/1008-Construct-Binary-Search-Tree-from-Preorder-Traversal/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/description/">1008. Construct Binary Search Tree from Preorder Traversal</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers preorder, which represents the <strong>preorder traversal</strong> of a BST (i.e., <strong>binary search tree</strong>), construct the tree and return its root.</p>
<p>It is <strong>guaranteed</strong> that there is always possible to find a binary search tree with the given requirements for the given test cases.</p>
<p>A <strong>binary search tree</strong> is a binary tree where for every node, any descendant of <code>Node.left</code> has a value <strong>strictly less than</strong> <code>Node.val</code>, and any descendant of <code>Node.right</code> has a value <strong>strictly greater than</strong> <code>Node.val</code>.</p>
<p>A <strong>preorder traversal</strong> of a binary tree displays the value of the node first, then traverses <code>Node.left</code>, then traverses <code>Node.right</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/03/06/1266.png" style="height: 386px; width: 590px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: preorder = [8,5,1,7,10,12]</span><br><span class="line">Output: [8,5,10,1,7,null,12]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: preorder = [1,3]</span><br><span class="line">Output: [1,null,3]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= preorder.length &lt;= 100</code></li>
<li><code>1 &lt;= preorder[i] &lt;= 1000</code></li>
<li>All the values of <code>preorder</code> are <strong>unique</strong> .</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">bstFromPreorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (preorder.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(preorder[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(preorder[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; preorder.<span class="built_in">size</span>() &amp;&amp; preorder[i] &lt;= root-&gt;val; i++) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(preorder.begin() + <span class="number">1</span>, preorder.begin() + i)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(preorder.begin() + i, preorder.end())</span></span>;</span><br><span class="line">        root-&gt;left = <span class="built_in">bstFromPreorder</span>(l);</span><br><span class="line">        root-&gt;right = <span class="built_in">bstFromPreorder</span>(r);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
        <tag>Binary Search Tree</tag>
        <tag>Monotonic Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>1004. Max Consecutive Ones III</title>
    <url>/2023/12/04/1004-Max-Consecutive-Ones-III/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/max-consecutive-ones-iii/">1004. Max Consecutive Ones III</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>Given a binary array <code>nums</code> and an integer <code>k</code>, return <em>the maximum number of consecutive</em> <code>1</code><em>‘s in the array if you can flip at most</em> <code>k</code> <code>0</code>‘s.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [1,1,1,0,0,1,1,1,1,1,1]</span><br><span class="line">Bolded numbers were flipped from 0 to 1\. The longest subarray is underlined.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]</span><br><span class="line">Bolded numbers were flipped from 0 to 1\. The longest subarray is underlined.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>
<li><code>0 &lt;= k &lt;= nums.length</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestOnes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, res = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            count += nums[right] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; k) &#123;</span><br><span class="line">                <span class="keyword">while</span> (left &lt;= right &amp;&amp; count &gt; k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[left++] == <span class="number">0</span>) &#123;</span><br><span class="line">                        count--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">max</span>(res, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Sliding Window</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>101. Symmetric Tree</title>
    <url>/2024/06/19/101-Symmetric-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/symmetric-tree/description/">101. Symmetric Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg" style="width: 354px; height: 291px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,2,3,4,4,3]</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg" style="width: 308px; height: 258px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,2,null,3,null,3]</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Follow up:</strong>  Could you solve it both recursively and iteratively?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isMirrorTree</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMirrorTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!p &amp;&amp; !q) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!p || !q) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;val != q-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isMirrorTree</span>(p-&gt;left, q-&gt;right) &amp;&amp;</span><br><span class="line">               <span class="built_in">isMirrorTree</span>(p-&gt;right, q-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1011. Capacity To Ship Packages Within D Days</title>
    <url>/2023/01/30/1011-Capacity-To-Ship-Packages-Within-D-Days/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/">1011. Capacity To Ship Packages Within D Days</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a></p>
<p>A conveyor belt has packages that must be shipped from one port to another within <code>days</code> days.</p>
<p>The i<sup>th</sup> package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>
<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>days</code> days.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:</span><br><span class="line">1st day: 1, 2, 3, 4, 5</span><br><span class="line">2nd day: 6, 7</span><br><span class="line">3rd day: 8</span><br><span class="line">4th day: 9</span><br><span class="line">5th day: 10</span><br><span class="line"></span><br><span class="line">Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: weights = [3,2,2,4,1,4], days = 3</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:</span><br><span class="line">1st day: 3, 2</span><br><span class="line">2nd day: 2, 4</span><br><span class="line">3rd day: 1, 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: weights = [1,2,3,1,1], days = 4</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">1st day: 1</span><br><span class="line">2nd day: 2</span><br><span class="line">3rd day: 3</span><br><span class="line">4th day: 1, 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; days &lt;&#x3D; weights.length &lt;&#x3D; 5 * 10<sup>4</sup></li>
<li><code>1 &lt;= weights[i] &lt;= 500</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Binary search to find the left boundary</li>
<li>Helper function to get how many days with specific capacity</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shipTime</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; weights, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> days = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; weights.<span class="built_in">size</span>();) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (sum &lt;= c &amp;&amp; i &lt; weights.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                sum += weights[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; c) &#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            days++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> days;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shipWithinDays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; weights, <span class="type">int</span> days)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> weight : weights) &#123;</span><br><span class="line">            <span class="keyword">if</span> (weight &gt; left) &#123;</span><br><span class="line">                left = weight;</span><br><span class="line">            &#125;</span><br><span class="line">            right += weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> time = <span class="built_in">shipTime</span>(weights, mid);</span><br><span class="line">            <span class="keyword">if</span> (time == days) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &gt; days) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &lt; days) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>1019. Next Greater Node In Linked List</title>
    <url>/2023/12/15/1019-Next-Greater-Node-In-Linked-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/next-greater-node-in-linked-list/">1019. Next Greater Node In Linked List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a></p>
<p>You are given the <code>head</code> of a linked list with <code>n</code> nodes.</p>
<p>For each node in the list, find the value of the <strong>next greater node</strong>. That is, for each node, find the value of the first node that is next to it and has a <strong>strictly larger</strong> value than it.</p>
<p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the value of the next greater node of the i<sup>th</sup> node (<strong>1-indexed</strong>). If the i<sup>th</sup> node does not have a next greater node, set <code>answer[i] = 0</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/08/05/linkedlistnext1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [2,1,5]</span><br><span class="line">Output: [5,5,0]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/08/05/linkedlistnext2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [2,7,4,3,5]</span><br><span class="line">Output: [7,0,5,5,0]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is <code>n</code>.</li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>4</sup></li>
<li>1 &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>transform the linked list to array first</li>
<li>stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextLargerNodes</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(head-&gt;val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; (s.<span class="built_in">top</span>() &lt;= nums[i])) &#123;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = s.<span class="built_in">empty</span>() ? <span class="number">0</span> : s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>1022. Sum of Root To Leaf Binary Numbers</title>
    <url>/2024/04/03/1022-Sum-of-Root-To-Leaf-Binary-Numbers/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/description/">1022. Sum of Root To Leaf Binary Numbers</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given the <code>root</code> of a binary tree where each node has a value <code>0</code> or <code>1</code>. Each root-to-leaf path represents a binary number starting with the most significant bit.</p>
<ul>
<li>For example, if the path is <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>, then this could represent <code>01101</code> in binary, which is <code>13</code>.</li>
</ul>
<p>For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers.</p>
<p>The test cases are generated so that the answer fits in a <strong>32-bits</strong>  integer.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-numbers.png" style="width: 400px; height: 263px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,0,1,0,1,0,1]</span><br><span class="line">Output: 22</span><br><span class="line">Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>
<li><code>Node.val</code> is <code>0</code> or <code>1</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>traverse the tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRootToLeaf</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur * <span class="number">2</span> + root-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            res += cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) <span class="built_in">traverse</span>(root-&gt;left, cur);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) <span class="built_in">traverse</span>(root-&gt;right, cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1026. Maximum Difference Between Node and Ancestor</title>
    <url>/2024/07/03/1026-Maximum-Difference-Between-Node-and-Ancestor/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/description/">1026. Maximum Difference Between Node and Ancestor</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, find the maximum value <code>v</code> for which there exist <strong>different</strong>  nodes <code>a</code> and <code>b</code> where <code>v = |a.val - b.val|</code> and <code>a</code> is an ancestor of <code>b</code>.</p>
<p>A node <code>a</code> is an ancestor of <code>b</code> if either: any child of <code>a</code> is equal to <code>b</code>or any child of <code>a</code> is an ancestor of <code>b</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/11/09/tmp-tree.jpg" style="width: 400px; height: 390px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: We have various ancestor-node differences, some of <span class="built_in">which</span> are given below :</span><br><span class="line">|8 - 3| = 5</span><br><span class="line">|3 - 7| = 4</span><br><span class="line">|8 - 1| = 7</span><br><span class="line">|10 - 13| = 3</span><br><span class="line">Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/11/09/tmp-tree-1.jpg" style="width: 250px; height: 349px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2,null,0,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[2, 5000]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>back tracking</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxAncestorDiff</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s[root-&gt;val]++;</span><br><span class="line">        <span class="type">int</span> minVal = s.<span class="built_in">begin</span>()-&gt;first;</span><br><span class="line">        <span class="type">int</span> maxVal = s.<span class="built_in">rbegin</span>()-&gt;first;</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="built_in">abs</span>(maxVal - minVal));</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">        s[root-&gt;val]--;</span><br><span class="line">        <span class="keyword">if</span> (s[root-&gt;val] == <span class="number">0</span>) &#123;</span><br><span class="line">            s.<span class="built_in">erase</span>(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>104. Maximum Depth of Binary Tree</title>
    <url>/2023/02/02/104-Maximum-Depth-of-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">104. Maximum Depth of Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/breadth-first-search/">Breadth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p>
<p>A binary tree’s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Think about the tree’s left and right</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left), <span class="built_in">maxDepth</span>(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>105. Construct Binary Tree from Preorder and Inorder Traversal</title>
    <url>/2023/08/17/105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. Construct Binary Tree from Preorder and Inorder Traversal</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]</span><br><span class="line">Output: [3,9,20,null,null,15,7]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: preorder = [-1], inorder = [-1]</span><br><span class="line">Output: [-1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= preorder.length &lt;= 3000</code></li>
<li><code>inorder.length == preorder.length</code></li>
<li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li>
<li><code>preorder</code> and <code>inorder</code> consist of <strong>unique</strong> values.</li>
<li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li>
<li><code>preorder</code> is <strong>guaranteed</strong> to be the preorder traversal of the tree.</li>
<li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Draw the tree manually</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; valToIndex;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = preorder.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            valToIndex[inorder[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(preorder, <span class="number">0</span>, size - <span class="number">1</span>, inorder, <span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, <span class="type">int</span> preStart, <span class="type">int</span> preEnd,</span></span></span><br><span class="line"><span class="params"><span class="function">                    vector&lt;<span class="type">int</span>&gt;&amp; inorder, <span class="type">int</span> inStart, <span class="type">int</span> inEnd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preStart &gt; preEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> rootVal = preorder[preStart];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootVal);</span><br><span class="line">        <span class="type">int</span> inorderIndex = valToIndex[rootVal];</span><br><span class="line">        <span class="type">int</span> leftSize = inorderIndex - inStart;</span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(preorder, preStart + <span class="number">1</span>, preStart + leftSize,</span><br><span class="line">                           inorder, inStart, inorderIndex - <span class="number">1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(preorder, preStart + leftSize + <span class="number">1</span>, preEnd,</span><br><span class="line">                            inorder, inorderIndex + <span class="number">1</span>, inEnd);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>1056. Confusing Number</title>
    <url>/2023/01/20/1056-Confusing-Number/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/confusing-number/">1056. Confusing Number</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a></p>
<p>A <strong>confusing number</strong> is a number that when rotated <code>180</code> degrees becomes a different number with <strong>each digit valid</strong>.</p>
<p>We can rotate digits of a number by <code>180</code> degrees to form new digits.</p>
<ul>
<li>When <code>0</code>, <code>1</code>, <code>6</code>, <code>8</code>, and <code>9</code> are rotated <code>180</code> degrees, they become <code>0</code>, <code>1</code>, <code>9</code>, <code>8</code>, and <code>6</code> respectively.</li>
<li>When <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, and <code>7</code> are rotated <code>180</code> degrees, they become <strong>invalid</strong>.</li>
</ul>
<p>Note that after rotating a number, we can ignore leading zeros.</p>
<ul>
<li>For example, after rotating <code>8000</code>, we have <code>0008</code> which is considered as just <code>8</code>.</li>
</ul>
<p>Given an integer <code>n</code>, return <code>true</code> <em>if it is a <strong>confusing number</strong>, or</em> <code>false</code> <em>otherwise</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/03/23/1268_1.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 6</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: We get 9 after rotating 6, 9 is a valid number, and 9 != 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/03/23/1268_2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 89</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: We get 68 after rotating 89, 68 is a valid number and 68 != 89.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/03/26/1268_3.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 11</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: We get 11 after rotating 11, 11 is a valid number but the value remains the same, thus 11 is not a confusing number</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>0 &lt;&#x3D; n &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>No need to do the mapping, we can use switch during the loop</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">confusingNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>, tmp = n;</span><br><span class="line">        <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> r = tmp % <span class="number">10</span>;</span><br><span class="line">            tmp /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">switch</span>(r) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    sum = sum * <span class="number">10</span> + r;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    sum = sum * <span class="number">10</span> + <span class="number">9</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    sum = sum * <span class="number">10</span> + <span class="number">6</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !(sum == n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>106. Construct Binary Tree from Inorder and Postorder Traversal</title>
    <url>/2023/08/22/106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. Construct Binary Tree from Inorder and Postorder Traversal</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given two integer arrays <code>inorder</code> and <code>postorder</code> where <code>inorder</code> is the inorder traversal of a binary tree and <code>postorder</code> is the postorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]</span><br><span class="line">Output: [3,9,20,null,null,15,7]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: inorder = [-1], postorder = [-1]</span><br><span class="line">Output: [-1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= inorder.length &lt;= 3000</code></li>
<li><code>postorder.length == inorder.length</code></li>
<li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li>
<li><code>inorder</code> and <code>postorder</code> consist of <strong>unique</strong> values.</li>
<li>Each value of <code>postorder</code> also appears in <code>inorder</code>.</li>
<li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li>
<li><code>postorder</code> is <strong>guaranteed</strong> to be the postorder traversal of the tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Draw the tree and find the pattern of root’s location</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; valToIndex;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = inorder.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            valToIndex[inorder[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(inorder, <span class="number">0</span>, size - <span class="number">1</span>, postorder, <span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, <span class="type">int</span> inStart, <span class="type">int</span> inEnd,</span></span></span><br><span class="line"><span class="params"><span class="function">                    vector&lt;<span class="type">int</span>&gt;&amp; postorder, <span class="type">int</span> postStart, <span class="type">int</span> postEnd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inStart &gt; inEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rootVal = postorder[postEnd];</span><br><span class="line">        <span class="type">int</span> rootIndex = valToIndex[rootVal];</span><br><span class="line"></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootVal);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> leftSize = rootIndex - inStart;</span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(inorder, inStart, rootIndex - <span class="number">1</span>,</span><br><span class="line">                           postorder, postStart, postStart + leftSize - <span class="number">1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(inorder, rootIndex + <span class="number">1</span>, inEnd,</span><br><span class="line">                            postorder, postStart + leftSize, postEnd - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>1071. Greatest Common Divisor of Strings</title>
    <url>/2023/02/01/1071-Greatest-Common-Divisor-of-Strings/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/greatest-common-divisor-of-strings/">1071. Greatest Common Divisor of Strings</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/string/">String</a></p>
<p>For two strings <code>s</code> and <code>t</code>, we say “<code>t</code> divides <code>s</code>“ if and only if <code>s = t + ... + t</code> (i.e., <code>t</code> is concatenated with itself one or more times).</p>
<p>Given two strings <code>str1</code> and <code>str2</code>, return <em>the largest string</em> <code>x</code> <em>such that</em> <code>x</code> <em>divides both</em> <code>str1</code> <em>and</em> <code>str2</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: str1 = &quot;ABCABC&quot;, str2 = &quot;ABC&quot;</span><br><span class="line">Output: &quot;ABC&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: str1 = &quot;ABABAB&quot;, str2 = &quot;ABAB&quot;</span><br><span class="line">Output: &quot;AB&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: str1 = &quot;LEET&quot;, str2 = &quot;CODE&quot;</span><br><span class="line">Output: &quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li>
<li><code>str1</code> and <code>str2</code> consist of English uppercase letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Think about it methmatically, like str1 is k subStrings and str2 is l subStrings</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">gcdOfStrings</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str1 + str2 != str2 + str1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> gcdLength = <span class="built_in">gcd</span>(str1.<span class="built_in">size</span>(), str2.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">return</span> str1.<span class="built_in">substr</span>(<span class="number">0</span>, gcdLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>1077C. Good Array</title>
    <url>/2024/06/19/1077C-Good-Array/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1077/C">C. Johnny and Another Rating Drop</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 n(2≤n≤2e5) 和长为 n 的数组 a(1≤a[i]≤1e6)。</p>
<p>对于数组 b，如果 b 中存在一个数 x，使得 x &#x3D; b 中其余元素之和，则称 b 为「好数组」。</p>
<p>如果删除 a[i] 可以使剩余元素组成好数组，则称 i 为「好下标」。<br>输出 a 的好下标的个数，以及所有好下标（任意顺序）。注意下标从 1 开始。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>record the mx1 and mx2</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> max1 = <span class="number">0</span>, max2 = <span class="number">0</span>, maxIdx = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; max1) &#123;</span><br><span class="line">            max2 = max1;</span><br><span class="line">            max1 = nums[i];</span><br><span class="line">            maxIdx = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &gt; max2) &#123;</span><br><span class="line">            max2 = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> mx = (i == maxIdx) ? max2 : max1;</span><br><span class="line">        <span class="keyword">if</span> (sum - nums[i] == <span class="number">2</span> * mx) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; res.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : res) &#123;</span><br><span class="line">        out &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    in &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        in &gt;&gt; num;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>(nums);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>bitmasks</tag>
        <tag>greedy</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>108. Convert Sorted Array to Binary Search Tree</title>
    <url>/2024/07/13/108-Convert-Sorted-Array-to-Binary-Search-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/">108. Convert Sorted Array to Binary Search Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array <code>nums</code> where the elements are sorted in <strong>ascending order</strong> , convert it to a <strong>height-balanced</strong> binary search tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg" style="width: 302px; height: 222px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-10,-3,0,5,9]</span><br><span class="line">Output: [0,-3,9,-10,null,5]</span><br></pre></td></tr></table></figure>

<p>Explanation: [0,-10,5,null,-3,null,9] is also accepted:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg" style="width: 302px; height: 222px;">

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/18/btree.jpg" style="width: 342px; height: 142px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3]</span><br><span class="line">Output: [3,1]</span><br><span class="line">Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^4</code></li>
<li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li>
<li><code>nums</code> is sorted in a <strong>strictly increasing</strong>  order.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = nums.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[mid]);</span><br><span class="line">        <span class="keyword">if</span> (mid &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; l = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">begin</span>() + mid);</span><br><span class="line">            root-&gt;left = <span class="built_in">sortedArrayToBST</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() - <span class="number">1</span> &gt;= mid + <span class="number">1</span>) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; r = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">begin</span>() + mid + <span class="number">1</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">            root-&gt;right = <span class="built_in">sortedArrayToBST</span>(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>1080. Insufficient Nodes in Root to Leaf Paths</title>
    <url>/2024/07/05/1080-Insufficient-Nodes-in-Root-to-Leaf-Paths/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths/description/">1080. Insufficient Nodes in Root to Leaf Paths</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree and an integer <code>limit</code>, delete all <strong>insufficient nodes</strong> in the tree simultaneously, and return the root of the resulting binary tree.</p>
<p>A node is <strong>insufficient</strong> if every root to <strong>leaf</strong> path intersecting this node has a sum strictly less than <code>limit</code>.</p>
<p>A <strong>leaf</strong> is a node with no children.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/06/05/insufficient-11.png" style="width: 500px; height: 207px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], <span class="built_in">limit</span> = 1</span><br><span class="line">Output: [1,2,3,4,null,null,7,8,9,null,14]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/06/05/insufficient-3.png" style="width: 400px; height: 274px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], <span class="built_in">limit</span> = 22</span><br><span class="line">Output: [5,4,8,11,null,17,4,7,null,null,null,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/06/11/screen-shot-2019-06-11-at-83301-pm.png" style="width: 250px; height: 199px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,-3,-5,null,4,null], <span class="built_in">limit</span> = -1</span><br><span class="line">Output: [1,null,-3,4]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 5000]</code>.</li>
<li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li>
<li><code>-10^9 &lt;= limit &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li></li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sufficientSubset</span><span class="params">(TreeNode* root, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val &lt; limit) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root-&gt;left = <span class="built_in">sufficientSubset</span>(root-&gt;left, limit - root-&gt;val);</span><br><span class="line">        root-&gt;right = <span class="built_in">sufficientSubset</span>(root-&gt;right, limit - root-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>109. Convert Sorted List to Binary Search Tree</title>
    <url>/2024/07/16/109-Convert-Sorted-List-to-Binary-Search-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/">109. Convert Sorted List to Binary Search Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>head</code> of a singly linked list where elements are sorted in <strong>ascending order</strong> , convert it to a <strong>height-balanced</strong> binary search tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/08/17/linked.jpg" style="width: 500px; height: 388px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [-10,-3,0,5,9]</span><br><span class="line">Output: [0,-3,9,-10,null,5]</span><br><span class="line">Explanation: One possible answer is [0,-3,9,-10,null,5], <span class="built_in">which</span> represents the shown height balanced BST.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in <code>head</code> is in the range <code>[0, 2 * 10^4]</code>.</li>
<li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ListNode* cur;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedListToBST</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ListNode* p = head; p; p = p-&gt;next) &#123;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">traverse</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (end - start) / <span class="number">2</span> + start;</span><br><span class="line">        TreeNode* l = <span class="built_in">traverse</span>(start, mid - <span class="number">1</span>);</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(cur-&gt;val);</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        TreeNode* r = <span class="built_in">traverse</span>(mid + <span class="number">1</span>, end);</span><br><span class="line">        root-&gt;left = l;</span><br><span class="line">        root-&gt;right = r;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
        <tag>Linked List</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>1094. Car Pooling</title>
    <url>/2023/01/23/1094-Car-Pooling/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/car-pooling/">1094. Car Pooling</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/sorting/">Sorting</a>, <a href="https://leetcode.com/tag/heap-priority-queue/">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/simulation/">Simulation</a>, <a href="https://leetcode.com/tag/prefix-sum/">Prefix Sum</a></p>
<p>There is a car with <code>capacity</code> empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</p>
<p>You are given the integer <code>capacity</code> and an array <code>trips</code> where trips[i] &#x3D; [numPassengers<sub>i</sub>, from<sub>i</sub>, to<sub>i</sub>] indicates that the i<sup>th</sup> trip has numPassengers<sub>i</sub> passengers and the locations to pick them up and drop them off are from<sub>i</sub> and to<sub>i</sub> respectively. The locations are given as the number of kilometers due east from the car’s initial location.</p>
<p>Return <code>true</code> <em>if it is possible to pick up and drop off all passengers for all the given trips, or</em> <code>false</code> <em>otherwise</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: trips = [[2,1,5],[3,3,7]], capacity = 4</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: trips = [[2,1,5],[3,3,7]], capacity = 5</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= trips.length &lt;= 1000</code></li>
<li><code>trips[i].length == 3</code></li>
<li>1 &lt;&#x3D; numPassengers<sub>i</sub> &lt;&#x3D; 100</li>
<li>0 &lt;&#x3D; from<sub>i</sub> &lt; to<sub>i</sub> &lt;&#x3D; 1000</li>
<li>1 &lt;&#x3D; capacity &lt;&#x3D; 10<sup>5</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use the diff array</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">carPooling</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; trips, <span class="type">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diffs</span><span class="params">(<span class="number">1001</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt; trip : trips) &#123;</span><br><span class="line">            <span class="type">int</span> val = trip[<span class="number">0</span>], from = trip[<span class="number">1</span>], to = trip[<span class="number">2</span>] - <span class="number">1</span>;</span><br><span class="line">            diffs[from] += val;</span><br><span class="line">            <span class="keyword">if</span> (to + <span class="number">1</span> &lt; diffs.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                diffs[to + <span class="number">1</span>] -= val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; numPassengers;</span><br><span class="line">        <span class="keyword">if</span> (diffs[<span class="number">0</span>] &gt; capacity) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            numPassengers.<span class="built_in">push_back</span>(diffs[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; diffs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            numPassengers.<span class="built_in">push_back</span>(numPassengers[i - <span class="number">1</span>] + diffs[i]);</span><br><span class="line">            <span class="keyword">if</span> (numPassengers[i] &gt; capacity) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>110. Balanced Binary Tree</title>
    <url>/2024/07/01/110-Balanced-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/balanced-binary-tree/description/">110. Balanced Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, determine if it is <strong>height-balanced</strong>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg" style="width: 342px; height: 221px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg" style="width: 452px; height: 301px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,2,3,3,null,null,4,4]</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>
<li><code>-10^4 &lt;= Node.val &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> balanced = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> balanced;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root || !balanced) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(left - right) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            balanced = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1109. Corporate Flight Bookings</title>
    <url>/2023/01/23/1109-Corporate-Flight-Bookings/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/corporate-flight-bookings/">1109. Corporate Flight Bookings</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/prefix-sum/">Prefix Sum</a></p>
<p>There are <code>n</code> flights that are labeled from <code>1</code> to <code>n</code>.</p>
<p>You are given an array of flight bookings <code>bookings</code>, where bookings[i] &#x3D; [first<sub>i</sub>, last<sub>i</sub>, seats<sub>i</sub>] represents a booking for flights first<sub>i</sub> through last<sub>i</sub> (<strong>inclusive</strong>) with seats<sub>i</sub> seats reserved for <strong>each flight</strong> in the range.</p>
<p>Return <em>an array</em> <code>answer</code> <em>of length</em> <code>n</code><em>, where</em> <code>answer[i]</code> <em>is the total number of seats reserved for flight</em> <code>i</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5</span><br><span class="line">Output: [10,55,45,25,25]</span><br><span class="line">Explanation:</span><br><span class="line">Flight labels:        1   2   3   4   5</span><br><span class="line">Booking 1 reserved:  10  10</span><br><span class="line">Booking 2 reserved:      20  20</span><br><span class="line">Booking 3 reserved:      25  25  25  25</span><br><span class="line">Total seats:         10  55  45  25  25</span><br><span class="line">Hence, answer = [10,55,45,25,25]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: bookings = [[1,2,10],[2,2,15]], n = 2</span><br><span class="line">Output: [10,25]</span><br><span class="line">Explanation:</span><br><span class="line">Flight labels:        1   2</span><br><span class="line">Booking 1 reserved:  10  10</span><br><span class="line">Booking 2 reserved:      15</span><br><span class="line">Total seats:         10  25</span><br><span class="line">Hence, answer = [10,25]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 2 * 10<sup>4</sup></li>
<li>1 &lt;&#x3D; bookings.length &lt;&#x3D; 2 * 10<sup>4</sup></li>
<li><code>bookings[i].length == 3</code></li>
<li>1 &lt;&#x3D; first<sub>i</sub> &lt;&#x3D; last<sub>i</sub> &lt;&#x3D; n</li>
<li>1 &lt;&#x3D; seats<sub>i</sub> &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use the diff array</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">corpFlightBookings</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; bookings, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diffs</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt; booking : bookings) &#123;</span><br><span class="line">            <span class="type">int</span> start = booking[<span class="number">0</span>] - <span class="number">1</span>, end = booking[<span class="number">1</span>] - <span class="number">1</span>, diff = booking[<span class="number">2</span>];</span><br><span class="line">            diffs[start] += diff;</span><br><span class="line">            <span class="keyword">if</span> (end + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                diffs[end + <span class="number">1</span>] -= diff;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(diffs[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(res[i - <span class="number">1</span>] + diffs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>1110. Delete Nodes And Return Forest</title>
    <url>/2024/06/07/1110-Delete-Nodes-And-Return-Forest/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/delete-nodes-and-return-forest/description/">1110. Delete Nodes And Return Forest</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, each node in the tree has a distinct value.</p>
<p>After deleting all nodes with a value in <code>to_delete</code>, we are left with a forest (a disjoint union of trees).</p>
<p>Return the roots of the trees in the remaining forest. You may return the result in any order.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/07/01/screen-shot-2019-07-01-at-53836-pm.png" style="width: 237px; height: 150px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]</span><br><span class="line">Output: [[1,2,null,4],[6],[7]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,4,null,3], to_delete = [3]</span><br><span class="line">Output: [[1,2,4]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the given tree is at most <code>1000</code>.</li>
<li>Each node has a distinct value between <code>1</code> and <code>1000</code>.</li>
<li><code>to_delete.length &lt;= 1000</code></li>
<li><code>to_delete</code> contains distinct values between <code>1</code> and <code>1000</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    vector&lt;TreeNode*&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">delNodes</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; to_delete)</span> </span>&#123;</span><br><span class="line">        s = <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;(to_delete.<span class="built_in">begin</span>(), to_delete.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">deleteNode</span>(root, s, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deleteNode</span><span class="params">(TreeNode* root, set&lt;<span class="type">int</span>&gt;&amp; s, <span class="type">bool</span> hasParent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> deleted = s.<span class="built_in">contains</span>(root-&gt;val);</span><br><span class="line">        <span class="keyword">if</span> (!deleted &amp;&amp; !hasParent) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = <span class="built_in">deleteNode</span>(root-&gt;left, s, !deleted);</span><br><span class="line">        root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right, s, !deleted);</span><br><span class="line">        <span class="keyword">return</span> deleted ? <span class="literal">nullptr</span> : root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>112. Path Sum</title>
    <url>/2024/06/19/112-Path-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/path-sum/description/">112. Path Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <code>true</code> if the tree has a <strong>root-to-leaf</strong>  path such that adding up all the values along the path equals <code>targetSum</code>.</p>
<p>A <strong>leaf</strong>  is a node with no children.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg" style="width: 500px; height: 356px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: The root-to-leaf path with the target <span class="built_in">sum</span> is shown.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3], targetSum = 5</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: There two root-to-leaf paths <span class="keyword">in</span> the tree:</span><br><span class="line">(1 --&gt; 2): The <span class="built_in">sum</span> is 3.</span><br><span class="line">(1 --&gt; 3): The <span class="built_in">sum</span> is 4.</span><br><span class="line">There is no root-to-leaf path with <span class="built_in">sum</span> = 5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [], targetSum = 0</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: Since the tree is empty, there are no root-to-leaf paths.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> targetSum_;</span><br><span class="line">    <span class="type">int</span> curSum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        targetSum_ = targetSum;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root || found) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curSum += root-&gt;val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; curSum == targetSum_) &#123;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        curSum -= root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1120. Maximum Average Subtree</title>
    <url>/2024/07/05/1120-Maximum-Average-Subtree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-average-subtree/description/">1120. Maximum Average Subtree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the maximum <strong>average</strong>  value of a <strong>subtree</strong>  of that tree. Answers within <code>10^-5</code> of the actual answer will be accepted.</p>
<p>A <strong>subtree</strong>  of a tree is any node of that tree plus all its descendants.</p>
<p>The <strong>average</strong>  value of a tree is the sum of its values, divided by the number of nodes.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/04/09/1308_example_1.png" style="width: 132px; height: 123px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,6,1]</span><br><span class="line">Output: 6.00000</span><br><span class="line">Explanation:</span><br><span class="line">For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.</span><br><span class="line">For the node with value = 6 we have an average of 6 / 1 = 6.</span><br><span class="line">For the node with value = 1 we have an average of 1 / 1 = 1.</span><br><span class="line">So the answer is 6 <span class="built_in">which</span> is the maximum.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,null,1]</span><br><span class="line">Output: 1.00000</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">maximumAverageSubtree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> l = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">auto</span> r = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = root-&gt;val + l.first + r.first;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">1</span> + l.second + r.second;</span><br><span class="line">        <span class="type">double</span> tmp = sum * <span class="number">1.0</span> / cnt;</span><br><span class="line">        res = <span class="built_in">max</span>(res, tmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;sum, cnt&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1124. Longest Well-Performing Interval</title>
    <url>/2023/11/13/1124-Longest-Well-Performing-Interval/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-well-performing-interval/">1124. Longest Well-Performing Interval</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>We are given <code>hours</code>, a list of the number of hours worked per day for a given employee.</p>
<p>A day is considered to be a <em>tiring day</em> if and only if the number of hours worked is (strictly) greater than <code>8</code>.</p>
<p>A <em>well-performing interval</em> is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.</p>
<p>Return the length of the longest well-performing interval.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: hours = [9,9,6,0,6,6,9]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The longest well-performing interval is [9,9,6].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: hours = [6,6,6]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; hours.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>0 &lt;= hours[i] &lt;= 16</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum + map</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestWPI</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; hours)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = hours.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(size + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + (hours[i] &gt; <span class="number">8</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!m.<span class="built_in">contains</span>(preSum[i])) &#123;</span><br><span class="line">                m[preSum[i]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (preSum[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                res = <span class="built_in">max</span>(res, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (m.<span class="built_in">contains</span>(preSum[i] - <span class="number">1</span>)) &#123;</span><br><span class="line">                    res = <span class="built_in">max</span>(res, i - m[preSum[i] - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>1135. Connecting Cities With Minimum Cost</title>
    <url>/2023/09/03/1135-Connecting-Cities-With-Minimum-Cost/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/connecting-cities-with-minimum-cost/">1135. Connecting Cities With Minimum Cost</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/union-find//">Union Find</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/minimum-spanning-tree//">Minimum Spanning Tree</a></p>
<p>There are <code>n</code> cities labeled from <code>1</code> to <code>n</code>. You are given the integer <code>n</code> and an array <code>connections</code> where connections[i] &#x3D; [x<sub>i</sub>, y<sub>i</sub>, cost<sub>i</sub>] indicates that the cost of connecting city x<sub>i</sub> and city y<sub>i</sub> (bidirectional connection) is cost<sub>i</sub>.</p>
<p>Return <em>the minimum <strong>cost</strong> to connect all the</em> <code>n</code> <em>cities such that there is at least one path between each pair of cities</em>. If it is impossible to connect all the <code>n</code> cities, return <code>-1</code>,</p>
<p>The <strong>cost</strong> is the sum of the connections’ costs used.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/04/20/1314_ex2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Choosing any 2 edges will connect all cities so we choose the minimum 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/04/20/1314_ex1.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, connections = [[1,2,3],[3,4,4]]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: There is no way to connect all cities even <span class="keyword">if</span> all edges are used.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>4</sup></li>
<li>1 &lt;&#x3D; connections.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>connections[i].length == 3</code></li>
<li>1 &lt;&#x3D; x<sub>i</sub>, y<sub>i</sub> &lt;&#x3D; n</li>
<li>x<sub>i</sub> !&#x3D; y<sub>i</sub></li>
<li>0 &lt;&#x3D; cost<sub>i</sub> &lt;&#x3D; 10<sup>5</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Kruskal’s algorithm: union find + weight</li>
<li>Prim’s algorithm: BFS + priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<p>Kruskal’s algorithm</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumCost</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; connections)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            parent.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> cmp = [](vector&lt;<span class="type">int</span>&gt; lhs, vector&lt;<span class="type">int</span>&gt; rhs) &#123;</span><br><span class="line">            <span class="keyword">return</span> lhs[<span class="number">2</span>] &lt; rhs[<span class="number">2</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">sort</span>(connections.<span class="built_in">begin</span>(), connections.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> connection : connections) &#123;</span><br><span class="line">            <span class="type">int</span> p = connection[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> q = connection[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> findP = <span class="built_in">find</span>(p);</span><br><span class="line">            <span class="type">int</span> findQ = <span class="built_in">find</span>(q);</span><br><span class="line">            <span class="keyword">if</span> (findP == findQ) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent[findP] = findQ;</span><br><span class="line">                sum += connection[<span class="number">2</span>];</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span> ? sum : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[node] != node) &#123;</span><br><span class="line">            parent[node] = <span class="built_in">find</span>(parent[node]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[node];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Prim’s algorithm</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumCost</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; connections)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = n;</span><br><span class="line">        graph = vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;(n + <span class="number">1</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;());</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> connection : connections) &#123;</span><br><span class="line">            <span class="type">int</span> p = connection[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> q = connection[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> w = connection[<span class="number">2</span>];</span><br><span class="line">            graph[p].<span class="built_in">push_back</span>(&#123;w, q&#125;);</span><br><span class="line">            graph[q].<span class="built_in">push_back</span>(&#123;w, p&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> cost = <span class="number">0</span>;</span><br><span class="line">        visited[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">cut</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; pair = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> node = pair[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (visited[node]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n--;</span><br><span class="line">            <span class="type">int</span> w = pair[<span class="number">0</span>];</span><br><span class="line">            visited[node] = <span class="literal">true</span>;</span><br><span class="line">            cost += w;</span><br><span class="line">            <span class="built_in">cut</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span> ? cost : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge : graph[node]) &#123;</span><br><span class="line">            <span class="type">int</span> to = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (visited[to]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> w = edge[<span class="number">0</span>];</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;w, to&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Heap (Priority Queue)</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
        <tag>Minimum Spanning Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>113. Path Sum II</title>
    <url>/2024/06/19/113-Path-Sum-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/path-sum-ii/description/">113. Path Sum II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return all <strong>root-to-leaf</strong>  paths where the sum of the node values in the path equals <code>targetSum</code>. Each path should be returned as a list of the node <strong>values</strong> , not node references.</p>
<p>A <strong>root-to-leaf</strong>  path is a path starting from the root and ending at any leaf node. A <strong>leaf</strong>  is a node with no children.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg" style="width: 500px; height: 356px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22</span><br><span class="line">Output: [[5,4,11,2],[5,8,4,5]]</span><br><span class="line">Explanation: There are two paths whose <span class="built_in">sum</span> equals targetSum:</span><br><span class="line">5 + 4 + 11 + 2 = 22</span><br><span class="line">5 + 8 + 4 + 5 = 22</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg" style="width: 212px; height: 181px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3], targetSum = 5</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2], targetSum = 0</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; cur;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="type">int</span> curSum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> targetSum_;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathSum</span>(TreeNode* root, <span class="type">int</span> targetSum) &#123;</span><br><span class="line">        targetSum_ = targetSum;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        curSum += root-&gt;val;</span><br><span class="line">        cur.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; curSum == targetSum_) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        cur.<span class="built_in">pop_back</span>();</span><br><span class="line">        curSum -= root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>1137. N-th Tribonacci Number</title>
    <url>/2023/01/30/1137-N-th-Tribonacci-Number/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/n-th-tribonacci-number/">1137. N-th Tribonacci Number</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/memoization/">Memoization</a></p>
<p>The Tribonacci sequence T<sub>n</sub> is defined as follows:</p>
<p>T<sub>0</sub> &#x3D; 0, T<sub>1</sub> &#x3D; 1, T<sub>2</sub> &#x3D; 1, and T<sub>n+3</sub> &#x3D; T<sub>n</sub> + T<sub>n+1</sub> + T<sub>n+2</sub> for n &gt;&#x3D; 0.</p>
<p>Given &#96;n, return the value of T<sub>n</sub>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4</span><br><span class="line">Output: 4</span><br><span class="line">Explanation:</span><br><span class="line">T_3 = 0 + 1 + 1 = 2</span><br><span class="line">T_4 = 1 + 1 + 2 = 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 25</span><br><span class="line">Output: 1389537</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= n &lt;= 37</code></li>
<li>The answer is guaranteed to fit within a 32-bit integer, ie. <code>answer &lt;= 2^31 - 1</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>just do it intuitively</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(res[i - <span class="number">3</span>] + res[i - <span class="number">2</span>] + res[i - <span class="number">1</span>]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
        <tag>Memoization</tag>
      </tags>
  </entry>
  <entry>
    <title>114. Flatten Binary Tree to Linked List</title>
    <url>/2023/02/03/114-Flatten-Binary-Tree-to-Linked-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/">114. Flatten Binary Tree to Linked List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/stack/">Stack</a>, <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary tree, flatten the tree into a “linked list”:</p>
<ul>
<li>The “linked list” should use the same <code>TreeNode</code> class where the <code>right</code> child pointer points to the next node in the list and the <code>left</code> child pointer is always <code>null</code>.</li>
<li>The “linked list” should be in the same order as a <a href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR"><strong>pre-order</strong> <strong>traversal</strong></a> of the binary tree.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,5,3,4,null,6]</span><br><span class="line">Output: [1,null,2,null,3,null,4,null,5,null,6]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0]</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Follow up:</strong> Can you flatten the tree in-place (with <code>O(1)</code> extra space)?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Recursive, think about if the left and right node has been flattened</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* curr = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">flatten</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        TreeNode* left = root-&gt;left;</span><br><span class="line">        TreeNode* right = root-&gt;right;</span><br><span class="line"></span><br><span class="line">        root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">        root-&gt;right = left;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (root-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>115. Distinct Subsequences</title>
    <url>/2024/07/16/115-Distinct-Subsequences/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/distinct-subsequences/description/">115. Distinct Subsequences</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings s and t, return <i>the number of distinct</i> <b><i>subsequences</i></b><i> of </i>s<i> which equals </i>t.</p>
<p>The test cases are generated so that the answer fits on a 32-bit signed integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;rabbbit&quot;</span>, t = <span class="string">&quot;rabbit&quot;</span></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:<br>As shown below, there are 3 ways you can generate “rabbit” from s.</p>
<p><strong>rabb</strong> b <strong>it</strong></p>
<p><strong>ra</strong> b <strong>bbit</strong></p>
<p><strong>rab</strong> b <strong>bit</strong></p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;babgbag&quot;</span>, t = <span class="string">&quot;bag&quot;</span></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:<br>As shown below, there are 5 ways you can generate “bag” from s.</p>
<p><strong>ba</strong> b <strong>g</strong> bag</p>
<p><strong>ba</strong> bgba <strong>g</strong></p>
<p><strong>b</strong> abgb <strong>ag</strong></p>
<p>ba <strong>b</strong> gb <strong>ag</strong></p>
<p>babg <strong>bag</strong></p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 1000</code></li>
<li><code>s</code> and <code>t</code> consist of English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string s_, t_;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDistinct</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        dp.<span class="built_in">resize</span>(s.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(t.<span class="built_in">size</span>(), <span class="number">-1</span>));</span><br><span class="line">        s_ = s;</span><br><span class="line">        t_ = t;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> idx1, <span class="type">int</span> idx2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx2 == t_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx1 == s_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[idx1][idx2] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[idx1][idx2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s_[idx1] == t_[idx2]) &#123;</span><br><span class="line">            ans += <span class="built_in">traverse</span>(idx1 + <span class="number">1</span>, idx2 + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans += <span class="built_in">traverse</span>(idx1 + <span class="number">1</span>, idx2);</span><br><span class="line">        dp[idx1][idx2] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>1143. Longest Common Subsequence</title>
    <url>/2024/07/16/1143-Longest-Common-Subsequence/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-common-subsequence/description/">1143. Longest Common Subsequence</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings <code>text1</code> and <code>text2</code>, return the length of their longest <strong>common subsequence</strong> . If there is no <strong>common subsequence</strong> , return <code>0</code>.</p>
<p>A <strong>subsequence</strong>  of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>
<ul>
<li>For example, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code>.</li>
</ul>
<p>A <strong>common subsequence</strong>  of two strings is a subsequence that is common to both strings.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: text1 = <span class="string">&quot;abcde&quot;</span>, text2 = <span class="string">&quot;ace&quot;</span></span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The longest common subsequence is <span class="string">&quot;ace&quot;</span> and its length is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: text1 = <span class="string">&quot;abc&quot;</span>, text2 = <span class="string">&quot;abc&quot;</span></span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The longest common subsequence is <span class="string">&quot;abc&quot;</span> and its length is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: text1 = <span class="string">&quot;abc&quot;</span>, text2 = <span class="string">&quot;def&quot;</span></span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There is no such common subsequence, so the result is 0.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li>
<li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string text1_;</span><br><span class="line">    string text2_;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        text1_ = text1;</span><br><span class="line">        text2_ = text2;</span><br><span class="line">        <span class="type">int</span> m = text1.<span class="built_in">size</span>(), n = text2.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">-1</span>));</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == text1_.<span class="built_in">size</span>() || j == text2_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (text1_[i] == text2_[j]) &#123;</span><br><span class="line">            res = <span class="number">1</span> + <span class="built_in">traverse</span>(i + <span class="number">1</span>, j + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(<span class="built_in">traverse</span>(i, j + <span class="number">1</span>), <span class="built_in">traverse</span>(i + <span class="number">1</span>, j));</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][j] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>116. Populating Next Right Pointers in Each Node</title>
    <url>/2023/02/03/116-Populating-Next-Right-Pointers-in-Each-Node/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/">116. Populating Next Right Pointers in Each Node</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/breadth-first-search/">Breadth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p>
<p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="type">int</span> val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6,7]</span><br><span class="line">Output: [1,<span class="comment">#,2,3,#,4,5,6,7,#]</span></span><br><span class="line">Explanation: Given the above perfect binary tree (Figure A), your <span class="keyword">function</span> should populate each next pointer to point to its next right node, just like <span class="keyword">in</span> Figure B. The serialized output is <span class="keyword">in</span> level order as connected by the next pointers, with <span class="string">&#x27;#&#x27;</span> signifying the end of each level.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [0, 2<sup>12</sup> - 1].</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<p><strong>Follow-up:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use a queue to solve the problem iteratively</li>
<li>use a helper function to solve the problem recursively</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span></span><br><span class="line"><span class="comment">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(Node* left, Node* right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        left-&gt;next = right;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traverse</span>(left-&gt;left, left-&gt;right);</span><br><span class="line">        <span class="built_in">traverse</span>(left-&gt;right, right-&gt;left);</span><br><span class="line">        <span class="built_in">traverse</span>(right-&gt;left, right-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>1161. Maximum Level Sum of a Binary Tree</title>
    <url>/2024/07/08/1161-Maximum-Level-Sum-of-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/description/">1161. Maximum Level Sum of a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, the level of its root is <code>1</code>, the level of its children is <code>2</code>, and so on.</p>
<p>Return the <strong>smallest</strong>  level <code>x</code> such that the sum of all the values of nodes at level <code>x</code> is <strong>maximal</strong> .</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/05/03/capture.JPG" style="width: 200px; height: 175px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,7,0,7,-8,null,null]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">Level 1 <span class="built_in">sum</span> = 1.</span><br><span class="line">Level 2 <span class="built_in">sum</span> = 7 + 0 = 7.</span><br><span class="line">Level 3 <span class="built_in">sum</span> = 7 + -8 = -1.</span><br><span class="line">So we <span class="built_in">return</span> the level with the maximum <span class="built_in">sum</span> <span class="built_in">which</span> is level 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxLevelSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxVal = INT_MIN;</span><br><span class="line">        <span class="type">int</span> minLvl = <span class="number">-1</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        <span class="keyword">if</span> (root)</span><br><span class="line">            q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> level = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>(), sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                sum += cur-&gt;val;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; maxVal) &#123;</span><br><span class="line">                maxVal = sum;</span><br><span class="line">                minLvl = level;</span><br><span class="line">            &#125;</span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minLvl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>117. Populating Next Right Pointers in Each Node II</title>
    <url>/2024/07/08/117-Populating-Next-Right-Pointers-in-Each-Node-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/">117. Populating Next Right Pointers in Each Node II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="type">int</span> val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/02/15/117_sample.png" style="width: 500px; height: 171px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,null,7]</span><br><span class="line">Output: [1,<span class="comment">#,2,3,#,4,5,7,#]</span></span><br><span class="line">Explanation: Given the above binary tree (Figure A), your <span class="keyword">function</span> should populate each next pointer to point to its next right node, just like <span class="keyword">in</span> Figure B. The serialized output is <span class="keyword">in</span> level order as connected by the next pointers, with <span class="string">&#x27;#&#x27;</span> signifying the end of each level.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 6000]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Follow-up:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span></span><br><span class="line"><span class="comment">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">            Node* prev = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                Node* cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">                    prev-&gt;next = cur;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">                prev = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>1201. Ugly Number III</title>
    <url>/2023/11/06/1201-Ugly-Number-III/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/ugly-number-iii/">1201. Ugly Number III</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/number-theory//">Number Theory</a></p>
<p>An <strong>ugly number</strong> is a positive integer that is divisible by <code>a</code>, <code>b</code>, or <code>c</code>.</p>
<p>Given four integers <code>n</code>, <code>a</code>, <code>b</code>, and <code>c</code>, return the n<sup>th</sup> <strong>ugly number</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, a = 2, b = 3, c = 5</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, a = 2, b = 3, c = 4</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, a = 2, b = 11, c = 13</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; n, a, b, c &lt;&#x3D; 10<sup>9</sup></li>
<li>1 &lt;&#x3D; *a * b * c* &lt;&#x3D; 10<sup>18</sup></li>
<li>It is guaranteed that the result will be in range [1, 2 * 10<sup>9</sup>].</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary search</li>
<li>The difference between this and lc 264: it’s divisible, not a, b, c are the only factors</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>, right = <span class="number">2</span> * <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> numUglyNumber = <span class="built_in">find</span>((<span class="type">long</span>)mid, (<span class="type">long</span>)a, (<span class="type">long</span>)b, (<span class="type">long</span>)c);</span><br><span class="line">            <span class="keyword">if</span> (numUglyNumber &lt; n) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">long</span> n, <span class="type">long</span> a, <span class="type">long</span> b, <span class="type">long</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> numUglyNumber = n / a + n / b + n / c - n / <span class="built_in">lcm</span>(a, b) - n / <span class="built_in">lcm</span>(a, c) - n / <span class="built_in">lcm</span>(b, c) </span><br><span class="line">        + n / <span class="built_in">lcm</span>(<span class="built_in">lcm</span>(a, b), c);</span><br><span class="line">        <span class="keyword">return</span> numUglyNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Math</tag>
        <tag>Number Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>1214. Two Sum BSTs</title>
    <url>/2024/07/13/1214-Two-Sum-BSTs/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/two-sum-bsts/description/">1214. Two Sum BSTs</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the roots of two binary search trees, <code>root1</code> and <code>root2</code>, return <code>true</code> if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer <code>target</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/10/ex1.png" style="width: 369px; height: 169px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root1 = [2,1,4], root2 = [1,0,3], target = 5</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: 2 and 3 <span class="built_in">sum</span> up to 5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/10/ex2.png" style="width: 453px; height: 290px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in each tree is in the range <code>[1, 5000]</code>.</li>
<li><code>-10^9 &lt;= Node.val, target &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">twoSumBSTs</span><span class="params">(TreeNode* root1, TreeNode* root2, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v1 = <span class="built_in">traverse</span>(root1);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v2 = <span class="built_in">traverse</span>(root2);</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = v2.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; v1.<span class="built_in">size</span>() &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> sum = v1[i] + v2[j];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> l = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">auto</span> r = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        l.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        l.<span class="built_in">insert</span>(l.<span class="built_in">end</span>(), r.<span class="built_in">begin</span>(), r.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
        <tag>Binary Search Tree</tag>
        <tag>Binary Search</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1237D. Balanced Playlist</title>
    <url>/2024/06/19/1237D-Balanced-Playlist/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1237/D">D. Balanced Playlist</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 n(2≤n≤1e5) 和长为 n 的数组 a(1≤a[i]≤1e9)。</p>
<p>0x3F 的播放列表中有 n 首歌，列表中的第 i 首歌的好听度为 a[i]。<br>这 n 首歌按照【列表循环】模式播放。播放完第 n 首歌，就会播放第 1 首歌。<br>如果 0x3F 听到一首歌，发现它的好听度 * 2 小于之前听到的最好听的歌，那么 0x3F 就会立刻停止播放。</p>
<p>输出 n 个数，其中第 i 个数等于，从播放列表中的第 i 首歌开始听，到停止播放时，完整播放的歌曲数目（停止播放时的那首歌不算）。<br>对于同一首歌，如果它被完整播放 x 次，就会统计 x 次。见示例 2。<br>如果可以无限循环，输出 -1。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>monotonic stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="comment">// we need to always keep the largest value, from left to right</span></span><br><span class="line">    <span class="comment">// we should use monotonic stack, but since we need to deque from</span></span><br><span class="line">    <span class="comment">// front, so deque serve our need better</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; size) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((q.<span class="built_in">empty</span>() || <span class="number">2</span> * nums[right] &gt;= q.<span class="built_in">front</span>()) &amp;&amp; right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; nums[right] &gt; q.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                q.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            q.<span class="built_in">push_back</span>(nums[right]);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = (right == nums.<span class="built_in">size</span>()) ? <span class="number">-1</span> : right - left;</span><br><span class="line">        out &lt;&lt; res &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">front</span>() == nums[left]) &#123;</span><br><span class="line">            q.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    in &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        in &gt;&gt; num;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>(nums);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>binary search</tag>
        <tag>data structures</tag>
        <tag>implementation</tag>
      </tags>
  </entry>
  <entry>
    <title>124. Binary Tree Maximum Path Sum</title>
    <url>/2024/06/19/124-Binary-Tree-Maximum-Path-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/description/">124. Binary Tree Maximum Path Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A <strong>path</strong>  in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence <strong>at most once</strong> . Note that the path does not need to pass through the root.</p>
<p>The <strong>path sum</strong>  of a path is the sum of the node’s values in the path.</p>
<p>Given the <code>root</code> of a binary tree, return the maximum <strong>path sum</strong>  of any <strong>non-empty</strong>  path.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg" style="width: 322px; height: 182px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The optimal path is 2 -&gt; 1 -&gt; 3 with a path <span class="built_in">sum</span> of 2 + 1 + 3 = 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [-10,9,20,null,null,15,7]</span><br><span class="line">Output: 42</span><br><span class="line">Explanation: The optimal path is 15 -&gt; 20 -&gt; 7 with a path <span class="built_in">sum</span> of 15 + 20 + 7 = 42.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 3 * 10^4]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = INT_MIN;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans += root-&gt;val;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        res = <span class="built_in">max</span>(res, root-&gt;val + left + right);</span><br><span class="line"></span><br><span class="line">        ans += <span class="built_in">max</span>(left, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1255. Maximum Score Words Formed by Letters</title>
    <url>/2024/05/24/1255-Maximum-Score-Words-Formed-by-Letters/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-score-words-formed-by-letters/description/?envType=daily-question&envId=2024-05-24">1255. Maximum Score Words Formed by Letters</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a list of <code>words</code>, list of single<code>letters</code> (might be repeating)and <code>score</code>of every character.</p>
<p>Return the maximum score of <strong>any</strong>  valid set of words formed by using the given letters (<code>words[i]</code> cannot be used twoor more times).</p>
<p>It is not necessary to use all characters in <code>letters</code> and each letter can only be used once. Score of letters<code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, <code>&#39;c&#39;</code>, … ,<code>&#39;z&#39;</code> is given by<code>score[0]</code>, <code>score[1]</code>, … , <code>score[25]</code> respectively.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;dad&quot;</span>,<span class="string">&quot;good&quot;</span>], letters = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;o&quot;</span>], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]</span><br><span class="line">Output: 23</span><br><span class="line">Explanation:</span><br><span class="line">Score  a=1, c=9, d=5, g=3, o=2</span><br><span class="line">Given letters, we can form the words <span class="string">&quot;dad&quot;</span> (5+1+5) and <span class="string">&quot;good&quot;</span> (3+2+2+5) with a score of 23.</span><br><span class="line">Words <span class="string">&quot;dad&quot;</span> and <span class="string">&quot;dog&quot;</span> only get a score of 21.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;xxxz&quot;</span>,<span class="string">&quot;ax&quot;</span>,<span class="string">&quot;bx&quot;</span>,<span class="string">&quot;cx&quot;</span>], letters = [<span class="string">&quot;z&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;x&quot;</span>], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]</span><br><span class="line">Output: 27</span><br><span class="line">Explanation:</span><br><span class="line">Score  a=4, b=4, c=4, x=5, z=10</span><br><span class="line">Given letters, we can form the words <span class="string">&quot;ax&quot;</span> (4+5), <span class="string">&quot;bx&quot;</span> (4+5) and <span class="string">&quot;cx&quot;</span> (4+5) with a score of 27.</span><br><span class="line">Word <span class="string">&quot;xxxz&quot;</span> only get a score of 25.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;leetcode&quot;</span>], letters = [<span class="string">&quot;l&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;d&quot;</span>], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation:</span><br><span class="line">Letter <span class="string">&quot;e&quot;</span> can only be used once.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= words.length &lt;= 14</code></li>
<li><code>1 &lt;= words[i].length &lt;= 15</code></li>
<li><code>1 &lt;= letters.length &lt;= 100</code></li>
<li><code>letters[i].length == 1</code></li>
<li><code>score.length ==26</code></li>
<li><code>0 &lt;= score[i] &lt;= 10</code></li>
<li><code>words[i]</code>, <code>letters[i]</code>contains only lower case English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dfs</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxScoreWords</span><span class="params">(vector&lt;string&gt;&amp; words, vector&lt;<span class="type">char</span>&gt;&amp; letters, vector&lt;<span class="type">int</span>&gt;&amp; score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> letter : letters) &#123;</span><br><span class="line">            m[letter]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, words, score);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> curScore, vector&lt;string&gt;&amp; words, vector&lt;<span class="type">int</span>&gt;&amp; score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == words.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, curScore);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">addWord</span>(words[index])) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(index + <span class="number">1</span>, curScore + <span class="built_in">getScore</span>(words[index], score), words, score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">removeWord</span>(words[index]);</span><br><span class="line">        <span class="built_in">dfs</span>(index + <span class="number">1</span>, curScore, words, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getScore</span><span class="params">(string word, vector&lt;<span class="type">int</span>&gt;&amp; score)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            res += score[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">addWord</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> res = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            m[c]--;</span><br><span class="line">            <span class="keyword">if</span> (m[c] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                res = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeWord</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            m[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Backtracking</tag>
        <tag>Bit Manipulation</tag>
        <tag>Bitmask</tag>
      </tags>
  </entry>
  <entry>
    <title>1245. Tree Diameter</title>
    <url>/2024/07/05/1245-Tree-Diameter/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/tree-diameter/description/">1245. Tree Diameter</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The <strong>diameter</strong>  of a tree is <strong>the number of edges</strong>  in the longest path in that tree.</p>
<p>There is an undirected tree of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given a 2D array <code>edges</code> where <code>edges.length == n - 1</code> and edges[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] indicates that there is an undirected edge between nodes a<sub>i</sub> and b<sub>i</sub> in the tree.</p>
<p>Return the <strong>diameter</strong> of the tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2022/01/19/tree1.jpg" style="width: 224px; height: 145px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[0,2]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The longest path of the tree is the path 1 - 0 - 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2022/01/19/tree2.jpg" style="width: 224px; height: 225px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest path of the tree is the path 3 - 2 - 1 - 4 - 5.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == edges.length + 1</code></li>
<li><code>1 &lt;= n &lt;= 10^4</code></li>
<li>0 &lt;&#x3D; a<sub>i</sub>, b<sub>i</sub> &lt; n</li>
<li>a<sub>i</sub> !&#x3D; b<sub>i</sub></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary tree, tree dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">treeDiameter</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (edges.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        graph.<span class="built_in">resize</span>(edges.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="built_in">build</span>(edges);</span><br><span class="line">        <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> prev)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">0</span>, mx2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u : graph[root]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (u == prev) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> depth = <span class="built_in">traverse</span>(u, root) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (depth &gt; mx) &#123;</span><br><span class="line">                mx2 = mx;</span><br><span class="line">                mx = depth;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (depth &gt; mx2) &#123;</span><br><span class="line">                mx2 = depth;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, mx + mx2);</span><br><span class="line">        <span class="keyword">return</span> mx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = e[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = e[<span class="number">1</span>];</span><br><span class="line">            graph[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            graph[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Graph</tag>
        <tag>Topological Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>1261. Find Elements in a Contaminated Binary Tree</title>
    <url>/2024/06/03/1261-Find-Elements-in-a-Contaminated-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/description/">1261. Find Elements in a Contaminated Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree with the following rules:</p>
<ul>
<li><code>root.val == 0</code></li>
<li>If <code>treeNode.val == x</code> and <code>treeNode.left != null</code>, then <code>treeNode.left.val == 2 * x + 1</code></li>
<li>If <code>treeNode.val == x</code> and <code>treeNode.right != null</code>, then <code>treeNode.right.val == 2 * x + 2</code></li>
</ul>
<p>Now the binary tree is contaminated, which means all <code>treeNode.val</code> have been changed to <code>-1</code>.</p>
<p>Implement the <code>FindElements</code> class:</p>
<ul>
<li><code>FindElements(TreeNode* root)</code> Initializes the object with a contaminated binary tree and recovers it.</li>
<li><code>bool find(int target)</code> Returns <code>true</code> if the <code>target</code> value exists in the recovered binary tree.</li>
</ul>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/11/06/untitled-diagram-4-1.jpg" style="width: 320px; height: 119px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[<span class="string">&quot;FindElements&quot;</span>,<span class="string">&quot;find&quot;</span>,<span class="string">&quot;find&quot;</span>]</span><br><span class="line">[[[-1,null,-1]],[1],[2]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[null,<span class="literal">false</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">FindElements findElements = new FindElements([-1,null,-1]);</span><br><span class="line">findElements.find(1); // <span class="built_in">return</span> False</span><br><span class="line">findElements.find(2); // <span class="built_in">return</span> True</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/11/06/untitled-diagram-4.jpg" style="width: 400px; height: 198px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[<span class="string">&quot;FindElements&quot;</span>,<span class="string">&quot;find&quot;</span>,<span class="string">&quot;find&quot;</span>,<span class="string">&quot;find&quot;</span>]</span><br><span class="line">[[[-1,-1,-1,-1,-1]],[1],[3],[5]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[null,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);</span><br><span class="line">findElements.find(1); // <span class="built_in">return</span> True</span><br><span class="line">findElements.find(3); // <span class="built_in">return</span> True</span><br><span class="line">findElements.find(5); // <span class="built_in">return</span> False</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/11/07/untitled-diagram-4-1-1.jpg" style="width: 306px; height: 274px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[<span class="string">&quot;FindElements&quot;</span>,<span class="string">&quot;find&quot;</span>,<span class="string">&quot;find&quot;</span>,<span class="string">&quot;find&quot;</span>,<span class="string">&quot;find&quot;</span>]</span><br><span class="line">[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[null,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);</span><br><span class="line">findElements.find(2); // <span class="built_in">return</span> True</span><br><span class="line">findElements.find(3); // <span class="built_in">return</span> False</span><br><span class="line">findElements.find(4); // <span class="built_in">return</span> False</span><br><span class="line">findElements.find(5); // <span class="built_in">return</span> True</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>TreeNode.val == -1</code></li>
<li>The height of the binary tree is less than or equal to <code>20</code></li>
<li>The total number of nodes is between <code>[1, 10^4]</code></li>
<li>Total calls of <code>find()</code> is between <code>[1, 10^4]</code></li>
<li><code>0 &lt;= target &lt;= 10^6</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FindElements</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* root_;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FindElements</span>(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            root_ = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root_ = root;</span><br><span class="line">        <span class="built_in">traverse</span>(root_, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* node, <span class="type">int</span> curVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;val = curVal;</span><br><span class="line">        nodes.<span class="built_in">insert</span>(curVal);</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;left, curVal * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;right, curVal * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123; <span class="keyword">return</span> nodes.<span class="built_in">contains</span>(target); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FindElements object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FindElements* obj = new FindElements(root);</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;find(target);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>129. Sum Root to Leaf Numbers</title>
    <url>/2024/04/03/129-Sum-Root-to-Leaf-Numbers/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/description/">129. Sum Root to Leaf Numbers</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given the <code>root</code> of a binary tree containing digits from <code>0</code> to <code>9</code> only.</p>
<p>Each root-to-leaf path in the tree represents a number.</p>
<ul>
<li>For example, the root-to-leaf path <code>1 -&gt; 2 -&gt; 3</code> represents the number <code>123</code>.</li>
</ul>
<p>Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a <strong>32-bit</strong>  integer.</p>
<p>A <strong>leaf</strong>  node is a node with no children.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg" style="width: 212px; height: 182px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3]</span><br><span class="line">Output: 25</span><br><span class="line">Explanation:</span><br><span class="line">The root-to-leaf path `1-&gt;2` represents the number `12`.</span><br><span class="line">The root-to-leaf path `1-&gt;3` represents the number `13`.</span><br><span class="line">Therefore, <span class="built_in">sum</span> = 12 + 13 = `25`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg" style="width: 292px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,9,0,5,1]</span><br><span class="line">Output: 1026</span><br><span class="line">Explanation:</span><br><span class="line">The root-to-leaf path `4-&gt;9-&gt;5` represents the number 495.</span><br><span class="line">The root-to-leaf path `4-&gt;9-&gt;1` represents the number 491.</span><br><span class="line">The root-to-leaf path `4-&gt;0` represents the number 40.</span><br><span class="line">Therefore, <span class="built_in">sum</span> = 495 + 491 + 40 = `1026`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>The depth of the tree will not exceed <code>10</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>traverse the tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur * <span class="number">10</span> + root-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            sum += cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) <span class="built_in">traverse</span>(root-&gt;left, cur);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) <span class="built_in">traverse</span>(root-&gt;right, cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1302. Deepest Leaves Sum</title>
    <url>/2024/07/08/1302-Deepest-Leaves-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/deepest-leaves-sum/description/">1302. Deepest Leaves Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the sum of values of its deepest leaves.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/07/31/1483_ex1.png" style="width: 273px; height: 265px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]</span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]</span><br><span class="line">Output: 19</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deepestLeavesSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        <span class="keyword">if</span> (root)</span><br><span class="line">            q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>(), sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                sum += cur-&gt;val;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1312. Minimum Insertion Steps to Make a String Palindrome</title>
    <url>/2024/07/26/1312-Minimum-Insertion-Steps-to-Make-a-String-Palindrome/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/">1312. Minimum Insertion Steps to Make a String Palindrome</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string <code>s</code>. In one step you can insert any character at any index of the string.</p>
<p>Return the minimum number of steps to make <code>s</code> palindrome.</p>
<p>A <b>Palindrome String</b> is one that reads the same backward as well as forward.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;zzazz&quot;</span></span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The string <span class="string">&quot;zzazz&quot;</span> is already palindrome we <span class="keyword">do</span> not need any insertions.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;mbadm&quot;</span></span><br><span class="line">Output: 2</span><br><span class="line">Explanation: String can be <span class="string">&quot;mbdadbm&quot;</span> or <span class="string">&quot;mdbabdm&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;leetcode&quot;</span></span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Inserting 5 characters the string becomes <span class="string">&quot;leetcodocteel&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 500</code></li>
<li><code>s</code> consists of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>digit dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minInsertions</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">// state transition:</span></span><br><span class="line">        <span class="comment">// dp[i][j] is the number of insertion from i ~ j</span></span><br><span class="line">        <span class="comment">// base case: i == j =&gt; 0</span></span><br><span class="line">        <span class="comment">// if s[i] == s[j]</span></span><br><span class="line">        <span class="comment">//  =&gt; dp[i][j] = dp[i + 1][j - 1]</span></span><br><span class="line">        <span class="comment">// else</span></span><br><span class="line">        <span class="comment">//  =&gt; dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1</span></span><br><span class="line">        <span class="comment">// the direction: when calculating s[i][j], we need</span></span><br><span class="line">        <span class="comment">// the dp value with bigger i and smaller j</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">                    dp[i][j] = i + <span class="number">1</span> &gt; j - <span class="number">1</span> ? <span class="number">0</span> : dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = i + <span class="number">1</span> &gt; j - <span class="number">1</span> ? <span class="number">1</span> : <span class="built_in">min</span>(dp[i][j - <span class="number">1</span>], dp[i + <span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>1305. All Elements in Two Binary Search Trees</title>
    <url>/2024/07/16/1305-All-Elements-in-Two-Binary-Search-Trees/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/all-elements-in-two-binary-search-trees/description/">1305. All Elements in Two Binary Search Trees</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary search trees <code>root1</code> and <code>root2</code>, return a list containing all the integers from both trees sorted in <strong>ascending</strong>  order.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/q2-e1.png" style="width: 457px; height: 207px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root1 = [2,1,4], root2 = [1,0,3]</span><br><span class="line">Output: [0,1,1,2,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/q2-e5-.png" style="width: 352px; height: 197px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root1 = [1,null,8], root2 = [8,1]</span><br><span class="line">Output: [1,1,8,8]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in each tree is in the range <code>[0, 5000]</code>.</li>
<li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>get two sorted array first</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getAllElements</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> v1 = <span class="built_in">getNums</span>(root1);</span><br><span class="line">        <span class="keyword">auto</span> v2 = <span class="built_in">getNums</span>(root2);</span><br><span class="line">        <span class="type">int</span> idx1 = <span class="number">0</span>, idx2 = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (idx1 &lt; v1.<span class="built_in">size</span>() || idx2 &lt; v2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx1 == v1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(v2[idx2++]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idx2 == v2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(v1[idx1++]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v1[idx1] &lt; v2[idx2]) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(v1[idx1++]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(v2[idx2++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getNums</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="keyword">auto</span> l = <span class="built_in">getNums</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">auto</span> r = <span class="built_in">getNums</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (!l.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">insert</span>(res.<span class="built_in">begin</span>(), l.<span class="built_in">begin</span>(), l.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!r.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">insert</span>(res.<span class="built_in">end</span>(), r.<span class="built_in">begin</span>(), r.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>1314. Matrix Block Sum</title>
    <url>/2023/11/12/1314-Matrix-Block-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/matrix-block-sum/">1314. Matrix Block Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/matrix//">Matrix</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>Given a <code>m x n</code> matrix <code>mat</code> and an integer <code>k</code>, return <em>a matrix</em> <code>answer</code> <em>where each</em> <code>answer[i][j]</code> <em>is the sum of all elements</em> <code>mat[r][c]</code> <em>for</em>:</p>
<ul>
<li><code>i - k &lt;= r &lt;= i + k,</code></li>
<li><code>j - k &lt;= c &lt;= j + k</code>, and</li>
<li><code>(r, c)</code> is a valid position in the matrix.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1</span><br><span class="line">Output: [[12,21,16],[27,45,33],[24,39,28]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2</span><br><span class="line">Output: [[45,45,45],[45,45,45],[45,45,45]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == mat.length</code></li>
<li><code>n == mat[i].length</code></li>
<li><code>1 &lt;= m, n, k &lt;= 100</code></li>
<li><code>1 &lt;= mat[i][j] &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>matrix preSum</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">matrixBlockSum</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat, <span class="type">int</span> k) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">preSum</span>(mat.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(mat[<span class="number">0</span>].<span class="built_in">size</span>() + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mat.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; mat[<span class="number">0</span>].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                preSum[i + <span class="number">1</span>][j + <span class="number">1</span>] = preSum[i][j + <span class="number">1</span>] + preSum[i + <span class="number">1</span>][j] - preSum[i][j] + mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">res</span>(mat.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(mat[<span class="number">0</span>].<span class="built_in">size</span>(), <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mat.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; mat[<span class="number">0</span>].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="type">int</span> up = <span class="built_in">max</span>(<span class="number">0</span>, i - k);</span><br><span class="line">                <span class="type">int</span> down = <span class="built_in">min</span>(i + k + <span class="number">1</span>, (<span class="type">int</span>)mat.<span class="built_in">size</span>());</span><br><span class="line">                <span class="type">int</span> left = <span class="built_in">max</span>(<span class="number">0</span>, j - k);</span><br><span class="line">                <span class="type">int</span> right = <span class="built_in">min</span>(j + k + <span class="number">1</span>, (<span class="type">int</span>)mat[<span class="number">0</span>].<span class="built_in">size</span>());</span><br><span class="line">                res[i][j] = preSum[down][right] - preSum[down][left] - preSum[up][right] + preSum[up][left];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>1315. Sum of Nodes with Even-Valued Grandparent</title>
    <url>/2024/05/30/1315-Sum-of-Nodes-with-Even-Valued-Grandparent/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent/description/">1315. Sum of Nodes with Even-Valued Grandparent</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the sum of values of nodes with an <strong>even-valued grandparent</strong> . If there are no nodes with an <strong>even-valued grandparent</strong> , return <code>0</code>.</p>
<p>A <strong>grandparent</strong>  of a node is the parent of its parent if it exists.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/08/10/even1-tree.jpg" style="width: 504px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]</span><br><span class="line">Output: 18</span><br><span class="line">Explanation: The red nodes are the nodes with even-value grandparent <span class="keyword">while</span> the blue nodes are the even-value grandparents.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/08/10/even2-tree.jpg" style="width: 64px; height: 65px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumEvenGrandparent</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">                res += root-&gt;left-&gt;left ? root-&gt;left-&gt;left-&gt;val : <span class="number">0</span>;</span><br><span class="line">                res += root-&gt;left-&gt;right ? root-&gt;left-&gt;right-&gt;val : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">                res += root-&gt;right-&gt;left ? root-&gt;right-&gt;left-&gt;val : <span class="number">0</span>;</span><br><span class="line">                res += root-&gt;right-&gt;right ? root-&gt;right-&gt;right-&gt;val : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1325. Delete Leaves With a Given Value</title>
    <url>/2024/07/02/1325-Delete-Leaves-With-a-Given-Value/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/delete-leaves-with-a-given-value/description/">1325. Delete Leaves With a Given Value</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree <code>root</code> and an integer <code>target</code>, delete all the <strong>leaf nodes</strong>  with value <code>target</code>.</p>
<p>Note that once you delete a leaf node with value <code>target</code>, if its parent node becomes a leaf node and has the value <code>target</code>, it should also be deleted (you need to continue doing that until you cannot).</p>
<p><strong>Example 1:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/01/09/sample_1_1684.png" style="width: 500px; height: 112px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,2,null,2,4], target = 2</span><br><span class="line">Output: [1,null,3,null,4]</span><br><span class="line">Explanation: Leaf nodes <span class="keyword">in</span> green with value (target = 2) are removed (Picture <span class="keyword">in</span> left).</span><br><span class="line">After removing, new nodes become leaf nodes with value (target = 2) (Picture <span class="keyword">in</span> center).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/01/09/sample_2_1684.png" style="width: 400px; height: 154px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,3,3,2], target = 3</span><br><span class="line">Output: [1,3,null,null,2]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/01/15/sample_3_1684.png" style="width: 500px; height: 166px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,null,2,null,2], target = 2</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: Leaf nodes <span class="keyword">in</span> green with value (target = 2) are removed at each step.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li>
<li><code>1 &lt;= Node.val, target &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">removeLeafNodes</span><span class="params">(TreeNode* root, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root-&gt;left = <span class="built_in">removeLeafNodes</span>(root-&gt;left, target);</span><br><span class="line">        root-&gt;right = <span class="built_in">removeLeafNodes</span>(root-&gt;right, target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == target &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold</title>
    <url>/2024/10/21/1343-Number-of-Sub-arrays-of-Size-K-and-Average-Greater-than-or-Equal-to-Threshold/</url>
    <content><![CDATA[<h1 id="1343-Number-of-Sub-arrays-of-Size-K-and-Average-Greater-than-or-Equal-to-Threshold"><a href="#1343-Number-of-Sub-arrays-of-Size-K-and-Average-Greater-than-or-Equal-to-Threshold" class="headerlink" title="1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold"></a><a href="https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/description/">1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers <code>arr</code> and two integers <code>k</code> and <code>threshold</code>, return the number of sub-arrays of size <code>k</code> and average greater than or equal to <code>threshold</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 10^5</code></li>
<li><code>1 &lt;= arr[i] &lt;= 10^4</code></li>
<li><code>1 &lt;= k &lt;= arr.length</code></li>
<li><code>0 &lt;= threshold &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numOfSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k, <span class="type">int</span> threshold)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> target = k * threshold, right = <span class="number">0</span>, sum = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; arr.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            sum += arr[right];</span><br><span class="line">            <span class="keyword">if</span> (right &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sum &gt;= target) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">                sum -= arr[right - k + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>1339. Maximum Product of Splitted Binary Tree</title>
    <url>/2024/07/05/1339-Maximum-Product-of-Splitted-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/description/">1339. Maximum Product of Splitted Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.</p>
<p>Return the maximum product of the sums of the two subtrees. Since the answer may be too large, return it <strong>modulo</strong> <code>10^9 + 7</code>.</p>
<p><strong>Note</strong> that you need to maximize the answer before taking the mod and not after taking it.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/01/21/sample_1_1699.png" style="width: 500px; height: 167px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6]</span><br><span class="line">Output: 110</span><br><span class="line">Explanation: Remove the red edge and get 2 binary trees with <span class="built_in">sum</span> 11 and 10. Their product is 110 (11*10)</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/01/21/sample_2_1699.png" style="width: 500px; height: 211px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2,3,4,null,null,5,6]</span><br><span class="line">Output: 90</span><br><span class="line">Explanation: Remove the red edge and get 2 binary trees with <span class="built_in">sum</span> 15 and 6.Their product is 90 (15*6)</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[2, 5 * 10^4]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; sums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProduct</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> s : sums) &#123;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, (<span class="type">long</span> <span class="type">long</span>)s * (sum - s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">return</span> mx % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = l + r + root-&gt;val;</span><br><span class="line">        sums.<span class="built_in">push_back</span>(sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1343C. Alternating Subsequence</title>
    <url>/2024/05/29/1343C-Alternating-Subsequence/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1343/C">C. Alternating Subsequence</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 T(≤1e4) 表示 T 组数据。所有数据的 n 之和 ≤2e5。<br>每组数据输入 n(1≤n≤2e5) 和长为 n 的数组 a(-1e9≤a[i]≤1e9 且 a[i]≠0)。</p>
<p>选一个 a 的子序列，要求:</p>
<ol>
<li>子序列是交替的（相邻元素一正一负）。</li>
<li>在满足 1 的前提下，子序列尽量长。</li>
<li>在满足 2 的前提下，子序列元素和尽量大。<br>输出元素和的最大值。</li>
</ol>
<p>注：子序列不一定连续。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>分组循环</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> pos_size = <span class="number">0</span>, pos_res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> tmp = INT_MIN;</span><br><span class="line">        pos_size++;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i] &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            tmp = <span class="built_in">max</span>(tmp, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        pos_res += tmp;</span><br><span class="line">        tmp = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i] &lt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            tmp = <span class="built_in">max</span>(tmp, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp != INT_MIN) &#123;</span><br><span class="line">            pos_size++;</span><br><span class="line">            pos_res += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> neg_size = <span class="number">0</span>, neg_res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> tmp = INT_MIN;</span><br><span class="line">        neg_size++;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i] &lt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            tmp = <span class="built_in">max</span>(tmp, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        neg_res += tmp;</span><br><span class="line">        tmp = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i] &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            tmp = <span class="built_in">max</span>(tmp, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp != INT_MIN)  &#123;</span><br><span class="line">            neg_size++;</span><br><span class="line">            neg_res += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pos_size &gt; neg_size) &#123;</span><br><span class="line">        out &lt;&lt; pos_res &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos_size &lt; neg_size) &#123;</span><br><span class="line">        out &lt;&lt; neg_res &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out &lt;&lt; <span class="built_in">max</span>(pos_res, neg_res) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tc;</span><br><span class="line">    in &gt;&gt; tc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= tc; t++) &#123;</span><br><span class="line">        <span class="type">int</span> size;</span><br><span class="line">        in &gt;&gt; size;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="type">int</span> num;</span><br><span class="line">            in &gt;&gt; num;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">solve</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>dp</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>1362C. Johnny and Another Rating Drop</title>
    <url>/2024/06/17/1362C-Johnny-and-Another-Rating-Drop/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1362/C">C. Johnny and Another Rating Drop</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 T(≤1e4) 表示 T 组数据。<br>每组数据输入 n(1≤n≤1e18)。</p>
<p>定义 popcount(x) 为 x 二进制中的 1 的个数。<br>输出 popcount(0^1) + popcount(1^2) + popcount(2^3) + … + popcount((n-1)^n)。<br>其中 ^ 表示异或。</p>
<p>变形：异或改成【或】怎么做？改成【与】怎么做？</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>think about how each bit contribute the result</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        res += n;</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tc;</span><br><span class="line">    in &gt;&gt; tc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tc; i++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">        in &gt;&gt; n;</span><br><span class="line">        <span class="built_in">solve</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>bitmasks</tag>
        <tag>greedy</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>1364B. Most socially-distanced subsequence</title>
    <url>/2024/06/17/1364B-Most-socially-distanced-subsequence/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1364/B">B. Most socially-distanced subsequence</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 T(≤2e4) 表示 T 组数据。所有数据的 n 之和 ≤1e5。<br>每组数据输入 n(2≤n≤1e5) 和一个 1~n 的排列 p。</p>
<p>选一个 p 的长度至少为 2 的子序列 b，最大化 b 的所有相邻元素的绝对差的和。<br>即 S&#x3D;|b1-b2|+|b2-b3|+…<br>在 S 最大的前提下，b 的长度尽量小。<br>输出任意一个符合要求的 b。</p>
<p>注：子序列不一定连续。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>only the peaks matter</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; peaks;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>] &amp;&amp; nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            peaks.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[i - <span class="number">1</span>] &amp;&amp; nums[i] &lt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            peaks.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; <span class="number">2</span> + peaks.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    out &lt;&lt; nums[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    peaks.<span class="built_in">push_back</span>(nums[size - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; peaks.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        out &lt;&lt; peaks[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tc;</span><br><span class="line">    in &gt;&gt; tc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> size;</span><br><span class="line">        in &gt;&gt; size;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="type">int</span> num;</span><br><span class="line">            in &gt;&gt; num;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">solve</span>(nums, size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
        <tag>two pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1367. Linked List in Binary Tree</title>
    <url>/2024/06/06/1367-Linked-List-in-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/linked-list-in-binary-tree/description/">1367. Linked List in Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree <code>root</code> and a linked list with<code>head</code>as the first node.</p>
<p>Return True if all the elements in the linked list starting from the <code>head</code> correspond to some downward path connected in the binary tree otherwise return False.</p>
<p>In this context downward path means a path that starts at some node and goes downwards.</p>
<p><strong>Example 1:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/02/12/sample_1_1720.png" style="width: 220px; height: 280px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: Nodes <span class="keyword">in</span> blue form a subpath <span class="keyword">in</span> the binary Tree.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/02/12/sample_2_1720.png" style="width: 220px; height: 280px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: There is no path <span class="keyword">in</span> the binary tree that contains all the elements of the linked list from `<span class="built_in">head</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree will be in the range <code>[1, 2500]</code>.</li>
<li>The number of nodes in the list will be in the range <code>[1, 100]</code>.</li>
<li><code>1 &lt;= Node.val&lt;= 100</code>for each node in the linked list and binary tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubPath</span><span class="params">(ListNode* head, TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> ans = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;val == root-&gt;val) &#123;</span><br><span class="line">            ans = <span class="built_in">check</span>(head, root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isSubPath</span>(head, root-&gt;left) || <span class="built_in">isSubPath</span>(head, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ListNode* head, TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val != head-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">check</span>(head-&gt;next, root-&gt;left) || <span class="built_in">check</span>(head-&gt;next, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>1372. Longest ZigZag Path in a Binary Tree</title>
    <url>/2024/07/05/1372-Longest-ZigZag-Path-in-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/description/">1372. Longest ZigZag Path in a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given the <code>root</code> of a binary tree.</p>
<p>A ZigZag path for a binary tree is defined as follow:</p>
<ul>
<li>Choose <strong>any</strong> node in the binary tree and a direction (right or left).</li>
<li>If the current direction is right, move to the right child of the current node; otherwise, move to the left child.</li>
<li>Change the direction from right to left or from left to right.</li>
<li>Repeat the second and third steps until you can’t move in the tree.</li>
</ul>
<p>Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).</p>
<p>Return the longest <strong>ZigZag</strong> path contained in that tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/01/22/sample_1_1702.png" style="width: 221px; height: 383px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Longest ZigZag path <span class="keyword">in</span> blue nodes (right -&gt; left -&gt; right).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/01/22/sample_2_1702.png" style="width: 157px; height: 329px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,1,1,null,1,null,null,1,1,null,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Longest ZigZag path <span class="keyword">in</span> blue nodes (left -&gt; right -&gt; left -&gt; right).</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 5 * 10^4]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestZigZag</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> l = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">auto</span> r = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = l.second;</span><br><span class="line">        <span class="type">int</span> right = r.first;</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(left, right));</span><br><span class="line">        <span class="keyword">return</span> &#123;left + <span class="number">1</span>, right + <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree</title>
    <url>/2024/07/01/1379-Find-a-Corresponding-Node-of-a-Binary-Tree-in-a-Clone-of-That-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/description/">1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary trees <code>original</code> and <code>cloned</code> and given a reference to a node <code>target</code> in the original tree.</p>
<p>The <code>cloned</code> tree is a <strong>copy of</strong>  the <code>original</code> tree.</p>
<p>Return a reference to the same node in the <code>cloned</code> tree.</p>
<p><strong>Note</strong>  that you are <strong>not allowed</strong>  to change any of the two trees or the <code>target</code> node and the answer <strong>must be</strong>  a reference to a node in the <code>cloned</code> tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/02/21/e1.png" style="width: 544px; height: 426px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tree = [7,4,3,null,null,6,19], target = 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/02/21/e2.png" style="width: 221px; height: 159px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tree = [7], target =  7</span><br><span class="line">Output: 7</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/02/21/e3.png" style="width: 459px; height: 486px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the <code>tree</code> is in the range <code>[1, 10^4]</code>.</li>
<li>The values of the nodes of the <code>tree</code> are unique.</li>
<li><code>target</code> node is a node from the <code>original</code> tree and is not <code>null</code>.</li>
</ul>
<p><strong>Follow up:</strong>  Could you solve the problem if repeated values on the tree are allowed?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">getTargetCopy</span><span class="params">(TreeNode* original, TreeNode* cloned,</span></span></span><br><span class="line"><span class="params"><span class="function">                            TreeNode* target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (original == cloned || found) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cloned-&gt;val == target-&gt;val) &#123;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> cloned;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode* left = <span class="built_in">getTargetCopy</span>(original-&gt;left, cloned-&gt;left, target);</span><br><span class="line">        TreeNode* right = <span class="built_in">getTargetCopy</span>(original-&gt;right, cloned-&gt;right, target);</span><br><span class="line">        <span class="keyword">return</span> left ? left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>138. Copy List with Random Pointer</title>
    <url>/2023/12/18/138-Copy-List-with-Random-Pointer/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/copy-list-with-random-pointer/">138. Copy List with Random Pointer</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a></p>
<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p>
<p>Construct a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p>
<p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p>
<p>Return <em>the head of the copied linked list</em>.</p>
<p>The linked list is represented in the input&#x2F;output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p>
<ul>
<li><code>val</code>: an integer representing <code>Node.val</code></li>
<li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li>
</ul>
<p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/12/18/e1.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/12/18/e2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [[1,1],[2,1]]</span><br><span class="line">Output: [[1,1],[2,1]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><strong><img src="https://assets.leetcode.com/uploads/2019/12/18/e3.png"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [[3,null],[3,0],[3,null]]</span><br><span class="line">Output: [[3,null],[3,0],[3,null]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= n &lt;= 1000</code></li>
<li>-10<sup>4</sup> &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>4</sup></li>
<li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>map</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment">    Node* random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = NULL;</span></span><br><span class="line"><span class="comment">        random = NULL;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        map&lt;Node*, Node*&gt; m;</span><br><span class="line">        Node* p = head;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            Node* tmp = <span class="keyword">new</span> <span class="built_in">Node</span>(p-&gt;val);</span><br><span class="line">            m[p] = tmp;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            Node* curr = m[p];</span><br><span class="line">            Node* next = m[p-&gt;next];</span><br><span class="line">            Node* rand = m[p-&gt;random];</span><br><span class="line">            curr-&gt;next = next;</span><br><span class="line">            curr-&gt;random = rand;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head ? m[head] : <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>139. Word Break</title>
    <url>/2024/07/16/139-Word-Break/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/word-break/description/">139. Word Break</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p>
<p><strong>Note</strong>  that the same word in the dictionary may be reused multiple times in the segmentation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;leetcode&quot;</span>, wordDict = [<span class="string">&quot;leet&quot;</span>,<span class="string">&quot;code&quot;</span>]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: Return <span class="literal">true</span> because <span class="string">&quot;leetcode&quot;</span> can be segmented as <span class="string">&quot;leet code&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;applepenapple&quot;</span>, wordDict = [<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;pen&quot;</span>]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: Return <span class="literal">true</span> because <span class="string">&quot;applepenapple&quot;</span> can be segmented as <span class="string">&quot;apple pen apple&quot;</span>.</span><br><span class="line">Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;catsandog&quot;</span>, wordDict = [<span class="string">&quot;cats&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;sand&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;cat&quot;</span>]</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 300</code></li>
<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>
<li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li>
<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>
<li>All the strings of <code>wordDict</code> are <strong>unique</strong> .</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string s_;</span><br><span class="line">    <span class="type">int</span> minLen = INT_MAX, maxLen = <span class="number">0</span>;</span><br><span class="line">    unordered_set&lt;string&gt; words;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; word : wordDict) &#123;</span><br><span class="line">            words.<span class="built_in">insert</span>(word);</span><br><span class="line">            maxLen = <span class="built_in">max</span>(maxLen, (<span class="type">int</span>)word.<span class="built_in">size</span>());</span><br><span class="line">            minLen = <span class="built_in">min</span>(minLen, (<span class="type">int</span>)word.<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        s_ = s;</span><br><span class="line">        <span class="type">bool</span> found = <span class="built_in">traverse</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == s_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">contains</span>(index)) &#123;</span><br><span class="line">            <span class="keyword">return</span> m[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> res = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = maxLen; i &gt;= minLen; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + index &gt; s_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            string tmp = s_.<span class="built_in">substr</span>(index, i);</span><br><span class="line">            <span class="keyword">if</span> (words.<span class="built_in">contains</span>(tmp)) &#123;</span><br><span class="line">                res |= <span class="built_in">traverse</span>(index + i);</span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m[index] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Memoization</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>140. Word Break II</title>
    <url>/2024/07/16/140-Word-Break-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/word-break-ii/description/">140. Word Break II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, add spaces in <code>s</code> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in <strong>any order</strong> .</p>
<p><strong>Note</strong>  that the same word in the dictionary may be reused multiple times in the segmentation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;catsanddog&quot;</span>, wordDict = [<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;cats&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;sand&quot;</span>,<span class="string">&quot;dog&quot;</span>]</span><br><span class="line">Output: [<span class="string">&quot;cats and dog&quot;</span>,<span class="string">&quot;cat sand dog&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;pineapplepenapple&quot;</span>, wordDict = [<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;pen&quot;</span>,<span class="string">&quot;applepen&quot;</span>,<span class="string">&quot;pine&quot;</span>,<span class="string">&quot;pineapple&quot;</span>]</span><br><span class="line">Output: [<span class="string">&quot;pine apple pen apple&quot;</span>,<span class="string">&quot;pineapple pen apple&quot;</span>,<span class="string">&quot;pine applepen apple&quot;</span>]</span><br><span class="line">Explanation: Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;catsandog&quot;</span>, wordDict = [<span class="string">&quot;cats&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;sand&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;cat&quot;</span>]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 20</code></li>
<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>
<li><code>1 &lt;= wordDict[i].length &lt;= 10</code></li>
<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>
<li>All the strings of <code>wordDict</code> are <strong>unique</strong> .</li>
<li>Input is generated in a way that the length of the answer doesn’t exceed10^5.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_set&lt;string&gt; words;</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    string cur, s_;</span><br><span class="line">    <span class="type">int</span> minLen = INT_MAX, maxLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; word : wordDict) &#123;</span><br><span class="line">            words.<span class="built_in">insert</span>(word);</span><br><span class="line">            minLen = <span class="built_in">min</span>(minLen, (<span class="type">int</span>)word.<span class="built_in">size</span>());</span><br><span class="line">            maxLen = <span class="built_in">max</span>(maxLen, (<span class="type">int</span>)word.<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        s_ = s;</span><br><span class="line">        <span class="built_in">traverse</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == s_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            cur.<span class="built_in">pop_back</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(cur);</span><br><span class="line">            cur.<span class="built_in">push_back</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = minLen; i &lt;= maxLen; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + index &gt; s_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            string tmp = s_.<span class="built_in">substr</span>(index, i);</span><br><span class="line">            <span class="keyword">if</span> (words.<span class="built_in">contains</span>(tmp)) &#123;</span><br><span class="line">                cur += tmp + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="built_in">traverse</span>(index + i);</span><br><span class="line">                <span class="type">int</span> len = tmp.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= len; k++) &#123;</span><br><span class="line">                    cur.<span class="built_in">pop_back</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Backtracking</tag>
        <tag>Memoization</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>141. Linked List Cycle</title>
    <url>/2023/01/04/141-Linked-List-Cycle/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/linked-list-cycle/">141. Linked List Cycle</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p>
<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p>
<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail’s <code>next</code> pointer is connected to. <strong>Note that <code>pos</code> is not passed as a parameter</strong>.</p>
<p>Return <code>true</code> <em>if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [3,2,0,-4], pos = 1</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: There is a cycle <span class="keyword">in</span> the linked list, <span class="built_in">where</span> the <span class="built_in">tail</span> connects to the 1st node (0-indexed).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2], pos = 0</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: There is a cycle <span class="keyword">in</span> the linked list, <span class="built_in">where</span> the <span class="built_in">tail</span> connects to the 0th node.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1], pos = -1</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: There is no cycle <span class="keyword">in</span> the linked list.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of the nodes in the list is in the range [0, 10<sup>4</sup>].</li>
<li>-10<sup>5</sup> &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>5</sup></li>
<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li>
</ul>
<p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>
<hr>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Check if fast and slow pointers meet</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>142. Linked List Cycle II</title>
    <url>/2023/01/04/142-Linked-List-Cycle-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/linked-list-cycle-ii/">142. Linked List Cycle II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p>
<p>Given the <code>head</code> of a linked list, return <em>the node where the cycle begins. If there is no cycle, return</em> <code>null</code>.</p>
<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail’s <code>next</code> pointer is connected to (<strong>0-indexed</strong>). It is <code>-1</code> if there is no cycle. <strong>Note that</strong> <code>pos</code> <strong>is not passed as a parameter</strong>.</p>
<p><strong>Do not modify</strong> the linked list.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [3,2,0,-4], pos = 1</span><br><span class="line">Output: <span class="built_in">tail</span> connects to node index 1</span><br><span class="line">Explanation: There is a cycle <span class="keyword">in</span> the linked list, <span class="built_in">where</span> <span class="built_in">tail</span> connects to the second node.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2], pos = 0</span><br><span class="line">Output: <span class="built_in">tail</span> connects to node index 0</span><br><span class="line">Explanation: There is a cycle <span class="keyword">in</span> the linked list, <span class="built_in">where</span> <span class="built_in">tail</span> connects to the first node.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1], pos = -1</span><br><span class="line">Output: no cycle</span><br><span class="line">Explanation: There is no cycle <span class="keyword">in</span> the linked list.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of the nodes in the list is in the range [0, 10<sup>4</sup>].</li>
<li>-10<sup>5</sup> &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>5</sup></li>
<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li>
</ul>
<p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Fast&#x2F;slow pointers</li>
<li>Draw the circle</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">nullptr</span> || fast-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1429. First Unique Number</title>
    <url>/2023/12/17/1429-First-Unique-Number/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/first-unique-number/">1429. First Unique Number</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/data-stream//">Data Stream</a></p>
<p>You have a queue of integers, you need to retrieve the first unique integer in the queue.</p>
<p>Implement the <code>FirstUnique</code> class:</p>
<ul>
<li><code>FirstUnique(int[] nums)</code> Initializes the object with the numbers in the queue.</li>
<li><code>int showFirstUnique()</code> returns the value of <strong>the first unique</strong> integer of the queue, and returns <strong>-1</strong> if there is no such integer.</li>
<li><code>void add(int value)</code> insert value to the queue.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[<span class="string">&quot;FirstUnique&quot;</span>,<span class="string">&quot;showFirstUnique&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;showFirstUnique&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;showFirstUnique&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;showFirstUnique&quot;</span>]</span><br><span class="line">[[[2,3,5]],[],[5],[],[2],[],[3],[]]</span><br><span class="line">Output:</span><br><span class="line">[null,2,null,2,null,3,null,-1]</span><br><span class="line">Explanation:</span><br><span class="line">FirstUnique firstUnique = new FirstUnique([2,3,5]);</span><br><span class="line">firstUnique.showFirstUnique(); // <span class="built_in">return</span> 2</span><br><span class="line">firstUnique.add(5);            // the queue is now [2,3,5,5]</span><br><span class="line">firstUnique.showFirstUnique(); // <span class="built_in">return</span> 2</span><br><span class="line">firstUnique.add(2);            // the queue is now [2,3,5,5,2]</span><br><span class="line">firstUnique.showFirstUnique(); // <span class="built_in">return</span> 3</span><br><span class="line">firstUnique.add(3);            // the queue is now [2,3,5,5,2,3]</span><br><span class="line">firstUnique.showFirstUnique(); // <span class="built_in">return</span> -1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[<span class="string">&quot;FirstUnique&quot;</span>,<span class="string">&quot;showFirstUnique&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;showFirstUnique&quot;</span>]</span><br><span class="line">[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]</span><br><span class="line">Output:</span><br><span class="line">[null,-1,null,null,null,null,null,17]</span><br><span class="line">Explanation:</span><br><span class="line">FirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);</span><br><span class="line">firstUnique.showFirstUnique(); // <span class="built_in">return</span> -1</span><br><span class="line">firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]</span><br><span class="line">firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3]</span><br><span class="line">firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3,3]</span><br><span class="line">firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7,3,3,7]</span><br><span class="line">firstUnique.add(17);           // the queue is now [7,7,7,7,7,7,7,3,3,7,17]</span><br><span class="line">firstUnique.showFirstUnique(); // <span class="built_in">return</span> 17</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[<span class="string">&quot;FirstUnique&quot;</span>,<span class="string">&quot;showFirstUnique&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;showFirstUnique&quot;</span>]</span><br><span class="line">[[[809]],[],[809],[]]</span><br><span class="line">Output:</span><br><span class="line">[null,809,null,-1]</span><br><span class="line">Explanation:</span><br><span class="line">FirstUnique firstUnique = new FirstUnique([809]);</span><br><span class="line">firstUnique.showFirstUnique(); // <span class="built_in">return</span> 809</span><br><span class="line">firstUnique.add(809);          // the queue is now [809,809]</span><br><span class="line">firstUnique.showFirstUnique(); // <span class="built_in">return</span> -1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^8</code></li>
<li><code>1 &lt;= value &lt;= 10^8</code></li>
<li>At most <code>50000</code> calls will be made to <code>showFirstUnique</code> and <code>add</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>map + queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FirstUnique</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FirstUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(num);</span><br><span class="line">            m[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">showFirstUnique</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> num = q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span> (m[num] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(value);</span><br><span class="line">        m[value]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FirstUnique object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FirstUnique* obj = new FirstUnique(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;showFirstUnique();</span></span><br><span class="line"><span class="comment"> * obj-&gt;add(value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
        <tag>Data Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>143. Reorder List</title>
    <url>/2023/12/07/143-Reorder-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/reorder-list/">143. Reorder List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/recursion//">Recursion</a></p>
<p>You are given the head of a singly linked-list. The list can be represented as:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">L0 → L1 → … → Ln - 1 → Ln</span><br></pre></td></tr></table></figure>

<p><em>Reorder the list to be on the following form:</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …</span><br></pre></td></tr></table></figure>

<p>You may not modify the values in the list’s nodes. Only nodes themselves may be changed.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,4]</span><br><span class="line">Output: [1,4,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,4,5]</span><br><span class="line">Output: [1,5,2,4,3]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is in the range [1, 5 * 10<sup>4</sup>].</li>
<li><code>1 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        stack&lt;ListNode*&gt; s;</span><br><span class="line">        ListNode* tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (tmp) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(tmp);</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (tmp != s.<span class="built_in">top</span>() &amp;&amp; tmp-&gt;next != s.<span class="built_in">top</span>()) &#123;</span><br><span class="line">            ListNode* tail = s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            ListNode* next = tmp-&gt;next;</span><br><span class="line">            tmp-&gt;next = tail;</span><br><span class="line">            tail-&gt;next = next;</span><br><span class="line">            tmp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp == s.<span class="built_in">top</span>()) &#123;</span><br><span class="line">            tmp-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp-&gt;next-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Stack</tag>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1430. Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree</title>
    <url>/2024/07/01/1430-Check-If-a-String-Is-a-Valid-Sequence-from-Root-to-Leaves-Path-in-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree/description/">1430. Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree where each path going from the root to any leaf form a <strong>valid sequence</strong> , check if a given string is a <strong>valid sequence</strong>  in such binary tree.</p>
<p>We get the given string from the concatenation of an array of integers <code>arr</code> and the concatenation of all values of the nodes along a path results in a <strong>sequence</strong>  in the given binary tree.</p>
<p><strong>Example 1:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/leetcode_testcase_1.png" style="width: 333px; height: 250px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The path 0 -&gt; 1 -&gt; 0 -&gt; 1 is a valid sequence (green color <span class="keyword">in</span> the figure).</span><br><span class="line">Other valid sequences are:</span><br><span class="line">0 -&gt; 1 -&gt; 1 -&gt; 0</span><br><span class="line">0 -&gt; 0 -&gt; 0</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/leetcode_testcase_2.png" style="width: 333px; height: 250px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: The path 0 -&gt; 0 -&gt; 1 does not exist, therefore it is not even a sequence.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/leetcode_testcase_3.png" style="width: 333px; height: 250px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: The path 0 -&gt; 1 -&gt; 1 is a sequence, but it is not a valid sequence.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 5000</code></li>
<li><code>0 &lt;= arr[i] &lt;= 9</code></li>
<li>Each node’s value is between [0 - 9].</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> isValid = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSequence</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, arr, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root || index == arr.<span class="built_in">size</span>() || isValid) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val != arr[index]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; index == arr.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            isValid = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, arr, index + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, arr, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</title>
    <url>/2023/12/17/1438-Longest-Continuous-Subarray-With-Absolute-Diff-Less-Than-or-Equal-to-Limit/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/">1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/ordered-set//">Ordered Set</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-queue//">Monotonic Queue</a></p>
<p>Given an array of integers <code>nums</code> and an integer <code>limit</code>, return the size of the longest <strong>non-empty</strong> subarray such that the absolute difference between any two elements of this subarray is less than or equal to <code>limit</code><em>.</em></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [8,2,4,7], <span class="built_in">limit</span> = 4</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: All subarrays are:</span><br><span class="line">[8] with maximum absolute diff |8-8| = 0 &lt;= 4.</span><br><span class="line">[8,2] with maximum absolute diff |8-2| = 6 &gt; 4\.</span><br><span class="line">[8,2,4] with maximum absolute diff |8-2| = 6 &gt; 4.</span><br><span class="line">[8,2,4,7] with maximum absolute diff |8-2| = 6 &gt; 4.</span><br><span class="line">[2] with maximum absolute diff |2-2| = 0 &lt;= 4.</span><br><span class="line">[2,4] with maximum absolute diff |2-4| = 2 &lt;= 4.</span><br><span class="line">[2,4,7] with maximum absolute diff |2-7| = 5 &gt; 4.</span><br><span class="line">[4] with maximum absolute diff |4-4| = 0 &lt;= 4.</span><br><span class="line">[4,7] with maximum absolute diff |4-7| = 3 &lt;= 4.</span><br><span class="line">[7] with maximum absolute diff |7-7| = 0 &lt;= 4\.</span><br><span class="line">Therefore, the size of the longest subarray is 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [10,1,2,4,7,2], <span class="built_in">limit</span> = 5</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 &lt;= 5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,2,2,2,4,4,2,2], <span class="built_in">limit</span> = 0</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li>
<li>0 &lt;&#x3D; limit &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>monotonic queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; minQ;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; maxQ;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!minQ.<span class="built_in">empty</span>() &amp;&amp; minQ.<span class="built_in">back</span>() &gt; nums[right]) &#123;</span><br><span class="line">                minQ.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!maxQ.<span class="built_in">empty</span>() &amp;&amp; maxQ.<span class="built_in">back</span>() &lt; nums[right]) &#123;</span><br><span class="line">                maxQ.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            minQ.<span class="built_in">push_back</span>(nums[right]);</span><br><span class="line">            maxQ.<span class="built_in">push_back</span>(nums[right]);</span><br><span class="line">            <span class="keyword">while</span> ((maxQ.<span class="built_in">front</span>() - minQ.<span class="built_in">front</span>() &gt; limit) &amp;&amp; left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] == minQ.<span class="built_in">front</span>()) &#123;</span><br><span class="line">                    minQ.<span class="built_in">pop_front</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] == maxQ.<span class="built_in">front</span>()) &#123;</span><br><span class="line">                    maxQ.<span class="built_in">pop_front</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">max</span>(res, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Queue</tag>
        <tag>Ordered Set</tag>
        <tag>Monotonic Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>144. Binary Tree Preorder Traversal</title>
    <url>/2023/02/02/144-Binary-Tree-Preorder-Traversal/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">144. Binary Tree Preorder Traversal</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/stack/">Stack</a>, <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary tree, return <em>the preorder traversal of its nodes’ values</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2,3]</span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use stack to solve it iteratively</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">preorderTraversal</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">preorderTraversal</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>stack solution</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; s;</span><br><span class="line">        <span class="keyword">if</span> (root) s.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) s.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) s.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>1448. Count Good Nodes in Binary Tree</title>
    <url>/2024/05/30/1448-Count-Good-Nodes-in-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-good-nodes-in-binary-tree/description/">1448. Count Good Nodes in Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree <code>root</code>, a node X in the tree is named <strong>good</strong> if in the path from root to X there are no nodes with a value greater than X.</p>
<p>Return the number of <strong>good</strong>  nodes in the binary tree.</p>
<p><strong>Example 1:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/04/02/test_sample_1.png" style="width: 263px; height: 156px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,1,4,3,null,1,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Nodes <span class="keyword">in</span> blue are **good** .</span><br><span class="line">Root Node (3) is always a good node.</span><br><span class="line">Node 4 -&gt; (3,4) is the maximum value <span class="keyword">in</span> the path starting from the root.</span><br><span class="line">Node 5 -&gt; (3,4,5) is the maximum value <span class="keyword">in</span> the path</span><br><span class="line">Node 3 -&gt; (3,1,3) is the maximum value <span class="keyword">in</span> the path.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/04/02/test_sample_2.png" style="width: 157px; height: 161px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,3,null,4,2]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Node 2 -&gt; (3, 3, 2) is not good, because <span class="string">&quot;3&quot;</span> is higher than it.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: Root is considered as **good** .</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the binary tree is in the range<code>[1, 10^5]</code>.</li>
<li>Each node’s value is between <code>[-10^4, 10^4]</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">goodNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root, INT_MIN);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> min)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt;= min) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        min = <span class="built_in">max</span>(root-&gt;val, min);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, min);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1456. Maximum Number of Vowels in a Substring of Given Length</title>
    <url>/2024/10/21/1456-Maximum-Number-of-Vowels-in-a-Substring-of-Given-Length/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/description/">1456. Maximum Number of Vowels in a Substring of Given Length</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string <code>s</code> and an integer <code>k</code>, return the maximum number of vowel letters in any substring of <code>s</code> with length <code>k</code>.</p>
<p><strong>Vowel letters</strong>  in English are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abciiidef&quot;</span>, k = 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The substring <span class="string">&quot;iii&quot;</span> contains 3 vowel letters.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aeiou&quot;</span>, k = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: Any substring of length 2 contains 2 vowels.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;leetcode&quot;</span>, k = 3</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: <span class="string">&quot;lee&quot;</span>, <span class="string">&quot;eet&quot;</span> and <span class="string">&quot;ode&quot;</span> contain 2 vowels.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 10^5</code></li>
<li><code>s</code> consists of lowercase English letters.</li>
<li><code>1 &lt;= k &lt;= s.length</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_set&lt;<span class="type">char</span>&gt; vowels = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxVowels</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, right = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">char</span> r = s[right];</span><br><span class="line">            <span class="keyword">if</span> (vowels.<span class="built_in">contains</span>(r)) &#123;</span><br><span class="line">                tmp++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right &gt;= k) &#123;</span><br><span class="line">                <span class="type">char</span> l = s[right - k];</span><br><span class="line">                <span class="keyword">if</span> (vowels.<span class="built_in">contains</span>(l)) &#123;</span><br><span class="line">                    tmp--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">max</span>(res, tmp);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>1457. Pseudo-Palindromic Paths in a Binary Tree</title>
    <url>/2024/04/03/1457-Pseudo-Palindromic-Paths-in-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/description/">1457. Pseudo-Palindromic Paths in a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be <strong>pseudo-palindromic</strong>  if at least one permutation of the node values in the path is a palindrome.</p>
<p>Return the number of <strong>pseudo-palindromic</strong>  paths going from the root node to leaf nodes.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/05/06/palindromic_paths_1.png" style="width: 300px; height: 201px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,3,1,3,1,null,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged <span class="keyword">in</span> [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged <span class="keyword">in</span> [1,2,1] (palindrome).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/05/07/palindromic_paths_2.png" style="width: 300px; height: 314px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,1,1,3,null,null,null,null,null,1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged <span class="keyword">in</span> [1,2,1] (palindrome).</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [9]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^5]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>traverse the tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> count[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pseudoPalindromicPaths</span> <span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        count[root-&gt;val]++;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            <span class="type">int</span> odd_count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    odd_count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (odd_count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) <span class="built_in">pseudoPalindromicPaths</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) <span class="built_in">pseudoPalindromicPaths</span>(root-&gt;right);</span><br><span class="line">        count[root-&gt;val]--;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>146. LRU Cache</title>
    <url>/2023/10/03/146-LRU-Cache/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/lru-cache/">146. LRU Cache</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/doubly-linked-list//">Doubly-Linked List</a></p>
<p>Design a data structure that follows the constraints of a <strong><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU">Least Recently Used (LRU) cache</a></strong>.</p>
<p>Implement the <code>LRUCache</code> class:</p>
<ul>
<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>
<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li>
<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>
</ul>
<p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;LRUCache&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 1, null, -1, null, -1, 3, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">LRUCache lRUCache = new LRUCache(2);</span><br><span class="line">lRUCache.put(1, 1); // cache is &#123;1=1&#125;</span><br><span class="line">lRUCache.put(2, 2); // cache is &#123;1=1, 2=2&#125;</span><br><span class="line">lRUCache.get(1);    // <span class="built_in">return</span> 1</span><br><span class="line">lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is &#123;1=1, 3=3&#125;</span><br><span class="line">lRUCache.get(2);    // returns -1 (not found)</span><br><span class="line">lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is &#123;4=4, 3=3&#125;</span><br><span class="line">lRUCache.get(1);    // <span class="built_in">return</span> -1 (not found)</span><br><span class="line">lRUCache.get(3);    // <span class="built_in">return</span> 3</span><br><span class="line">lRUCache.get(4);    // <span class="built_in">return</span> 4</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= capacity &lt;= 3000</code></li>
<li>0 &lt;&#x3D; key &lt;&#x3D; 10<sup>4</sup></li>
<li>0 &lt;&#x3D; value &lt;&#x3D; 10<sup>5</sup></li>
<li>At most 2 * 10<sup>5</sup> calls will be made to <code>get</code> and <code>put</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use list + map to mimic the behavior of linkedHashMap</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    list&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; l;</span><br><span class="line">    map&lt;<span class="type">int</span>, list&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;::iterator&gt; m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="type">int</span> capacity) &#123;</span><br><span class="line">        size = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_to_end</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        l.<span class="built_in">push_back</span>(&#123;key, value&#125;);</span><br><span class="line">        m[key] = <span class="built_in">next</span>(l.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!m.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;::iterator i = m[key];</span><br><span class="line">            <span class="type">int</span> value = (*i).second;</span><br><span class="line">            l.<span class="built_in">erase</span>(i);</span><br><span class="line">            <span class="built_in">add_to_end</span>(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!m.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l.<span class="built_in">size</span>() == size) &#123;</span><br><span class="line">                <span class="type">int</span> k = l.<span class="built_in">front</span>().first;</span><br><span class="line">                m.<span class="built_in">erase</span>(k);</span><br><span class="line">                l.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">add_to_end</span>(key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> i = m[key];</span><br><span class="line">            l.<span class="built_in">erase</span>(i);</span><br><span class="line">            <span class="built_in">add_to_end</span>(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache* obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
        <tag>Design</tag>
        <tag>Doubly-Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>1469. Find All The Lonely Nodes</title>
    <url>/2024/05/30/1469-Find-All-The-Lonely-Nodes/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-all-the-lonely-nodes/description/">1469. Find All The Lonely Nodes</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In a binary tree, a <strong>lonely</strong>  node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node.</p>
<p>Given the <code>root</code> of a binary tree, return an array containing the values of all lonely nodes in the tree. Return the list <strong>in any order</strong> .</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/06/03/e1.png" style="width: 203px; height: 202px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,null,4]</span><br><span class="line">Output: [4]</span><br><span class="line">Explanation: Light blue node is the only lonely node.</span><br><span class="line">Node 1 is the root and is not lonely.</span><br><span class="line">Nodes 2 and 3 have the same parent and are not lonely.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/06/03/e2.png" style="width: 442px; height: 282px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2]</span><br><span class="line">Output: [6,2]</span><br><span class="line">Explanation: Light blue nodes are lonely nodes.</span><br><span class="line">Please remember that order doesn<span class="string">&#x27;t matter, [2,6] is also an acceptable answer.</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/06/03/tree.png" style="width: 363px; height: 202px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:  root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]</span><br><span class="line">Output: [77,55,33,66,44,22]</span><br><span class="line">Explanation: Nodes 99 and 88 share the same parent. Node 11 is the root.</span><br><span class="line">All other nodes are lonely.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the <code>tree</code> is in the range <code>[1, 1000].</code></li>
<li><code>1 &lt;= Node.val &lt;= 10^6</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getLonelyNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(root-&gt;left-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; root-&gt;right) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(root-&gt;right-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1475. Final Prices With a Special Discount in a Shop</title>
    <url>/2023/12/16/1475-Final-Prices-With-a-Special-Discount-in-a-Shop/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/">1475. Final Prices With a Special Discount in a Shop</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a></p>
<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of the i<sup>th</sup> item in a shop.</p>
<p>There is a special discount for items in the shop. If you buy the i<sup>th</sup> item, then you will receive a discount equivalent to <code>prices[j]</code> where <code>j</code> is the minimum index such that <code>j &gt; i</code> and <code>prices[j] &lt;= prices[i]</code>. Otherwise, you will not receive any discount at all.</p>
<p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the final price you will pay for the i<sup>th</sup> item of the shop, considering the special discount.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: prices = [8,4,6,2,3]</span><br><span class="line">Output: [4,2,4,2,3]</span><br><span class="line">Explanation:</span><br><span class="line">For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.</span><br><span class="line">For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.</span><br><span class="line">For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.</span><br><span class="line">For items 3 and 4 you will not receive any discount at all.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: prices = [1,2,3,4,5]</span><br><span class="line">Output: [1,2,3,4,5]</span><br><span class="line">Explanation: In this <span class="keyword">case</span>, <span class="keyword">for</span> all items, you will not receive any discount at all.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: prices = [10,1,1,6]</span><br><span class="line">Output: [9,0,1,6]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= prices.length &lt;= 500</code></li>
<li><code>1 &lt;= prices[i] &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>monotonic stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">finalPrices</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(size, <span class="number">0</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; s.<span class="built_in">top</span>() &gt; prices[i]) &#123;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = s.<span class="built_in">empty</span>() ? prices[i] : prices[i] - s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">push</span>(prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>1485. Clone Binary Tree With Random Pointer</title>
    <url>/2024/06/07/1485-Clone-Binary-Tree-With-Random-Pointer/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/clone-binary-tree-with-random-pointer/description/">1485. Clone Binary Tree With Random Pointer</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.</p>
<p>Return a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank"><strong>deep copy</strong> </a> of the tree.</p>
<p>The tree is represented in the same input&#x2F;output way as normal binary trees where each node is represented as a pair of <code>[val, random_index]</code> where:</p>
<ul>
<li><code>val</code>: an integer representing <code>Node.val</code></li>
<li><code>random_index</code>: the index of the node (in the input) where the random pointer points to, or <code>null</code> if it does not point to any node.</li>
</ul>
<p>You will be given the tree in class <code>Node</code> and you should return the cloned tree in class <code>NodeCopy</code>. <code>NodeCopy</code> class is just a clone of <code>Node</code> class with the same attributes and constructors.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/06/17/clone_1.png" style="width: 500px; height: 473px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [[1,null],null,[4,3],[7,0]]</span><br><span class="line">Output: [[1,null],null,[4,3],[7,0]]</span><br><span class="line">Explanation: The original binary tree is [1,null,4,7].</span><br><span class="line">The random pointer of node one is null, so it is represented as [1, null].</span><br><span class="line">The random pointer of node 4 is node 7, so it is represented as [4, 3] <span class="built_in">where</span> 3 is the index of node 7 <span class="keyword">in</span> the array representing the tree.</span><br><span class="line">The random pointer of node 7 is node 1, so it is represented as [7, 0] <span class="built_in">where</span> 0 is the index of node 1 <span class="keyword">in</span> the array representing the tree.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/06/17/clone_2.png" style="width: 500px; height: 540px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [[1,4],null,[1,0],null,[1,5],[1,5]]</span><br><span class="line">Output: [[1,4],null,[1,0],null,[1,5],[1,5]]</span><br><span class="line">Explanation: The random pointer of a node can be the node itself.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/06/17/clone_3.png" style="width: 500px; height: 426px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]</span><br><span class="line">Output: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the <code>tree</code> is in the range <code>[0, 1000].</code></li>
<li><code>1 &lt;= Node.val &lt;= 10^6</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a Node.</span></span><br><span class="line"><span class="comment"> * struct Node &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     Node *left;</span></span><br><span class="line"><span class="comment"> *     Node *right;</span></span><br><span class="line"><span class="comment"> *     Node *random;</span></span><br><span class="line"><span class="comment"> *     Node() : val(0), left(nullptr), right(nullptr), random(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     Node(int x) : val(x), left(nullptr), right(nullptr), random(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     Node(int x, Node *left, Node *right, Node *random) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right), random(random) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;Node*, NodeCopy*&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function">NodeCopy* <span class="title">copyRandomBinaryTree</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        NodeCopy* copyRoot = <span class="built_in">copy</span>(root);</span><br><span class="line">        <span class="built_in">copyRandom</span>(root, copyRoot);</span><br><span class="line">        <span class="keyword">return</span> copyRoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">NodeCopy* <span class="title">copy</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        NodeCopy* copyRoot = <span class="keyword">new</span> <span class="built_in">NodeCopy</span>(root-&gt;val);</span><br><span class="line">        m[root] = copyRoot;</span><br><span class="line">        copyRoot-&gt;left = <span class="built_in">copy</span>(root-&gt;left);</span><br><span class="line">        copyRoot-&gt;right = <span class="built_in">copy</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> copyRoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">copyRandom</span><span class="params">(Node* root, NodeCopy* copyRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        copyRoot-&gt;random = m[root-&gt;random];</span><br><span class="line">        <span class="built_in">copyRandom</span>(root-&gt;left, copyRoot-&gt;left);</span><br><span class="line">        <span class="built_in">copyRandom</span>(root-&gt;right, copyRoot-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>15. 3Sum</title>
    <url>/2023/11/30/15-3Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/3sum/">15. 3Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a></p>
<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>
<p>Notice that the solution set must not contain duplicate triplets.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,0,1,2,-1,-4]</span><br><span class="line">Output: [[-1,-1,2],[-1,0,1]]</span><br><span class="line">Explanation:</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.</span><br><span class="line">The distinct triplets are [-1,0,1] and [-1,-1,2].</span><br><span class="line">Notice that the order of the output and the order of the triplets does not matter.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,1]</span><br><span class="line">Output: []</span><br><span class="line">Explanation: The only possible triplet does not <span class="built_in">sum</span> up to 0.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,0,0]</span><br><span class="line">Output: [[0,0,0]]</span><br><span class="line">Explanation: The only possible triplet sums up to 0.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= nums.length &lt;= 3000</code></li>
<li>-10<sup>5</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>5</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>For loop over twoSum</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="built_in">twoSum</span>(res, nums, i);</span><br><span class="line">            <span class="keyword">while</span>(i + <span class="number">1</span> &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">twoSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;res, vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = i + <span class="number">1</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, target = -nums[i];</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> lvalue = nums[left], rvalue = nums[right];</span><br><span class="line">            <span class="keyword">if</span> (lvalue + rvalue &lt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == lvalue) left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lvalue + rvalue &gt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == rvalue) right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;nums[i], lvalue, rvalue&#125;);</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == lvalue) left++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == rvalue) right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>150. Evaluate Reverse Polish Notation</title>
    <url>/2023/12/08/150-Evaluate-Reverse-Polish-Notation/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/">150. Evaluate Reverse Polish Notation</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a></p>
<p>You are given an array of strings <code>tokens</code> that represents an arithmetic expression in a <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">Reverse Polish Notation</a>.</p>
<p>Evaluate the expression. Return <em>an integer that represents the value of the expression</em>.</p>
<p><strong>Note</strong> that:</p>
<ul>
<li>The valid operators are <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, and <code>&#39;/&#39;</code>.</li>
<li>Each operand may be an integer or another expression.</li>
<li>The division between two integers always <strong>truncates toward zero</strong>.</li>
<li>There will not be any division by zero.</li>
<li>The input represents a valid arithmetic expression in a reverse polish notation.</li>
<li>The answer and all the intermediate calculations can be represented in a <strong>32-bit</strong> integer.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tokens = [<span class="string">&quot;2&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;*&quot;</span>]</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: ((<span class="number">2</span> + <span class="number">1</span>) * <span class="number">3</span>) = <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tokens = [<span class="string">&quot;4&quot;</span>,<span class="string">&quot;13&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;+&quot;</span>]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: (4 + (13 / 5)) = 6</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tokens = [<span class="string">&quot;10&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;-11&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;17&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;+&quot;</span>]</span><br><span class="line">Output: 22</span><br><span class="line">Explanation: ((<span class="number">10</span> * (<span class="number">6</span> / ((<span class="number">9</span> + <span class="number">3</span>) * -<span class="number">11</span>))) + 17) + 5</span><br><span class="line">= ((<span class="number">10</span> * (<span class="number">6</span> / (<span class="number">12</span> * -<span class="number">11</span>))) + 17) + 5</span><br><span class="line">= ((<span class="number">10</span> * (<span class="number">6</span> / -<span class="number">132</span>)) + 17) + 5</span><br><span class="line">= ((<span class="number">10</span> * <span class="number">0</span>) + <span class="number">17</span>) + <span class="number">5</span></span><br><span class="line">= (<span class="number">0</span> + <span class="number">17</span>) + <span class="number">5</span></span><br><span class="line">= <span class="number">17</span> + <span class="number">5</span></span><br><span class="line">= <span class="number">22</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; tokens.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>tokens[i]</code> is either an operator: <code>&quot;+&quot;</code>, <code>&quot;-&quot;</code>, <code>&quot;*&quot;</code>, or <code>&quot;/&quot;</code>, or an integer in the range <code>[-200, 200]</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (string token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (token == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">                s.<span class="built_in">push</span>(a + b);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">                s.<span class="built_in">push</span>(b - a);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == <span class="string">&quot;*&quot;</span> ) &#123;</span><br><span class="line">                <span class="type">int</span> a = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">                s.<span class="built_in">push</span>(a * b);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">                s.<span class="built_in">push</span>(b / a);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s.<span class="built_in">push</span>(<span class="built_in">stoi</span>(token));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>1490. Clone N-ary Tree</title>
    <url>/2024/06/07/1490-Clone-N-ary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/clone-n-ary-tree/description/">1490. Clone N-ary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a <code>root</code> of an N-ary tree, return a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank"><strong>deep copy</strong> </a> (clone) of the tree.</p>
<p>Each node in the n-ary tree contains a val (<code>int</code>) and a list (<code>List[Node]</code>) of its children.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</p>
<p><strong>Example 1:</strong></p>
<img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" style="width: 100%; max-width: 300px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,3,2,4,null,5,6]</span><br><span class="line">Output: [1,null,3,2,4,null,5,6]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png" style="width: 296px; height: 241px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</span><br><span class="line">Output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li>
<li>The total number of nodes is between <code>[0, 10^4]</code>.</li>
</ul>
<p><strong>Follow up:</strong> Can your solution work for the <a href="https://leetcode.com/problems/clone-graph/" target="_blank">graph problem</a>?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">cloneTree</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* newRoot = <span class="keyword">new</span> <span class="built_in">Node</span>(root-&gt;val);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> child : root-&gt;children) &#123;</span><br><span class="line">            newRoot-&gt;children.<span class="built_in">push_back</span>(<span class="built_in">cloneTree</span>(child));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>151. Reverse Words in a String</title>
    <url>/2023/01/23/151-Reverse-Words-in-a-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/reverse-words-in-a-string/">151. Reverse Words in a String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/string/">String</a></p>
<p>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.</p>
<p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.</p>
<p>Return <em>a string of the words in reverse order concatenated by a single space.</em></p>
<p><strong>Note</strong> that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;the sky is blue&quot;</span></span><br><span class="line">Output: <span class="string">&quot;blue is sky the&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;  hello world  &quot;</span></span><br><span class="line">Output: <span class="string">&quot;world hello&quot;</span></span><br><span class="line">Explanation: Your reversed string should not contain leading or trailing spaces.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;a good   example&quot;</span></span><br><span class="line">Output: <span class="string">&quot;example good a&quot;</span></span><br><span class="line">Explanation: You need to reduce multiple spaces between two words to a single space <span class="keyword">in</span> the reversed string.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>&#39; &#39;</code>.</li>
<li>There is <strong>at least one</strong> word in <code>s</code>.</li>
</ul>
<p><strong>Follow-up:</strong> If the string data type is mutable in your language, can you solve it <strong>in-place</strong> with <code>O(1)</code> extra space?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Reverse the whole string first,  then each word</li>
<li>The handling of spaces is the key to AC for this problem<ul>
<li>The space at the end of the string</li>
<li>The extra spaces between the words</li>
<li>Use a separate index variable to track the return string</li>
</ul>
</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>, len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index != <span class="number">0</span>) &#123;</span><br><span class="line">                    s[index++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> end = i;</span><br><span class="line">                <span class="keyword">while</span> (s[end] != <span class="string">&#x27; &#x27;</span> &amp;&amp; end &lt; len) &#123;</span><br><span class="line">                    s[index++] = s[end++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + index - (end - i), s.<span class="built_in">begin</span>() + index);</span><br><span class="line">                i = end;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>() + index, s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1514. Path with Maximum Probability</title>
    <url>/2023/09/08/1514-Path-with-Maximum-Probability/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/path-with-maximum-probability/">1514. Path with Maximum Probability</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/shortest-path//">Shortest Path</a></p>
<p>You are given an undirected weighted graph of <code>n</code> nodes (0-indexed), represented by an edge list where <code>edges[i] = [a, b]</code> is an undirected edge connecting the nodes <code>a</code> and <code>b</code> with a probability of success of traversing that edge <code>succProb[i]</code>.</p>
<p>Given two nodes <code>start</code> and <code>end</code>, find the path with the maximum probability of success to go from <code>start</code> to <code>end</code> and return its success probability.</p>
<p>If there is no path from <code>start</code> to <code>end</code>, <strong>return 0</strong>. Your answer will be accepted if it differs from the correct answer by at most <strong>1e-5</strong>.</p>
<p><strong>Example 1:</strong></p>
<p><strong><img src="https://assets.leetcode.com/uploads/2019/09/20/1558_ex1.png"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2</span><br><span class="line">Output: 0.25000</span><br><span class="line">Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><strong><img src="https://assets.leetcode.com/uploads/2019/09/20/1558_ex2.png"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2</span><br><span class="line">Output: 0.30000</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><strong><img src="https://assets.leetcode.com/uploads/2019/09/20/1558_ex3.png"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2</span><br><span class="line">Output: 0.00000</span><br><span class="line">Explanation: There is no path between 0 and 2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 10^4</code></li>
<li><code>0 &lt;= start, end &lt; n</code></li>
<li><code>start != end</code></li>
<li><code>0 &lt;= a, b &lt; n</code></li>
<li><code>a != b</code></li>
<li><code>0 &lt;= succProb.length == edges.length &lt;= 2*10^4</code></li>
<li><code>0 &lt;= succProb[i] &lt;= 1</code></li>
<li>There is at most one edge between every two nodes.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Dijkstra algorithm</li>
<li>Since the algorithm requires positive edge weights, when dijkstra algorithm reaches the<br>destination, we can early return since the accumulation of edge labels along any path must<br>have a monotonically non-decreasing partial order</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">double</span>&gt;&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">double</span>&gt; probs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">maxProbability</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, vector&lt;<span class="type">double</span>&gt;&amp; succProb, <span class="type">int</span> start_node, <span class="type">int</span> end_node)</span> </span>&#123;</span><br><span class="line">        graph = vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">double</span>&gt;&gt;&gt;(n, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">double</span>&gt;&gt;());</span><br><span class="line">        probs = <span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;(n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](pair&lt;<span class="type">double</span>, <span class="type">int</span>&gt; lhs, pair&lt;<span class="type">double</span>, <span class="type">int</span>&gt; rhs) &#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.first &lt; rhs.first;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">double</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">double</span>, <span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="built_in">buildGraph</span>(edges, succProb);</span><br><span class="line">        pq.<span class="built_in">push</span>(&#123;<span class="number">1</span>, start_node&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> point = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">double</span> prob = point.first;</span><br><span class="line">            <span class="type">int</span> index = point.second;</span><br><span class="line">            <span class="keyword">if</span> (index == end_node) &#123;</span><br><span class="line">                <span class="keyword">return</span> prob;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (probs[index] &gt; prob) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> edge : graph[index]) &#123;</span><br><span class="line">                <span class="type">int</span> nextPoint = edge.first;</span><br><span class="line">                <span class="type">double</span> nextProb = edge.second;</span><br><span class="line">                nextProb = prob * nextProb;</span><br><span class="line">                <span class="keyword">if</span> (nextProb &gt; probs[nextPoint]) &#123;</span><br><span class="line">                    probs[index] = prob;</span><br><span class="line">                    pq.<span class="built_in">push</span>(&#123;nextProb, nextPoint&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> probs[end_node];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildGraph</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, vector&lt;<span class="type">double</span>&gt;&amp; succProb)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = edges.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> edge = edges[i];</span><br><span class="line">            <span class="type">int</span> p1 = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> p2 = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="type">double</span> prob = succProb[i];</span><br><span class="line">            graph[p1].<span class="built_in">push_back</span>(&#123;p2, prob&#125;);</span><br><span class="line">            graph[p2].<span class="built_in">push_back</span>(&#123;p1, prob&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Graph</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>1533. Find the Index of the Large Integer</title>
    <url>/2023/01/19/1533-Find-the-Index-of-the-Large-Integer/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-index-of-the-large-integer/">1533. Find the Index of the Large Integer</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/interactive//">Interactive</a></p>
<p>We have an integer array <code>arr</code>, where all the integers in <code>arr</code> are equal except for one integer which is <strong>larger</strong> than the rest of the integers. You will not be given direct access to the array, instead, you will have an <strong>API</strong> <code>ArrayReader</code> which have the following functions:</p>
<ul>
<li><code>int compareSub(int l, int r, int x, int y)</code>: where <code>0 &lt;= l, r, x, y &lt; ArrayReader.length()</code>, <code>l &lt;= r and</code> <code>x &lt;= y</code>. The function compares the sum of sub-array <code>arr[l..r]</code> with the sum of the sub-array <code>arr[x..y]</code> and returns:<ul>
<li><strong>1</strong> if <code>arr[l]+arr[l+1]+...+arr[r] &gt; arr[x]+arr[x+1]+...+arr[y]</code>.</li>
<li><strong>0</strong> if <code>arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]</code>.</li>
<li><strong>-1</strong> if <code>arr[l]+arr[l+1]+...+arr[r] &lt; arr[x]+arr[x+1]+...+arr[y]</code>.</li>
</ul>
</li>
<li><code>int length()</code>: Returns the size of the array.</li>
</ul>
<p>You are allowed to call <code>compareSub()</code> <strong>20 times</strong> at most. You can assume both functions work in <code>O(1)</code> time.</p>
<p>Return <em>the index of the array <code>arr</code> which has the largest integer</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: arr = [7,7,7,7,10,7,7,7]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The following calls to the API</span><br><span class="line">reader.compareSub(0, 0, 1, 1) // returns 0 this is a query comparing the sub-array (0, 0) with the sub array (1, 1), (i.e. compares arr[0] with arr[1]).</span><br><span class="line">Thus we know that arr[0] and arr[1] doesn<span class="string">&#x27;t contain the largest element.</span></span><br><span class="line"><span class="string">reader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3].</span></span><br><span class="line"><span class="string">reader.compareSub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is the largest element in the array.</span></span><br><span class="line"><span class="string">Notice that we made only 3 calls, so the answer is valid.</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [6,6,12]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>2 &lt;&#x3D; arr.length &lt;&#x3D; 5 * 10<sup>5</sup></li>
<li><code>1 &lt;= arr[i] &lt;= 100</code></li>
<li>All elements of <code>arr</code> are equal except for one element which is larger than all other elements.</li>
</ul>
<p><strong>Follow up:</strong></p>
<ul>
<li>What if there are two numbers in <code>arr</code> that are bigger than all other numbers?</li>
<li>What if there is one number that is bigger than other numbers and one number that is smaller than other numbers?</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Binary search</li>
<li>The key is to handle odd&#x2F;even number of elements separately</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the ArrayReader&#x27;s API interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * class ArrayReader &#123;</span></span><br><span class="line"><span class="comment"> *   public:</span></span><br><span class="line"><span class="comment"> *     // Compares the sum of arr[l..r] with the sum of arr[x..y] </span></span><br><span class="line"><span class="comment"> *     // return 1 if sum(arr[l..r]) &gt; sum(arr[x..y])</span></span><br><span class="line"><span class="comment"> *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])</span></span><br><span class="line"><span class="comment"> *     // return -1 if sum(arr[l..r]) &lt; sum(arr[x..y])</span></span><br><span class="line"><span class="comment"> *     int compareSub(int l, int r, int x, int y);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // Returns the length of the array</span></span><br><span class="line"><span class="comment"> *     int length();</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getIndex</span><span class="params">(ArrayReader &amp;reader)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = reader.<span class="built_in">length</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> window = right - left + <span class="number">1</span>; <span class="comment">// number of items</span></span><br><span class="line">            <span class="type">int</span> m1 = window % <span class="number">2</span> == <span class="number">0</span> ? left + (right - left) / <span class="number">2</span> : left + (right - left) / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> m2 = window % <span class="number">2</span> == <span class="number">0</span> ? left + (right - left) / <span class="number">2</span> + <span class="number">1</span> : left + (right - left) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> res = reader.<span class="built_in">compareSub</span>(left, m1, m2, right);</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> m1 + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">                left = m2;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res == <span class="number">1</span>) &#123;</span><br><span class="line">                right = m1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Interactive</tag>
      </tags>
  </entry>
  <entry>
    <title>155. Min Stack</title>
    <url>/2023/12/13/155-Min-Stack/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/min-stack/">155. Min Stack</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a></p>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<p>Implement the <code>MinStack</code> class:</p>
<ul>
<li><code>MinStack()</code> initializes the stack object.</li>
<li><code>void push(int val)</code> pushes the element <code>val</code> onto the stack.</li>
<li><code>void pop()</code> removes the element on the top of the stack.</li>
<li><code>int top()</code> gets the top element of the stack.</li>
<li><code>int getMin()</code> retrieves the minimum element in the stack.</li>
</ul>
<p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;MinStack&quot;</span>,<span class="string">&quot;push&quot;</span>,<span class="string">&quot;push&quot;</span>,<span class="string">&quot;push&quot;</span>,<span class="string">&quot;getMin&quot;</span>,<span class="string">&quot;pop&quot;</span>,<span class="string">&quot;top&quot;</span>,<span class="string">&quot;getMin&quot;</span>]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin(); // <span class="built_in">return</span> -3</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();    // <span class="built_in">return</span> 0</span><br><span class="line">minStack.getMin(); // <span class="built_in">return</span> -2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>-2<sup>31</sup> &lt;&#x3D; val &lt;&#x3D; 2<sup>31</sup> - 1</li>
<li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li>
<li>At most 3 * 10<sup>4</sup> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use a stack to record the min element</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> min;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; minStk;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MinStack</span>() &#123;</span><br><span class="line">        min = INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        stk.<span class="built_in">push</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (val &lt;= min) &#123;</span><br><span class="line">            min = val;</span><br><span class="line">            minStk.<span class="built_in">push</span>(min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stk.<span class="built_in">top</span>() == min) &#123;</span><br><span class="line">            minStk.<span class="built_in">pop</span>();</span><br><span class="line">            min = minStk.<span class="built_in">empty</span>() ? INT_MAX : minStk.<span class="built_in">top</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack* obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pop();</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>1584. Min Cost to Connect All Points</title>
    <url>/2023/09/04/1584-Min-Cost-to-Connect-All-Points/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/min-cost-to-connect-all-points/">1584. Min Cost to Connect All Points</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/union-find//">Union Find</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/minimum-spanning-tree//">Minimum Spanning Tree</a></p>
<p>You are given an array <code>points</code> representing integer coordinates of some points on a 2D-plane, where points[i] &#x3D; [x<sub>i</sub>, y<sub>i</sub>].</p>
<p>The cost of connecting two points [x<sub>i</sub>, y<sub>i</sub>] and [x<sub>j</sub>, y<sub>j</sub>] is the <strong>manhattan distance</strong> between them: |x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|, where <code>|val|</code> denotes the absolute value of <code>val</code>.</p>
<p>Return <em>the minimum cost to make all points connected.</em> All points are connected if there is <strong>exactly one</strong> simple path between any two points.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/08/26/d.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]</span><br><span class="line">Output: 20</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We can connect the points as shown above to get the minimum cost of 20.</span><br><span class="line">Notice that there is a unique path between every pair of points.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: points = [[3,12],[-2,5],[-4,1]]</span><br><span class="line">Output: 18</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= points.length &lt;= 1000</code></li>
<li>-10<sup>6</sup> &lt;&#x3D; x<sub>i</sub>, y<sub>i</sub> &lt;&#x3D; 10<sup>6</sup></li>
<li>All pairs (x<sub>i</sub>, y<sub>i</sub>) are distinct.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Kruskal’s algorithm</li>
<li>Prim’s algorithm</li>
<li>cpp sort performance is worse than priority queue</li>
<li>Use count(number of separarte items) to return early</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<p>Kruskal’s algorithm</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostConnectPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">        <span class="type">int</span> count = points.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; points.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            parent.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; points.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; points.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="type">int</span> distance = <span class="built_in">abs</span>(points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]) + <span class="built_in">abs</span>(points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>]);</span><br><span class="line">                edges.<span class="built_in">push_back</span>(&#123;distance, i, j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">priority_queue <span class="title">pq</span><span class="params">(edges.begin(), edges.end(), greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>() &amp;&amp; count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> edge = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> p = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> q = edge[<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> rootP = <span class="built_in">find</span>(p);</span><br><span class="line">            <span class="type">int</span> rootQ = <span class="built_in">find</span>(q);</span><br><span class="line">            <span class="keyword">if</span> (rootP == rootQ) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent[rootP] = rootQ;</span><br><span class="line">                sum += edge[<span class="number">0</span>];</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[node] != node) &#123;</span><br><span class="line">            parent[node] = <span class="built_in">find</span>(parent[node]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[node];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Prim’s algorithm</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; edges;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostConnectPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = points.<span class="built_in">size</span>();</span><br><span class="line">        edges = vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;(size, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;());</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(size, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">                <span class="type">int</span> distance = <span class="built_in">abs</span>(points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]) + <span class="built_in">abs</span>(points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>]);</span><br><span class="line">                edges[i].<span class="built_in">push_back</span>(&#123;distance, j&#125;);</span><br><span class="line">                edges[j].<span class="built_in">push_back</span>(&#123;distance, i&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cut</span>(<span class="number">0</span>);</span><br><span class="line">        visited[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> edge = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> to = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (visited[to]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> w = edge[<span class="number">0</span>];</span><br><span class="line">            sum += w;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count == size) <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">cut</span>(to);</span><br><span class="line">            visited[to] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge : edges[node]) &#123;</span><br><span class="line">            <span class="type">int</span> to = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!visited[to]) &#123;</span><br><span class="line">                <span class="type">int</span> w = edge[<span class="number">0</span>];</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;w, to&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
        <tag>Minimum Spanning Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1593. Split a String Into the Max Number of Unique Substrings</title>
    <url>/2024/10/21/1593-Split-a-String-Into-the-Max-Number-of-Unique-Substrings/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings/description/?envType=daily-question&envId=2024-10-21">1593. Split a String Into the Max Number of Unique Substrings</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string<code>s</code>, return the maximum number of unique substrings that the given string can be split into.</p>
<p>You can split string<code>s</code> into any list of <strong>non-empty substrings</strong> , where the concatenation of the substrings forms the original string.However, you must split the substrings such that all of them are <strong>unique</strong> .</p>
<p>A <strong>substring</strong>  is a contiguous sequence of characters within a string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;ababccc&quot;</span></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>One way to split maximally is [‘a’, ‘b’, ‘ab’, ‘c’, ‘cc’]. Splitting like [‘a’, ‘b’, ‘a’, ‘b’, ‘c’, ‘cc’] is not valid as you have ‘a’ and ‘b’ multiple times.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aba&quot;</span></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>One way to split maximally is [‘a’, ‘ba’].</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aa&quot;</span></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>It is impossible to split the string any further.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length&lt;= 16</code></li>
<li><code>s</code> contains only lower case English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>back tracking</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_set&lt;string&gt; us;</span><br><span class="line">    <span class="type">int</span> res; string s_;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxUniqueSplit</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        res = INT_MIN; s_ = s;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == s_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, (<span class="type">int</span>)us.<span class="built_in">size</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = index + <span class="number">1</span>; i &lt;= s_.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            string tmp = s_.<span class="built_in">substr</span>(index, i - index);</span><br><span class="line">            <span class="keyword">if</span> (!us.<span class="built_in">contains</span>(tmp)) &#123;</span><br><span class="line">                us.<span class="built_in">insert</span>(tmp);</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">                us.<span class="built_in">erase</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>160. Intersection of Two Linked Lists</title>
    <url>/2023/01/04/160-Intersection-of-Two-Linked-Lists/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">160. Intersection of Two Linked Lists</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p>
<p>Given the heads of two singly linked-lists <code>headA</code> and <code>headB</code>, return <em>the node at which the two lists intersect</em>. If the two linked lists have no intersection at all, return <code>null</code>.</p>
<p>For example, the following two linked lists begin to intersect at node <code>c1</code>:</p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/05/160_statement.png"></p>
<p>The test cases are generated such that there are no cycles anywhere in the entire linked structure.</p>
<p><strong>Note</strong> that the linked lists must <strong>retain their original structure</strong> after the function returns.</p>
<p><strong>Custom Judge:</strong></p>
<p>The inputs to the <strong>judge</strong> are given as follows (your program is <strong>not</strong> given these inputs):</p>
<ul>
<li><code>intersectVal</code> - The value of the node where the intersection occurs. This is <code>0</code> if there is no intersected node.</li>
<li><code>listA</code> - The first linked list.</li>
<li><code>listB</code> - The second linked list.</li>
<li><code>skipA</code> - The number of nodes to skip ahead in <code>listA</code> (starting from the head) to get to the intersected node.</li>
<li><code>skipB</code> - The number of nodes to skip ahead in <code>listB</code> (starting from the head) to get to the intersected node.</li>
</ul>
<p>The judge will then create the linked structure based on these inputs and pass the two heads, <code>headA</code> and <code>headB</code> to your program. If you correctly return the intersected node, then your solution will be <strong>accepted</strong>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">Output: Intersected at &#x27;8&#x27;</span><br><span class="line">Explanation: The intersected node&#x27;s value is 8 (note that this must not be 0 if the two lists intersect).</span><br><span class="line">From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.</span><br><span class="line">- Note that the intersected node&#x27;s value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">Output: Intersected at &#x27;2&#x27;</span><br><span class="line">Explanation: The intersected node&#x27;s value is 2 (note that this must not be 0 if the two lists intersect).</span><br><span class="line">From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">Output: No intersection</span><br><span class="line">Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.</span><br><span class="line">Explanation: The two lists do not intersect, so return null.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes of <code>listA</code> is in the <code>m</code>.</li>
<li>The number of nodes of <code>listB</code> is in the <code>n</code>.</li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 3 * 10<sup>4</sup></li>
<li>1 &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>5</sup></li>
<li><code>0 &lt;= skipA &lt; m</code></li>
<li><code>0 &lt;= skipB &lt; n</code></li>
<li><code>intersectVal</code> is <code>0</code> if <code>listA</code> and <code>listB</code> do not intersect.</li>
<li><code>intersectVal == listA[skipA] == listB[skipB]</code> if <code>listA</code> and <code>listB</code> intersect.</li>
</ul>
<p><strong>Follow up:</strong> Could you write a solution that runs in <code>O(m + n)</code> time and use only <code>O(1)</code> memory?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Link the two lists</li>
<li>what if there’s no intersection? the after link the two lists, nullptr is the intersection</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode* p1 = headA, *p2 = headB;</span><br><span class="line">        <span class="keyword">while</span> (p1 != p2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                p1 = headB;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p1 = p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p2 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                p2 = headA;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p2 = p2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>162. Find Peak Element</title>
    <url>/2023/12/02/162-Find-Peak-Element/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-peak-element/">162. Find Peak Element</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a></p>
<p>A peak element is an element that is strictly greater than its neighbors.</p>
<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to <strong>any of the peaks</strong>.</p>
<p>You may imagine that <code>nums[-1] = nums[n] = -∞</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p>
<p>You must write an algorithm that runs in <code>O(log n)</code> time.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: 3 is a peak element and your <span class="keyword">function</span> should <span class="built_in">return</span> the index number 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,1,3,5,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Your <span class="keyword">function</span> can <span class="built_in">return</span> either index number 1 <span class="built_in">where</span> the peak element is 2, or index number 5 <span class="built_in">where</span> the peak element is 6.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
<li>-2<sup>31</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 2<sup>31</sup> - 1</li>
<li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPeakElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>1602. Find Nearest Right Node in Binary Tree</title>
    <url>/2024/05/30/1602-Find-Nearest-Right-Node-in-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-nearest-right-node-in-binary-tree/description/">1602. Find Nearest Right Node in Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree and a node <code>u</code> in the tree, return the <strong>nearest</strong>  node on the <strong>same level</strong>  that is to the <strong>right</strong>  of <code>u</code>, or return <code>null</code> if <code>u</code> is the rightmost node in its level.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/24/p3.png" style="width: 241px; height: 161px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,null,4,5,6], u = 4</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The nearest node on the same level to the right of node 4 is node 5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/23/p2.png" style="width: 101px; height: 161px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,null,4,2], u = 2</span><br><span class="line">Output: null</span><br><span class="line">Explanation: There are no nodes to the right of 2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^5]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 10^5</code></li>
<li>All values in the tree are <strong>distinct</strong> .</li>
<li><code>u</code> is a node in the binary tree rooted at <code>root</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use targetDepth as a proxy to show the node has been found</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> targetDepth = <span class="number">-1</span>;</span><br><span class="line">    TreeNode* target = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">findNearestRightNode</span><span class="params">(TreeNode* root, TreeNode* u)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, u, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, TreeNode* u, <span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root || target) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (depth == targetDepth) &#123;</span><br><span class="line">            target = root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root == u) &#123;</span><br><span class="line">            targetDepth = depth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, u, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, u, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1609. Even Odd Tree</title>
    <url>/2024/07/08/1609-Even-Odd-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/even-odd-tree/description/">1609. Even Odd Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A binary tree is named <strong>Even-Odd</strong>  if it meets the following conditions:</p>
<ul>
<li>The root of the binary tree is at level index <code>0</code>, its children are at level index <code>1</code>, their children are at level index <code>2</code>, etc.</li>
<li>For every <strong>even-indexed</strong>  level, all nodes at the level have <strong>odd</strong>  integer values in <strong>strictly increasing</strong>  order (from left to right).</li>
<li>For every <b>odd-indexed</b> level, all nodes at the level have <b>even</b> integer values in <strong>strictly decreasing</strong>  order (from left to right).</li>
</ul>
<p>Given the <code>root</code> of a binary tree, return <code>true</code> if the binary tree is <strong>Even-Odd</strong> , otherwise return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/15/sample_1_1966.png" style="width: 362px; height: 229px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: The node values on each level are:</span><br><span class="line">Level 0: [1]</span><br><span class="line">Level 1: [10,4]</span><br><span class="line">Level 2: [3,7,9]</span><br><span class="line">Level 3: [12,8,6,2]</span><br><span class="line">Since levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/15/sample_2_1966.png" style="width: 363px; height: 167px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,4,2,3,3,7]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: The node values on each level are:</span><br><span class="line">Level 0: [5]</span><br><span class="line">Level 1: [4,2]</span><br><span class="line">Level 2: [3,3,7]</span><br><span class="line">Node values <span class="keyword">in</span> level 2 must be <span class="keyword">in</span> strictly increasing order, so the tree is not Even-Odd.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/22/sample_1_333_1966.png" style="width: 363px; height: 167px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,9,1,3,5,7]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: Node values <span class="keyword">in</span> the level 1 should be even integers.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^5]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 10^6</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEvenOddTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        <span class="keyword">if</span> (root)</span><br><span class="line">            q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> val = m ? INT_MIN : INT_MAX;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;val % <span class="number">2</span> != m) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (m &amp;&amp; cur-&gt;val &lt;= val) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!m &amp;&amp; cur-&gt;val &gt;= val) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                val = cur-&gt;val;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            m ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1631. Path With Minimum Effort</title>
    <url>/2023/09/07/1631-Path-With-Minimum-Effort/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/path-with-minimum-effort/">1631. Path With Minimum Effort</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/union-find//">Union Find</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/matrix//">Matrix</a></p>
<p>You are a hiker preparing for an upcoming hike. You are given <code>heights</code>, a 2D array of size <code>rows x columns</code>, where <code>heights[row][col]</code> represents the height of cell <code>(row, col)</code>. You are situated in the top-left cell, <code>(0, 0)</code>, and you hope to travel to the bottom-right cell, <code>(rows-1, columns-1)</code> (i.e., <strong>0-indexed</strong>). You can move <strong>up</strong>, <strong>down</strong>, <strong>left</strong>, or <strong>right</strong>, and you wish to find a route that requires the minimum <strong>effort</strong>.</p>
<p>A route’s <strong>effort</strong> is the <strong>maximum absolute difference</strong>in heights between two consecutive cells of the route.</p>
<p>Return <em>the minimum <strong>effort</strong> required to travel from the top-left cell to the bottom-right cell.</em></p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/04/ex1.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: heights = [[1,2,2],[3,8,2],[5,3,5]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 <span class="keyword">in</span> consecutive cells.</span><br><span class="line">This is better than the route of [1,2,2,2,5], <span class="built_in">where</span> the maximum absolute difference is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/04/ex2.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: heights = [[1,2,3],[3,8,4],[5,3,5]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 <span class="keyword">in</span> consecutive cells, <span class="built_in">which</span> is better than route [1,3,5,3,5].</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/04/ex3.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: This route does not require any effort.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>rows == heights.length</code></li>
<li><code>columns == heights[i].length</code></li>
<li><code>1 &lt;= rows, columns &lt;= 100</code></li>
<li><code>1 &lt;= heights[i][j] &lt;= 10&lt;sup&gt;6&lt;/sup&gt;</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Dijkstra algorithm: BFS with dp table</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumEffortPath</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        m = heights.<span class="built_in">size</span>(); n = heights[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">efforts</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MAX));</span><br><span class="line"></span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line">        pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; point = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> i = point[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> j = point[<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> e = point[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (i == m - <span class="number">1</span> &amp;&amp; j == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e &gt; efforts[i][j]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;points = <span class="built_in">adj</span>(i, j);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> point : points) &#123;</span><br><span class="line">                <span class="type">int</span> nextI = point.first;</span><br><span class="line">                <span class="type">int</span> nextJ = point.second;</span><br><span class="line">                <span class="type">int</span> effort = efforts[nextI][nextJ];</span><br><span class="line">                <span class="type">int</span> newEffort = <span class="built_in">max</span>(<span class="built_in">abs</span>(heights[nextI][nextJ] - heights[i][j]), e);</span><br><span class="line">                <span class="keyword">if</span> (effort &gt; newEffort) &#123;</span><br><span class="line">                    efforts[nextI][nextJ] = newEffort;</span><br><span class="line">                    pq.<span class="built_in">push</span>(&#123;newEffort, nextI, nextJ&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">adj</span>(<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;i - <span class="number">1</span>, j&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; m) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;i + <span class="number">1</span>, j&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;i, j - <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;i, j + <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Search</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Union Find</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>1644. Lowest Common Ancestor of a Binary Tree II</title>
    <url>/2023/08/29/1644-Lowest-Common-Ancestor-of-a-Binary-Tree-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-ii/">1644. Lowest Common Ancestor of a Binary Tree II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary tree, return <em>the lowest common ancestor (LCA) of two given nodes,</em> <code>p</code> <em>and</em> <code>q</code>. If either node <code>p</code> or <code>q</code> <strong>does not exist</strong> in the tree, return <code>null</code>. All values of the nodes in the tree are <strong>unique</strong>.</p>
<p>According to the <strong><a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor">definition of LCA on Wikipedia</a></strong>: “The lowest common ancestor of two nodes <code>p</code> and <code>q</code> in a binary tree <code>T</code> is the lowest node that has both <code>p</code> and <code>q</code> as <strong>descendants</strong> (where we allow <strong>a node to be a descendant of itself</strong>)”. A <strong>descendant</strong> of a node <code>x</code> is a node <code>y</code> that is on the path from node <code>x</code> to some leaf node.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The LCA of nodes 5 and 1 is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The LCA of nodes 5 and 4 is 5\. A node can be a descendant of itself according to the definition of LCA.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10</span><br><span class="line">Output: null</span><br><span class="line">Explanation: Node 10 does not exist <span class="keyword">in</span> the tree, so <span class="built_in">return</span> null.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [1, 10<sup>4</sup>].</li>
<li>-10<sup>9</sup> &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>9</sup></li>
<li>All <code>Node.val</code> are <strong>unique</strong>.</li>
<li><code>p != q</code></li>
</ul>
<p><strong>Follow up:</strong> Can you find the LCA traversing the tree, without checking nodes existence?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>It’s possible that the nodes don’t exist, so we need to check every node, so it’s postorder traverse</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> foundP = <span class="literal">false</span>, foundQ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        TreeNode* res = <span class="built_in">find</span>(root, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!foundP || !foundQ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">find</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        TreeNode* left = <span class="built_in">find</span>(root-&gt;left, p, q);</span><br><span class="line">        TreeNode* right = <span class="built_in">find</span>(root-&gt;right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == p) &#123;</span><br><span class="line">            foundP = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == q) &#123;</span><br><span class="line">            foundQ = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &amp;&amp; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left ? left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1650. Lowest Common Ancestor of a Binary Tree III</title>
    <url>/2023/08/30/1650-Lowest-Common-Ancestor-of-a-Binary-Tree-III/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/">1650. Lowest Common Ancestor of a Binary Tree III</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given two nodes of a binary tree <code>p</code> and <code>q</code>, return <em>their lowest common ancestor (LCA)</em>.</p>
<p>Each node will have a reference to its parent node. The definition for <code>Node</code> is below:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>According to the <strong><a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor">definition of LCA on Wikipedia</a></strong>: “The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow <strong>a node to be a descendant of itself</strong>).”</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The LCA of nodes 5 and 1 is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2], p = 1, q = 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [2, 10<sup>5</sup>].</li>
<li>-10<sup>9</sup> &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>9</sup></li>
<li>All <code>Node.val</code> are <strong>unique</strong>.</li>
<li><code>p != q</code></li>
<li><code>p</code> and <code>q</code> exist in the tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>It’s actually find the intersection of 2 lists</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* parent;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">lowestCommonAncestor</span><span class="params">(Node* p, Node * q)</span> </span>&#123;</span><br><span class="line">        Node *h1 = p, *h2 = q;</span><br><span class="line">        <span class="keyword">while</span> (h1 != h2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h1 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                h1 = q;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                h1 = h1-&gt;parent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (h2 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                h2 = p;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                h2 = h2-&gt;parent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1652. Defuse the Bomb</title>
    <url>/2024/10/22/1652-Defuse-the-Bomb/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/defuse-the-bomb/description/">1652. Defuse the Bomb</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have a bomb to defuse, and your time is running out! Your informer will provide you with a <strong>circular</strong>  array <code>code</code>of length of <code>n</code>and a key <code>k</code>.</p>
<p>To decrypt the code, you must replace every number. All the numbers are replaced <strong>simultaneously</strong>.</p>
<ul>
<li>If <code>k &gt; 0</code>, replace the <code>i^th</code> number with the sum of the <strong>next</strong>  <code>k</code> numbers.</li>
<li>If <code>k &lt; 0</code>, replace the <code>i^th</code> number with the sum of the <strong>previous</strong>  <code>k</code> numbers.</li>
<li>If <code>k == 0</code>, replace the <code>i^th</code> number with <code>0</code>.</li>
</ul>
<p>As <code>code</code> is circular, the next element of <code>code[n-1]</code> is <code>code[0]</code>, and the previous element of <code>code[0]</code> is <code>code[n-1]</code>.</p>
<p>Given the <strong>circular</strong>  array <code>code</code> and an integer key <code>k</code>, return the decrypted code to defuse the bomb!</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: code = [5,7,1,4], k = 3</span><br><span class="line">Output: [12,10,16,13]</span><br><span class="line">Explanation: Each number is replaced by the <span class="built_in">sum</span> of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: code = [1,2,3,4], k = 0</span><br><span class="line">Output: [0,0,0,0]</span><br><span class="line">Explanation: When k is zero, the numbers are replaced by 0.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: code = [2,4,9,3], k = -2</span><br><span class="line">Output: [12,5,6,13]</span><br><span class="line">Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the <span class="built_in">sum</span> is of the **previous**  numbers.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == code.length</code></li>
<li><code>1 &lt;= n&lt;= 100</code></li>
<li><code>1 &lt;= code[i] &lt;= 100</code></li>
<li><code>-(n - 1) &lt;= k &lt;= n - 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">decrypt</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; code, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = code.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!k) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = k &gt; <span class="number">0</span> ? <span class="number">1</span> : n + k, end = k &gt; <span class="number">0</span> ? k : n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            sum += code[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res[i] = sum;</span><br><span class="line">            sum -= code[(start++) % n];</span><br><span class="line">            sum += code[(++end) % n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>1658. Minimum Operations to Reduce X to Zero</title>
    <url>/2023/12/04/1658-Minimum-Operations-to-Reduce-X-to-Zero/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/">1658. Minimum Operations to Reduce X to Zero</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>You are given an integer array <code>nums</code> and an integer <code>x</code>. In one operation, you can either remove the leftmost or the rightmost element from the array <code>nums</code> and subtract its value from <code>x</code>. Note that this <strong>modifies</strong> the array for future operations.</p>
<p>Return <em>the <strong>minimum number</strong> of operations to reduce</em> <code>x</code> <em>to <strong>exactly</strong></em> <code>0</code> <em>if it is possible</em><em>, otherwise, return</em> <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,4,2,3], x = 5</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The optimal solution is to remove the last two elements to reduce x to zero.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,6,7,8,9], x = 4</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,20,1,1,3], x = 10</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations <span class="keyword">in</span> total) to reduce x to zero.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li>1 &lt;&#x3D; x &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>, size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> target = sum - x, left = <span class="number">0</span>, right = <span class="number">0</span>, res = INT_MAX;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (sum &gt; target &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">                    sum -= nums[left];</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, size - right + left - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            right++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == INT_MAX ? <span class="number">-1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Binary Search</tag>
        <tag>Sliding Window</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>167. Two Sum II - Input Array Is Sorted</title>
    <url>/2023/01/19/167-Two-Sum-II-Input-Array-Is-Sorted/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">167. Two Sum II - Input Array Is Sorted</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a></p>
<p>Given a <strong>1-indexed</strong> array of integers <code>numbers</code> that is already <strong><em>sorted in non-decreasing order</em></strong>, find two numbers such that they add up to a specific <code>target</code> number. Let these two numbers be numbers[index<sub>1</sub>] and numbers[index<sub>2</sub>] where 1 &lt;&#x3D; index<sub>1</sub> &lt; index<sub>2</sub> &lt;&#x3D; numbers.length.</p>
<p>Return <em>the indices of the two numbers,</em> index<sub>1</sub> <em>and</em> index<sub>2</sub><em>, <strong>added by one</strong> as an integer array</em> [index<sub>1</sub>, index<sub>2</sub>] <em>of length 2.</em></p>
<p>The tests are generated such that there is <strong>exactly one solution</strong>. You <strong>may not</strong> use the same element twice.</p>
<p>Your solution must use only constant extra space.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: numbers = [2,7,11,15], target = 9</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The <span class="built_in">sum</span> of 2 and 7 is 9\. Therefore, index1 = 1, index2 = 2\. We <span class="built_in">return</span> [1, 2].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: numbers = [2,3,4], target = 6</span><br><span class="line">Output: [1,3]</span><br><span class="line">Explanation: The <span class="built_in">sum</span> of 2 and 4 is 6\. Therefore index1 = 1, index2 = 3\. We <span class="built_in">return</span> [1, 3].</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: numbers = [-1,0], target = -1</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The <span class="built_in">sum</span> of -1 and 0 is -1\. Therefore index1 = 1, index2 = 2\. We <span class="built_in">return</span> [1, 2].</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>2 &lt;&#x3D; numbers.length &lt;&#x3D; 3 * 10<sup>4</sup></li>
<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>
<li><code>numbers</code> is sorted in <strong>non-decreasing order</strong>.</li>
<li><code>-1000 &lt;= target &lt;= 1000</code></li>
<li>The tests are generated such that there is <strong>exactly one solution</strong>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Two pointers, from start and end</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> sum = numbers[left] + numbers[right];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;left + <span class="number">1</span>, right + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1660. Correct a Binary Tree</title>
    <url>/2024/06/19/1660-Correct-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/correct-a-binary-tree/description/">1660. Correct a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have a binary tree with a small defect. There is <strong>exactly one</strong>  invalid node where its right child incorrectly points to another node at the <strong>same depth</strong>  but to the <b>invalid node’s right</b>.</p>
<p>Given the root of the binary tree with this defect, <code>root</code>, return the root of the binary tree after <strong>removing</strong>  this invalid node <strong>and every node underneath it</strong>  (minus the node it incorrectly points to).</p>
<p><strong>Custom testing:</strong></p>
<p>The test input is read as 3 lines:</p>
<ul>
<li><code>TreeNode root</code></li>
<li><code>int fromNode</code> (<strong>not available to</strong> <code>correctBinaryTree</code>)</li>
<li><code>int toNode</code> (<strong>not available to</strong> <code>correctBinaryTree</code>)</li>
</ul>
<p>After the binary tree rooted at <code>root</code> is parsed, the <code>TreeNode</code> with value of <code>fromNode</code> will have its right child pointer pointing to the <code>TreeNode</code> with a value of <code>toNode</code>. Then, <code>root</code> is passed to <code>correctBinaryTree</code>.</p>
<p><strong>Example 1:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/10/22/ex1v2.png" style="width: 250px; height: 177px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3], fromNode = 2, toNode = 3</span><br><span class="line">Output: [1,null,3]</span><br><span class="line">Explanation: The node with value 2 is invalid, so remove it.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/10/22/ex2v3.png" style="width: 350px; height: 255px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4</span><br><span class="line">Output: [8,3,1,null,null,9,4,null,null,5,6]</span><br><span class="line">Explanation: The node with value 7 is invalid, so remove it and the node underneath it, node 2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[3, 10^4]</code>.</li>
<li><code>-10^9 &lt;= Node.val &lt;= 10^9</code></li>
<li>All <code>Node.val</code> are <strong>unique</strong> .</li>
<li><code>fromNode != toNode</code></li>
<li><code>fromNode</code> and <code>toNode</code> will exist in the tree and will be on the same depth.</li>
<li><code>toNode</code> is to the <strong>right</strong>  of <code>fromNode</code>.</li>
<li><code>fromNode.right</code> is <code>null</code> in the initial tree from the test data.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    set&lt;TreeNode*&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">correctBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right &amp;&amp; s.<span class="built_in">contains</span>(root-&gt;right)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">insert</span>(root);</span><br><span class="line"></span><br><span class="line">        root-&gt;right = <span class="built_in">correctBinaryTree</span>(root-&gt;right);</span><br><span class="line">        root-&gt;left = <span class="built_in">correctBinaryTree</span>(root-&gt;left);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>1670. Design Front Middle Back Queue</title>
    <url>/2023/12/15/1670-Design-Front-Middle-Back-Queue/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/design-front-middle-back-queue/">1670. Design Front Middle Back Queue</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/data-stream//">Data Stream</a></p>
<p>Design a queue that supports <code>push</code> and <code>pop</code> operations in the front, middle, and back.</p>
<p>Implement the <code>FrontMiddleBack</code> class:</p>
<ul>
<li><code>FrontMiddleBack()</code> Initializes the queue.</li>
<li><code>void pushFront(int val)</code> Adds <code>val</code> to the <strong>front</strong> of the queue.</li>
<li><code>void pushMiddle(int val)</code> Adds <code>val</code> to the <strong>middle</strong> of the queue.</li>
<li><code>void pushBack(int val)</code> Adds <code>val</code> to the <strong>back</strong> of the queue.</li>
<li><code>int popFront()</code> Removes the <strong>front</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li>
<li><code>int popMiddle()</code> Removes the <strong>middle</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li>
<li><code>int popBack()</code> Removes the <strong>back</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li>
</ul>
<p><strong>Notice</strong> that when there are <strong>two</strong> middle position choices, the operation is performed on the <strong>frontmost</strong> middle position choice. For example:</p>
<ul>
<li>Pushing <code>6</code> into the middle of <code>[1, 2, 3, 4, 5]</code> results in <code>[1, 2, &lt;u&gt;6&lt;/u&gt;, 3, 4, 5]</code>.</li>
<li>Popping the middle from <code>[1, 2, &lt;u&gt;3&lt;/u&gt;, 4, 5, 6]</code> returns <code>3</code> and results in <code>[1, 2, 4, 5, 6]</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[<span class="string">&quot;FrontMiddleBackQueue&quot;</span>, <span class="string">&quot;pushFront&quot;</span>, <span class="string">&quot;pushBack&quot;</span>, <span class="string">&quot;pushMiddle&quot;</span>, <span class="string">&quot;pushMiddle&quot;</span>, <span class="string">&quot;popFront&quot;</span>, <span class="string">&quot;popMiddle&quot;</span>, <span class="string">&quot;popMiddle&quot;</span>, <span class="string">&quot;popBack&quot;</span>, <span class="string">&quot;popFront&quot;</span>]</span><br><span class="line">[[], [1], [2], [3], [4], [], [], [], [], []]</span><br><span class="line">Output:</span><br><span class="line">[null, null, null, null, null, 1, 3, 4, 2, -1]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">FrontMiddleBackQueue q = new FrontMiddleBackQueue();</span><br><span class="line">q.pushFront(1);   // [1]</span><br><span class="line">q.pushBack(2);    // [1, 2]</span><br><span class="line">q.pushMiddle(3);  // [1, 3, 2]</span><br><span class="line">q.pushMiddle(4);  // [1, 4, 3, 2]</span><br><span class="line">q.popFront();     // <span class="built_in">return</span> 1 -&gt; [4, 3, 2]</span><br><span class="line">q.popMiddle();    // <span class="built_in">return</span> 3 -&gt; [4, 2]</span><br><span class="line">q.popMiddle();    // <span class="built_in">return</span> 4 -&gt; [2]</span><br><span class="line">q.popBack();      // <span class="built_in">return</span> 2 -&gt; []</span><br><span class="line">q.popFront();     // <span class="built_in">return</span> -1 -&gt; [] (The queue is empty)</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; val &lt;&#x3D; 10<sup>9</sup></li>
<li>At most <code>1000</code> calls will be made to <code>pushFront</code>, <code>pushMiddle</code>, <code>pushBack</code>, <code>popFront</code>, <code>popMiddle</code>, and <code>popBack</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use 2 queues</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FrontMiddleBackQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; left;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; right;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FrontMiddleBackQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushFront</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        left.<span class="built_in">push_front</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">size</span>() &gt; right.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            right.<span class="built_in">push_front</span>(left.<span class="built_in">back</span>());</span><br><span class="line">            left.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushMiddle</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">size</span>() == right.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            right.<span class="built_in">push_front</span>(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left.<span class="built_in">push_back</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushBack</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        right.<span class="built_in">push_back</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">size</span>() + <span class="number">2</span> == right.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            left.<span class="built_in">push_back</span>(right.<span class="built_in">front</span>());</span><br><span class="line">            right.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">popFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (right.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> result = right.<span class="built_in">front</span>();</span><br><span class="line">            right.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result = left.<span class="built_in">front</span>();</span><br><span class="line">        left.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">size</span>() + <span class="number">2</span> == right.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> tmp = right.<span class="built_in">front</span>();</span><br><span class="line">            right.<span class="built_in">pop_front</span>();</span><br><span class="line">            left.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">popMiddle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (right.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right.<span class="built_in">size</span>() &gt; left.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> result = right.<span class="built_in">front</span>();</span><br><span class="line">            right.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result = left.<span class="built_in">back</span>();</span><br><span class="line">        left.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">popBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (right.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result = right.<span class="built_in">back</span>();</span><br><span class="line">        right.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span> (right.<span class="built_in">size</span>() &lt; left.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            right.<span class="built_in">push_front</span>(left.<span class="built_in">back</span>());</span><br><span class="line">            left.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FrontMiddleBackQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FrontMiddleBackQueue* obj = new FrontMiddleBackQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;pushFront(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pushMiddle(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pushBack(val);</span></span><br><span class="line"><span class="comment"> * int param_4 = obj-&gt;popFront();</span></span><br><span class="line"><span class="comment"> * int param_5 = obj-&gt;popMiddle();</span></span><br><span class="line"><span class="comment"> * int param_6 = obj-&gt;popBack();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Linked List</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
        <tag>Data Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>1676. Lowest Common Ancestor of a Binary Tree IV</title>
    <url>/2023/08/29/1676-Lowest-Common-Ancestor-of-a-Binary-Tree-IV/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iv/">1676. Lowest Common Ancestor of a Binary Tree IV</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary tree and an array of <code>TreeNode</code> objects <code>nodes</code>, return <em>the lowest common ancestor (LCA) of <strong>all the nodes</strong> in</em> <code>nodes</code>. All the nodes will exist in the tree, and all values of the tree’s nodes are <strong>unique</strong>.</p>
<p>Extending the <strong><a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor">definition of LCA on Wikipedia</a></strong>: “The lowest common ancestor of <code>n</code> nodes p<sub>1</sub>, p<sub>2</sub>, …, p<sub>n</sub> in a binary tree <code>T</code> is the lowest node that has every p<sub>i</sub> as a <strong>descendant</strong> (where we allow <strong>a node to be a descendant of itself</strong>) for every valid <code>i</code>“. A <strong>descendant</strong> of a node <code>x</code> is a node <code>y</code> that is on the path from node <code>x</code> to some leaf node.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The lowest common ancestor of nodes 4 and 7 is node 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The lowest common ancestor of a single node is the node itself.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [1, 10<sup>4</sup>].</li>
<li>-10<sup>9</sup> &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>9</sup></li>
<li>All <code>Node.val</code> are <strong>unique</strong>.</li>
<li>All <code>nodes[i]</code> will exist in the tree.</li>
<li>All <code>nodes[i]</code> are distinct.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Since every node exists, we can just return when we find the first item in the list</li>
<li>Provided an array of nodes, but it’s the same as finding the LCA of two nodes</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, vector&lt;TreeNode*&gt; &amp;nodes)</span> </span>&#123;</span><br><span class="line">        <span class="function">set&lt;TreeNode*&gt; <span class="title">values</span><span class="params">(nodes.begin(), nodes.end())</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(root, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">find</span><span class="params">(TreeNode* root, set&lt;TreeNode*&gt; &amp;values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (values.<span class="built_in">contains</span>(root)) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode* left = <span class="built_in">find</span>(root-&gt;left, values);</span><br><span class="line">        TreeNode* right = <span class="built_in">find</span>(root-&gt;right, values);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (left &amp;&amp; right) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left ? left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>169. Majority Element</title>
    <url>/2023/12/26/169-Majority-Element/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/majority-element/">169. Majority Element</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/counting//">Counting</a></p>
<p>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.</p>
<p>The majority element is the element that appears more than <code>⌊n / 2⌋</code> times. You may assume that the majority element always exists in the array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,2,1,1,1,2,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 5 * 10<sup>4</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<p><strong>Follow-up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use a count variable to solve it in O(1) space</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> target = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                target = num;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == target) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Divide and Conquer</tag>
        <tag>Sorting</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>173. Binary Search Tree Iterator</title>
    <url>/2024/07/16/173-Binary-Search-Tree-Iterator/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-search-tree-iterator/description/">173. Binary Search Tree Iterator</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement the <code>BSTIterator</code> class that represents an iterator over the <strong>in-order traversal</strong> of a binary search tree (BST):</p>
<ul>
<li><code>BSTIterator(TreeNode root)</code> Initializes an object of the <code>BSTIterator</code> class. The <code>root</code> of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</li>
<li><code>boolean hasNext()</code> Returns <code>true</code> if there exists a number in the traversal to the right of the pointer, otherwise returns <code>false</code>.</li>
<li><code>int next()</code> Moves the pointer to the right, then returns the number at the pointer.</li>
</ul>
<p>Notice that by initializing the pointer to a non-existent smallest number, the first call to <code>next()</code> will return the smallest element in the BST.</p>
<p>You may assume that <code>next()</code> calls will always be valid. That is, there will be at least a next number in the in-order traversal when <code>next()</code> is called.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png" style="width: 189px; height: 178px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line"></span><br><span class="line">[<span class="string">&quot;BSTIterator&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;hasNext&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;hasNext&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;hasNext&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;hasNext&quot;</span>]</span><br><span class="line">[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]</span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line">[null, 3, 7, <span class="literal">true</span>, 9, <span class="literal">true</span>, 15, <span class="literal">true</span>, 20, <span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line"></span><br><span class="line">BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);</span><br><span class="line">bSTIterator.next();    // <span class="built_in">return</span> 3</span><br><span class="line">bSTIterator.next();    // <span class="built_in">return</span> 7</span><br><span class="line">bSTIterator.hasNext(); // <span class="built_in">return</span> True</span><br><span class="line">bSTIterator.next();    // <span class="built_in">return</span> 9</span><br><span class="line">bSTIterator.hasNext(); // <span class="built_in">return</span> True</span><br><span class="line">bSTIterator.next();    // <span class="built_in">return</span> 15</span><br><span class="line">bSTIterator.hasNext(); // <span class="built_in">return</span> True</span><br><span class="line">bSTIterator.next();    // <span class="built_in">return</span> 20</span><br><span class="line">bSTIterator.hasNext(); // <span class="built_in">return</span> False</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^5]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 10^6</code></li>
<li>At most <code>10^5</code> calls will be made to <code>hasNext</code>, and <code>next</code>.</li>
</ul>
<p><strong>Follow up:</strong></p>
<ul>
<li>Could you implement <code>next()</code> and <code>hasNext()</code> to run in average <code>O(1)</code> time and use<code>O(h)</code> memory, where <code>h</code> is the height of the tree?</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* root_;</span><br><span class="line">    stack&lt;TreeNode*&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BSTIterator</span>(TreeNode* root) &#123;</span><br><span class="line">        root_ = root;</span><br><span class="line">        <span class="built_in">pushLeft</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushLeft</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">        s.<span class="built_in">push</span>(node);</span><br><span class="line">        <span class="keyword">while</span> (node-&gt;left) &#123;</span><br><span class="line">            node = node-&gt;left;</span><br><span class="line">            s.<span class="built_in">push</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeNode* node = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right) &#123;</span><br><span class="line">            <span class="built_in">pushLeft</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !s.<span class="built_in">empty</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your BSTIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * BSTIterator* obj = new BSTIterator(root);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;next();</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;hasNext();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
        <tag>Binary Search Tree</tag>
        <tag>Design</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>174. Dungeon Game</title>
    <url>/2024/08/02/174-Dungeon-Game/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/dungeon-game/description/">174. Dungeon Game</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The demons had captured the princess and imprisoned her in <strong>the bottom-right corner</strong>  of a <code>dungeon</code>. The <code>dungeon</code> consists of <code>m x n</code> rooms laid out in a 2D grid. Our valiant knight was initially positioned in <strong>the top-left room</strong>  and must fight his way through <code>dungeon</code> to rescue the princess.</p>
<p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to <code>0</code> or below, he dies immediately.</p>
<p>Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight’s health (represented by positive integers).</p>
<p>To reach the princess as quickly as possible, the knight decides to move only <strong>rightward</strong>  or <strong>downward</strong>  in each step.</p>
<p>Return the knight’s minimum initial health so that he can rescue the princess.</p>
<p><strong>Note</strong>  that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/13/dungeon-grid-1.jpg" style="width: 253px; height: 253px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: The initial health of the knight must be at least 7 <span class="keyword">if</span> he follows the optimal path: RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: dungeon = [[0]]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == dungeon.length</code></li>
<li><code>n == dungeon[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 200</code></li>
<li><code>-1000 &lt;= dungeon[i][j] &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]:</span></span><br><span class="line">    <span class="comment">//  the number need at i,j to make the knight survive,</span></span><br><span class="line">    <span class="comment">//  not only in this cell but also in the later cells</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculateMinimumHP</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dungeon)</span> </span>&#123;</span><br><span class="line">        m = dungeon.<span class="built_in">size</span>();</span><br><span class="line">        n = dungeon[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MIN));</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="number">0</span>, dungeon);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dungeon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= m || j &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == m - <span class="number">1</span> &amp;&amp; j == n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">1</span>, -dungeon[i][j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] != INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> down = <span class="built_in">traverse</span>(i + <span class="number">1</span>, j, dungeon);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">traverse</span>(i, j + <span class="number">1</span>, dungeon);</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">max</span>(<span class="number">1</span>, <span class="built_in">min</span>(down, right) - dungeon[i][j]);</span><br><span class="line">        dp[i][j] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>18. 4Sum</title>
    <url>/2023/12/01/18-4Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/4sum/">18. 4Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a></p>
<p>Given an array <code>nums</code> of <code>n</code> integers, return <em>an array of all the <strong>unique</strong> quadruplets</em> <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p>
<ul>
<li><code>0 &lt;= a, b, c, d &lt; n</code></li>
<li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are <strong>distinct</strong>.</li>
<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>
</ul>
<p>You may return the answer in <strong>any order</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,0,-1,0,-2,2], target = 0</span><br><span class="line">Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,2,2,2,2], target = 8</span><br><span class="line">Output: [[2,2,2,2]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 200</code></li>
<li>-10<sup>9</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; target &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use nSum approach next time</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="built_in">threeSum</span>(res, nums, i, target - nums[i]);</span><br><span class="line">            <span class="keyword">while</span> (i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">threeSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;res, vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> index, <span class="type">long</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = index + <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="built_in">twoSum</span>(res, nums, nums[index], i, target - nums[i]);</span><br><span class="line">            <span class="keyword">while</span> (i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">twoSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;res, vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> num1, <span class="type">int</span> index, <span class="type">long</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = index + <span class="number">1</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> lvalue = nums[left], rvalue = nums[right], sum = nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == rvalue) right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == lvalue) left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;num1, nums[index], lvalue, rvalue&#125;);</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == lvalue) left++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == rvalue) right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1796D. Maximum Subarray</title>
    <url>/2024/06/02/1796D-Maximum-Subarray/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1796/D">D. Maximum Subarray</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 T(≤1e4) 表示 T 组数据。所有数据的 n 之和 ≤2e5。<br>每组数据输入 n(1≤n≤2e5) k(0≤k≤min(20,n)) x(-1e9≤x≤1e9) 和长为 n 的数组 a(-1e9≤a[i]≤1e9)。</p>
<p>你需要把 a 中恰好 k 个数增加 x，其余数减少 x。<br>该操作必须恰好执行一次。<br>在最优操作下，a 的最大连续子数组和的最大值是多少？<br>注意子数组可以是空的，元素和为 0。</p>
<p>进阶：你能做到 O(n) 吗？复杂度和 k 无关。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>two cases: the subarray’s length is bigger than k or the subarray’s length is less than k</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x = -x;</span><br><span class="line">        k = n - k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">        num -= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// the case subarray is bigger than k</span></span><br><span class="line">    <span class="comment">// we need to find a minimum of k numbers to add value to</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">preSum</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    deque&lt;<span class="type">long</span> <span class="type">long</span>&gt; minQ;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = LLONG_MIN;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; preSum.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (right - k &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!minQ.<span class="built_in">empty</span>() &amp;&amp; preSum[right - k] &lt; minQ.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                minQ.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            minQ.<span class="built_in">push_back</span>(preSum[right - k]);</span><br><span class="line">            res = <span class="built_in">max</span>(res, preSum[right] - minQ.<span class="built_in">front</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    res += <span class="number">2</span> * (<span class="type">long</span> <span class="type">long</span>) k * x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the case subarray size is less than or equal to k</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num: nums) &#123;</span><br><span class="line">        num += <span class="number">2</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line">    preSum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    minQ.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">while</span> (right &lt; preSum.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!minQ.<span class="built_in">empty</span>() &amp;&amp; preSum[right] &lt; minQ.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            minQ.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        minQ.<span class="built_in">push_back</span>(preSum[right++]);</span><br><span class="line">        <span class="keyword">if</span> (right - left &gt; k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (minQ.<span class="built_in">front</span>() == preSum[left]) &#123;</span><br><span class="line">                minQ.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!minQ.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, minQ.<span class="built_in">back</span>() - minQ.<span class="built_in">front</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; (res &lt; <span class="number">0</span> ? <span class="number">0</span> : res) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tc;</span><br><span class="line">    in &gt;&gt; tc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= tc; t++) &#123;</span><br><span class="line">        <span class="type">int</span> n, k, x;</span><br><span class="line">        in &gt;&gt; n &gt;&gt; k &gt;&gt; x;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> num;</span><br><span class="line">            in &gt;&gt; num;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">solve</span>(n, nums, k, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
        <tag>data structures</tag>
        <tag>dp</tag>
        <tag>two pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1804. Implement Trie II (Prefix Tree)</title>
    <url>/2023/10/10/1804-Implement-Trie-II-Prefix-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/implement-trie-ii-prefix-tree/">1804. Implement Trie II (Prefix Tree)</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/trie//">Trie</a></p>
<p>A <a href="https://en.wikipedia.org/wiki/Trie"><strong>trie</strong></a> (pronounced as “try”) or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>
<p>Implement the Trie class:</p>
<ul>
<li><code>Trie()</code> Initializes the trie object.</li>
<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>
<li><code>int countWordsEqualTo(String word)</code> Returns the number of instances of the string <code>word</code> in the trie.</li>
<li><code>int countWordsStartingWith(String prefix)</code> Returns the number of strings in the trie that have the string <code>prefix</code> as a prefix.</li>
<li><code>void erase(String word)</code> Erases the string <code>word</code> from the trie.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;Trie&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;countWordsEqualTo&quot;</span>, <span class="string">&quot;countWordsStartingWith&quot;</span>, <span class="string">&quot;erase&quot;</span>, <span class="string">&quot;countWordsEqualTo&quot;</span>, <span class="string">&quot;countWordsStartingWith&quot;</span>, <span class="string">&quot;erase&quot;</span>, <span class="string">&quot;countWordsStartingWith&quot;</span>]</span><br><span class="line">[[], [<span class="string">&quot;apple&quot;</span>], [<span class="string">&quot;apple&quot;</span>], [<span class="string">&quot;apple&quot;</span>], [<span class="string">&quot;app&quot;</span>], [<span class="string">&quot;apple&quot;</span>], [<span class="string">&quot;apple&quot;</span>], [<span class="string">&quot;app&quot;</span>], [<span class="string">&quot;apple&quot;</span>], [<span class="string">&quot;app&quot;</span>]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 2, 2, null, 1, 1, null, 0]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">Trie trie = new Trie();</span><br><span class="line">trie.insert(<span class="string">&quot;apple&quot;</span>);               // Inserts <span class="string">&quot;apple&quot;</span>.</span><br><span class="line">trie.insert(<span class="string">&quot;apple&quot;</span>);               // Inserts another <span class="string">&quot;apple&quot;</span>.</span><br><span class="line">trie.countWordsEqualTo(<span class="string">&quot;apple&quot;</span>);    // There are two instances of <span class="string">&quot;apple&quot;</span> so <span class="built_in">return</span> 2.</span><br><span class="line">trie.countWordsStartingWith(<span class="string">&quot;app&quot;</span>); // <span class="string">&quot;app&quot;</span> is a prefix of <span class="string">&quot;apple&quot;</span> so <span class="built_in">return</span> 2.</span><br><span class="line">trie.erase(<span class="string">&quot;apple&quot;</span>);                // Erases one <span class="string">&quot;apple&quot;</span>.</span><br><span class="line">trie.countWordsEqualTo(<span class="string">&quot;apple&quot;</span>);    // Now there is only one instance of <span class="string">&quot;apple&quot;</span> so <span class="built_in">return</span> 1.</span><br><span class="line">trie.countWordsStartingWith(<span class="string">&quot;app&quot;</span>); // <span class="built_in">return</span> 1</span><br><span class="line">trie.erase(<span class="string">&quot;apple&quot;</span>);                // Erases <span class="string">&quot;apple&quot;</span>. Now the trie is empty.</span><br><span class="line">trie.countWordsStartingWith(<span class="string">&quot;app&quot;</span>); // <span class="built_in">return</span> 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>
<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>
<li>At most 3 * 10<sup>4</sup> calls <strong>in total</strong> will be made to <code>insert</code>, <code>countWordsEqualTo</code>, <code>countWordsStartingWith</code>, and <code>erase</code>.</li>
<li>It is guaranteed that for any function call to <code>erase</code>, the string <code>word</code> will exist in the trie.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Trie</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        vector&lt;TrieNode*&gt; children;</span><br><span class="line">        <span class="built_in">TrieNode</span>() &#123;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            children = <span class="built_in">vector</span>&lt;TrieNode*&gt;(<span class="number">26</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TrieNode* root;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Trie</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countWordsEqualTo</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countWordsStartingWith</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : prefix) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TrieNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (TrieNode* child : root-&gt;children) &#123;</span><br><span class="line">            sum += <span class="built_in">traverse</span>(child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum + root-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie* obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj-&gt;insert(word);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;countWordsEqualTo(word);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;countWordsStartingWith(prefix);</span></span><br><span class="line"><span class="comment"> * obj-&gt;erase(word);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Design</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>1834. Single-Threaded CPU</title>
    <url>/2023/11/07/1834-Single-Threaded-CPU/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/single-threaded-cpu/">1834. Single-Threaded CPU</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a></p>
<p>You are given <code>n</code>​​​​​​ tasks labeled from <code>0</code> to <code>n - 1</code> represented by a 2D integer array <code>tasks</code>, where tasks[i] &#x3D; [enqueueTime<sub>i</sub>, processingTime<sub>i</sub>] means that the i<sup>​​​​​​th</sup>​​​​ task will be available to process at enqueueTime<sub>i</sub> and will take processingTime<sub>i</sub>to finish processing.</p>
<p>You have a single-threaded CPU that can process <strong>at most one</strong> task at a time and will act in the following way:</p>
<ul>
<li>If the CPU is idle and there are no available tasks to process, the CPU remains idle.</li>
<li>If the CPU is idle and there are available tasks, the CPU will choose the one with the <strong>shortest processing time</strong>. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.</li>
<li>Once a task is started, the CPU will <strong>process the entire task</strong> without stopping.</li>
<li>The CPU can finish a task then start a new one instantly.</li>
</ul>
<p>Return <em>the order in which the CPU will process the tasks.</em></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tasks = [[1,2],[2,4],[3,2],[4,1]]</span><br><span class="line">Output: [0,2,3,1]</span><br><span class="line">Explanation: The events go as follows:</span><br><span class="line">- At time = 1, task 0 is available to process. Available tasks = &#123;0&#125;.</span><br><span class="line">- Also at time = 1, the idle CPU starts processing task 0\. Available tasks = &#123;&#125;.</span><br><span class="line">- At time = 2, task 1 is available to process. Available tasks = &#123;1&#125;.</span><br><span class="line">- At time = 3, task 2 is available to process. Available tasks = &#123;1, 2&#125;.</span><br><span class="line">- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = &#123;1&#125;.</span><br><span class="line">- At time = 4, task 3 is available to process. Available tasks = &#123;1, 3&#125;.</span><br><span class="line">- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = &#123;1&#125;.</span><br><span class="line">- At time = 6, the CPU finishes task 3 and starts processing task 1\. Available tasks = &#123;&#125;.</span><br><span class="line">- At time = 10, the CPU finishes task 1 and becomes idle.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]</span><br><span class="line">Output: [4,3,2,0,1]</span><br><span class="line">Explanation: The events go as follows:</span><br><span class="line">- At time = 7, all the tasks become available. Available tasks = &#123;0,1,2,3,4&#125;.</span><br><span class="line">- Also at time = 7, the idle CPU starts processing task 4\. Available tasks = &#123;0,1,2,3&#125;.</span><br><span class="line">- At time = 9, the CPU finishes task 4 and starts processing task 3\. Available tasks = &#123;0,1,2&#125;.</span><br><span class="line">- At time = 13, the CPU finishes task 3 and starts processing task 2\. Available tasks = &#123;0,1&#125;.</span><br><span class="line">- At time = 18, the CPU finishes task 2 and starts processing task 0\. Available tasks = &#123;1&#125;.</span><br><span class="line">- At time = 28, the CPU finishes task 0 and starts processing task 1\. Available tasks = &#123;&#125;.</span><br><span class="line">- At time = 40, the CPU finishes task 1 and becomes idle.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>tasks.length == n</code></li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>5</sup></li>
<li>1 &lt;&#x3D; enqueueTime<sub>i</sub>, processingTime<sub>i</sub> &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Sort first, then use priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; tasks)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; triples;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tasks.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            triples.<span class="built_in">push_back</span>(&#123;tasks[i][<span class="number">0</span>], tasks[i][<span class="number">1</span>], i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(triples.<span class="built_in">begin</span>(), triples.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> cur = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (res.<span class="built_in">size</span>() &lt; tasks.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> pair = pq.<span class="built_in">top</span>();</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">                res.<span class="built_in">push_back</span>(pair[<span class="number">1</span>]);</span><br><span class="line">                cur = cur + pair[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = triples[i][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; triples.<span class="built_in">size</span>() &amp;&amp; triples[i][<span class="number">0</span>] &lt;= cur; i++) &#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;triples[i][<span class="number">1</span>], triples[i][<span class="number">2</span>]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
      </tags>
  </entry>
  <entry>
    <title>1836. Remove Duplicates From an Unsorted Linked List</title>
    <url>/2023/11/11/1836-Remove-Duplicates-From-an-Unsorted-Linked-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/remove-duplicates-from-an-unsorted-linked-list/">1836. Remove Duplicates From an Unsorted Linked List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a></p>
<p>Given the <code>head</code> of a linked list, find all the values that appear <strong>more than once</strong> in the list and delete the nodes that have any of those values.</p>
<p>Return <em>the linked list after the deletions.</em></p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/04/21/tmp-linked-list.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,2]</span><br><span class="line">Output: [1,3]</span><br><span class="line">Explanation: 2 appears twice <span class="keyword">in</span> the linked list, so all 2<span class="string">&#x27;s should be deleted. After deleting all 2&#x27;</span>s, we are left with [1,3].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/04/21/tmp-linked-list-1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [2,1,1,2]</span><br><span class="line">Output: []</span><br><span class="line">Explanation: 2 and 1 both appear twice. All the elements should be deleted.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/04/21/tmp-linked-list-2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [3,2,2,1,3,2,4]</span><br><span class="line">Output: [1,4]</span><br><span class="line">Explanation: 3 appears twice and 2 appears three <span class="built_in">times</span>. After deleting all 3<span class="string">&#x27;s and 2&#x27;</span>s, we are left with [1,4].</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is in the range [1, 10<sup>5</sup>]</li>
<li>1 &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>5</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>two pointers</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicatesUnsorted</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            m[p-&gt;val]++;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>; p = &amp;dummy;</span><br><span class="line">        ListNode *q = head;</span><br><span class="line">        <span class="keyword">while</span> (q) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m[q-&gt;val] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p-&gt;next = q;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>1843E. Tracking Segments</title>
    <url>/2024/06/02/1843E-Tracking-Segments/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1843/E">E. Tracking Segments</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 T(≤1e4) 表示 T 组数据。所有数据的 n 之和 ≤1e5。<br>对于每组数据：<br>一开始，有一个长为 n 的全 0 数组 a，下标从 1 开始。<br>输入 n m(1≤m≤n≤1e5) 以及 m 个非空连续子数组的左右端点 L R。<br>然后输入 q(1≤q≤n) 和 q 个操作，每个操作输入一个下标 p，表示把 a[p] 变成 1。保证所有 p 互不相同。</p>
<p>如果一个子数组中的 1 的个数比 0 多，则称这个子数组是优美的。<br>输入的 q 个操作，按照输入顺序一个一个地执行。<br>至少执行多少个操作，可以使 m 个子数组中有优美子数组？<br>如果执行完了也没有优美子数组，输出 -1。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary search and preSum</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">beautiful</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> mid, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; segments, vector&lt;<span class="type">int</span>&gt;&amp; ops)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= mid; i++) &#123;</span><br><span class="line">        nums[ops[i] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; s : segments) &#123;</span><br><span class="line">        <span class="type">int</span> l = s.first - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> r = s.second;</span><br><span class="line">        <span class="type">int</span> length = r - l;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * (preSum[r] - preSum[l]) &gt; length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; segments, vector&lt;<span class="type">int</span>&gt;&amp; ops)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = ops.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">beautiful</span>(n, mid, segments, ops)) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; (left == ops.<span class="built_in">size</span>() ? <span class="number">-1</span> : left + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tc;</span><br><span class="line">    in &gt;&gt; tc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= tc; t++) &#123;</span><br><span class="line">        <span class="type">int</span> m, n;</span><br><span class="line">        in &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; segments;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> l, r;</span><br><span class="line">            in &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            segments.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> q;</span><br><span class="line">        in &gt;&gt; q;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ops;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            in &gt;&gt; x;</span><br><span class="line">            ops.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">solve</span>(n, segments, ops);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>binary search</tag>
        <tag>data structures</tag>
        <tag>two pointers</tag>
        <tag>brute force</tag>
      </tags>
  </entry>
  <entry>
    <title>1845. Seat Reservation Manager</title>
    <url>/2023/11/06/1845-Seat-Reservation-Manager/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/seat-reservation-manager/">1845. Seat Reservation Manager</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a></p>
<p>Design a system that manages the reservation state of <code>n</code> seats that are numbered from <code>1</code> to <code>n</code>.</p>
<p>Implement the <code>SeatManager</code> class:</p>
<ul>
<li><code>SeatManager(int n)</code> Initializes a <code>SeatManager</code> object that will manage <code>n</code> seats numbered from <code>1</code> to <code>n</code>. All seats are initially available.</li>
<li><code>int reserve()</code> Fetches the <strong>smallest-numbered</strong> unreserved seat, reserves it, and returns its number.</li>
<li><code>void unreserve(int seatNumber)</code> Unreserves the seat with the given <code>seatNumber</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;SeatManager&quot;</span>, <span class="string">&quot;reserve&quot;</span>, <span class="string">&quot;reserve&quot;</span>, <span class="string">&quot;unreserve&quot;</span>, <span class="string">&quot;reserve&quot;</span>, <span class="string">&quot;reserve&quot;</span>, <span class="string">&quot;reserve&quot;</span>, <span class="string">&quot;reserve&quot;</span>, <span class="string">&quot;unreserve&quot;</span>]</span><br><span class="line">[[5], [], [], [2], [], [], [], [], [5]]</span><br><span class="line">Output</span><br><span class="line">[null, 1, 2, null, 2, 3, 4, 5, null]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.</span><br><span class="line">seatManager.reserve();    // All seats are available, so <span class="built_in">return</span> the lowest numbered seat, <span class="built_in">which</span> is 1.</span><br><span class="line">seatManager.reserve();    // The available seats are [2,3,4,5], so <span class="built_in">return</span> the lowest of them, <span class="built_in">which</span> is 2.</span><br><span class="line">seatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].</span><br><span class="line">seatManager.reserve();    // The available seats are [2,3,4,5], so <span class="built_in">return</span> the lowest of them, <span class="built_in">which</span> is 2.</span><br><span class="line">seatManager.reserve();    // The available seats are [3,4,5], so <span class="built_in">return</span> the lowest of them, <span class="built_in">which</span> is 3.</span><br><span class="line">seatManager.reserve();    // The available seats are [4,5], so <span class="built_in">return</span> the lowest of them, <span class="built_in">which</span> is 4.</span><br><span class="line">seatManager.reserve();    // The only available seat is seat 5, so <span class="built_in">return</span> 5.</span><br><span class="line">seatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>5</sup></li>
<li><code>1 &lt;= seatNumber &lt;= n</code></li>
<li>For each call to <code>reserve</code>, it is guaranteed that there will be at least one unreserved seat.</li>
<li>For each call to <code>unreserve</code>, it is guaranteed that <code>seatNumber</code> will be reserved.</li>
<li>At most 10<sup>5</sup> calls <strong>in total</strong> will be made to <code>reserve</code> and <code>unreserve</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SeatManager</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SeatManager</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reserve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = pq.<span class="built_in">top</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unreserve</span><span class="params">(<span class="type">int</span> seatNumber)</span> </span>&#123;</span><br><span class="line">        pq.<span class="built_in">push</span>(seatNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your SeatManager object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * SeatManager* obj = new SeatManager(n);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;reserve();</span></span><br><span class="line"><span class="comment"> * obj-&gt;unreserve(seatNumber);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Heap (Priority Queue)</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>187. Repeated DNA Sequences</title>
    <url>/2023/01/25/187-Repeated-DNA-Sequences/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/repeated-dna-sequences/">187. Repeated DNA Sequences</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/bit-manipulation/">Bit Manipulation</a>, <a href="https://leetcode.com/tag/sliding-window/">Sliding Window</a>, <a href="https://leetcode.com/tag/rolling-hash/">Rolling Hash</a>, <a href="https://leetcode.com/tag/hash-function/">Hash Function</a></p>
<p>The <strong>DNA sequence</strong> is composed of a series of nucleotides abbreviated as <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, and <code>&#39;T&#39;</code>.</p>
<ul>
<li>For example, <code>&quot;ACGAATTCCG&quot;</code> is a <strong>DNA sequence</strong>.</li>
</ul>
<p>When studying <strong>DNA</strong>, it is useful to identify repeated sequences within the DNA.</p>
<p>Given a string <code>s</code> that represents a <strong>DNA sequence</strong>, return all the <strong><code>10</code>-letter-long</strong> sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in <strong>any order</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&quot;</span><br><span class="line">Output: [&quot;AAAAACCCCC&quot;,&quot;CCCCCAAAAA&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;AAAAAAAAAAAAA&quot;</span><br><span class="line">Output: [&quot;AAAAAAAAAA&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>s[i]</code> is either <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, or <code>&#39;T&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Rabin karb algorithm</li>
<li>Make the string a int number(base number 4)</li>
<li>Use a set to represent the results first, then transform it to vector to return</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findRepeatedDnaSequences</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;string&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findRepeatedDnaSequences</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                    num = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line">                    num = <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">                    num = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, len = s.<span class="built_in">size</span>(), sum = <span class="number">0</span>;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; exist;</span><br><span class="line">        set&lt;string&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            <span class="type">int</span> num = nums[right++];</span><br><span class="line">            sum = sum * <span class="number">4</span> + num;</span><br><span class="line">            <span class="keyword">if</span> (right - left == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exist.<span class="built_in">count</span>(sum)) &#123;</span><br><span class="line">                    res.<span class="built_in">insert</span>(s.<span class="built_in">substr</span>(left, right - left));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    exist.<span class="built_in">insert</span>(sum);</span><br><span class="line">                &#125;</span><br><span class="line">                sum -= nums[left++] * <span class="built_in">pow</span>(<span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;string&gt;(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
        <tag>Bit Manipulation</tag>
        <tag>Rolling Hash</tag>
        <tag>Hash Function</tag>
      </tags>
  </entry>
  <entry>
    <title>1873F. Money Trees</title>
    <url>/2024/06/03/1873F-Money-Trees/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1873/F">F. Money Trees</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 T(≤1e3) 表示 T 组数据。所有数据的 n 之和 ≤2e5。<br>每组数据输入 n(1≤n≤2e5) k(1≤k≤1e9) 和长为 n 的数组 a(1≤a[i]≤1e4)，长为 n 的数组 h(1≤h[i]≤1e9)。</p>
<p>选一个子区间 [L,R]，对于 [L,R-1] 内的 i，满足 h[i] 是 h[i+1] 的倍数，且 a[L] + a[L+1] + … + a[R] 不超过 k。<br>输出子区间长度 R-L+1 的最大值。<br>如果没有这样的子区间，输出 0。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>分组循环 + sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; fruits, vector&lt;<span class="type">int</span>&gt;&amp; heights, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, maxLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; fruits.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> curFruit = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> curHeight = heights[left];</span><br><span class="line">        <span class="type">int</span> right = left;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; fruits.<span class="built_in">size</span>() &amp;&amp; (curHeight % heights[right] == <span class="number">0</span>)) &#123;</span><br><span class="line">            curFruit += fruits[right];</span><br><span class="line">            curHeight = heights[right++];</span><br><span class="line">            <span class="keyword">while</span> (curFruit &gt; k &amp;&amp; left &lt; right) &#123;</span><br><span class="line">                curFruit -= fruits[left++];</span><br><span class="line">            &#125;</span><br><span class="line">            maxLength = <span class="built_in">max</span>(maxLength, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        left = right;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; maxLength &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tc;</span><br><span class="line">    in &gt;&gt; tc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= tc; t++) &#123;</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        in &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; fruits, heights;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> fruit;</span><br><span class="line">            in &gt;&gt; fruit;</span><br><span class="line">            fruits.<span class="built_in">push_back</span>(fruit);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> height;</span><br><span class="line">            in &gt;&gt; height;</span><br><span class="line">            heights.<span class="built_in">push_back</span>(height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">solve</span>(fruits, heights, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
        <tag>math</tag>
        <tag>binary search</tag>
        <tag>two pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1879D. Sum of XOR Functions</title>
    <url>/2024/06/17/1879D-Sum-of-XOR-Functions/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1879/D">D. Sum of XOR Functions</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 n(1≤n≤3e5) 和长为 n 的数组 a(0≤a[i]≤1e9)。</p>
<p>定义 f(L,R) 为连续子数组 a[L] 到 a[R] 的异或和。<br>计算所有 f(L,R)*(R-L+1) 的和，其中 L &lt;&#x3D; R。<br>输出答案模 998244353 的结果。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preXor</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use one number x to mark all xor</span></span><br><span class="line"><span class="comment">// for one xor value, assume it has 30 bits, on the ith bit</span></span><br><span class="line"><span class="comment">// if the bit is 1, we need to know all previous 0 occurrences &lt;&lt; i</span></span><br><span class="line"><span class="comment">// the question is how to get the r - l</span></span><br><span class="line"><span class="comment">// so we need two array, one for the count of 0/1 at bit i</span></span><br><span class="line"><span class="comment">// one for the sum of index at bit i</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    in &gt;&gt; n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> count[<span class="number">30</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum[<span class="number">30</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        count[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        in &gt;&gt; num;</span><br><span class="line">        x ^= num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> bit = (x &gt;&gt; j) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// take this as an example</span></span><br><span class="line">            <span class="comment">//  for one index, it&#x27;s always zero, suddenly for the ith number,</span></span><br><span class="line">            <span class="comment">//  its bit at this index is 1. It means all the previous subArray</span></span><br><span class="line">            <span class="comment">//  can be counted against, and we need to calculate the number of</span></span><br><span class="line">            <span class="comment">//  0s, along with the total of their index</span></span><br><span class="line">            res = (res + ((count[j][<span class="number">1</span> - bit] * i - sum[j][<span class="number">1</span> - bit]) % <span class="number">998244353</span> &lt;&lt; j) % <span class="number">998244353</span>) % <span class="number">998244353</span>;</span><br><span class="line">            sum[j][bit] += i;</span><br><span class="line">            count[j][bit]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>bitmasks</tag>
        <tag>math</tag>
        <tag>dp</tag>
        <tag>combinatorics</tag>
        <tag>divide and conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>19. Remove Nth Node From End of List</title>
    <url>/2023/01/03/19-Remove-Nth-Node-From-End-of-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">19. Remove Nth Node From End of List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p>
<p>Given the <code>head</code> of a linked list, remove the n<sup>th</sup> node from the end of the list and return its head.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,4,5], n = 2</span><br><span class="line">Output: [1,2,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1], n = 1</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2], n = 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is <code>sz</code>.</li>
<li><code>1 &lt;= sz &lt;= 30</code></li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
<li><code>1 &lt;= n &lt;= sz</code></li>
</ul>
<p><strong>Follow up:</strong> Could you do this in one pass?</p>
<hr>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use 2 pointers to get the Nth from the end first, helper function</li>
<li>Use dummy to avoid the nullptr corner case</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode *dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        ListNode *nth = <span class="built_in">findFromEnd</span>(dummy, n + <span class="number">1</span>);</span><br><span class="line">        nth-&gt;next = nth-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">findFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode *p1 = head, *p2 = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p1) &#123;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1944. Number of Visible People in a Queue</title>
    <url>/2023/12/16/1944-Number-of-Visible-People-in-a-Queue/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/number-of-visible-people-in-a-queue/">1944. Number of Visible People in a Queue</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a></p>
<p>There are <code>n</code> people standing in a queue, and they numbered from <code>0</code> to <code>n - 1</code> in <strong>left to right</strong> order. You are given an array <code>heights</code> of <strong>distinct</strong> integers where <code>heights[i]</code> represents the height of the i<sup>th</sup> person.</p>
<p>A person can <strong>see</strong> another person to their right in the queue if everybody in between is <strong>shorter</strong> than both of them. More formally, the i<sup>th</sup> person can see the j<sup>th</sup> person if <code>i &lt; j</code> and <code>min(heights[i], heights[j]) &gt; max(heights[i+1], heights[i+2], ..., heights[j-1])</code>.</p>
<p>Return <em>an array</em> <code>answer</code> <em>of length</em> <code>n</code> <em>where</em> <code>answer[i]</code> <em>is the <strong>number of people</strong> the</em> i<sup>th</sup> <em>person can <strong>see</strong> to their right in the queue</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/05/29/queue-plane.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: heights = [10,6,8,5,11,9]</span><br><span class="line">Output: [3,1,2,1,1,0]</span><br><span class="line">Explanation:</span><br><span class="line">Person 0 can see person 1, 2, and 4.</span><br><span class="line">Person 1 can see person 2.</span><br><span class="line">Person 2 can see person 3 and 4.</span><br><span class="line">Person 3 can see person 4.</span><br><span class="line">Person 4 can see person 5.</span><br><span class="line">Person 5 can see no one since nobody is to the right of them.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: heights = [5,1,2,3,10]</span><br><span class="line">Output: [4,1,1,1,0]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == heights.length</code></li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>5</sup></li>
<li>1 &lt;&#x3D; heights[i] &lt;&#x3D; 10<sup>5</sup></li>
<li>All the values of <code>heights</code> are <strong>unique</strong>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>monotonic stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">canSeePersonsCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = heights.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(size, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> removed = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; heights[i] &gt;= s.<span class="built_in">top</span>()) &#123;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                removed++;</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = s.<span class="built_in">empty</span>() ? removed : removed + <span class="number">1</span>;</span><br><span class="line">            s.<span class="built_in">push</span>(heights[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>199. Binary Tree Right Side View</title>
    <url>/2024/04/03/199-Binary-Tree-Right-Side-View/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-right-side-view/description/">199. Binary Tree Right Side View</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong>  of it, return the values of the nodes you can see ordered from top to bottom.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/02/14/tree.jpg" style="width: 401px; height: 301px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,null,5,null,4]</span><br><span class="line">Output: [1,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,3]</span><br><span class="line">Output: [1,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>bfs level traverse the tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>20. Valid Parentheses</title>
    <url>/2023/12/08/20-Valid-Parentheses/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/valid-parentheses/">20. Valid Parentheses</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a></p>
<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;&#123;&#39;</code>, <code>&#39;&#125;&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>
<p>An input string is valid if:</p>
<ol>
<li>Open brackets must be closed by the same type of brackets.</li>
<li>Open brackets must be closed in the correct order.</li>
<li>Every close bracket has a corresponding open bracket of the same type.</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;()&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;()[]&#123;&#125;&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;(]&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>s</code> consists of parentheses only <code>&#39;()[]&#123;&#125;&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">push</span>(c);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (stk.<span class="built_in">empty</span>() || stk.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        stk.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">push</span>(c);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (stk.<span class="built_in">empty</span>() || stk.<span class="built_in">top</span>() != <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        stk.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">push</span>(c);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (stk.<span class="built_in">empty</span>() || stk.<span class="built_in">top</span>() != <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        stk.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>206. Reverse Linked List</title>
    <url>/2023/01/04/206-Reverse-Linked-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/reverse-linked-list/">206. Reverse Linked List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/recursion/">Recursion</a></p>
<p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5]</span><br><span class="line">Output: [5,4,3,2,1]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2]</span><br><span class="line">Output: [2,1]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: head = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li>
<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>
</ul>
<p><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>For recursive solution, only think how to handle then end case and how to handle a new tail</li>
<li>For iterative solution, use stack</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* newHead = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        <span class="comment">// this is only useful for the head as well</span></span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>2049. Count Nodes With the Highest Score</title>
    <url>/2024/07/05/2049-Count-Nodes-With-the-Highest-Score/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-nodes-with-the-highest-score/description/">2049. Count Nodes With the Highest Score</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a <strong>binary</strong> tree rooted at <code>0</code> consisting of <code>n</code> nodes. The nodes are labeled from <code>0</code> to <code>n - 1</code>. You are given a <strong>0-indexed</strong> integer array <code>parents</code> representing the tree, where <code>parents[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parents[0] == -1</code>.</p>
<p>Each node has a <strong>score</strong>. To find the score of a node, consider if the node and the edges connected to it were <strong>removed</strong>. The tree would become one or more <strong>non-empty</strong> subtrees. The <strong>size</strong> of a subtree is the number of the nodes in it. The <strong>score</strong> of the node is the <strong>product of the sizes</strong> of all those subtrees.</p>
<p>Return the <strong>number</strong>  of nodes that have the <strong>highest score</strong> .</p>
<p><strong>Example 1:</strong></p>
<img alt="example-1" src="https://assets.leetcode.com/uploads/2021/10/03/example-1.png" style="width: 604px; height: 266px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: parents = [-1,2,0,2,0]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">- The score of node 0 is: 3 * 1 = 3</span><br><span class="line">- The score of node 1 is: 4 = 4</span><br><span class="line">- The score of node 2 is: 1 * 1 * 2 = 2</span><br><span class="line">- The score of node 3 is: 4 = 4</span><br><span class="line">- The score of node 4 is: 4 = 4</span><br><span class="line">The highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="example-2" src="https://assets.leetcode.com/uploads/2021/10/03/example-2.png" style="width: 95px; height: 143px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: parents = [-1,2,0]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">- The score of node 0 is: 2 = 2</span><br><span class="line">- The score of node 1 is: 2 = 2</span><br><span class="line">- The score of node 2 is: 1 * 1 = 1</span><br><span class="line">The highest score is 2, and two nodes (node 0 and node 1) have the highest score.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == parents.length</code></li>
<li><code>2 &lt;= n &lt;= 10^5</code></li>
<li><code>parents[0] == -1</code></li>
<li><code>0 &lt;= parents[i] &lt;= n - 1</code> for <code>i != 0</code></li>
<li><code>parents</code> represents a valid binary tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>bottom up binary tree traverse</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; numChild;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; children;</span><br><span class="line">    unordered_map&lt;<span class="type">long</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">    <span class="type">long</span> mx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countHighestScoreNodes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; parents)</span> </span>&#123;</span><br><span class="line">        total = parents.<span class="built_in">size</span>();</span><br><span class="line">        numChild.<span class="built_in">resize</span>(total, <span class="number">0</span>);</span><br><span class="line">        children.<span class="built_in">resize</span>(total, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="type">int</span> root = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parents[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                root = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                children[parents[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>(root);</span><br><span class="line">        <span class="keyword">return</span> m[mx];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> mul = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> child : children[root]) &#123;</span><br><span class="line">            <span class="type">int</span> childCnt = <span class="built_in">build</span>(child) + <span class="number">1</span>;</span><br><span class="line">            cnt += childCnt;</span><br><span class="line">            mul *= ChildCnt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        numChild[root] = cnt;</span><br><span class="line">        mul *= <span class="built_in">max</span>(<span class="number">1</span>, total - cnt - <span class="number">1</span>);</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, mul);</span><br><span class="line">        m[mul]++;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>2061. Number of Spaces Cleaning Robot Cleaned</title>
    <url>/2024/05/24/2061-Number-of-Spaces-Cleaning-Robot-Cleaned/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/number-of-spaces-cleaning-robot-cleaned/description/?envType=weekly-question&envId=2024-05-15">2061. Number of Spaces Cleaning Robot Cleaned</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A room is represented by a <strong>0-indexed</strong>  2D binary matrix <code>room</code> where a <code>0</code> represents an <strong>empty</strong>  space and a <code>1</code> represents a space with an <strong>object</strong> . The top left corner of the room will be empty in all test cases.</p>
<p>A cleaning robot starts at the top left corner of the room and is facing right. The robot will continue heading straight until it reaches the edge of the room or it hits an object, after which it will turn 90 degrees <strong>clockwise</strong>  and repeat this process. The starting space and all spaces that the robot visits are <strong>cleaned</strong>  by it.</p>
<p>Return the number of <strong>clean</strong>  spaces in the room if the robot runs indefinetely.</p>
<p><strong>Example 1:</strong></p>
<img src="https://assets.leetcode.com/uploads/2021/11/01/image-20211101204703-1.png" style="width: 250px; height: 242px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: room = [[0,0,0],[1,1,0],[0,0,0]]</span><br><span class="line"></span><br><span class="line">Output: 7</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">- ​​​​​​​The robot cleans the spaces at (0, 0), (0, 1), and (0, 2).</span><br><span class="line">- The robot is at the edge of the room, so it turns 90 degrees clockwise and now faces down.</span><br><span class="line">- The robot cleans the spaces at (1, 2), and (2, 2).</span><br><span class="line">- The robot is at the edge of the room, so it turns 90 degrees clockwise and now faces left.</span><br><span class="line">- The robot cleans the spaces at (2, 1), and (2, 0).</span><br><span class="line">- The robot has cleaned all 7 empty spaces, so <span class="built_in">return</span> 7.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img src="https://assets.leetcode.com/uploads/2021/11/01/image-20211101204736-2.png" style="width: 250px; height: 245px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: room = [[0,1,0],[1,0,0],[0,0,0]]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">- The robot cleans the space at (0, 0).</span><br><span class="line">- The robot hits an object, so it turns 90 degrees clockwise and now faces down.</span><br><span class="line">- The robot hits an object, so it turns 90 degrees clockwise and now faces left.</span><br><span class="line">- The robot is at the edge of the room, so it turns 90 degrees clockwise and now faces up.</span><br><span class="line">- The robot is at the edge of the room, so it turns 90 degrees clockwise and now faces right.</span><br><span class="line">- The robot is back at its starting position.</span><br><span class="line">- The robot has cleaned 1 space, so <span class="built_in">return</span> 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: room = [[0,0,0],[0,0,0],[0,0,0]]</span><br><span class="line"></span><br><span class="line">Output: 8​​​​​​​</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == room.length</code></li>
<li><code>n == room[r].length</code></li>
<li><code>1 &lt;= m, n &lt;= 300</code></li>
<li><code>room[r][c]</code> is either <code>0</code> or <code>1</code>.</li>
<li><code>room[0][0] == 0</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>we need to end if we have visited the same block in the same direction</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; visited;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfCleanRooms</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; room)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = room.<span class="built_in">size</span>(), n = room[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        visited = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, direction = <span class="number">1</span>, cleaned = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(visited[i][j] &amp; (<span class="number">1</span> &lt;&lt; direction))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i][j]) cleaned++;</span><br><span class="line">            visited[i][j] |= (<span class="number">1</span> &lt;&lt; direction);</span><br><span class="line">            <span class="keyword">if</span> (direction == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == n - <span class="number">1</span> || room[i][j + <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    direction = <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == m - <span class="number">1</span> || room[i + <span class="number">1</span>][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    direction = <span class="number">3</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>  || room[i][j - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    direction = <span class="number">4</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || room[i - <span class="number">1</span>][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    direction = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cleaned;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Simulation</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>207. Course Schedule</title>
    <url>/2023/09/01/207-Course-Schedule/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/course-schedule/">207. Course Schedule</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/topological-sort//">Topological Sort</a></p>
<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where prerequisites[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] indicates that you <strong>must</strong> take course b<sub>i</sub> first if you want to take course a<sub>i</sub>.</p>
<ul>
<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li>
</ul>
<p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0]]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: There are a total of 2 courses to take.</span><br><span class="line">To take course 1 you should have finished course 0\. So it is possible.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0],[0,1]]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: There are a total of 2 courses to take.</span><br><span class="line">To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1\. So it is impossible.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= numCourses &lt;= 2000</code></li>
<li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li>
<li><code>prerequisites[i].length == 2</code></li>
<li>0 &lt;&#x3D; a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</li>
<li>All the pairs prerequisites[i] are <strong>unique</strong>.</li>
</ul>
<h2 id="Hints-Nodes"><a href="#Hints-Nodes" class="headerlink" title="Hints&#x2F;Nodes"></a>Hints&#x2F;Nodes</h2><ul>
<li>Traverse the graph and check if there’s a cycle</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; onPath;</span><br><span class="line">    <span class="type">int</span> can = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canFinish</span><span class="params">(<span class="type">int</span> numCourses, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        graph = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(numCourses, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(numCourses, <span class="literal">false</span>);</span><br><span class="line">        onPath = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(numCourses, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> pair : prerequisites) &#123;</span><br><span class="line">            <span class="type">int</span> from = pair[<span class="number">0</span>], to = pair[<span class="number">1</span>];</span><br><span class="line">            graph[from].<span class="built_in">push_back</span>(to);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> can;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (onPath[node]) &#123;</span><br><span class="line">            can = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!can || visited[node]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        onPath[node] = <span class="literal">true</span>;</span><br><span class="line">        visited[node] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> to : graph[node]) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(to);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        onPath[node] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Graph</tag>
        <tag>Topological Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>208. Implement Trie (Prefix Tree)</title>
    <url>/2023/10/06/208-Implement-Trie-Prefix-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/implement-trie-prefix-tree/">208. Implement Trie (Prefix Tree)</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/trie//">Trie</a></p>
<p>A <a href="https://en.wikipedia.org/wiki/Trie"><strong>trie</strong></a> (pronounced as “try”) or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>
<p>Implement the Trie class:</p>
<ul>
<li><code>Trie()</code> Initializes the trie object.</li>
<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>
<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>
<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;Trie&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;search&quot;</span>, <span class="string">&quot;search&quot;</span>, <span class="string">&quot;startsWith&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;search&quot;</span>]</span><br><span class="line">[[], [<span class="string">&quot;apple&quot;</span>], [<span class="string">&quot;apple&quot;</span>], [<span class="string">&quot;app&quot;</span>], [<span class="string">&quot;app&quot;</span>], [<span class="string">&quot;app&quot;</span>], [<span class="string">&quot;app&quot;</span>]]</span><br><span class="line">Output</span><br><span class="line">[null, null, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, null, <span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">Trie trie = new Trie();</span><br><span class="line">trie.insert(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">trie.search(<span class="string">&quot;apple&quot;</span>);   // <span class="built_in">return</span> True</span><br><span class="line">trie.search(<span class="string">&quot;app&quot;</span>);     // <span class="built_in">return</span> False</span><br><span class="line">trie.startsWith(<span class="string">&quot;app&quot;</span>); // <span class="built_in">return</span> True</span><br><span class="line">trie.insert(<span class="string">&quot;app&quot;</span>);</span><br><span class="line">trie.search(<span class="string">&quot;app&quot;</span>);     // <span class="built_in">return</span> True</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>
<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>
<li>At most 3 * 10<sup>4</sup> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use a bool value to indicate if it’s the end of one word</li>
<li>If one node has been initialized then we should NOT recreate the node</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="type">bool</span> end;</span><br><span class="line">        vector&lt;TrieNode*&gt; children;</span><br><span class="line">        <span class="built_in">TrieNode</span>() &#123;</span><br><span class="line">            end = <span class="literal">false</span>;</span><br><span class="line">            children = <span class="built_in">vector</span>&lt;TrieNode*&gt;(<span class="number">26</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    TrieNode* root;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Trie</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;end = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!head) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head-&gt;end;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">startsWith</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : prefix) &#123;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!head) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie* obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj-&gt;insert(word);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;search(word);</span></span><br><span class="line"><span class="comment"> * bool param_3 = obj-&gt;startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Design</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>2090. K Radius Subarray Averages</title>
    <url>/2024/10/21/2090-K-Radius-Subarray-Averages/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/k-radius-subarray-averages/description/">2090. K Radius Subarray Averages</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a <strong>0-indexed</strong>  array <code>nums</code> of <code>n</code> integers, and an integer <code>k</code>.</p>
<p>The <strong>k-radius average</strong>  for a subarray of <code>nums</code> <strong>centered</strong>  at some index <code>i</code> with the <strong>radius</strong>  <code>k</code> is the average of <strong>all</strong>  elements in <code>nums</code> between the indices <code>i - k</code> and <code>i + k</code> (<strong>inclusive</strong> ). If there are less than <code>k</code> elements before <strong>or</strong>  after the index <code>i</code>, then the <strong>k-radius average</strong>  is <code>-1</code>.</p>
<p>Build and return an array <code>avgs</code> of length <code>n</code> where <code>avgs[i]</code> is the <strong>k-radius average</strong>  for the subarray centered at index <code>i</code>.</p>
<p>The <strong>average</strong>  of <code>x</code> elements is the sum of the <code>x</code> elements divided by <code>x</code>, using <strong>integer division</strong> . The integer division truncates toward zero, which means losing its fractional part.</p>
<ul>
<li>For example, the average of four elements <code>2</code>, <code>3</code>, <code>1</code>, and <code>5</code> is <code>(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75</code>, which truncates to <code>2</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/11/07/eg1.png" style="width: 343px; height: 119px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [7,4,3,9,1,8,5,2,6], k = 3</span><br><span class="line">Output: [-1,-1,-1,5,4,4,-1,-1,-1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>avg[0], avg[1], and avg[2] are -1 because there are less than k elements <strong>before</strong>  each index.</li>
<li>The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 &#x3D; 37.<br>Using <strong>integer division</strong> , avg[3] &#x3D; 37 &#x2F; 7 &#x3D; 5.</li>
<li>For the subarray centered at index 4, avg[4] &#x3D; (4 + 3 + 9 + 1 + 8 + 5 + 2) &#x2F; 7 &#x3D; 4.</li>
<li>For the subarray centered at index 5, avg[5] &#x3D; (3 + 9 + 1 + 8 + 5 + 2 + 6) &#x2F; 7 &#x3D; 4.</li>
<li>avg[6], avg[7], and avg[8] are -1 because there are less than k elements <strong>after</strong>  each index.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [100000], k = 0</span><br><span class="line">Output: [100000]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>The sum of the subarray centered at index 0 with radius 0 is: 100000.<br>avg[0] &#x3D; 100000 &#x2F; 1 &#x3D; 100000.</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [8], k = 100000</span><br><span class="line">Output: [-1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>avg[0] is -1 because there are less than k elements before and after index 0.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
<li><code>0 &lt;= nums[i], k &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getAverages</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), right = <span class="number">0</span>, len = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">if</span> (right &gt;= len - <span class="number">1</span>) &#123;</span><br><span class="line">                res[right - k] = sum / len;</span><br><span class="line">                sum -= nums[right - len + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>21. Merge Two Sorted Lists</title>
    <url>/2022/12/29/21-Merge-Two-Sorted-Lists/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/recursion/">Recursion</a></p>
<p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p>
<p>Merge the two lists in a one <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.</p>
<p>Return <em>the head of the merged linked list</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: list1 = [1,2,4], list2 = [1,3,4]</span><br><span class="line">Output: [1,1,2,3,4,4]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: list1 = [], list2 = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: list1 = [], list2 = [0]</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li>Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.</li>
</ul>
<hr>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Dummy pointer</li>
<li>After one list is exhausted, we can just link the remaining of other list to the new list. The corner case that one list is empty is covered with this handling.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(); ListNode* p = dummy;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">nullptr</span> &amp;&amp; list2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1-&gt;val &lt; list2-&gt;val) &#123;</span><br><span class="line">                p-&gt;next = list1;</span><br><span class="line">                list1 = list1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p-&gt;next = list2;</span><br><span class="line">                list2 = list2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list1 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            p-&gt;next = list1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p-&gt;next = list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>210. Course Schedule II</title>
    <url>/2023/09/01/210-Course-Schedule-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/course-schedule-ii/">210. Course Schedule II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/topological-sort//">Topological Sort</a></p>
<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where prerequisites[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] indicates that you <strong>must</strong> take course b<sub>i</sub> first if you want to take course a<sub>i</sub>.</p>
<ul>
<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li>
</ul>
<p>Return <em>the ordering of courses you should take to finish all courses</em>. If there are many valid answers, return <strong>any</strong> of them. If it is impossible to finish all courses, return <strong>an empty array</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0]]</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0\. So the correct course order is [0,1].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]</span><br><span class="line">Output: [0,2,1,3]</span><br><span class="line">Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2\. Both courses 1 and 2 should be taken after you finished course 0.</span><br><span class="line">So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 1, prerequisites = []</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= numCourses &lt;= 2000</code></li>
<li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li>
<li><code>prerequisites[i].length == 2</code></li>
<li>0 &lt;&#x3D; a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</li>
<li>a<sub>i</sub> !&#x3D; b<sub>i</sub></li>
<li>All the pairs [a<sub>i</sub>, b<sub>i</sub>] are <strong>distinct</strong>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Build the graph first</li>
<li>Use postOrder to record the route</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; onPath;</span><br><span class="line">    <span class="type">bool</span> can = <span class="literal">true</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; postOrder;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findOrder</span><span class="params">(<span class="type">int</span> numCourses, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        graph = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(numCourses, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(numCourses, <span class="literal">false</span>);</span><br><span class="line">        onPath = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(numCourses, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> pair : prerequisites) &#123;</span><br><span class="line">            <span class="type">int</span> from = pair[<span class="number">0</span>], to = pair[<span class="number">1</span>];</span><br><span class="line">            graph[from].<span class="built_in">push_back</span>(to);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!can) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> postOrder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (onPath[node]) &#123;</span><br><span class="line">            can = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onPath[node] || visited[node]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        visited[node] = <span class="literal">true</span>;</span><br><span class="line">        onPath[node] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : graph[node]) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        postOrder.<span class="built_in">push_back</span>(node);</span><br><span class="line">        onPath[node] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth-First Search</tag>
        <tag>Graph</tag>
        <tag>Topological Sort</tag>
        <tag>Depth-First</tag>
      </tags>
  </entry>
  <entry>
    <title>211. Design Add and Search Words Data Structure</title>
    <url>/2023/10/09/211-Design-Add-and-Search-Words-Data-Structure/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/design-add-and-search-words-data-structure/">211. Design Add and Search Words Data Structure</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/trie//">Trie</a></p>
<p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p>
<p>Implement the <code>WordDictionary</code> class:</p>
<ul>
<li><code>WordDictionary()</code> Initializes the object.</li>
<li><code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.</li>
<li><code>bool search(word)</code> Returns <code>true</code> if there is any string in the data structure that matches <code>word</code> or <code>false</code> otherwise. <code>word</code> may contain dots <code>&#39;.&#39;</code> where dots can be matched with any letter.</li>
</ul>
<p><strong>Example:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;WordDictionary&quot;</span>,<span class="string">&quot;addWord&quot;</span>,<span class="string">&quot;addWord&quot;</span>,<span class="string">&quot;addWord&quot;</span>,<span class="string">&quot;search&quot;</span>,<span class="string">&quot;search&quot;</span>,<span class="string">&quot;search&quot;</span>,<span class="string">&quot;search&quot;</span>]</span><br><span class="line">[[],[<span class="string">&quot;bad&quot;</span>],[<span class="string">&quot;dad&quot;</span>],[<span class="string">&quot;mad&quot;</span>],[<span class="string">&quot;pad&quot;</span>],[<span class="string">&quot;bad&quot;</span>],[<span class="string">&quot;.ad&quot;</span>],[<span class="string">&quot;b..&quot;</span>]]</span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">WordDictionary wordDictionary = new WordDictionary();</span><br><span class="line">wordDictionary.addWord(<span class="string">&quot;bad&quot;</span>);</span><br><span class="line">wordDictionary.addWord(<span class="string">&quot;dad&quot;</span>);</span><br><span class="line">wordDictionary.addWord(<span class="string">&quot;mad&quot;</span>);</span><br><span class="line">wordDictionary.search(<span class="string">&quot;pad&quot;</span>); // <span class="built_in">return</span> False</span><br><span class="line">wordDictionary.search(<span class="string">&quot;bad&quot;</span>); // <span class="built_in">return</span> True</span><br><span class="line">wordDictionary.search(<span class="string">&quot;.ad&quot;</span>); // <span class="built_in">return</span> True</span><br><span class="line">wordDictionary.search(<span class="string">&quot;b..&quot;</span>); // <span class="built_in">return</span> True</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word.length &lt;= 25</code></li>
<li><code>word</code> in <code>addWord</code> consists of lowercase English letters.</li>
<li><code>word</code> in <code>search</code> consist of <code>&#39;.&#39;</code> or lowercase English letters.</li>
<li>There will be at most <code>2</code> dots in <code>word</code> for <code>search</code> queries.</li>
<li>At most 10<sup>4</sup> calls will be made to <code>addWord</code> and <code>search</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Trie</li>
<li>Need a for loop for wildcard matching, also need a helper function tracking the index</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="type">bool</span> end;</span><br><span class="line">        vector&lt;TrieNode*&gt; children;</span><br><span class="line">        <span class="built_in">TrieNode</span>() &#123;</span><br><span class="line">            end = <span class="literal">false</span>;</span><br><span class="line">            children = <span class="built_in">vector</span>&lt;TrieNode*&gt;(<span class="number">26</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TrieNode* root;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">WordDictionary</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addWord</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;end = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">searchWithPatern</span>(root, <span class="number">0</span>, word);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">searchWithPatern</span><span class="params">(TrieNode* head, <span class="type">int</span> index, string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == word.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> head-&gt;end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c = word[index];</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">searchWithPatern</span>(head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>], index + <span class="number">1</span>, word);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (TrieNode* node : head-&gt;children) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node) &#123;</span><br><span class="line">                    <span class="type">bool</span> branchMatch = <span class="built_in">searchWithPatern</span>(node, index + <span class="number">1</span>, word);</span><br><span class="line">                    <span class="keyword">if</span> (branchMatch) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your WordDictionary object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * WordDictionary* obj = new WordDictionary();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addWord(word);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;search(word);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Depth-First Search</tag>
        <tag>Design</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>215. Kth Largest Element in an Array</title>
    <url>/2023/08/28/215-Kth-Largest-Element-in-an-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/">215. Kth Largest Element in an Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/quickselect//">Quickselect</a></p>
<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> k<sup>th</sup> <em>largest element in the array</em>.</p>
<p>Note that it is the k<sup>th</sup> largest element in the sorted order, not the k<sup>th</sup> distinct element.</p>
<p>Can you solve it without sorting?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,1,5,6,4], k = 2</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,3,1,2,4,5,5,6], k = 4</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; k &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Priority queue</li>
<li>Quick sort</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(num);</span><br><span class="line">            <span class="keyword">if</span> (pq.<span class="built_in">size</span>() &gt; k) &#123;</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>The quick sort solution(cannot pass the last test case)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">shuffle</span>(nums);</span><br><span class="line">        k = nums.<span class="built_in">size</span>() - k;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="type">int</span> p = <span class="built_in">partition</span>(nums, low, high);</span><br><span class="line">            <span class="keyword">if</span> (p == k) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[p];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p &gt; k) &#123;</span><br><span class="line">                high = p - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                low = p + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot = nums[low];</span><br><span class="line">        <span class="type">int</span> i = low + <span class="number">1</span>, j = high;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; high &amp;&amp; nums[i] &lt;= pivot) i++;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; j &amp;&amp; nums[j] &gt; pivot) j--;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">swap</span>(nums, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums, low, j);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; &quot;value of pivot: &quot; &lt;&lt; pivot &lt;&lt; &quot; index: &quot; &lt;&lt; j &lt;&lt; &quot; low: &quot; &lt;&lt; low &lt;&lt; &quot; high: &quot; &lt;&lt; high &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// for (int num: nums) cout &lt;&lt; num; cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">shuffle</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="type">int</span> rand = i + std::<span class="built_in">rand</span>() % (size - i);</span><br><span class="line">            <span class="built_in">swap</span>(nums, i, rand);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Divide and Conquer</tag>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Quickselect</tag>
      </tags>
  </entry>
  <entry>
    <title>219. Contains Duplicate II</title>
    <url>/2023/12/05/219-Contains-Duplicate-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/contains-duplicate-ii/">219. Contains Duplicate II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a></p>
<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> <em>if there are two <strong>distinct indices</strong></em> <code>i</code> <em>and</em> <code>j</code> <em>in the array such that</em> <code>nums[i] == nums[j]</code> <em>and</em> <code>abs(i - j) &lt;= k</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,1], k = 3</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,0,1,1], k = 1</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,1,2,3], k = 2</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li>
<li>0 &lt;&#x3D; k &lt;&#x3D; 10<sup>5</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsNearbyDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m[nums[right]] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            m[nums[right]]++;</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span> (right - left &gt; k) &#123;</span><br><span class="line">                m[nums[left]]--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>220. Contains Duplicate III</title>
    <url>/2023/12/05/220-Contains-Duplicate-III/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/contains-duplicate-iii/">220. Contains Duplicate III</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/bucket-sort//">Bucket Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/ordered-set//">Ordered Set</a></p>
<p>You are given an integer array <code>nums</code> and two integers <code>indexDiff</code> and <code>valueDiff</code>.</p>
<p>Find a pair of indices <code>(i, j)</code> such that:</p>
<ul>
<li><code>i != j</code>,</li>
<li><code>abs(i - j) &lt;= indexDiff</code>.</li>
<li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code>, and</li>
</ul>
<p>Return <code>true</code> <em>if such pair exists or</em> <code>false</code> <em>otherwise</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: We can choose (i, j) = (0, 3).</span><br><span class="line">We satisfy the three conditions:</span><br><span class="line">i != j --&gt; 0 != 3</span><br><span class="line">abs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3</span><br><span class="line">abs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we <span class="built_in">return</span> <span class="literal">false</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>2 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li>
<li><code>1 &lt;= indexDiff &lt;= nums.length</code></li>
<li>0 &lt;&#x3D; valueDiff &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
<li>use map’s lower_bound function</li>
<li>it’s not comparing max and min of a sub array, so don’t use monotonic queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> indexDiff, <span class="type">int</span> valueDiff)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> val = nums[right];</span><br><span class="line">            <span class="keyword">auto</span> it = m.<span class="built_in">lower_bound</span>(val);</span><br><span class="line">            <span class="keyword">if</span> (it != m.<span class="built_in">end</span>() &amp;&amp; <span class="built_in">abs</span>(it-&gt;first - val) &lt;= valueDiff) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (it != m.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">                it--;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(it-&gt;first - val) &lt;= valueDiff) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            m[val]++;</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span> (right - left &gt; indexDiff) &#123;</span><br><span class="line">                m[nums[left]]--;</span><br><span class="line">                <span class="keyword">if</span> (m[nums[left]] == <span class="number">0</span>) &#123;</span><br><span class="line">                    m.<span class="built_in">erase</span>(nums[left]);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
        <tag>Sorting</tag>
        <tag>Ordered Set</tag>
        <tag>Bucket Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>222. Count Complete Tree Nodes</title>
    <url>/2023/08/30/222-Count-Complete-Tree-Nodes/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-complete-tree-nodes/">222. Count Complete Tree Nodes</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given the <code>root</code> of a <strong>complete</strong> binary tree, return the number of the nodes in the tree.</p>
<p>According to <strong><a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees">Wikipedia</a></strong>, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between <code>1</code> and 2<sup>h</sup> nodes inclusive at the last level <code>h</code>.</p>
<p>Design an algorithm that runs in less than <code>O(n)</code> time complexity.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/14/complete.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [0, 5 * 10<sup>4</sup>].</li>
<li>0 &lt;&#x3D; Node.val &lt;&#x3D; 5 * 10<sup>4</sup></li>
<li>The tree is guaranteed to be <strong>complete</strong>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Check if it’s a full BST to improve the time complexity</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> count;</span><br><span class="line">        <span class="type">int</span> leftDepth = <span class="number">0</span>, rightDepth = <span class="number">0</span>;</span><br><span class="line">        TreeNode* tmp = root;</span><br><span class="line">        <span class="keyword">while</span> (tmp) &#123;</span><br><span class="line">            leftDepth++;</span><br><span class="line">            tmp = tmp-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = root;</span><br><span class="line">        <span class="keyword">while</span> (tmp) &#123;</span><br><span class="line">            rightDepth++;</span><br><span class="line">            tmp = tmp-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftDepth == rightDepth) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">2</span>, leftDepth) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> leftCount = <span class="built_in">countNodes</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> rightCount = <span class="built_in">countNodes</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> leftCount + rightCount + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>2235. Add Two Integers</title>
    <url>/2022/12/27/2235-Add-Two-Integers/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/add-two-integers/">2235. Add Two Integers</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/math/">Math</a></p>
<p>Given two integers <code>num1</code> and <code>num2</code>, return <em>the <strong>sum</strong> of the two integers</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: num1 = 12, num2 = 5</span><br><span class="line">Output: 17</span><br><span class="line">Explanation: num1 is 12, num2 is 5, and their <span class="built_in">sum</span> is 12 + 5 = 17, so 17 is returned.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: num1 = -10, num2 = 4</span><br><span class="line">Output: -6</span><br><span class="line">Explanation: num1 + num2 = -6, so -6 is returned.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>-100 &lt;= num1, num2 &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>226. Invert Binary Tree</title>
    <url>/2023/02/03/226-Invert-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/invert-binary-tree/">226. Invert Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/breadth-first-search/">Breadth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary tree, invert the tree, and return <em>its root</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,7,1,3,6,9]</span><br><span class="line">Output: [4,7,2,9,6,3,1]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,3]</span><br><span class="line">Output: [2,3,1]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* left = <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        TreeNode* right = <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        root-&gt;left = right;</span><br><span class="line">        root-&gt;right = left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>225. Implement Stack using Queues</title>
    <url>/2023/11/07/225-Implement-Stack-using-Queues/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/implement-stack-using-queues/">225. Implement Stack using Queues</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a></p>
<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p>
<p>Implement the <code>MyStack</code> class:</p>
<ul>
<li><code>void push(int x)</code> Pushes element x to the top of the stack.</li>
<li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li>
<li><code>int top()</code> Returns the element on the top of the stack.</li>
<li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li>
</ul>
<p><strong>Notes:</strong></p>
<ul>
<li>You must use <strong>only</strong> standard operations of a queue, which means that only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code> and <code>is empty</code> operations are valid.</li>
<li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue’s standard operations.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;MyStack&quot;</span>, <span class="string">&quot;push&quot;</span>, <span class="string">&quot;push&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;empty&quot;</span>]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 2, 2, <span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MyStack myStack = new MyStack();</span><br><span class="line">myStack.push(1);</span><br><span class="line">myStack.push(2);</span><br><span class="line">myStack.top(); // <span class="built_in">return</span> 2</span><br><span class="line">myStack.pop(); // <span class="built_in">return</span> 2</span><br><span class="line">myStack.empty(); // <span class="built_in">return</span> False</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= x &lt;= 9</code></li>
<li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li>
<li>All the calls to <code>pop</code> and <code>top</code> are valid.</li>
</ul>
<p><strong>Follow-up:</strong> Can you implement the stack using only one queue?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>pop and re-enqueue all previous elements when trying to access the last element</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="type">int</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        head = x;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> num = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            q.<span class="built_in">push</span>(num);</span><br><span class="line">            head = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">empty</span>();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack* obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>23. Merge k Sorted Lists</title>
    <url>/2023/01/03/23-Merge-k-Sorted-Lists/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/merge-k-sorted-lists/">23. Merge k Sorted Lists</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/divide-and-conquer/">Divide and Conquer</a>, <a href="https://leetcode.com/tag/heap-priority-queue/">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/merge-sort/">Merge Sort</a></p>
<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p>
<p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">Output: [1,1,2,3,4,4,5,6]</span><br><span class="line">Explanation: The linked-lists are:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">merging them into one sorted list:</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: lists = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: lists = [[]]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>k == lists.length</code></li>
<li>0 &lt;&#x3D; k &lt;&#x3D; 10<sup>4</sup></li>
<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>
<li>-10<sup>4</sup> &lt;&#x3D; <code>lists[i][j]</code> &lt;&#x3D; 10<sup>4</sup></li>
<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li>
<li>The sum of <code>lists[i].length</code> will not exceed 10<sup>4</sup>.</li>
</ul>
<hr>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>cpp priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        ListNode *dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        <span class="keyword">if</span> (lists.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](<span class="type">const</span> ListNode* l1, <span class="type">const</span> ListNode* l2) &#123; <span class="keyword">return</span> l1-&gt;val &gt; l2-&gt;val; &#125;;</span><br><span class="line">        priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> head: lists) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head) &#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(head);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *p = dummy;</span><br><span class="line">        <span class="keyword">while</span> (pq.<span class="built_in">size</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">            ListNode *tmp = pq.<span class="built_in">top</span>();</span><br><span class="line">            p-&gt;next = tmp;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (tmp-&gt;next) &#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(tmp-&gt;next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Divide and Conquer</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Merge Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>230. Kth Smallest Element in a BST</title>
    <url>/2023/08/26/230-Kth-Smallest-Element-in-a-BST/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/">230. Kth Smallest Element in a BST</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search-tree//">Binary Search Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return <em>the</em> k<sup>th</sup> <em>smallest value (<strong>1-indexed</strong>) of all the values of the nodes in the tree</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,1,4,null,2], k = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,3,6,2,4,null,null,1], k = 3</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is <code>n</code>.</li>
<li>1 &lt;&#x3D; k &lt;&#x3D; n &lt;&#x3D; 10<sup>4</sup></li>
<li>0 &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<p><strong>Follow up:</strong> If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>traverse the tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> index = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, k);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, k);</span><br><span class="line">        <span class="keyword">if</span> (index++ == k) &#123;</span><br><span class="line">            res = root-&gt;val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>234. Palindrome Linked List</title>
    <url>/2023/01/17/234-Palindrome-Linked-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/palindrome-linked-list/">234. Palindrome Linked List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/stack/">Stack</a>, <a href="https://leetcode.com/tag/recursion/">Recursion</a></p>
<p>Given the <code>head</code> of a singly linked list, return <code>true</code> <em>if it is a</em> <span data-keyword="palindrome-sequence"><em>palindrome</em></span> <em>or</em> <code>false</code> <em>otherwise</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,2,1]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is in the range [1, 10<sup>5</sup>].</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
</ul>
<p><strong>Follow up:</strong> Could you do it in <code>O(n)</code> time and <code>O(1)</code> space?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Find the mid point, reverse the right part then compare</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* left = head, *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* right = <span class="built_in">reverse</span>(slow);</span><br><span class="line">        <span class="comment">// running the while loop against right since the end of right</span></span><br><span class="line">        <span class="comment">// is nullptr while left would still have items to iterate on</span></span><br><span class="line">        <span class="keyword">while</span> (right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left-&gt;val != right-&gt;val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = right-&gt;next;</span><br><span class="line">                left = left-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *cur = head, *prev = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            ListNode* tmp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Run time O(N), Space O(N) solution</span></span><br><span class="line"><span class="comment">    ListNode* left;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    bool isPalindrome(ListNode* head) &#123;</span></span><br><span class="line"><span class="comment">        left = head;</span></span><br><span class="line"><span class="comment">        return traverse(head);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    bool traverse(ListNode* right) &#123;</span></span><br><span class="line"><span class="comment">        if (right == nullptr) return true;</span></span><br><span class="line"><span class="comment">        bool res = traverse(right-&gt;next);</span></span><br><span class="line"><span class="comment">        res = res &amp;&amp; left-&gt;val == right-&gt;val;</span></span><br><span class="line"><span class="comment">        left = left-&gt;next;</span></span><br><span class="line"><span class="comment">        return res;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Stack</tag>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>232. Implement Queue using Stacks</title>
    <url>/2023/11/07/232-Implement-Queue-using-Stacks/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/implement-queue-using-stacks/">232. Implement Queue using Stacks</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a></p>
<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p>
<p>Implement the <code>MyQueue</code> class:</p>
<ul>
<li><code>void push(int x)</code> Pushes element x to the back of the queue.</li>
<li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li>
<li><code>int peek()</code> Returns the element at the front of the queue.</li>
<li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li>
</ul>
<p><strong>Notes:</strong></p>
<ul>
<li>You must use <strong>only</strong> standard operations of a stack, which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>
<li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack’s standard operations.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;MyQueue&quot;</span>, <span class="string">&quot;push&quot;</span>, <span class="string">&quot;push&quot;</span>, <span class="string">&quot;peek&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;empty&quot;</span>]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 1, 1, <span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MyQueue myQueue = new MyQueue();</span><br><span class="line">myQueue.push(1); // queue is: [1]</span><br><span class="line">myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); // <span class="built_in">return</span> 1</span><br><span class="line">myQueue.pop(); // <span class="built_in">return</span> 1, queue is [2]</span><br><span class="line">myQueue.empty(); // <span class="built_in">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= x &lt;= 9</code></li>
<li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>peek</code>, and <code>empty</code>.</li>
<li>All the calls to <code>pop</code> and <code>peek</code> are valid.</li>
</ul>
<p><strong>Follow-up:</strong> Can you implement the queue such that each operation is <strong><a href="https://en.wikipedia.org/wiki/Amortized_analysis">amortized</a></strong> <code>O(1)</code> time complexity? In other words, performing <code>n</code> operations will take overall <code>O(n)</code> time even if one of those operations may take longer.</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use 2 stacks</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        s1.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">peek</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s2.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> num = s1.<span class="built_in">top</span>();</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">                s2.<span class="built_in">push</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s2.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.<span class="built_in">empty</span>() &amp;&amp; s2.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;peek();</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>235. Lowest Common Ancestor of a Binary Search Tree</title>
    <url>/2023/08/29/235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. Lowest Common Ancestor of a Binary Search Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search-tree//">Binary Search Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.</p>
<p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>).”</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The LCA of nodes 2 and 8 is 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1], p = 2, q = 1</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [2, 10<sup>5</sup>].</li>
<li>-10<sup>9</sup> &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>9</sup></li>
<li>All <code>Node.val</code> are <strong>unique</strong>.</li>
<li><code>p != q</code></li>
<li><code>p</code> and <code>q</code> will exist in the BST.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>It’s binary serach tree, we can use the property of this data structure</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val1 = <span class="built_in">min</span>(p-&gt;val, q-&gt;val);</span><br><span class="line">        <span class="type">int</span> val2 = <span class="built_in">max</span>(p-&gt;val, q-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(root, val1, val2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">find</span><span class="params">(TreeNode* root, <span class="type">int</span> val1, <span class="type">int</span> val2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == val1 || root-&gt;val == val2) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; val1 &amp;&amp; root-&gt;val &lt; val2) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode* left = <span class="built_in">find</span>(root-&gt;left, val1, val2);</span><br><span class="line">        TreeNode* right = <span class="built_in">find</span>(root-&gt;right, val1, val2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left ? left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>236. Lowest Common Ancestor of a Binary Tree</title>
    <url>/2023/08/28/236-Lowest-Common-Ancestor-of-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. Lowest Common Ancestor of a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>
<p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>).”</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The LCA of nodes 5 and 1 is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2], p = 1, q = 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [2, 10<sup>5</sup>].</li>
<li>-10<sup>9</sup> &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>9</sup></li>
<li>All <code>Node.val</code> are <strong>unique</strong>.</li>
<li><code>p != q</code></li>
<li><code>p</code> and <code>q</code> will exist in the tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>think about what we are going to do with each node</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode* left = <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        TreeNode* right = <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &amp;&amp; right) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left ? left : right; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>2379. Minimum Recolors to Get K Consecutive Black Blocks</title>
    <url>/2024/10/22/2379-Minimum-Recolors-to-Get-K-Consecutive-Black-Blocks/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-recolors-to-get-k-consecutive-black-blocks/description/">2379. Minimum Recolors to Get K Consecutive Black Blocks</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a <strong>0-indexed</strong>  string <code>blocks</code> of length <code>n</code>, where <code>blocks[i]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>, representing the color of the <code>i^th</code> block. The characters <code>&#39;W&#39;</code> and <code>&#39;B&#39;</code> denote the colors white and black, respectively.</p>
<p>You are also given an integer <code>k</code>, which is the desired number of <strong>consecutive</strong>  black blocks.</p>
<p>In one operation, you can <strong>recolor</strong>  a white block such that it becomes a black block.</p>
<p>Return the <strong>minimum</strong>  number of operations needed such that there is at least <strong>one</strong>  occurrence of <code>k</code> consecutive black blocks.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: blocks = <span class="string">&quot;WBBWWBBWBW&quot;</span>, k = 7</span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">One way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks</span><br><span class="line">so that blocks = <span class="string">&quot;BBBBBBBWBW&quot;</span>.</span><br><span class="line">It can be shown that there is no way to achieve 7 consecutive black blocks <span class="keyword">in</span> less than 3 operations.</span><br><span class="line">Therefore, we <span class="built_in">return</span> 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: blocks = <span class="string">&quot;WBWBBBW&quot;</span>, k = 2</span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">No changes need to be made, since 2 consecutive black blocks already exist.</span><br><span class="line">Therefore, we <span class="built_in">return</span> 0.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == blocks.length</code></li>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>blocks[i]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>.</li>
<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumRecolors</span><span class="params">(string blocks, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = INT_MAX, right = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; blocks.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            cur += blocks[right] == <span class="string">&#x27;W&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (right &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, cur);</span><br><span class="line">                cur -= blocks[right - k + <span class="number">1</span>] == <span class="string">&#x27;W&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>238. Product of Array Except Self</title>
    <url>/2023/11/12/238-Product-of-Array-Except-Self/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/product-of-array-except-self/">238. Product of Array Except Self</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>
<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>
<p>You must write an algorithm that runs in <code>O(n)</code> time and without using the division operation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,1,0,-3,3]</span><br><span class="line">Output: [0,0,9,0,0]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>2 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>-30 &lt;= nums[i] &lt;= 30</code></li>
<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>
</ul>
<p><strong>Follow up:</strong> Can you solve the problem in <code>O(1)</code> extra space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preProduct</span><span class="params">(size + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sufProduct</span><span class="params">(size + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            preProduct[i + <span class="number">1</span>] = preProduct[i] * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            sufProduct[i] = sufProduct[i + <span class="number">1</span>] * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(size, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            res[i] = preProduct[i] * sufProduct[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>239. Sliding Window Maximum</title>
    <url>/2023/09/20/239-Sliding-Window-Maximum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sliding-window-maximum/">239. Sliding Window Maximum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-queue//">Monotonic Queue</a></p>
<p>You are given an array of integers <code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p>
<p>Return <em>the max sliding window</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">Output: [3,3,5,5,6,7]</span><br><span class="line">Explanation:</span><br><span class="line">Window position                Max</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1], k = 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li><code>1 &lt;= k &lt;= nums.length</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Monotonic Queue</li>
<li>Corner case: we cannot use less than or equal to when pop previous elements, because it can potentially pop out the newly added value</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        list&lt;<span class="type">int</span>&gt; window;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!window.<span class="built_in">empty</span>() &amp;&amp; window.<span class="built_in">back</span>() &lt; nums[i]) &#123;</span><br><span class="line">                window.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            window.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(window.<span class="built_in">front</span>());</span><br><span class="line">                <span class="keyword">if</span> (window.<span class="built_in">front</span>() == nums[i - k + <span class="number">1</span>]) &#123;</span><br><span class="line">                    window.<span class="built_in">pop_front</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Queue</tag>
        <tag>Monotonic Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>240. Search a 2D Matrix II</title>
    <url>/2023/12/01/240-Search-a-2D-Matrix-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/">240. Search a 2D Matrix II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/matrix//">Matrix</a></p>
<p>Write an efficient algorithm that searches for a value <code>target</code> in an <code>m x n</code> integer matrix <code>matrix</code>. This matrix has the following properties:</p>
<ul>
<li>Integers in each row are sorted in ascending from left to right.</li>
<li>Integers in each column are sorted in ascending from top to bottom.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= n, m &lt;= 300</code></li>
<li>-10<sup>9</sup> &lt;&#x3D; <code>matrix[i][j]</code> &lt;&#x3D; 10<sup>9</sup></li>
<li>All the integers in each row are <strong>sorted</strong> in ascending order.</li>
<li>All the integers in each column are <strong>sorted</strong> in ascending order.</li>
<li>-10<sup>9</sup> &lt;&#x3D; target &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>start from top right corner</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">0</span>, n = matrix[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &lt; matrix.<span class="built_in">size</span>() &amp;&amp; n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[m][n] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[m][n] &lt; target) &#123;</span><br><span class="line">                m++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Divide and Conquer</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>242. Valid Anagram</title>
    <url>/2023/12/18/242-Valid-Anagram/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/valid-anagram/">242. Valid Anagram</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a></p>
<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>t</code> <em>is an anagram of</em> <code>s</code><em>, and</em> <code>false</code> <em>otherwise</em>.</p>
<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;anagram&quot;</span>, t = <span class="string">&quot;nagaram&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;rat&quot;</span>, t = <span class="string">&quot;car&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length, t.length &lt;&#x3D; 5 * 10<sup>4</sup></li>
<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>
</ul>
<p><strong>Follow up:</strong> What if the inputs contain Unicode characters? How would you adapt your solution to such a case?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>map</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            count[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : t) &#123;</span><br><span class="line">            count[c]--;</span><br><span class="line">            <span class="keyword">if</span> (count[c] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count[c] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>25. Reverse Nodes in k-Group</title>
    <url>/2023/01/06/25-Reverse-Nodes-in-k-Group/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/">25. Reverse Nodes in k-Group</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/recursion/">Recursion</a></p>
<p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return <em>the modified list</em>.</p>
<p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p>
<p>You may not alter the values in the list’s nodes, only nodes themselves may be changed.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,4,5], k = 2</span><br><span class="line">Output: [2,1,4,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,4,5], k = 3</span><br><span class="line">Output: [3,2,1,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is <code>n</code>.</li>
<li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li>
<li><code>0 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<p><strong>Follow-up:</strong> Can you solve the problem in <code>O(1)</code> extra memory space?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Check if there are k nodes, otherwise just return head</li>
<li>Reverse(head, tail), then apply the function to further nodes</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode *tail = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tail) &#123;</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *newHead = <span class="built_in">reverse</span>(head, tail);</span><br><span class="line">        head-&gt;next = <span class="built_in">reverseKGroup</span>(tail, k);</span><br><span class="line">        <span class="comment">// Note:</span></span><br><span class="line">        <span class="comment">// At first i was trying to do reverseKGroup() first then reverse(), i.e</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// reverseKGroup(tail, k);</span></span><br><span class="line">        <span class="comment">// ListNode *newHead = reverse(head, tail);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// But it run into problem because the tail has been changed and the afterwards</span></span><br><span class="line">        <span class="comment">// reverse would fail. It&#x27;s also more complicated to understand than the current</span></span><br><span class="line">        <span class="comment">// implementation, i.e. reverse just return a reversed linked list ending with nullptr</span></span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head, ListNode* tail)</span> </span>&#123;</span><br><span class="line">        ListNode *cur = head, *pre = <span class="literal">nullptr</span>, *tmp = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != tail) &#123;</span><br><span class="line">            tmp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>250. Count Univalue Subtrees</title>
    <url>/2024/07/01/250-Count-Univalue-Subtrees/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-univalue-subtrees/description/">250. Count Univalue Subtrees</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the number of <strong>uni-value</strong> subtrees.</p>
<p>A <strong>uni-value subtree</strong>  means all nodes of the subtree have the same value.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/08/21/unival_e1.jpg" style="width: 450px; height: 258px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,1,5,5,5,null,5]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,5,5,5,5,null,5]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of the node in the tree will be in the range <code>[0, 1000]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countUnivalSubtrees</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MIN;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = root-&gt;left ? <span class="built_in">traverse</span>(root-&gt;left) : root-&gt;val;</span><br><span class="line">        <span class="type">int</span> right = root-&gt;right ? <span class="built_in">traverse</span>(root-&gt;right) : root-&gt;val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left == root-&gt;val &amp;&amp; right == root-&gt;val) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">return</span> root-&gt;val;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MIN;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>251. Flatten 2D Vector</title>
    <url>/2024/03/27/251-Flatten-2D-Vector/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/flatten-2d-vector/description/">251. Flatten 2D Vector</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design an iterator to flatten a 2D vector. It should support the <code>next</code> and <code>hasNext</code> operations.</p>
<p>Implement the <code>Vector2D</code> class:</p>
<ul>
<li><code>Vector2D(int[][] vec)</code> initializes the object with the 2D vector <code>vec</code>.</li>
<li><code>next()</code> returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to <code>next</code> are valid.</li>
<li><code>hasNext()</code> returns <code>true</code> if there are still some elements in the vector, and <code>false</code> otherwise.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line"></span><br><span class="line">[<span class="string">&quot;Vector2D&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;hasNext&quot;</span>, <span class="string">&quot;hasNext&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;hasNext&quot;</span>]</span><br><span class="line">[[[[1, 2], [3], [4]]], [], [], [], [], [], [], []]</span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line">[null, 1, 2, 3, <span class="literal">true</span>, <span class="literal">true</span>, 4, <span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line"></span><br><span class="line">Vector2D vector2D = new Vector2D([[1, 2], [3], [4]]);</span><br><span class="line">vector2D.next();    // <span class="built_in">return</span> 1</span><br><span class="line">vector2D.next();    // <span class="built_in">return</span> 2</span><br><span class="line">vector2D.next();    // <span class="built_in">return</span> 3</span><br><span class="line">vector2D.hasNext(); // <span class="built_in">return</span> True</span><br><span class="line">vector2D.hasNext(); // <span class="built_in">return</span> True</span><br><span class="line">vector2D.next();    // <span class="built_in">return</span> 4</span><br><span class="line">vector2D.hasNext(); // <span class="built_in">return</span> False</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= vec.length &lt;= 200</code></li>
<li><code>0 &lt;= vec[i].length &lt;= 500</code></li>
<li><code>-500 &lt;= vec[i][j] &lt;= 500</code></li>
<li>At most <code>10^5</code> calls will be made to <code>next</code> and <code>hasNext</code>.</li>
</ul>
<p><strong>Follow up:</strong>  As an added challenge, try to code it using only <a href="http://www.cplusplus.com/reference/iterator/iterator/" target="_blank">iterators in C++</a> or <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html" target="_blank">iterators in Java</a>.</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>update i, j correctly</li>
<li>we need to use while in hasNext() because there can be empty vectors</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector2D</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; vec_;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="built_in">Vector2D</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; vec) &#123;</span><br><span class="line">        vec_ = vec;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">hasNext</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vec_[i][j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i != vec_.<span class="built_in">size</span>() &amp;&amp; j == vec_[i].<span class="built_in">size</span>()) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == vec_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Vector2D object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Vector2D* obj = new Vector2D(vec);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;next();</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;hasNext();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
        <tag>Design</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>257. Binary Tree Paths</title>
    <url>/2024/04/03/257-Binary-Tree-Paths/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-paths/description/">257. Binary Tree Paths</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return all root-to-leaf paths in <strong>any order</strong> .</p>
<p>A <strong>leaf</strong>  is a node with no children.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg" style="width: 207px; height: 293px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,null,5]</span><br><span class="line">Output: [<span class="string">&quot;1-&gt;2-&gt;5&quot;</span>,<span class="string">&quot;1-&gt;3&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [<span class="string">&quot;1&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>traverse the tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, string path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path += <span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">        <span class="type">bool</span> node = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;left, path + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            node = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;right, path + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            node = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>26. Remove Duplicates from Sorted Array</title>
    <url>/2023/01/17/26-Remove-Duplicates-from-Sorted-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">26. Remove Duplicates from Sorted Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p>
<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm"><strong>in-place</strong></a> such that each unique element appears only <strong>once</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>.</p>
<p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code> should hold the final result. It does not matter what you leave beyond the first <code>k</code> elements.</p>
<p>Return <code>k</code> <em>after placing the final result in the first</em> <code>k</code> <em>slots of</em> <code>nums</code>.</p>
<p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a></strong> with O(1) extra memory.</p>
<p><strong>Custom Judge:</strong></p>
<p>The judge will test your solution with the following code:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,2]</span><br><span class="line">Output: 2, nums = [1,2,_]</span><br><span class="line">Explanation: Your <span class="keyword">function</span> should <span class="built_in">return</span> k = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]</span><br><span class="line">Explanation: Your <span class="keyword">function</span> should <span class="built_in">return</span> k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10<sup>4</sup></li>
<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>
<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use 2 pointers, slow and fast</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> fast = <span class="number">0</span>, slow = <span class="number">0</span>, len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != nums[slow]) &#123;</span><br><span class="line">                nums[++slow] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>261. Graph Valid Tree</title>
    <url>/2023/09/03/261-Graph-Valid-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/graph-valid-tree/">261. Graph Valid Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/union-find//">Union Find</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a></p>
<p>You have a graph of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given an integer n and a list of <code>edges</code> where edges[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] indicates that there is an undirected edge between nodes a<sub>i</sub> and b<sub>i</sub> in the graph.</p>
<p>Return <code>true</code> <em>if the edges of the given graph make up a valid tree, and</em> <code>false</code> <em>otherwise</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/12/tree1-graph.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/12/tree2-graph.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 2000</code></li>
<li><code>0 &lt;= edges.length &lt;= 5000</code></li>
<li><code>edges[i].length == 2</code></li>
<li>0 &lt;&#x3D; a<sub>i</sub>, b<sub>i</sub> &lt; n</li>
<li>a<sub>i</sub> !&#x3D; b<sub>i</sub></li>
<li>There are no self-loops or repeated edges.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Union find</li>
<li>A valid tree doesn’t have a cycle, and there’s only one component</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validTree</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        count = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> p = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> q = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> rootP = <span class="built_in">find</span>(p);</span><br><span class="line">            <span class="type">int</span> rootQ = <span class="built_in">find</span>(q);</span><br><span class="line">            <span class="keyword">if</span> (rootP == rootQ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent[rootP] = rootQ;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[node] != node) &#123;</span><br><span class="line">            parent[node] = <span class="built_in">find</span>(parent[node]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[node];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>263. Ugly Number</title>
    <url>/2023/10/17/263-Ugly-Number/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/ugly-number/">263. Ugly Number</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a></p>
<p>An <strong>ugly number</strong> is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p>
<p>Given an integer <code>n</code>, return <code>true</code> <em>if</em> <code>n</code> <em>is an <strong>ugly number</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 6</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: 6 = 2 × 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 14</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: 14 is not ugly since it includes the prime <span class="built_in">factor</span> 7.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>-2<sup>31</sup> &lt;&#x3D; n &lt;&#x3D; 2<sup>31</sup> - 1</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUgly</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">3</span> == <span class="number">0</span>) n /= <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">5</span> == <span class="number">0</span>) n /= <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>264. Ugly Number II</title>
    <url>/2023/11/06/264-Ugly-Number-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/ugly-number-ii/">264. Ugly Number II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/dynamic-programming//">Dynamic Programming</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a></p>
<p>An <strong>ugly number</strong> is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p>
<p>Given an integer <code>n</code>, return <em>the</em> n<sup>th</sup> <em><strong>ugly number</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 10</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 1690</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>It’s like combining 3 linked lists</li>
<li>No need to use priority queue, just compare the 3 values</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val1 = <span class="number">1</span>, val2 = <span class="number">1</span>, val3 = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> index1 = <span class="number">0</span>, index2 = <span class="number">0</span>, index3 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> val = <span class="built_in">min</span>(&#123;val1, val2, val3&#125;);</span><br><span class="line">            res[index] = val;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (val == val1) &#123;</span><br><span class="line">                val1 = res[index1] * <span class="number">2</span>;</span><br><span class="line">                index1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (val == val2) &#123;</span><br><span class="line">                val2 = res[index2] * <span class="number">3</span>;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (val == val3) &#123;</span><br><span class="line">                val3 = res[index3] * <span class="number">5</span>;</span><br><span class="line">                index3++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
        <tag>Heap (Priority Queue)</tag>
      </tags>
  </entry>
  <entry>
    <title>264C. Choosing Balls</title>
    <url>/2024/06/14/264C-Choosing-Balls/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/264/C">C. Choosing Balls</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 n(1≤n≤1e5) q(1≤q≤500) 和长为 n 的数组 v(-1e5≤v[i]≤1e5)，长为 n 的数组 c(1≤c[i]≤n)。<br>有 n 个球排成一排，第 i 个球的价值为 v[i]，颜色为 c[i]。</p>
<p>然后输入 q 个询问，每个询问输入 a 和 b，范围 [-1e5,1e5]。<br>对每个询问，计算：<br>从这一排球中，从左到右，选出一个子序列，子序列的价值和为：</p>
<ul>
<li>如果球不在序列开头，且球的颜色与前一个球的颜色相同，则加上球的值 * a。</li>
<li>否则，加上球的值 * b。</li>
</ul>
<p>输出子序列的价值和的最大值。<br>子序列可以是空的，此时价值和为 0。</p>
<p>注：子序列不一定连续。</p>
<p>思路可以用到 2024.6.8 的双周 t4 上。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt;&amp; values, vector&lt;<span class="type">int</span>&gt;&amp; colors, <span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// define dp[c]: the max value we can get when ending with color c</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, LLONG_MIN)</span></span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mx1 = <span class="number">0</span>, mx2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mc = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> v = values[i];</span><br><span class="line">        <span class="type">int</span> c = colors[i];</span><br><span class="line">        <span class="comment">/*  how to get the maxValue ending with c, several possibilities:</span></span><br><span class="line"><span class="comment">            1. this is the first the value in the sequence, the result is b * v</span></span><br><span class="line"><span class="comment">            2. this is not the first value in the sequence, and the color is the same as the</span></span><br><span class="line"><span class="comment">            previous color, dp[c] + a * v</span></span><br><span class="line"><span class="comment">            3. this is not the first value in the sequence, we append the num as a successor to a different</span></span><br><span class="line"><span class="comment">            color. Which color? the color with the biggest dp[c]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            to make this happen, we need to record the color with the biggest dp[] value. if the color</span></span><br><span class="line"><span class="comment">            with biggest dp[] value is c, then we should do it with the second biggest dp[] value</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> firstOption = b * v;</span><br><span class="line">        <span class="keyword">if</span> (dp[c] != LLONG_MIN) &#123;</span><br><span class="line">            <span class="comment">// can be dp[c]</span></span><br><span class="line">            <span class="comment">// can be b * v(as first value)</span></span><br><span class="line">            <span class="comment">// can be mx1 + a * v or mx2 + b * v if c == mx</span></span><br><span class="line">            <span class="comment">// can be mx1 + b * v or mx1 + a * v if c != mx</span></span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> zeroOption = dp[c];</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> thirdOption;</span><br><span class="line">            <span class="keyword">if</span> (c == mc) &#123;</span><br><span class="line">                thirdOption = <span class="built_in">max</span>(mx1 + a * v, mx2 + b * v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                thirdOption = <span class="built_in">max</span>(mx1 + b * v, dp[c] + a * v);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[c] = <span class="built_in">max</span>(zeroOption, <span class="built_in">max</span>(firstOption, thirdOption));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// can be 0 &lt;-- this is wrong, because we need to pick this item, cannot be zero</span></span><br><span class="line">            <span class="comment">// can be b * v</span></span><br><span class="line">            <span class="comment">// can be mx1 + b * v if mc != -1</span></span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> thirdOption = mx1 + b * v;</span><br><span class="line">            dp[c] = <span class="built_in">max</span>(firstOption, thirdOption);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[c] &gt; mx1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != mc) &#123;</span><br><span class="line">                mc = c;</span><br><span class="line">                mx2 = mx1;</span><br><span class="line">            &#125;</span><br><span class="line">            mx1 = dp[c];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[c] &gt; mx2 &amp;&amp; c != mc) &#123;</span><br><span class="line">            mx2 = dp[c];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; mx1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    in &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; values;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; colors;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= n; t++) &#123;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        in &gt;&gt; value;</span><br><span class="line">        values.<span class="built_in">push_back</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= n; t++) &#123;</span><br><span class="line">        <span class="type">int</span> color;</span><br><span class="line">        in &gt;&gt; color;</span><br><span class="line">        colors.<span class="built_in">push_back</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= q; t++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        in &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">solve</span>(n, values, colors, a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>27. Remove Element</title>
    <url>/2023/01/17/27-Remove-Element/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/remove-element/">27. Remove Element</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p>
<p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> <a href="https://en.wikipedia.org/wiki/In-place_algorithm"><strong>in-place</strong></a>. The relative order of the elements may be changed.</p>
<p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code> should hold the final result. It does not matter what you leave beyond the first <code>k</code> elements.</p>
<p>Return <code>k</code> <em>after placing the final result in the first</em> <code>k</code> <em>slots of</em> <code>nums</code>.</p>
<p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a></strong> with O(1) extra memory.</p>
<p><strong>Custom Judge:</strong></p>
<p>The judge will test your solution with the following code:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int val = ...; // Value to remove</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length.</span><br><span class="line">                            // It is sorted with no values equaling val.</span><br><span class="line"></span><br><span class="line">int k = removeElement(nums, val); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line"><span class="built_in">sort</span>(nums, 0, k); // Sort the first k elements of nums</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; actualLength; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2,_,_]</span><br><span class="line">Explanation: Your <span class="keyword">function</span> should <span class="built_in">return</span> k = 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">Output: 5, nums = [0,1,4,0,3,_,_,_]</span><br><span class="line">Explanation: Your <span class="keyword">function</span> should <span class="built_in">return</span> k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.</span><br><span class="line">Note that the five elements can be returned <span class="keyword">in</span> any order.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 50</code></li>
<li><code>0 &lt;= val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>2 pointers</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fast = <span class="number">0</span>, slow = <span class="number">0</span>, len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != val) &#123;</span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>270. Closest Binary Search Tree Value</title>
    <url>/2024/05/24/270-Closest-Binary-Search-Tree-Value/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/closest-binary-search-tree-value/description/">270. Closest Binary Search Tree Value</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary search tree and a <code>target</code> value, return the value in the BST that is closest to the <code>target</code>. If there are multiple answers, print the smallest.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/03/12/closest1-1-tree.jpg" style="width: 292px; height: 302px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,5,1,3], target = 3.714286</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1], target = 4.428571</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 10^9</code></li>
<li><code>-10^9 &lt;= target &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">closestValue</span><span class="params">(TreeNode* root, <span class="type">double</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, target);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">double</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == target) &#123;</span><br><span class="line">            res = root-&gt;val;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &gt; target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(root-&gt;val - target) &lt; <span class="built_in">abs</span>(res - target)) &#123;</span><br><span class="line">                res = root-&gt;val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;left, target);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(root-&gt;val - target) &lt;= <span class="built_in">abs</span>(res - target)) &#123;</span><br><span class="line">                res = root-&gt;val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;right, target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>277. Find the Celebrity</title>
    <url>/2023/08/31/277-Find-the-Celebrity/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-celebrity/">277. Find the Celebrity</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/greedy//">Greedy</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/interactive//">Interactive</a></p>
<p>Suppose you are at a party with <code>n</code> people labeled from <code>0</code> to <code>n - 1</code> and among them, there may exist one celebrity. The definition of a celebrity is that all the other <code>n - 1</code> people know the celebrity, but the celebrity does not know any of them.</p>
<p>Now you want to find out who the celebrity is or verify that there is not one. You are only allowed to ask questions like: “Hi, A. Do you know B?” to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).</p>
<p>You are given a helper function <code>bool knows(a, b)</code> that tells you whether <code>a</code> knows <code>b</code>. Implement a function <code>int findCelebrity(n)</code>. There will be exactly one celebrity if they are at the party.</p>
<p>Return <em>the celebrity’s label if there is a celebrity at the party</em>. If there is no celebrity, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2022/01/19/g1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: graph = [[1,1,0],[0,1,0],[1,1,1]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: There are three persons labeled with 0, 1 and 2\. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2022/01/19/g2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: graph = [[1,0,1],[1,1,0],[0,1,1]]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: There is no celebrity.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == graph.length == graph[i].length</code></li>
<li><code>2 &lt;= n &lt;= 100</code></li>
<li><code>graph[i][j]</code> is <code>0</code> or <code>1</code>.</li>
<li><code>graph[i][i] == 1</code></li>
</ul>
<p><strong>Follow up:</strong> If the maximum number of allowed calls to the API <code>knows</code> is <code>3 * n</code>, could you find a solution without exceeding the maximum number of calls?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>knows(i,j) &#x3D;&#x3D; true then i can’t be a celerity since a celeb knows nobody</li>
<li>knows(i,j) &#x3D;&#x3D; false then j can’t be a celeb since everyone must know the celeb</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The knows API is defined for you.</span></span><br><span class="line"><span class="comment">      bool knows(int a, int b); */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCelebrity</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> can = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">knows</span>(can, i)) &#123;</span><br><span class="line">                can = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (can == i) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">knows</span>(can, i) || !<span class="built_in">knows</span>(i, can)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> can;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Two Pointers</tag>
        <tag>Greedy</tag>
        <tag>Interactive</tag>
      </tags>
  </entry>
  <entry>
    <title>28. Find the Index of the First Occurrence in a String</title>
    <url>/2023/01/25/28-Find-the-Index-of-the-First-Occurrence-in-a-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. Find the Index of the First Occurrence in a String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/string-matching/">String Matching</a></p>
<p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: haystack = <span class="string">&quot;sadbutsad&quot;</span>, needle = <span class="string">&quot;sad&quot;</span></span><br><span class="line">Output: 0</span><br><span class="line">Explanation: <span class="string">&quot;sad&quot;</span> occurs at index 0 and 6.</span><br><span class="line">The first occurrence is at index 0, so we <span class="built_in">return</span> 0.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: haystack = <span class="string">&quot;leetcode&quot;</span>, needle = <span class="string">&quot;leeto&quot;</span></span><br><span class="line">Output: -1</span><br><span class="line">Explanation: <span class="string">&quot;leeto&quot;</span> did not occur <span class="keyword">in</span> <span class="string">&quot;leetcode&quot;</span>, so we <span class="built_in">return</span> -1.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; haystack.length, needle.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>good prime: 9999991</li>
<li>get the powHash</li>
<li>some edge cases of module operation(like avoid the negative number)</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> patHash = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>, powHash = <span class="number">1</span>, prime = <span class="number">9999991</span>, R = <span class="number">26</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : needle) &#123;</span><br><span class="line">            patHash = (patHash * R + (c - <span class="string">&#x27;a&#x27;</span>)) % prime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; needle.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            powHash = powHash * R % prime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sumHash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; haystack.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> num = haystack[right++] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            sumHash = (sumHash * R + num) % prime;</span><br><span class="line">            <span class="keyword">if</span> (right - left == needle.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sumHash == patHash &amp;&amp; haystack.<span class="built_in">substr</span>(left, right - left) == needle) &#123;</span><br><span class="line">                    <span class="keyword">return</span> left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sumHash = ((sumHash - (haystack[left++] - <span class="string">&#x27;a&#x27;</span>) * powHash) % prime + prime) % prime;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Two Pointers</tag>
        <tag>String Matching</tag>
      </tags>
  </entry>
  <entry>
    <title>283. Move Zeroes</title>
    <url>/2023/01/17/283-Move-Zeroes/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/move-zeroes/">283. Move Zeroes</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p>
<p>Given an integer array <code>nums</code>, move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p><strong>Note</strong> that you must do this in-place without making a copy of the array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0]</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>4</sup></li>
<li>-2<sup>31</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 2<sup>31</sup> - 1</li>
</ul>
<p><strong>Follow up:</strong> Could you minimize the total number of operations done?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Remove the element first, then set the remaining to zero</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">removeElement</span>(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = len; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fast = <span class="number">0</span>, slow = <span class="number">0</span>, len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != val) &#123;</span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>284. Peeking Iterator</title>
    <url>/2024/01/03/284-Peeking-Iterator/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/peeking-iterator/">284. Peeking Iterator</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/iterator//">Iterator</a></p>
<p>Design an iterator that supports the <code>peek</code> operation on an existing iterator in addition to the <code>hasNext</code> and the <code>next</code> operations.</p>
<p>Implement the <code>PeekingIterator</code> class:</p>
<ul>
<li><code>PeekingIterator(Iterator&lt;int&gt; nums)</code> Initializes the object with the given integer iterator <code>iterator</code>.</li>
<li><code>int next()</code> Returns the next element in the array and moves the pointer to the next element.</li>
<li><code>boolean hasNext()</code> Returns <code>true</code> if there are still elements in the array.</li>
<li><code>int peek()</code> Returns the next element in the array <strong>without</strong> moving the pointer.</li>
</ul>
<p><strong>Note:</strong> Each language may have a different implementation of the constructor and <code>Iterator</code>, but they all support the <code>int next()</code> and <code>boolean hasNext()</code> functions.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;PeekingIterator&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;peek&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;hasNext&quot;</span>]</span><br><span class="line">[[[1, 2, 3]], [], [], [], [], []]</span><br><span class="line">Output</span><br><span class="line">[null, 1, 2, 2, 3, <span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]</span><br><span class="line">peekingIterator.next();    // <span class="built_in">return</span> 1, the pointer moves to the next element [1,2,3].</span><br><span class="line">peekingIterator.peek();    // <span class="built_in">return</span> 2, the pointer does not move [1,2,3].</span><br><span class="line">peekingIterator.next();    // <span class="built_in">return</span> 2, the pointer moves to the next element [1,2,3]</span><br><span class="line">peekingIterator.next();    // <span class="built_in">return</span> 3, the pointer moves to the next element [1,2,3]</span><br><span class="line">peekingIterator.hasNext(); // <span class="built_in">return</span> False</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>
<li>All the calls to <code>next</code> and <code>peek</code> are valid.</li>
<li>At most <code>1000</code> calls will be made to <code>next</code>, <code>hasNext</code>, and <code>peek</code>.</li>
</ul>
<p><strong>Follow up:</strong> How would you extend your design to be generic and work with all types, not just integer?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>store the next value internally</li>
<li>the internal next value would always be one step ahead of the next()</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Below is the interface for Iterator, which is already defined for you.</span></span><br><span class="line"><span class="comment"> * **DO NOT** modify the interface for Iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  class Iterator &#123;</span></span><br><span class="line"><span class="comment"> *      struct Data;</span></span><br><span class="line"><span class="comment"> *      Data* data;</span></span><br><span class="line"><span class="comment"> *  public:</span></span><br><span class="line"><span class="comment"> *      Iterator(const vector&lt;int&gt;&amp; nums);</span></span><br><span class="line"><span class="comment"> *      Iterator(const Iterator&amp; iter);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      // Returns the next element in the iteration.</span></span><br><span class="line"><span class="comment"> *      int next();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      // Returns true if the iteration has more elements.</span></span><br><span class="line"><span class="comment"> *      bool hasNext() const;</span></span><br><span class="line"><span class="comment"> *  &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PeekingIterator</span> : <span class="keyword">public</span> Iterator &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> nextItem;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PeekingIterator</span>(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums) : <span class="built_in">Iterator</span>(nums) &#123;</span><br><span class="line">        <span class="comment">// Initialize any member here.</span></span><br><span class="line">        <span class="comment">// **DO NOT** save a copy of nums and manipulate it directly.</span></span><br><span class="line">        <span class="comment">// You should only use the Iterator interface methods.</span></span><br><span class="line">        nextItem = Iterator::<span class="built_in">hasNext</span>() ? Iterator::<span class="built_in">next</span>() : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the next element in the iteration without advancing the iterator.</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hasNext() and next() should behave the same as in the Iterator interface.</span></span><br><span class="line">    <span class="comment">// Override them if needed.</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp = nextItem;</span><br><span class="line">        nextItem = Iterator::<span class="built_in">hasNext</span>() ? Iterator::<span class="built_in">next</span>() : <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNext</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextItem != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Design</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>285. Inorder Successor in BST</title>
    <url>/2024/07/13/285-Inorder-Successor-in-BST/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/inorder-successor-in-bst/description/">285. Inorder Successor in BST</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary search tree and a node <code>p</code> in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return <code>null</code>.</p>
<p>The successor of a node <code>p</code> is the node with the smallest key greater than <code>p.val</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG" style="width: 122px; height: 117px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,3], p = 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: 1<span class="string">&#x27;s in-order successor node is 2. Note that both p and the return value is of TreeNode type.</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG" style="width: 246px; height: 229px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,3,6,2,4,null,null,1], p = 6</span><br><span class="line">Output: null</span><br><span class="line">Explanation: There is no in-order successor of the current node, so the answer is `null`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li>
<li>All Nodes will have unique values.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* node = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> found = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">inorderSuccessor</span><span class="params">(TreeNode* root, TreeNode* p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, p);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, TreeNode* p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root || node) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (found &amp;&amp; !node) &#123;</span><br><span class="line">            node = root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == p) &#123;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>291. Word Pattern II</title>
    <url>/2024/05/24/291-Word-Pattern-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/word-pattern-ii/description/?envType=weekly-question&envId=2024-05-22">291. Word Pattern II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a <code>pattern</code> and a string <code>s</code>, return <code>true</code> if <code>s</code> <strong>matches</strong>  the <code>pattern</code>.</p>
<p>A string <code>s</code> <b>matches</b> a <code>pattern</code> if there is some <strong>bijective mapping</strong>  of single characters to <strong>non-empty</strong>  strings such that if each character in <code>pattern</code> is replaced by the string it maps to, then the resulting string is <code>s</code>. A <strong>bijective mapping</strong>  means that no two characters map to the same string, and no character maps to two different strings.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: pattern = <span class="string">&quot;abab&quot;</span>, s = <span class="string">&quot;redblueredblue&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: One possible mapping is as follows:</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> -&gt; <span class="string">&quot;red&quot;</span></span><br><span class="line"><span class="string">&#x27;b&#x27;</span> -&gt; <span class="string">&quot;blue&quot;</span>```</span><br><span class="line"></span><br><span class="line">**Example 2:**</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">Input: pattern = <span class="string">&quot;aaaa&quot;</span>, s = <span class="string">&quot;asdasdasdasd&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: One possible mapping is as follows:</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> -&gt; <span class="string">&quot;asd&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: pattern = <span class="string">&quot;aabb&quot;</span>, s = <span class="string">&quot;xyzabcxzyabc&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= pattern.length, s.length &lt;= 20</code></li>
<li><code>pattern</code> and <code>s</code> consist of only lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dynamic programming</li>
<li>DCC 5&#x2F;24&#x2F;2024</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">char</span>, string&gt; m;</span><br><span class="line">    map&lt;string, <span class="type">char</span>&gt; rev;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordPatternMatch</span><span class="params">(string pattern, string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, pattern, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, string&amp; pattern, string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == pattern.<span class="built_in">size</span>() &amp;&amp; j == s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == pattern.<span class="built_in">size</span>() || j == s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pattern.<span class="built_in">size</span>() - i &gt; s.<span class="built_in">size</span>() - j) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c = pattern[i];</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">contains</span>(c)) &#123;</span><br><span class="line">            string t = m[c];</span><br><span class="line">            <span class="type">int</span> size = t.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span> (t == s.<span class="built_in">substr</span>(j, size)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">dfs</span>(i + <span class="number">1</span>, j + size, pattern, s);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>; k &lt;= s.<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">                string t = s.<span class="built_in">substr</span>(j, k - j);</span><br><span class="line">                <span class="keyword">if</span> (rev.<span class="built_in">contains</span>(t)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                m[c] = t;</span><br><span class="line">                rev[t] = c;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(i + <span class="number">1</span>, k, pattern, s)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    m.<span class="built_in">erase</span>(c);</span><br><span class="line">                    rev.<span class="built_in">erase</span>(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>295. Find Median from Data Stream</title>
    <url>/2023/10/10/295-Find-Median-from-Data-Stream/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-median-from-data-stream/">295. Find Median from Data Stream</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/data-stream//">Data Stream</a></p>
<p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p>
<ul>
<li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li>
<li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li>
</ul>
<p>Implement the MedianFinder class:</p>
<ul>
<li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li>
<li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li>
<li><code>double findMedian()</code> returns the median of all elements so far. Answers within 10<sup>-5</sup> of the actual answer will be accepted.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;MedianFinder&quot;</span>, <span class="string">&quot;addNum&quot;</span>, <span class="string">&quot;addNum&quot;</span>, <span class="string">&quot;findMedian&quot;</span>, <span class="string">&quot;addNum&quot;</span>, <span class="string">&quot;findMedian&quot;</span>]</span><br><span class="line">[[], [1], [2], [], [3], []]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 1.5, null, 2.0]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MedianFinder medianFinder = new MedianFinder();</span><br><span class="line">medianFinder.addNum(1);    // arr = [1]</span><br><span class="line">medianFinder.addNum(2);    // arr = [1, 2]</span><br><span class="line">medianFinder.findMedian(); // <span class="built_in">return</span> 1.5 (i.e., (1 + 2) / 2)</span><br><span class="line">medianFinder.addNum(3);    // arr[1, 2, 3]</span><br><span class="line">medianFinder.findMedian(); // <span class="built_in">return</span> 2.0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>-10<sup>5</sup> &lt;&#x3D; num &lt;&#x3D; 10<sup>5</sup></li>
<li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li>
<li>At most 5 * 10<sup>4</sup> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li>
</ul>
<p><strong>Follow up:</strong></p>
<ul>
<li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>
<li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use two priority queues</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; big;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt;&gt; small;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MedianFinder</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (small.<span class="built_in">size</span>() &gt;= big.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            small.<span class="built_in">push</span>(num);</span><br><span class="line">            <span class="type">int</span> top = small.<span class="built_in">top</span>();</span><br><span class="line">            small.<span class="built_in">pop</span>();</span><br><span class="line">            big.<span class="built_in">push</span>(top);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            big.<span class="built_in">push</span>(num);</span><br><span class="line">            <span class="type">int</span> top = big.<span class="built_in">top</span>();</span><br><span class="line">            big.<span class="built_in">pop</span>();</span><br><span class="line">            small.<span class="built_in">push</span>(top);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (small.<span class="built_in">size</span>() &gt; big.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> small.<span class="built_in">top</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (small.<span class="built_in">size</span>() &lt; big.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> big.<span class="built_in">top</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">return</span> (small.<span class="built_in">top</span>() + big.<span class="built_in">top</span>()) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MedianFinder* obj = new MedianFinder();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addNum(num);</span></span><br><span class="line"><span class="comment"> * double param_2 = obj-&gt;findMedian();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Two Pointers</tag>
        <tag>Design</tag>
        <tag>Data Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>297. Serialize and Deserialize Binary Tree</title>
    <url>/2023/08/22/297-Serialize-and-Deserialize-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/">297. Serialize and Deserialize Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>
<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization&#x2F;deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>
<p><strong>Clarification:</strong> The input&#x2F;output format is the same as <a href="https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,null,null,4,5]</span><br><span class="line">Output: [1,2,3,null,null,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preorder done</li>
<li>postorder done</li>
<li>levelorder tbd</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">        string res;</span><br><span class="line">        res = <span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">        res += <span class="string">&quot;,&quot;</span> + <span class="built_in">serialize</span>(root-&gt;left);</span><br><span class="line">        res += <span class="string">&quot;,&quot;</span> + <span class="built_in">serialize</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        queue&lt;string&gt; dataStr;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, found = data.<span class="built_in">find</span>(<span class="string">&quot;,&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (found != string::npos) &#123;</span><br><span class="line">            string node = data.<span class="built_in">substr</span>(start, found - start);</span><br><span class="line">            dataStr.<span class="built_in">push</span>(node);</span><br><span class="line">            start = found + <span class="number">1</span>;</span><br><span class="line">            found = data.<span class="built_in">find</span>(<span class="string">&quot;,&quot;</span>, start);</span><br><span class="line">        &#125;</span><br><span class="line">        dataStr.<span class="built_in">push</span>(data.<span class="built_in">substr</span>(start, data.<span class="built_in">size</span>() - start));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(dataStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(queue&lt;string&gt;&amp; dataStr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if (dataStr.empty()) return nullptr;</span></span><br><span class="line">        string rootStr = dataStr.<span class="built_in">front</span>();</span><br><span class="line">        dataStr.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (rootStr == <span class="string">&quot;#&quot;</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rootVal = <span class="built_in">stoi</span>(rootStr);</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootVal);</span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(dataStr);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(dataStr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec ser, deser;</span></span><br><span class="line"><span class="comment">// TreeNode* ans = deser.deserialize(ser.serialize(root));</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>298. Binary Tree Longest Consecutive Sequence</title>
    <url>/2024/04/03/298-Binary-Tree-Longest-Consecutive-Sequence/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-longest-consecutive-sequence/description/">298. Binary Tree Longest Consecutive Sequence</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the length of the longest <strong>consecutive sequence path</strong> .</p>
<p>A <strong>consecutive sequence path</strong>  is a path where the values <strong>increase by one</strong>  along the path.</p>
<p>Note that the path can start <strong>at any node</strong>  in the tree, and you cannot go from a node to its parent in the path.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/consec1-1-tree.jpg" style="width: 306px; height: 400px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,3,2,4,null,null,null,5]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Longest consecutive sequence path is 3-4-5, so <span class="built_in">return</span> 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/consec1-2-tree.jpg" style="width: 249px; height: 400px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,null,3,2,null,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: Longest consecutive sequence path is 2-3, not 3-2-1, so <span class="built_in">return</span> 2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 3 * 10^4]</code>.</li>
<li><code>-3 * 10^4 &lt;= Node.val &lt;= 3 * 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>traverse the tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestConsecutive</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;left-&gt;val == root-&gt;val + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">traverse</span>(root-&gt;left, cur + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">traverse</span>(root-&gt;left, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;right-&gt;val == root-&gt;val + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">traverse</span>(root-&gt;right, cur + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">traverse</span>(root-&gt;right, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3. Longest Substring Without Repeating Characters</title>
    <url>/2023/01/18/3-Longest-Substring-Without-Repeating-Characters/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">3. Longest Substring Without Repeating Characters</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/sliding-window/">Sliding Window</a></p>
<p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword="substring-nonempty"><strong>substring</strong></span> without repeating characters.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abcabcbb&quot;</span></span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is <span class="string">&quot;abc&quot;</span>, with the length of 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;bbbbb&quot;</span></span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is <span class="string">&quot;b&quot;</span>, with the length of 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;pwwkew&quot;</span></span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is <span class="string">&quot;wke&quot;</span>, with the length of 3.</span><br><span class="line">Notice that the answer must be a substring, <span class="string">&quot;pwke&quot;</span> is a subsequence and not a substring.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 10<sup>4</sup></li>
<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; window;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">char</span> c = s[right++];</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">while</span> (window[c] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// We should decrement d here no matter if d</span></span><br><span class="line">                <span class="comment">// is the same as c</span></span><br><span class="line">                <span class="type">char</span> d = s[left++];</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">max</span>(res, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>300. Longest Increasing Subsequence</title>
    <url>/2023/11/09/300-Longest-Increasing-Subsequence/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-increasing-subsequence/">300. Longest Increasing Subsequence</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/dynamic-programming//">Dynamic Programming</a></p>
<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing</strong></em> <span data-keyword="subsequence-array" class=" cursor-pointer relative text-dark-blue-s text-sm"></span><em><strong>subsequence</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,0,3,2,3]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [7,7,7,7,7,7,7]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 2500</code></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<p><strong>Follow up:</strong> Can you come up with an algorithm that runs in <code>O(n log(n))</code> time complexity?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size(), <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> longest = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    res[i] = <span class="built_in">max</span>(res[i], res[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            longest = <span class="built_in">max</span>(longest, res[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>3013. Divide an Array Into Subarrays With Minimum Cost II</title>
    <url>/2024/10/21/3013-Divide-an-Array-Into-Subarrays-With-Minimum-Cost-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/divide-an-array-into-subarrays-with-minimum-cost-ii/description/">3013. Divide an Array Into Subarrays With Minimum Cost II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a <strong>0-indexed</strong>  array of integers <code>nums</code> of length <code>n</code>, and two <strong>positive</strong>  integers <code>k</code> and <code>dist</code>.</p>
<p>The <strong>cost</strong>  of an array is the value of its <strong>first</strong>  element. For example, the cost of <code>[1,2,3]</code> is <code>1</code> while the cost of <code>[3,4,1]</code> is <code>3</code>.</p>
<p>You need to divide <code>nums</code> into <code>k</code> <strong>disjoint contiguous</strong> subarrays, such that the difference between the starting index of the <strong>second</strong>  subarray and the starting index of the <code>kth</code> subarray should be <strong>less than or equal to</strong>  <code>dist</code>. In other words, if you divide <code>nums</code> into the subarrays nums[0..(i<sub>1</sub> - 1)], nums[i<sub>1</sub>..(i<sub>2</sub> - 1)], …, nums[i<sub>k-1</sub>..(n - 1)], then i<sub>k-1</sub> - i<sub>1</sub> &lt;&#x3D; dist.</p>
<p>Return the <strong>minimum</strong>  possible sum of the cost of these subarrays.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,2,6,4,2], k = 3, dist = 3</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation: The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 5 - 2 &#x3D; 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 &#x3D; 5.<br>It can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [10,1,2,2,2,1], k = 4, dist = 3</span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure>

<p>Explanation: The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 3 - 1 &#x3D; 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 &#x3D; 15.<br>The division [10], [1], [2,2,2], and [1] is not valid, because the difference between i<sub>k-1</sub> and i<sub>1</sub> is 5 - 1 &#x3D; 4, which is greater than dist.<br>It can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [10,8,18,9], k = 3, dist = 1</span><br><span class="line">Output: 36</span><br></pre></td></tr></table></figure>

<p>Explanation: The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because i<sub>k-1</sub> - i<sub>1</sub> is 2 - 1 &#x3D; 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 &#x3D; 36.<br>The division [10], [8,18], and [9] is not valid, because the difference between i<sub>k-1</sub> and i<sub>1</sub> is 3 - 1 &#x3D; 2, which is greater than dist.<br>It can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= n &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>3 &lt;= k &lt;= n</code></li>
<li><code>k - 2 &lt;= dist &lt;= n - 2</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use 2 sorted lists</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// so, we need to pick nums[0], with another k - 1 numbers</span></span><br><span class="line">    <span class="comment">// the best choice is pick the minimum k - 1 numbers</span></span><br><span class="line">    <span class="comment">// but we have the contraint that ik-1 - i1 &lt;= dist</span></span><br><span class="line">    <span class="comment">// i1 = len(subArray1), so ik-1 &lt;= dist + len(subArray1)</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minimumCost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> dist)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cur = nums[<span class="number">0</span>], res = LLONG_MAX;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// starting from i, we need to pick k - 1 numbers,</span></span><br><span class="line">        <span class="comment">// so the last number we can iterate  is n - k + 1</span></span><br><span class="line">        multiset&lt;<span class="type">int</span>&gt; mx, mi;</span><br><span class="line">        <span class="type">int</span> right = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - k + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// feeding numbers until i + dist</span></span><br><span class="line">            <span class="comment">// now we need to get the minimum k - 1 numbers</span></span><br><span class="line">            <span class="comment">// use 2</span></span><br><span class="line">            <span class="keyword">while</span> (right &lt;= <span class="built_in">min</span>(i + dist, n - <span class="number">1</span>)) &#123;</span><br><span class="line">                mi.<span class="built_in">insert</span>(nums[right]);</span><br><span class="line">                cur += nums[right];</span><br><span class="line">                <span class="keyword">if</span> (mi.<span class="built_in">size</span>() &gt; k - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> it = <span class="built_in">prev</span>(mi.<span class="built_in">end</span>());</span><br><span class="line">                    <span class="type">int</span> tmp = *it;</span><br><span class="line">                    cur -= tmp;</span><br><span class="line">                    mi.<span class="built_in">erase</span>(it);</span><br><span class="line">                    mx.<span class="built_in">insert</span>(tmp);</span><br><span class="line">                    <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">min</span>(res, cur);</span><br><span class="line">            <span class="comment">// now we need to erase nums[i] from the sliding window</span></span><br><span class="line">            <span class="keyword">if</span> (mi.<span class="built_in">contains</span>(nums[i])) &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = mi.<span class="built_in">lower_bound</span>(nums[i]);</span><br><span class="line">                cur -= *it;</span><br><span class="line">                mi.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">if</span> (!mx.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    it = mx.<span class="built_in">begin</span>();</span><br><span class="line">                    mi.<span class="built_in">insert</span>(*it);</span><br><span class="line">                    cur += *it;</span><br><span class="line">                    mx.<span class="built_in">erase</span>(it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = mx.<span class="built_in">lower_bound</span>(nums[i]);</span><br><span class="line">                mx.<span class="built_in">erase</span>(it);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Sliding Window</tag>
        <tag>Heap (Priority Queue)</tag>
      </tags>
  </entry>
  <entry>
    <title>303. Range Sum Query - Immutable</title>
    <url>/2023/01/19/303-Range-Sum-Query-Immutable/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/range-sum-query-immutable/">303. Range Sum Query - Immutable</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/design/">Design</a>, <a href="https://leetcode.com/tag/prefix-sum/">Prefix Sum</a></p>
<p>Given an integer array <code>nums</code>, handle multiple queries of the following type:</p>
<ol>
<li>Calculate the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> where <code>left &lt;= right</code>.</li>
</ol>
<p>Implement the <code>NumArray</code> class:</p>
<ul>
<li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li>
<li><code>int sumRange(int left, int right)</code> Returns the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> (i.e. <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;NumArray&quot;</span>, <span class="string">&quot;sumRange&quot;</span>, <span class="string">&quot;sumRange&quot;</span>, <span class="string">&quot;sumRange&quot;</span>]</span><br><span class="line">[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]</span><br><span class="line">Output</span><br><span class="line">[null, 1, -1, -3]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);</span><br><span class="line">numArray.sumRange(0, 2); // <span class="built_in">return</span> (-2) + 0 + 3 = 1</span><br><span class="line">numArray.sumRange(2, 5); // <span class="built_in">return</span> 3 + (-5) + 2 + (-1) = -1</span><br><span class="line">numArray.sumRange(0, 5); // <span class="built_in">return</span> (-2) + 0 + 3 + (-5) + 2 + (-1) = -3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>4</sup></li>
<li>-10<sup>5</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>5</sup></li>
<li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li>
<li>At most 10<sup>4</sup> calls will be made to <code>sumRange</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; preSum;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        preSum.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            preSum.<span class="built_in">push_back</span>(preSum.<span class="built_in">back</span>() + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> preSum[right + <span class="number">1</span>] - preSum[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumArray* obj = new NumArray(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;sumRange(left,right);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>304. Range Sum Query 2D - Immutable</title>
    <url>/2023/01/19/304-Range-Sum-Query-2D-Immutable/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/range-sum-query-2d-immutable/">304. Range Sum Query 2D - Immutable</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/design/">Design</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a>, <a href="https://leetcode.com/tag/prefix-sum/">Prefix Sum</a></p>
<p>Given a 2D matrix <code>matrix</code>, handle multiple queries of the following type:</p>
<ul>
<li>Calculate the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>
</ul>
<p>Implement the <code>NumMatrix</code> class:</p>
<ul>
<li><code>NumMatrix(int[][] matrix)</code> Initializes the object with the integer matrix <code>matrix</code>.</li>
<li><code>int sumRegion(int row1, int col1, int row2, int col2)</code> Returns the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>
</ul>
<p>You must design an algorithm where <code>sumRegion</code> works on <code>O(1)</code> time complexity.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/14/sum-grid.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;NumMatrix&quot;</span>, <span class="string">&quot;sumRegion&quot;</span>, <span class="string">&quot;sumRegion&quot;</span>, <span class="string">&quot;sumRegion&quot;</span>]</span><br><span class="line">[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]</span><br><span class="line">Output</span><br><span class="line">[null, 8, 11, 12]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);</span><br><span class="line">numMatrix.sumRegion(2, 1, 4, 3); // <span class="built_in">return</span> 8 (i.e <span class="built_in">sum</span> of the red rectangle)</span><br><span class="line">numMatrix.sumRegion(1, 1, 2, 2); // <span class="built_in">return</span> 11 (i.e <span class="built_in">sum</span> of the green rectangle)</span><br><span class="line">numMatrix.sumRegion(1, 2, 2, 4); // <span class="built_in">return</span> 12 (i.e <span class="built_in">sum</span> of the blue rectangle)</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 200</code></li>
<li>-10<sup>4</sup> &lt;&#x3D; <code>matrix[i][j]</code> &lt;&#x3D; 10<sup>4</sup></li>
<li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li>
<li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li>
<li>At most 10<sup>4</sup> calls will be made to <code>sumRegion</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>2D preSum</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; preSum;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NumMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        preSum = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrix.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; matrix[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                preSum[i + <span class="number">1</span>][j + <span class="number">1</span>] = preSum[i + <span class="number">1</span>][j] + preSum[i][j + <span class="number">1</span>] - preSum[i][j] + matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> preSum[row2 + <span class="number">1</span>][col2 + <span class="number">1</span>] + preSum[row1][col1] - preSum[row1][col2 + <span class="number">1</span>] - preSum[row2 + <span class="number">1</span>][col1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumMatrix object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumMatrix* obj = new NumMatrix(matrix);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;sumRegion(row1,col1,row2,col2);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
        <tag>Design</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3105. Longest Strictly Increasing or Strictly Decreasing Subarray</title>
    <url>/2024/05/07/3105-Longest-Strictly-Increasing-or-Strictly-Decreasing-Subarray/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-strictly-increasing-or-strictly-decreasing-subarray/description/">3105. Longest Strictly Increasing or Strictly Decreasing Subarray</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of integers <code>nums</code>. Return the length of the <strong>longest</strong>  subarray of <code>nums</code> which is either <strong>strictly increasing</strong>  or <strong>strictly decreasing</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,4,3,3,2]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The strictly increasing subarrays of `nums` are `[1]`, `[2]`, `[3]`, `[3]`, `[4]`, and `[1,4]`.</span><br><span class="line"></span><br><span class="line">The strictly decreasing subarrays of `nums` are `[1]`, `[2]`, `[3]`, `[3]`, `[4]`, `[3,2]`, and `[4,3]`.</span><br><span class="line"></span><br><span class="line">Hence, we <span class="built_in">return</span> `2`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,3,3,3]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The strictly increasing subarrays of `nums` are `[3]`, `[3]`, `[3]`, and `[3]`.</span><br><span class="line"></span><br><span class="line">The strictly decreasing subarrays of `nums` are `[3]`, `[3]`, `[3]`, and `[3]`.</span><br><span class="line"></span><br><span class="line">Hence, we <span class="built_in">return</span> `1`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,1]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The strictly increasing subarrays of `nums` are `[3]`, `[2]`, and `[1]`.</span><br><span class="line"></span><br><span class="line">The strictly decreasing subarrays of `nums` are `[3]`, `[2]`, `[1]`, `[3,2]`, `[2,1]`, and `[3,2,1]`.</span><br><span class="line"></span><br><span class="line">Hence, we <span class="built_in">return</span> `3`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 50</code></li>
<li><code>1 &lt;= nums[i] &lt;= 50</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>iterate the array twice</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestMonotonicSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> curLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                curLen += <span class="number">1</span>;</span><br><span class="line">                res = <span class="built_in">max</span>(res, curLen);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curLen = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        curLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                curLen += <span class="number">1</span>;</span><br><span class="line">                res = <span class="built_in">max</span>(res, curLen);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curLen = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>3106. Lexicographically Smallest String After Operations With Constraint</title>
    <url>/2024/05/08/3106-Lexicographically-Smallest-String-After-Operations-With-Constraint/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/lexicographically-smallest-string-after-operations-with-constraint/description/">3106. Lexicographically Smallest String After Operations With Constraint</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code> and an integer <code>k</code>.</p>
<p>Define a function <code>distance(s1, s2)</code> between two strings <code>s1</code> and <code>s2</code> of the same length <code>n</code> as:</p>
<ul>
<li>The <strong>sum</strong>  of the <strong>minimum distance</strong>  between <code>s1[i]</code> and <code>s2[i]</code> when the characters from <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code> are placed in a <strong>cyclic</strong>  order, for all <code>i</code> in the range <code>[0, n - 1]</code>.</li>
</ul>
<p>For example, <code>distance(&quot;ab&quot;, &quot;cd&quot;) == 4</code>, and <code>distance(&quot;a&quot;, &quot;z&quot;) == 1</code>.</p>
<p>You can <strong>change</strong>  any letter of <code>s</code> to <strong>any</strong>  other lowercase English letter, <strong>any</strong>  number of times.</p>
<p>Return a string denoting the <strong>lexicographically smallest</strong>  string <code>t</code> you can get after some changes, such that <code>distance(s, t) &lt;= k</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;zbbz&quot;</span>, k = 3</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;aaaz&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Change `s` to `<span class="string">&quot;aaaz&quot;</span>`. The distance between `<span class="string">&quot;zbbz&quot;</span>` and `<span class="string">&quot;aaaz&quot;</span>` is equal to `k = 3`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;xaxcd&quot;</span>, k = 4</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;aawcd&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The distance between <span class="string">&quot;xaxcd&quot;</span> and <span class="string">&quot;aawcd&quot;</span> is equal to k = 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;lol&quot;</span>, k = 0</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;lol&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">It<span class="string">&#x27;s impossible to change any character as `k = 0`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**Constraints:**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- `1 &lt;= s.length &lt;= 100`</span></span><br><span class="line"><span class="string">- `0 &lt;= k &lt;= 2000`</span></span><br><span class="line"><span class="string">- `s` consists only of lowercase English letters.</span></span><br></pre></td></tr></table></figure>

<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>change as many letters to ‘a’ first, then append the remaining</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getSmallestString</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">char</span> c = s[idx];</span><br><span class="line">            <span class="type">bool</span> forward = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> distance = <span class="built_in">min</span>(c - <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span> - c + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (k &gt;= distance) &#123;</span><br><span class="line">                res += <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                k -= distance;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += c - k;</span><br><span class="line">                k = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3107. Minimum Operations to Make Median of Array Equal to K</title>
    <url>/2024/05/08/3107-Minimum-Operations-to-Make-Median-of-Array-Equal-to-K/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-operations-to-make-median-of-array-equal-to-k/description/">3107. Minimum Operations to Make Median of Array Equal to K</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> and a <strong>non-negative</strong>  integer <code>k</code>. In one operation, you can increase or decrease any element by 1.</p>
<p>Return the <strong>minimum</strong>  number of operations needed to make the <strong>median</strong>  of <code>nums</code> equal to <code>k</code>.</p>
<p>The median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the larger of the two values is taken.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,5,6,8,5], k = 4</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We can subtract one from `nums[1]` and `nums[4]` to obtain `[2, 4, 6, 8, 4]`. The median of the resulting array is equal to `k`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,5,6,8,5], k = 7</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We can add one to `nums[1]` twice and add one to `nums[2]` once to obtain `[2, 7, 7, 8, 5]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5,6], k = 4</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The median of the array is already equal to `k`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 2 * 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>1 &lt;= k &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>modify the numbers bigger&#x2F;less than k to k to make k the median</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minOperationsToMakeMedianK</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> median = nums[size / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (median &gt; k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = size / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; k) &#123;</span><br><span class="line">                    res += nums[i] - k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (median &lt; k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = size / <span class="number">2</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &lt; k) &#123;</span><br><span class="line">                    res += k - nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3108. Minimum Cost Walk in Weighted Graph</title>
    <url>/2024/05/08/3108-Minimum-Cost-Walk-in-Weighted-Graph/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-cost-walk-in-weighted-graph/description/">3108. Minimum Cost Walk in Weighted Graph</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is an undirected weighted graph with <code>n</code> vertices labeled from <code>0</code> to <code>n - 1</code>.</p>
<p>You are given the integer <code>n</code> and an array <code>edges</code>, where <code>edges[i] = [ui, vi, wi]</code> indicates that there is an edge between vertices <code>ui</code> and <code>vi</code> with a weight of <code>wi</code>.</p>
<p>A walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It’s important to note that a walk may visit the same edge or vertex more than once.</p>
<p>The <strong>cost</strong>  of a walk starting at node <code>u</code> and ending at node <code>v</code> is defined as the bitwise <code>AND</code> of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is <code>w0, w1, w2, ..., wk</code>, then the cost is calculated as <code>w0 &amp; w1 &amp; w2 &amp; ... &amp; wk</code>, where <code>&amp;;</code> denotes the bitwise <code>AND</code> operator.</p>
<p>You are also given a 2D array <code>query</code>, where <code>query[i] = [si, ti]</code>. For each query, you need to find the minimum cost of the walk starting at vertex <code>si</code> and ending at vertex <code>ti</code>. If there exists no such walk, the answer is <code>-1</code>.</p>
<p>Return the array <code>answer</code>, where <code>answer[i]</code> denotes the <strong>minimum</strong>  cost of a walk for query <code>i</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]]</span><br><span class="line"></span><br><span class="line">Output: [1,-1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/01/31/q4_example1-1.png" style="padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 351px; height: 141px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p>To achieve the cost of 1 in the first query, we need to move on the following edges: <code>0-&gt;1</code> (weight 7), <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code> (weight 1), <code>1-&gt;3</code> (weight 7).</p>
<p>In the second query, there is no walk between nodes 3 and 4, so the answer is -1.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]</span><br><span class="line"></span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/01/31/q4_example2e.png" style="padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 211px; height: 181px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p>To achieve the cost of 0 in the first query, we need to move on the following edges: <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code> (weight 6), <code>1-&gt;2</code> (weight 1).</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 10^5</code></li>
<li><code>0 &lt;= edges.length &lt;= 10^5</code></li>
<li><code>edges[i].length == 3</code></li>
<li><code>0 &lt;= ui, vi &lt;= n - 1</code></li>
<li><code>ui != vi</code></li>
<li><code>0 &lt;= wi &lt;= 10^5</code></li>
<li><code>1 &lt;= query.length &lt;= 10^5</code></li>
<li><code>query[i].length == 2</code></li>
<li><code>0 &lt;= si, ti &lt;= n - 1</code></li>
<li><code>si !=ti</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Union find and bit operation</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; roots;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">minimumCost</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; query)</span> </span>&#123;</span><br><span class="line">        roots = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">-1</span>);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weights</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            roots[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge: edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> w = edge[<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> rootU = <span class="built_in">findRoot</span>(u);</span><br><span class="line">            <span class="type">int</span> rootV = <span class="built_in">findRoot</span>(v);</span><br><span class="line">            <span class="keyword">if</span> (rootU != rootV) &#123;</span><br><span class="line">                roots[rootU] = rootV;</span><br><span class="line">                <span class="keyword">if</span> (weights[rootU] != <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (weights[rootV] == <span class="number">-1</span>) &#123;</span><br><span class="line">                        weights[rootV] = weights[rootU];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        weights[rootV] &amp;= weights[rootU];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (weights[rootV] == <span class="number">-1</span>) &#123;</span><br><span class="line">                weights[rootV] = w;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                weights[rootV] &amp;= w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> q : query) &#123;</span><br><span class="line">            <span class="type">int</span> u = q[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = q[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> rootU = <span class="built_in">findRoot</span>(u);</span><br><span class="line">            <span class="type">int</span> rootV = <span class="built_in">findRoot</span>(v);</span><br><span class="line">            <span class="keyword">if</span> (rootU != rootV) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(weights[rootU]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRoot</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v != roots[v]) &#123;</span><br><span class="line">            roots[v] = <span class="built_in">findRoot</span>(roots[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roots[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3110. Score of a String</title>
    <url>/2024/05/08/3110-Score-of-a-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/score-of-a-string/description/">3110. Score of a String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code>. The <strong>score</strong>  of a string is defined as the sum of the absolute difference between the <strong>ASCII</strong>  values of adjacent characters.</p>
<p>Return the <strong>score</strong>  of <code>s</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 13</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The **ASCII**  values of the characters <span class="keyword">in</span> `s` are: `<span class="string">&#x27;h&#x27;</span> = 104`, `<span class="string">&#x27;e&#x27;</span> = 101`, `<span class="string">&#x27;l&#x27;</span> = 108`, `<span class="string">&#x27;o&#x27;</span> = 111`. So, the score of `s` would be `|104 - 101| + |101 - 108| + |108 - 108| + |108 - 111| = 3 + 7 + 0 + 3 = 13`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;zaz&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 50</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The **ASCII**  values of the characters <span class="keyword">in</span> `s` are: `<span class="string">&#x27;z&#x27;</span> = 122`, `<span class="string">&#x27;a&#x27;</span> = 97`. So, the score of `s` would be `|122 - 97| + |97 - 122| = 25 + 25 = 50`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= s.length &lt;= 100</code></li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">scoreOfString</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            res += <span class="built_in">abs</span>(s[i] - s[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>3111. Minimum Rectangles to Cover Points</title>
    <url>/2024/05/08/3111-Minimum-Rectangles-to-Cover-Points/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-rectangles-to-cover-points/description/">3111. Minimum Rectangles to Cover Points</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D integer array <code>points</code>, where <code>points[i] = [xi, yi]</code>. You are also given an integer <code>w</code>. Your task is to <strong>cover</strong>  <strong>all</strong>  the given points with rectangles.</p>
<p>Each rectangle has its lower end at some point <code>(x1, 0)</code> and its upper end at some point <code>(x2, y2)</code>, where <code>x1 &lt;= x2</code>, <code>y2 &gt;= 0</code>, and the condition <code>x2 - x1 &lt;= w</code> <strong>must</strong>  be satisfied for each rectangle.</p>
<p>A point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.</p>
<p>Return an integer denoting the <strong>minimum</strong>  number of rectangles needed so that each point is covered by <strong>at least one</strong>  rectangle.</p>
<p><strong>Note:</strong>  A point may be covered by more than one rectangle.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-33-05.png" style="width: 205px; height: 300px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: points = [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w = 1</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The image above shows one possible placement of rectangles to cover the points:</span><br><span class="line"></span><br><span class="line">- A rectangle with a lower end at `(1, 0)` and its upper end at `(2, 8)`</span><br><span class="line">- A rectangle with a lower end at `(3, 0)` and its upper end at `(4, 8)`</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-18-59-12.png" style="width: 260px; height: 250px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w = 2</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The image above shows one possible placement of rectangles to cover the points:</span><br><span class="line"></span><br><span class="line">- A rectangle with a lower end at `(0, 0)` and its upper end at `(2, 2)`</span><br><span class="line">- A rectangle with a lower end at `(3, 0)` and its upper end at `(5, 5)`</span><br><span class="line">- A rectangle with a lower end at `(6, 0)` and its upper end at `(6, 6)`</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-24-03.png" style="height: 150px; width: 127px;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: points = [[2,3],[1,2]], w = 0</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The image above shows one possible placement of rectangles to cover the points:</span><br><span class="line"></span><br><span class="line">- A rectangle with a lower end at `(1, 0)` and its upper end at `(1, 2)`</span><br><span class="line">- A rectangle with a lower end at `(2, 0)` and its upper end at `(2, 3)`</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= points.length &lt;= 10^5</code></li>
<li><code>points[i].length == 2</code></li>
<li><code>0 &lt;= xi == points[i][0] &lt;= 10^9</code></li>
<li><code>0 &lt;= yi == points[i][1] &lt;= 10^9</code></li>
<li><code>0 &lt;= w &lt;= 10^9</code></li>
<li>All pairs <code>(xi, yi)</code> are distinct.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minRectanglesToCoverPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(points.<span class="built_in">begin</span>(), points.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> cur = points[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; points.<span class="built_in">size</span>(); ) &#123;</span><br><span class="line">            cur = cur + w;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; points.<span class="built_in">size</span>() &amp;&amp; points[i][<span class="number">0</span>] &lt;= cur) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == points.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res++;</span><br><span class="line">                cur = points[i][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3113. Find the Number of Subarrays Where Boundary Elements Are Maximum</title>
    <url>/2024/05/08/3113-Find-the-Number-of-Subarrays-Where-Boundary-Elements-Are-Maximum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-number-of-subarrays-where-boundary-elements-are-maximum/description/">3113. Find the Number of Subarrays Where Boundary Elements Are Maximum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of <strong>positive</strong>  integers <code>nums</code>.</p>
<p>Return the number of subarrays of <code>nums</code>, where the <strong>first</strong>  and the <strong>last</strong>  elements of the subarray are equal to the <strong>largest</strong>  element in the subarray.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,4,3,3,2]</span><br><span class="line"></span><br><span class="line">Output: 6</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There are 6 subarrays <span class="built_in">which</span> have the first and the last elements equal to the largest element of the subarray:</span><br><span class="line"></span><br><span class="line">- subarray `[**1** ,4,3,3,2]`, with its largest element 1. The first element is 1 and the last element is also 1.</span><br><span class="line">- subarray `[1,**4** ,3,3,2]`, with its largest element 4. The first element is 4 and the last element is also 4.</span><br><span class="line">- subarray `[1,4,**3** ,3,2]`, with its largest element 3. The first element is 3 and the last element is also 3.</span><br><span class="line">- subarray `[1,4,3,**3** ,2]`, with its largest element 3. The first element is 3 and the last element is also 3.</span><br><span class="line">- subarray `[1,4,3,3,**2** ]`, with its largest element 2. The first element is 2 and the last element is also 2.</span><br><span class="line">- subarray `[1,4,**3,3** ,2]`, with its largest element 3. The first element is 3 and the last element is also 3.</span><br><span class="line"></span><br><span class="line">Hence, we <span class="built_in">return</span> 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,3,3]</span><br><span class="line"></span><br><span class="line">Output: 6</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There are 6 subarrays <span class="built_in">which</span> have the first and the last elements equal to the largest element of the subarray:</span><br><span class="line"></span><br><span class="line">- subarray `[**3** ,3,3]`, with its largest element 3. The first element is 3 and the last element is also 3.</span><br><span class="line">- subarray `[3,**3** ,3]`, with its largest element 3. The first element is 3 and the last element is also 3.</span><br><span class="line">- subarray `[3,3,**3** ]`, with its largest element 3. The first element is 3 and the last element is also 3.</span><br><span class="line">- subarray `[**3,3** ,3]`, with its largest element 3. The first element is 3 and the last element is also 3.</span><br><span class="line">- subarray `[3,**3,3** ]`, with its largest element 3. The first element is 3 and the last element is also 3.</span><br><span class="line">- subarray `[**3,3,3** ]`, with its largest element 3. The first element is 3 and the last element is also 3.</span><br><span class="line"></span><br><span class="line">Hence, we <span class="built_in">return</span> 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There is a single subarray of `nums` <span class="built_in">which</span> is `[**1** ]`, with its largest element 1. The first element is 1 and the last element is also 1.</span><br><span class="line"></span><br><span class="line">Hence, we <span class="built_in">return</span> 1.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>monotonic stack&#x2F;max stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">numberOfSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        deque&lt;pair&lt;<span class="type">int</span>, <span class="type">long</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; nums[right] &gt; q.<span class="built_in">back</span>().first) &#123;</span><br><span class="line">                q.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!q.<span class="built_in">empty</span>() &amp;&amp; nums[right] == q.<span class="built_in">back</span>().first) &#123;</span><br><span class="line">                <span class="type">long</span> count = q.<span class="built_in">back</span>().second;</span><br><span class="line">                q.<span class="built_in">pop_back</span>();</span><br><span class="line">                res += count;</span><br><span class="line">                q.<span class="built_in">push_back</span>(&#123;nums[right], count + <span class="number">1</span>&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                q.<span class="built_in">push_back</span>(&#123;nums[right], <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>3112. Minimum Time to Visit Disappearing Nodes</title>
    <url>/2024/05/08/3112-Minimum-Time-to-Visit-Disappearing-Nodes/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-time-to-visit-disappearing-nodes/description/">3112. Minimum Time to Visit Disappearing Nodes</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is an undirected graph of <code>n</code> nodes. You are given a 2D array <code>edges</code>, where <code>edges[i] = [ui, vi, lengthi]</code> describes an edge between node <code>ui</code> and node <code>vi</code> with a traversal time of <code>lengthi</code> units.</p>
<p>Additionally, you are given an array <code>disappear</code>, where <code>disappear[i]</code> denotes the time when the node <code>i</code> disappears from the graph and you won’t be able to visit it.</p>
<p><strong>Notice</strong>  that the graph might be disconnected and might contain multiple edges.</p>
<p>Return the array <code>answer</code>, with <code>answer[i]</code> denoting the <strong>minimum</strong>  units of time required to reach node <code>i</code> from node 0. If node <code>i</code> is <strong>unreachable</strong>  from node 0 then <code>answer[i]</code> is <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" padding:="" src="https://assets.leetcode.com/uploads/2024/03/09/example1.png" style="width: 350px; height: 210px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:  n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,1,5]</span><br><span class="line"></span><br><span class="line">Output:  [0,-1,4]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.</span><br><span class="line"></span><br><span class="line">- For node 0, we don<span class="string">&#x27;t need any time as it is our starting point.</span></span><br><span class="line"><span class="string">- For node 1, we need at least 2 units of time to traverse `edges[0]`. Unfortunately, it disappears at that moment, so we won&#x27;</span>t be able to visit it.</span><br><span class="line">- For node 2, we need at least 4 units of time to traverse `edges[2]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" padding:="" src="https://assets.leetcode.com/uploads/2024/03/09/example2.png" style="width: 350px; height: 210px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:  n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,3,5]</span><br><span class="line"></span><br><span class="line">Output:  [0,2,3]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.</span><br><span class="line"></span><br><span class="line">- For node 0, we don<span class="string">&#x27;t need any time as it is the starting point.</span></span><br><span class="line"><span class="string">- For node 1, we need at least 2 units of time to traverse `edges[0]`.</span></span><br><span class="line"><span class="string">- For node 2, we need at least 3 units of time to traverse `edges[0]` and `edges[1]`.</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 2, edges = [[0,1,1]], disappear = [1,1]</span><br><span class="line"></span><br><span class="line">Output: [0,-1]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Exactly when we reach node 1, it disappears.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 5 * 10^4</code></li>
<li><code>0 &lt;= edges.length &lt;= 10^5</code></li>
<li><code>edges[i] == [ui, vi, lengthi]</code></li>
<li><code>0 &lt;= ui, vi &lt;= n - 1</code></li>
<li><code>1 &lt;= lengthi &lt;= 10^5</code></li>
<li><code>disappear.length == n</code></li>
<li><code>1 &lt;= disappear[i] &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dijkstra’s algorithm</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">minimumTime</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, vector&lt;<span class="type">int</span>&gt;&amp; disappear)</span> </span>&#123;</span><br><span class="line">        graph = vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;(n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;());</span><br><span class="line">        <span class="built_in">buildGraph</span>(edges);</span><br><span class="line">        res = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MAX);</span><br><span class="line">        pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>() &amp;&amp; n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> edge = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> cur = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (res[v] &lt;= cur) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res[v] = cur;</span><br><span class="line">            n--;</span><br><span class="line">            <span class="built_in">cut</span>(v, cur, disappear);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res[i] == INT_MAX) &#123;</span><br><span class="line">                res[i] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildGraph</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> w = edge[<span class="number">2</span>];</span><br><span class="line">            graph[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">            graph[v].<span class="built_in">push_back</span>(&#123;u, w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> cur, vector&lt;<span class="type">int</span>&gt;&amp; disappear)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge : graph[u]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> w = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (w + cur &lt; disappear[v] &amp;&amp; w + cur &lt; res[v]) &#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;w + cur, v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Graph</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>3114. Latest Time You Can Obtain After Replacing Characters</title>
    <url>/2024/05/10/3114-Latest-Time-You-Can-Obtain-After-Replacing-Characters/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/latest-time-you-can-obtain-after-replacing-characters/description/">3114. Latest Time You Can Obtain After Replacing Characters</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code> representing a 12-hour format time where some of the digits (possibly none) are replaced with a <code>&quot;?&quot;</code>.</p>
<p>12-hour times are formatted as <code>&quot;HH:MM&quot;</code>, where <code>HH</code> is between <code>00</code> and <code>11</code>, and <code>MM</code> is between <code>00</code> and <code>59</code>. The earliest 12-hour time is <code>00:00</code>, and the latest is <code>11:59</code>.</p>
<p>You have to replace <strong>all</strong>  the <code>&quot;?&quot;</code> characters in <code>s</code> with digits such that the time we obtain by the resulting string is a <strong>valid</strong>  12-hour format time and is the <strong>latest</strong>  possible.</p>
<p>Return the resulting string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;1?:?4&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;11:54&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation: The latest 12-hour format time we can achieve by replacing `<span class="string">&quot;?&quot;</span>` characters is `<span class="string">&quot;11:54&quot;</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;0?:5?&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;09:59&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation: The latest 12-hour format time we can achieve by replacing `<span class="string">&quot;?&quot;</span>` characters is `<span class="string">&quot;09:59&quot;</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>s.length == 5</code></li>
<li><code>s[2]</code> is equal to the character <code>&quot;:&quot;</code>.</li>
<li>All characters except <code>s[2]</code> are digits or <code>&quot;?&quot;</code> characters.</li>
<li>The input is generated such that there is <strong>at least</strong>  one time between <code>&quot;00:00&quot;</code> and <code>&quot;11:59&quot;</code> that you can obtain after replacing the <code>&quot;?&quot;</code> characters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">findLatestTime</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;?&#x27;</span> &amp;&amp; s[<span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            res += <span class="string">&quot;11&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span> || s[<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                res = res + <span class="string">&quot;1&quot;</span> + s[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res = res + <span class="string">&quot;0&quot;</span> + s[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                res = res + s[<span class="number">0</span>] + <span class="string">&quot;9&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res = res + s[<span class="number">0</span>] + <span class="string">&quot;1&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = res + s[<span class="number">0</span>] + s[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res += <span class="string">&quot;:&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">3</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            res = res + <span class="string">&quot;5&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = res + s[<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">4</span>] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            res = res + <span class="string">&quot;9&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = res + s[<span class="number">4</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>3115. Maximum Prime Difference</title>
    <url>/2024/05/10/3115-Maximum-Prime-Difference/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-prime-difference/description/">3115. Maximum Prime Difference</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code>.</p>
<p>Return an integer that is the <strong>maximum</strong>  distance between the <strong>indices</strong>  of two (not necessarily different) prime numbers in <code>nums</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,2,9,5,3]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation: `nums[1]`, `nums[3]`, and `nums[4]` are prime. So the answer is `|4 - 1| = 3`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,8,2,8]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation: `nums[2]` is prime. Because there is just one prime number, the answer is `|2 - 2| = 0`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 3 * 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
<li>The input is generated such that the number of prime numbers in the <code>nums</code> is at least one.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>two pointers, from beginning and end of the array</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; prime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumPrimeDifference</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">        prime[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="type">bool</span> isPrimeLow = <span class="built_in">primeNumber</span>(nums[low]);</span><br><span class="line">            <span class="type">bool</span> isPrimeHigh = <span class="built_in">primeNumber</span>(nums[high]);</span><br><span class="line">            <span class="keyword">if</span> (isPrimeLow &amp;&amp; isPrimeHigh) &#123;</span><br><span class="line">                <span class="keyword">return</span> high - low;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isPrimeLow) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isPrimeHigh) &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">primeNumber</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prime.<span class="built_in">contains</span>(num)) &#123;</span><br><span class="line">            <span class="keyword">return</span> prime[num];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">                prime[num] = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prime[num] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>Number Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>3116. Kth Smallest Amount With Single Denomination Combination</title>
    <url>/2024/05/10/3116-Kth-Smallest-Amount-With-Single-Denomination-Combination/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/kth-smallest-amount-with-single-denomination-combination/description/">3116. Kth Smallest Amount With Single Denomination Combination</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>k</code>.</p>
<p>You have an infinite number of coins of each denomination. However, you are <strong>not allowed</strong>  to combine coins of different denominations.</p>
<p>Return the <code>k^th</code> <strong>smallest</strong>  amount that can be made using these coins.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: coins = [3,6,9], k = 3</span><br><span class="line"></span><br><span class="line">Output:  9</span><br><span class="line"></span><br><span class="line">Explanation: The given coins can make the following amounts:&lt;br&gt;</span><br><span class="line">Coin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.&lt;br&gt;</span><br><span class="line">Coin 6 produces multiples of 6: 6, 12, 18, 24, etc.&lt;br&gt;</span><br><span class="line">Coin 9 produces multiples of 9: 9, 18, 27, 36, etc.&lt;br&gt;</span><br><span class="line">All of the coins combined produce: 3, 6, **9** , 12, 15, etc.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: coins = [5,2], k = 7</span><br><span class="line"></span><br><span class="line">Output: 12</span><br><span class="line"></span><br><span class="line">Explanation: The given coins can make the following amounts:&lt;br&gt;</span><br><span class="line">Coin 5 produces multiples of 5: 5, 10, 15, 20, etc.&lt;br&gt;</span><br><span class="line">Coin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.&lt;br&gt;</span><br><span class="line">All of the coins combined produce: 2, 4, 5, 6, 8, 10, **12** , 14, 15, etc.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= coins.length &lt;= 15</code></li>
<li><code>1 &lt;= coins[i] &lt;= 25</code></li>
<li><code>1 &lt;= k &lt;= 2 * 10^9</code></li>
<li><code>coins</code> contains pairwise distinct integers.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary search</li>
<li>Principle of inclusion-exclusion</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">findKthSmallest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> left = <span class="number">1</span>, right = LLONG_MAX;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="type">long</span> index = <span class="built_in">findIndex</span>(mid, coins);</span><br><span class="line">            <span class="keyword">if</span> (index == k) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; k) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">findIndex</span><span class="params">(<span class="type">long</span> <span class="type">long</span> mid, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">select</span>(mid, coins, res, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">select</span><span class="params">(<span class="type">long</span> <span class="type">long</span> mid, vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">long</span>&amp; res, <span class="type">int</span> index, <span class="type">int</span> numSelected, <span class="type">long</span> <span class="type">long</span> factor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == coins.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numSelected &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (numSelected % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    res += mid / factor;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res -= mid / factor;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">select</span>(mid, coins, res, index + <span class="number">1</span>, numSelected + <span class="number">1</span>, <span class="built_in">lcm</span>(factor, coins[index]));</span><br><span class="line">        <span class="built_in">select</span>(mid, coins, res, index + <span class="number">1</span>, numSelected, factor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Math</tag>
        <tag>Number Theory</tag>
        <tag>Bit Manipulation</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>3117. Minimum Sum of Values by Dividing Array</title>
    <url>/2024/05/10/3117-Minimum-Sum-of-Values-by-Dividing-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-sum-of-values-by-dividing-array/description/">3117. Minimum Sum of Values by Dividing Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two arrays <code>nums</code> and <code>andValues</code> of length <code>n</code> and <code>m</code> respectively.</p>
<p>The <strong>value</strong>  of an array is equal to the <strong>last</strong>  element of that array.</p>
<p>You have to divide <code>nums</code> into <code>m</code> <strong>disjoint contiguous</strong>  subarrays such that for the <code>i^th</code> subarray <code>[li, ri]</code>, the bitwise <code>AND</code> of the subarray elements is equal to <code>andValues[i]</code>, in other words, <code>nums[li] &amp; nums[li + 1] &amp; ... &amp; nums[ri] == andValues[i]</code> for all <code>1 &lt;= i &lt;= m</code>, where <code>&amp;</code> represents the bitwise <code>AND</code> operator.</p>
<p>Return the <strong>minimum</strong>  possible sum of the <strong>values</strong>  of the <code>m</code> subarrays <code>nums</code> is divided into. If it is not possible to divide <code>nums</code> into <code>m</code> subarrays satisfying these conditions, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,4,3,3,2], andValues = [0,3,3,2]</span><br><span class="line"></span><br><span class="line">Output: 12</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The only possible way to divide `nums` is:</span><br><span class="line"></span><br><span class="line">- `[1,4]` as `1 &amp; 4 == 0`.</span><br><span class="line">- `[3]` as the bitwise `AND` of a single element subarray is that element itself.</span><br><span class="line">- `[3]` as the bitwise `AND` of a single element subarray is that element itself.</span><br><span class="line">- `[2]` as the bitwise `AND` of a single element subarray is that element itself.</span><br><span class="line"></span><br><span class="line">The <span class="built_in">sum</span> of the values <span class="keyword">for</span> these subarrays is `4 + 3 + 3 + 2 = 12`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,5,7,7,7,5], andValues = [0,7,5]</span><br><span class="line"></span><br><span class="line">Output: 17</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There are three ways to divide `nums`:</span><br><span class="line"></span><br><span class="line">- `[[2,3,5],[7,7,7],[5]]` with the <span class="built_in">sum</span> of the values `5 + 7 + 5 == 17`.</span><br><span class="line">- `[[2,3,5,7],[7,7],[5]]` with the <span class="built_in">sum</span> of the values `7 + 7 + 5 == 19`.</span><br><span class="line">- `[[2,3,5,7,7],[7],[5]]` with the <span class="built_in">sum</span> of the values `7 + 7 + 5 == 19`.</span><br><span class="line"></span><br><span class="line">The minimum possible <span class="built_in">sum</span> of the values is `17`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4], andValues = [2]</span><br><span class="line"></span><br><span class="line">Output: -1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The bitwise `AND` of the entire array `nums` is `0`. As there is no possible way to divide `nums` into a single subarray to have the bitwise `AND` of elements `2`, <span class="built_in">return</span> `-1`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n == nums.length &lt;= 10^4</code></li>
<li><code>1 &lt;= m == andValues.length &lt;= min(n, 10)</code></li>
<li><code>1 &lt;= nums[i] &lt; 10^5</code></li>
<li><code>0 &lt;= andValues[j] &lt; 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>top-down dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumValueSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; andValues)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(nums.<span class="built_in">size</span>() + <span class="number">1</span>, vector&lt;map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;(andValues.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;()));</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(nums, andValues, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, dp);</span><br><span class="line">        <span class="keyword">return</span> res &gt;= <span class="number">1e6</span> ? <span class="number">-1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; andValues, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> cur, vector&lt;vector&lt;map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt;&amp; dp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == andValues.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1e6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j == andValues.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1e6</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dp[i][j].<span class="built_in">contains</span>(cur)) <span class="keyword">return</span> dp[i][j][cur];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">-1</span>) &#123;</span><br><span class="line">            cur = nums[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur &amp;= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (cur == andValues[j]) &#123;</span><br><span class="line">            <span class="comment">// we can choose to work on next addValue or not</span></span><br><span class="line">            ans = <span class="built_in">min</span>(nums[i] + <span class="built_in">traverse</span>(nums, andValues, i + <span class="number">1</span>, j + <span class="number">1</span>, <span class="number">-1</span>, dp), <span class="built_in">traverse</span>(nums, andValues, i + <span class="number">1</span>, j, cur, dp));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = <span class="built_in">traverse</span>(nums, andValues, i + <span class="number">1</span>, j, cur, dp);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][j][cur] = ans;</span><br><span class="line">        <span class="keyword">return</span> dp[i][j][cur];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
        <tag>Bit Manipulation</tag>
        <tag>Queue</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3120. Count the Number of Special Characters I</title>
    <url>/2024/05/15/3120-Count-the-Number-of-Special-Characters-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-the-number-of-special-characters-i/description/">3120. Count the Number of Special Characters I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>word</code>. A letter is called <strong>special</strong>  if it appears <strong>both</strong>  in lowercase and uppercase in <code>word</code>.</p>
<p>Return the number of <strong>special</strong>  letters in <code>word</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;aaAbcBC&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The special characters <span class="keyword">in</span> `word` are `<span class="string">&#x27;a&#x27;</span>`, `<span class="string">&#x27;b&#x27;</span>`, and `<span class="string">&#x27;c&#x27;</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">No character <span class="keyword">in</span> `word` appears <span class="keyword">in</span> uppercase.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;abBCab&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The only special character <span class="keyword">in</span> `word` is `<span class="string">&#x27;b&#x27;</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word.length &lt;= 50</code></li>
<li><code>word</code> consists of only lowercase and uppercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSpecialChars</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(c - <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">contains</span>(i) &amp;&amp; s.<span class="built_in">contains</span>(i + <span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;A&#x27;</span>)) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>3121. Count the Number of Special Characters II</title>
    <url>/2024/05/16/3121-Count-the-Number-of-Special-Characters-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-the-number-of-special-characters-ii/description/">3121. Count the Number of Special Characters II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>word</code>. A letter<code>c</code> is called <strong>special</strong>  if it appears <strong>both</strong>  in lowercase and uppercase in <code>word</code>, and <strong>every</strong>  lowercase occurrence of <code>c</code> appears before the <strong>first</strong>  uppercase occurrence of <code>c</code>.</p>
<p>Return the number of <strong>special</strong>  letters in <code>word</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;aaAbcBC&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The special characters are `<span class="string">&#x27;a&#x27;</span>`, `<span class="string">&#x27;b&#x27;</span>`, and `<span class="string">&#x27;c&#x27;</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There are no special characters <span class="keyword">in</span> `word`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;AbBCab&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There are no special characters <span class="keyword">in</span> `word`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word.length &lt;= 2 * 10^5</code></li>
<li><code>word</code> consists of only lowercase and uppercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSpecialChars</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; lower;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; higher;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c = word[i];</span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span> &amp;&amp; !higher.<span class="built_in">contains</span>(c - <span class="string">&#x27;A&#x27;</span>)) &#123;</span><br><span class="line">                higher[c - <span class="string">&#x27;A&#x27;</span>] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                lower[c - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (higher.<span class="built_in">contains</span>(i) &amp;&amp; lower.<span class="built_in">contains</span>(i) &amp;&amp; higher[i] &gt; lower[i]) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>3122. Minimum Number of Operations to Satisfy Conditions</title>
    <url>/2024/05/16/3122-Minimum-Number-of-Operations-to-Satisfy-Conditions/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-number-of-operations-to-satisfy-conditions/description/">3122. Minimum Number of Operations to Satisfy Conditions</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D matrix <code>grid</code> of size <code>m x n</code>. In one <strong>operation</strong> , you can change the value of <strong>any</strong>  cell to <strong>any</strong>  non-negative number. You need to perform some <strong>operations</strong>  such that each cell <code>grid[i][j]</code> is:</p>
<ul>
<li>Equal to the cell below it, i.e. <code>grid[i][j] == grid[i + 1][j]</code> (if it exists).</li>
<li>Different from the cell to its right, i.e. <code>grid[i][j] != grid[i][j + 1]</code> (if it exists).</li>
</ul>
<p>Return the <strong>minimum</strong>  number of operations needed.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0,2],[1,0,2]]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png" style="width: 254px; height: 186px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor=""></strong></p>
<p>All the cells in the matrix already satisfy the properties.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,1,1],[0,0,0]]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/03/27/example21.png" style="width: 254px; height: 186px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor=""></strong></p>
<p>The matrix becomes <code>[[1,0,1],[1,0,1]]</code> which satisfies the properties, by doing these 3 operations:</p>
<ul>
<li>Change <code>grid[1][0]</code> to 1.</li>
<li>Change <code>grid[0][1]</code> to 0.</li>
<li>Change <code>grid[1][2]</code> to 1.</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1],[2],[3]]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/31/changed.png" style="width: 86px; height: 277px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p>There is a single column. We can change the value to 1 in each cell using 2 operations.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n, m &lt;= 1000</code></li>
<li><code>0 &lt;= grid[i][j] &lt;= 9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>we can use the previous column’s color, and the best sol + second_best sol to get the current column’s best sol and second_best sol</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumOperations</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> f0 = <span class="number">0</span>, f1 = <span class="number">0</span>, pre = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                count[grid[i][j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// count[0] = 1</span></span><br><span class="line">            <span class="comment">// count[1] = 1</span></span><br><span class="line">            <span class="type">int</span> min1 = INT_MAX, min2 = INT_MAX, curMin = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                count[i] = m - count[i] + (i == pre ? f1 : f0);</span><br><span class="line">                <span class="keyword">if</span> (count[i] &lt; min1) &#123;</span><br><span class="line">                    min2 = min1;</span><br><span class="line">                    min1 = count[i];</span><br><span class="line">                    curMin = i;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count[i] &lt; min2) &#123;</span><br><span class="line">                    min2 = count[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            f0 = min1; f1 = min2; pre = curMin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3123. Find Edges in Shortest Paths</title>
    <url>/2024/05/16/3123-Find-Edges-in-Shortest-Paths/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-edges-in-shortest-paths/description/">3123. Find Edges in Shortest Paths</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an undirected weighted graph of <code>n</code> nodes numbered from 0 to <code>n - 1</code>. The graph consists of <code>m</code> edges represented by a 2D array <code>edges</code>, where edges[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>, w<sub>i</sub>] indicates that there is an edge between nodes a<sub>i</sub> and b<sub>i</sub> with weight w<sub>i</sub>.</p>
<p>Consider all the shortest paths from node 0 to node <code>n - 1</code> in the graph. You need to find a <strong>boolean</strong>  array <code>answer</code> where <code>answer[i]</code> is <code>true</code> if the edge <code>edges[i]</code> is part of <strong>at least</strong>  one shortest path. Otherwise, <code>answer[i]</code> is <code>false</code>.</p>
<p>Return the array <code>answer</code>.</p>
<p><strong>Note</strong>  that the graph may not be connected.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/05/graph35drawio-1.png" style="height: 129px; width: 250px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 6, edges = [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]</span><br><span class="line"></span><br><span class="line">Output: [<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The following are **all**  the shortest paths between nodes 0 and 5:</span><br><span class="line"></span><br><span class="line">- The path `0 -&gt; 1 -&gt; 5`: The <span class="built_in">sum</span> of weights is `4 + 1 = 5`.</span><br><span class="line">- The path `0 -&gt; 2 -&gt; 3 -&gt; 5`: The <span class="built_in">sum</span> of weights is `1 + 1 + 3 = 5`.</span><br><span class="line">- The path `0 -&gt; 2 -&gt; 3 -&gt; 1 -&gt; 5`: The <span class="built_in">sum</span> of weights is `1 + 1 + 2 + 1 = 5`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/05/graphhhh.png" style="width: 185px; height: 136px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]</span><br><span class="line"></span><br><span class="line">Output: [<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There is one shortest path between nodes 0 and 3, <span class="built_in">which</span> is the path `0 -&gt; 2 -&gt; 3` with the <span class="built_in">sum</span> of weights `1 + 2 = 3`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 5 * 10^4</code></li>
<li><code>m == edges.length</code></li>
<li><code>1 &lt;= m &lt;= min(5 * 10^4, n * (n - 1) / 2)</code></li>
<li>0 &lt;&#x3D; a<sub>i</sub>, b<sub>i</sub> &lt; n</li>
<li>a<sub>i</sub> !&#x3D; b<sub>i</sub></li>
<li>1 &lt;&#x3D; w<sub>i</sub> &lt;&#x3D; 10^5</li>
<li>There are no repeated edges.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use dijkstra’s algorithm to find the minimum cost to get to each point, then use dfs&#x2F;bfs to get to all points</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">findAnswer</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">graph</span>(n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;());</span><br><span class="line">        <span class="built_in">buildGraph</span>(graph, edges);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">res</span><span class="params">(edges.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fromRoot</span><span class="params">(n, INT_MAX)</span></span>;</span><br><span class="line">        fromRoot[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> e = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> u = e[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> w = e[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (fromRoot[u] &lt; w) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fromRoot[u] = w;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> edge : graph[u]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> weight = edge[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (fromRoot[v] &gt; w + weight) &#123;</span><br><span class="line">                    fromRoot[v] = w + weight;</span><br><span class="line">                    pq.<span class="built_in">push</span>(&#123;v, w + weight&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n - <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        q.<span class="built_in">push</span>(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (visited[u]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> edge : graph[u]) &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> weight = edge[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> index = edge[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">if</span> (fromRoot[v] == INT_MAX) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fromRoot[v] + weight == fromRoot[u]) &#123;</span><br><span class="line">                    res[index] = <span class="literal">true</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildGraph</span><span class="params">(vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;&amp; graph, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edges.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> edge = edges[i];</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> w = edge[<span class="number">2</span>];</span><br><span class="line">            graph[u].<span class="built_in">push_back</span>(&#123;v, w, i&#125;);</span><br><span class="line">            graph[v].<span class="built_in">push_back</span>(&#123;u, w, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Graph</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>3127. Make a Square with the Same Color</title>
    <url>/2024/05/16/3127-Make-a-Square-with-the-Same-Color/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/make-a-square-with-the-same-color/description/">3127. Make a Square with the Same Color</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D matrix <code>grid</code> of size <code>3 x 3</code> consisting only of characters <code>&#39;B&#39;</code> and <code>&#39;W&#39;</code>. Character <code>&#39;W&#39;</code> represents the white color, and character <code>&#39;B&#39;</code> represents the black color.</p>
<p>Your task is to change the color of <strong>at most one</strong>  cell so that the matrix has a <code>2 x 2</code> square where all cells are of the same color.</p>
<p>Return <code>true</code> if it is possible to create a <code>2 x 2</code> square of the same color, otherwise, return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;B&quot;</span>],[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;W&quot;</span>],[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;B&quot;</span>]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">It can be <span class="keyword">done</span> by changing the color of the `grid[0][2]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;B&quot;</span>],[<span class="string">&quot;W&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;W&quot;</span>],[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;B&quot;</span>]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">It cannot be <span class="keyword">done</span> by changing at most one cell.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;B&quot;</span>],[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;W&quot;</span>],[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;W&quot;</span>]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The `grid` already contains a `2 x 2` square of the same color.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>grid.length == 3</code></li>
<li><code>grid[i].length == 3</code></li>
<li><code>grid[i][j]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canMakeSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// left = i, up = j</span></span><br><span class="line">                vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; square = <span class="built_in">squareColor</span>(i, j);</span><br><span class="line">                <span class="type">int</span> whiteCount = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> cordinate : square) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (grid[cordinate.first][cordinate.second] == <span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">                        whiteCount++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (whiteCount != <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">squareColor</span>(<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(&#123;i, j&#125;);</span><br><span class="line">        res.<span class="built_in">push_back</span>(&#123;i + <span class="number">1</span>, j&#125;);</span><br><span class="line">        res.<span class="built_in">push_back</span>(&#123;i, j + <span class="number">1</span>&#125;);</span><br><span class="line">        res.<span class="built_in">push_back</span>(&#123;i + <span class="number">1</span>, j + <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Matrix</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>3128. Right Triangles</title>
    <url>/2024/05/16/3128-Right-Triangles/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/right-triangles/description/">3128. Right Triangles</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D boolean matrix <code>grid</code>.</p>
<p>Return an integer that is the number of <strong>right triangles</strong>  that can be made with the 3 elements of <code>grid</code> such that <strong>all</strong>  of them have a value of 1.</p>
<p><strong>Note:</strong></p>
<ul>
<li>A collection of 3 elements of <code>grid</code> is a <strong>right triangle</strong>  if one of its elements is in the <strong>same row</strong>  with another element and in the <strong>same column</strong>  with the third element. The 3 elements do not have to be next to each other.</li>
</ul>
<p><strong>Example 1:</strong></p>
<table border="1" cellspacing="3" style="border-collapse: separate; text-align: center;"><tbody><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr></tbody></table>

<table border="1" cellspacing="3" style="border-collapse: separate; text-align: center;"><tbody><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr></tbody></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1,0],[0,1,1],[0,1,0]]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There are two right triangles.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<table border="1" cellspacing="3" style="border-collapse: separate; text-align: center;"><tbody><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">1</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr></tbody></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0,0,0],[0,1,0,1],[1,0,0,0]]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There are no right triangles.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<table border="1" cellspacing="3" style="border-collapse: separate; text-align: center;"><tbody><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr></tbody></table>

<table border="1" cellspacing="3" style="border-collapse: separate; text-align: center;"><tbody><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr><tr><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid red; --darkreader-inline-border-top: #ff0000; --darkreader-inline-border-right: #ff0000; --darkreader-inline-border-bottom: #ff0000; --darkreader-inline-border-left: #ff0000;">1</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td><td data-darkreader-inline-border-bottom="" data-darkreader-inline-border-left="" data-darkreader-inline-border-right="" data-darkreader-inline-border-top="" style="padding: 5px 10px; border: 1px solid black; --darkreader-inline-border-top: #d2c3ad; --darkreader-inline-border-right: #d2c3ad; --darkreader-inline-border-bottom: #d2c3ad; --darkreader-inline-border-left: #d2c3ad;">0</td></tr></tbody></table>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0,1],[1,0,0],[1,0,0]]</span><br><span class="line"></span><br><span class="line">Output:2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There are two right triangles.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= grid.length &lt;= 1000</code></li>
<li><code>1 &lt;= grid[i].length &lt;= 1000</code></li>
<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">numberOfRightTriangles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> numRows = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> numColumns = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rows</span><span class="params">(numRows, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">colomns</span><span class="params">(numColumns, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numColumns; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    rows[i]++;</span><br><span class="line">                    colomns[j]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numColumns; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    res += (rows[i] - <span class="number">1</span>) * (colomns[j] - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Math</tag>
        <tag>Counting</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>3129. Find All Possible Stable Binary Arrays I</title>
    <url>/2024/05/16/3129-Find-All-Possible-Stable-Binary-Arrays-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-all-possible-stable-binary-arrays-i/description/">3129. Find All Possible Stable Binary Arrays I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given 3 positive integers <code>zero</code>, <code>one</code>, and <code>limit</code>.</p>
<p>A binary array <code>arr</code> is called <strong>stable</strong>  if:</p>
<ul>
<li>The number of occurrences of 0 in <code>arr</code> is <strong>exactly</strong> <code>zero</code>.</li>
<li>The number of occurrences of 1 in <code>arr</code> is <strong>exactly</strong>  <code>one</code>.</li>
<li>Each subarray of <code>arr</code> with a size greater than <code>limit</code> must contain <strong>both</strong> 0 and 1.</li>
</ul>
<p>Return the total number of <strong>stable</strong>  binary arrays.</p>
<p>Since the answer may be very large, return it <strong>modulo</strong>  <code>10^9 + 7</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: zero = 1, one = 1, <span class="built_in">limit</span> = 2</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The two possible stable binary arrays are `[1,0]` and `[0,1]`, as both arrays have a single 0 and a single 1, and no subarray has a length greater than 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: zero = 1, one = 2, <span class="built_in">limit</span> = 1</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The only possible stable binary array is `[1,0,1]`.</span><br><span class="line"></span><br><span class="line">Note that the binary arrays `[1,1,0]` and `[0,1,1]` have subarrays of length 2 with identical elements, hence, they are not stable.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: zero = 3, one = 3, <span class="built_in">limit</span> = 2</span><br><span class="line"></span><br><span class="line">Output: 14</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">All the possible stable binary arrays are `[0,0,1,0,1,1]`, `[0,0,1,1,0,1]`, `[0,1,0,0,1,1]`, `[0,1,0,1,0,1]`, `[0,1,0,1,1,0]`, `[0,1,1,0,0,1]`, `[0,1,1,0,1,0]`, `[1,0,0,1,0,1]`, `[1,0,0,1,1,0]`, `[1,0,1,0,0,1]`, `[1,0,1,0,1,0]`, `[1,0,1,1,0,0]`, `[1,1,0,0,1,0]`, and `[1,1,0,1,0,0]`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= zero, one, limit &lt;= 200</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dynamic programming</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> limit_;</span><br><span class="line">    <span class="type">int</span> mod_;</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfStableArrays</span><span class="params">(<span class="type">int</span> zero, <span class="type">int</span> one, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        limit_ = limit;</span><br><span class="line">        mod_ = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        dp = vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;(<span class="number">2</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">201</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">201</span>, <span class="number">-1</span>)));</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">traverse</span>(<span class="number">0</span>, zero, one) + <span class="built_in">traverse</span>(<span class="number">1</span>, zero, one)) % mod_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> prev, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (zero == <span class="number">0</span> &amp;&amp; one == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zero &lt; <span class="number">0</span> || one &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[prev][zero][one] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[prev][zero][one];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[<span class="number">1</span>- prev][one][zero] != <span class="number">-1</span>) &#123;</span><br><span class="line">            dp[prev][zero][one] = dp[<span class="number">1</span> - prev][one][zero];</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">1</span> - prev][one][zero];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">min</span>(limit_, one); i++) &#123;</span><br><span class="line">                ans = (ans + <span class="built_in">traverse</span>(<span class="number">1</span>, zero, one - i) % mod_) % mod_;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">min</span>(limit_, zero); i++) &#123;</span><br><span class="line">                ans = (ans + <span class="built_in">traverse</span>(<span class="number">0</span>, zero - i, one) % mod_) % mod_;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[prev][zero][one] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>313. Super Ugly Number</title>
    <url>/2023/11/06/313-Super-Ugly-Number/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/super-ugly-number/">313. Super Ugly Number</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/dynamic-programming//">Dynamic Programming</a></p>
<p>A <strong>super ugly number</strong> is a positive integer whose prime factors are in the array <code>primes</code>.</p>
<p>Given an integer <code>n</code> and an array of integers <code>primes</code>, return <em>the</em> n<sup>th</sup> <em><strong>super ugly number</strong></em>.</p>
<p>The n<sup>th</sup> <strong>super ugly number</strong> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> signed integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 12, primes = [2,7,13,19]</span><br><span class="line">Output: 32</span><br><span class="line">Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1, primes = [2,3,5]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: 1 has no prime factors, therefore all of its prime factors are <span class="keyword">in</span> the array primes = [2,3,5].</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>5</sup></li>
<li><code>1 &lt;= primes.length &lt;= 100</code></li>
<li><code>2 &lt;= primes[i] &lt;= 1000</code></li>
<li><code>primes[i]</code> is <strong>guaranteed</strong> to be a prime number.</li>
<li>All the values of <code>primes</code> are <strong>unique</strong> and sorted in <strong>ascending order</strong>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nthSuperUglyNumber</span><span class="params">(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt;&amp; primes)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">long</span>&gt;, vector&lt;vector&lt;<span class="type">long</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">long</span>&gt;&gt;&gt; pq;</span><br><span class="line">        vector&lt;<span class="type">long</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> prime : primes) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;<span class="number">1</span>, <span class="number">0</span>, prime&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (res.<span class="built_in">size</span>() &lt; n) &#123;</span><br><span class="line">            <span class="type">long</span> val = pq.<span class="built_in">top</span>()[<span class="number">0</span>];</span><br><span class="line">            res.<span class="built_in">push_back</span>(val);</span><br><span class="line">            <span class="keyword">while</span> (pq.<span class="built_in">top</span>()[<span class="number">0</span>] == val) &#123;</span><br><span class="line">                <span class="type">int</span> idx = pq.<span class="built_in">top</span>()[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> prime = pq.<span class="built_in">top</span>()[<span class="number">2</span>];</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;res[idx] * prime, idx + <span class="number">1</span>, prime&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Match</tag>
      </tags>
  </entry>
  <entry>
    <title>3130. Find All Possible Stable Binary Arrays II</title>
    <url>/2024/05/16/3130-Find-All-Possible-Stable-Binary-Arrays-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-all-possible-stable-binary-arrays-ii/description/">3130. Find All Possible Stable Binary Arrays II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given 3 positive integers <code>zero</code>, <code>one</code>, and <code>limit</code>.</p>
<p>A binary array <code>arr</code> is called <strong>stable</strong>  if:</p>
<ul>
<li>The number of occurrences of 0 in <code>arr</code> is <strong>exactly</strong> <code>zero</code>.</li>
<li>The number of occurrences of 1 in <code>arr</code> is <strong>exactly</strong>  <code>one</code>.</li>
<li>Each subarray of <code>arr</code> with a size greater than <code>limit</code> must contain <strong>both</strong> 0 and 1.</li>
</ul>
<p>Return the total number of <strong>stable</strong>  binary arrays.</p>
<p>Since the answer may be very large, return it <strong>modulo</strong>  <code>10^9 + 7</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: zero = 1, one = 1, <span class="built_in">limit</span> = 2</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The two possible stable binary arrays are `[1,0]` and `[0,1]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: zero = 1, one = 2, <span class="built_in">limit</span> = 1</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The only possible stable binary array is `[1,0,1]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: zero = 3, one = 3, <span class="built_in">limit</span> = 2</span><br><span class="line"></span><br><span class="line">Output: 14</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">All the possible stable binary arrays are `[0,0,1,0,1,1]`, `[0,0,1,1,0,1]`, `[0,1,0,0,1,1]`, `[0,1,0,1,0,1]`, `[0,1,0,1,1,0]`, `[0,1,1,0,0,1]`, `[0,1,1,0,1,0]`, `[1,0,0,1,0,1]`, `[1,0,0,1,1,0]`, `[1,0,1,0,0,1]`, `[1,0,1,0,1,0]`, `[1,0,1,1,0,0]`, `[1,1,0,0,1,0]`, and `[1,1,0,1,0,0]`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= zero, one, limit &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>need to find the O(1) state transition equation for dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> limit_;</span><br><span class="line">    <span class="type">int</span> mod_;</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfStableArrays</span><span class="params">(<span class="type">int</span> zero, <span class="type">int</span> one, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        limit_ = limit;</span><br><span class="line">        mod_ = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        dp = vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;(</span><br><span class="line">            <span class="number">2</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">1001</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1001</span>, <span class="number">-1</span>)));</span><br><span class="line">        <span class="keyword">return</span> ((<span class="built_in">traverse</span>(<span class="number">0</span>, zero, one) + <span class="built_in">traverse</span>(<span class="number">1</span>, zero, one)) % mod_ + mod_) % mod_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> end, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (zero == <span class="number">0</span> &amp;&amp; one == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zero == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (end == <span class="number">1</span> &amp;&amp; one &lt;= limit_) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (one == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (end == <span class="number">0</span> &amp;&amp; zero &lt;= limit_) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zero &lt; <span class="number">0</span> || one &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[end][zero][one] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[end][zero][one];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[<span class="number">1</span> - end][one][zero] != <span class="number">-1</span>) &#123;</span><br><span class="line">            dp[end][zero][one] = dp[<span class="number">1</span> - end][one][zero];</span><br><span class="line">            <span class="keyword">return</span> dp[end][zero][one];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (end == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ((<span class="type">long</span>)<span class="built_in">traverse</span>(<span class="number">0</span>, zero - <span class="number">1</span>, one) % mod_ - <span class="built_in">traverse</span>(<span class="number">1</span>, zero - limit_ - <span class="number">1</span>, one) % mod_ + <span class="built_in">traverse</span>(<span class="number">1</span>, zero - <span class="number">1</span>, one) % mod_) % mod_;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = ((<span class="type">long</span>)<span class="built_in">traverse</span>(<span class="number">1</span>, zero, one - <span class="number">1</span>) % mod_ - <span class="built_in">traverse</span>(<span class="number">0</span>, zero, one - limit_ - <span class="number">1</span>) % mod_ + <span class="built_in">traverse</span>(<span class="number">0</span>, zero, one - <span class="number">1</span>) % mod_) % mod_;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[end][zero][one] = (ans + mod_) % mod_;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>3131. Find the Integer Added to Array I</title>
    <url>/2024/05/17/3131-Find-the-Integer-Added-to-Array-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-integer-added-to-array-i/description/">3131. Find the Integer Added to Array I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two arrays of equal length, <code>nums1</code> and <code>nums2</code>.</p>
<p>Each element in <code>nums1</code> has been increased (or decreased in the case of negative) by an integer, represented by the variable <code>x</code>.</p>
<p>As a result, <code>nums1</code> becomes <strong>equal</strong>  to <code>nums2</code>. Two arrays are considered <strong>equal</strong>  when they contain the same integers with the same frequencies.</p>
<p>Return the integer <code>x</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [2,6,4], nums2 = [9,7,5]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The <span class="built_in">integer</span> added to each element of `nums1` is 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [10], nums2 = [5]</span><br><span class="line"></span><br><span class="line">Output: -5</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The <span class="built_in">integer</span> added to each element of `nums1` is -5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,1,1,1], nums2 = [1,1,1,1]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The <span class="built_in">integer</span> added to each element of `nums1` is 0.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums1.length == nums2.length &lt;= 100</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>
<li>The test cases are generated in a way that there is an integer <code>x</code> such that <code>nums1</code> can become equal to <code>nums2</code> by adding <code>x</code> to each element of <code>nums1</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">addedInteger</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>, size = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            sum1 += nums1[i];</span><br><span class="line">            sum2 += nums2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (sum2 - sum1) / size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>3132. Find the Integer Added to Array II</title>
    <url>/2024/05/17/3132-Find-the-Integer-Added-to-Array-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-integer-added-to-array-ii/description/">3132. Find the Integer Added to Array II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>.</p>
<p>From <code>nums1</code> two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable <code>x</code>.</p>
<p>As a result, <code>nums1</code> becomes <strong>equal</strong>  to <code>nums2</code>. Two arrays are considered <strong>equal</strong>  when they contain the same integers with the same frequencies.</p>
<p>Return the <strong>minimum</strong>  possible integer <code>x</code> that achieves this equivalence.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [4,20,16,12,8], nums2 = [14,18,10]</span><br><span class="line"></span><br><span class="line">Output: -2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">After removing elements at indices `[0,4]` and adding -2, `nums1` becomes `[18,14,10]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [3,5,5,3], nums2 = [7,7]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">After removing elements at indices `[0,3]` and adding 2, `nums1` becomes `[7,7]`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= nums1.length &lt;= 200</code></li>
<li><code>nums2.length == nums1.length - 2</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>
<li>The test cases are generated in a way that there is an integer <code>x</code> such that <code>nums1</code> can become equal to <code>nums2</code> by removing two elements and adding <code>x</code> to each element of <code>nums1</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly contest 395</li>
<li>we can only check the 3 minium values of nums1</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumAddedInteger</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m1, m2;</span><br><span class="line">        <span class="type">int</span> size1 = nums1.<span class="built_in">size</span>(), size2 = nums2.<span class="built_in">size</span>(), sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size1; i++) &#123;</span><br><span class="line">            <span class="type">int</span> val = nums1[i];</span><br><span class="line">            m1[val]++;</span><br><span class="line">            sum1 += val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size2; i++) &#123;</span><br><span class="line">            <span class="type">int</span> val = nums2[i];</span><br><span class="line">            m2[val]++;</span><br><span class="line">            sum2 += val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; size1; j++) &#123;</span><br><span class="line">                sum1 = sum1 - nums1[i] - nums1[j];</span><br><span class="line">                m1[nums1[i]]--;</span><br><span class="line">                m1[nums1[j]]--;</span><br><span class="line">                <span class="keyword">if</span> ((sum2 - sum1) % size2 != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum1 = sum1 + nums1[i] + nums1[j];</span><br><span class="line">                    m1[nums1[i]]++;</span><br><span class="line">                    m1[nums1[j]]++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> k = (sum2 - sum1) / size2;</span><br><span class="line">                <span class="type">bool</span> found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> it : m2) &#123;</span><br><span class="line">                    <span class="type">int</span> val = it.first;</span><br><span class="line">                    <span class="type">int</span> freq = it.second;</span><br><span class="line">                    <span class="keyword">if</span> (m1[val - k] != freq) &#123;</span><br><span class="line">                        <span class="comment">// cout &lt;&lt; nums1[i] &lt;&lt; &quot; &quot; &lt;&lt; nums1[j] &lt;&lt; &quot; wrong: &quot; &lt;&lt; val &lt;&lt; endl;</span></span><br><span class="line">                        found = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (found) &#123;</span><br><span class="line">                    <span class="keyword">return</span> k;</span><br><span class="line">                &#125;</span><br><span class="line">                sum1 = sum1 + nums1[i] + nums1[j];</span><br><span class="line">                m1[nums1[i]]++;</span><br><span class="line">                m1[nums1[j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Two Pointers</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>3133. Minimum Array End</title>
    <url>/2024/05/17/3133-Minimum-Array-End/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-array-end/description/">3133. Minimum Array End</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two integers <code>n</code> and <code>x</code>. You have to construct an array of <strong>positive</strong>  integers <code>nums</code> of size <code>n</code> where for every <code>0 &lt;= i &lt; n - 1</code>, <code>nums[i + 1]</code> is <strong>greater than</strong>  <code>nums[i]</code>, and the result of the bitwise <code>AND</code> operation between all elements of <code>nums</code> is <code>x</code>.</p>
<p>Return the <strong>minimum</strong>  possible value of <code>nums[n - 1]</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, x = 4</span><br><span class="line"></span><br><span class="line">Output: 6</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">`nums` can be `[4,5,6]` and its last element is 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 2, x = 7</span><br><span class="line"></span><br><span class="line">Output: 15</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">`nums` can be `[7,15]` and its last element is 15.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n, x &lt;= 10^8</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>put 1 into the 0 slots of n</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minEnd</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = x;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; <span class="number">32</span> &amp;&amp; x &amp; (<span class="number">1</span> &lt;&lt; index)) &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            res |= ((<span class="type">long</span>)n % <span class="number">2</span>) &lt;&lt; index++;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3134. Find the Median of the Uniqueness Array</title>
    <url>/2024/05/17/3134-Find-the-Median-of-the-Uniqueness-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-median-of-the-uniqueness-array/description/">3134. Find the Median of the Uniqueness Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code>. The <strong>uniqueness array</strong>  of <code>nums</code> is the sorted array that contains the number of distinct elements of all the subarrays of <code>nums</code>. In other words, it is a sorted array consisting of <code>distinct(nums[i..j])</code>, for all <code>0 &lt;= i &lt;= j &lt; nums.length</code>.</p>
<p>Here, <code>distinct(nums[i..j])</code> denotes the number of distinct elements in the subarray that starts at index <code>i</code> and ends at index <code>j</code>.</p>
<p>Return the <strong>median</strong>  of the <strong>uniqueness array</strong>  of <code>nums</code>.</p>
<p><strong>Note</strong>  that the <strong>median</strong>  of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the <strong>smaller</strong>  of the two values is taken.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The uniqueness array of `nums` is `[distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]), distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])]` <span class="built_in">which</span> is equal to `[1, 1, 1, 2, 2, 3]`. The uniqueness array has a median of 1. Therefore, the answer is 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,4,3,4,5]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The uniqueness array of `nums` is `[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]`. The uniqueness array has a median of 2. Therefore, the answer is 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,3,5,4]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The uniqueness array of `nums` is `[1, 1, 1, 1, 2, 2, 2, 3, 3, 3]`. The uniqueness array has a median of 2. Therefore, the answer is 2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary search</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">medianOfUniquenessArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>, right = s.<span class="built_in">size</span>(), size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> target = ((<span class="type">long</span>)size * (size + <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid, nums) &gt;= target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">check</span><span class="params">(<span class="type">int</span> numUnique, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            m[nums[right++]]++;</span><br><span class="line">            <span class="keyword">while</span> (m.<span class="built_in">size</span>() &gt; numUnique &amp;&amp; left &lt; right) &#123;</span><br><span class="line">                m[nums[left]]--;</span><br><span class="line">                <span class="keyword">if</span> (m[nums[left]] == <span class="number">0</span>) &#123;</span><br><span class="line">                    m.<span class="built_in">erase</span>(nums[left]);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += right - left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Binary Search</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>3136. Valid Word</title>
    <url>/2024/05/17/3136-Valid-Word/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/valid-word/description/">3136. Valid Word</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A word is considered <strong>valid</strong>  if:</p>
<ul>
<li>It contains a <strong>minimum</strong>  of 3 characters.</li>
<li>It contains only digits (0-9), and English letters (uppercase and lowercase).</li>
<li>It includes <strong>at least</strong>  one <strong>vowel</strong> .</li>
<li>It includes <strong>at least</strong>  one <strong>consonant</strong> .</li>
</ul>
<p>You are given a string <code>word</code>.</p>
<p>Return <code>true</code> if <code>word</code> is valid, otherwise, return <code>false</code>.</p>
<p><strong>Notes:</strong></p>
<ul>
<li><code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>, and their uppercases are <strong>vowels</strong> .</li>
<li>A <strong>consonant</strong>  is an English letter that is not a vowel.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;234Adas&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">This word satisfies the conditions.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;b3&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The length of this word is fewer than 3, and does not have a vowel.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;a3<span class="variable">$e</span>&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">This word contains a `<span class="string">&#x27;$&#x27;</span>` character and does not have a consonant.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word.length &lt;= 20</code></li>
<li><code>word</code> consists of English uppercase and lowercase letters, digits, <code>&#39;@&#39;</code>, <code>&#39;#&#39;</code>, and <code>&#39;$&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> vowels = <span class="literal">false</span>, consonant = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;A&#x27;</span> || c == <span class="string">&#x27;a&#x27;</span> || c == <span class="string">&#x27;E&#x27;</span> || c == <span class="string">&#x27;e&#x27;</span> || c == <span class="string">&#x27;i&#x27;</span> || c == <span class="string">&#x27;I&#x27;</span> || c == <span class="string">&#x27;o&#x27;</span> || c == <span class="string">&#x27;O&#x27;</span> || c == <span class="string">&#x27;u&#x27;</span> || c == <span class="string">&#x27;U&#x27;</span>) &#123;</span><br><span class="line">                vowels = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) || (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>)) &#123;</span><br><span class="line">                consonant = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length &gt;= <span class="number">3</span> &amp;&amp; vowels &amp;&amp; consonant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>3137. Minimum Number of Operations to Make Word K-Periodic</title>
    <url>/2024/05/17/3137-Minimum-Number-of-Operations-to-Make-Word-K-Periodic/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-number-of-operations-to-make-word-k-periodic/description/">3137. Minimum Number of Operations to Make Word K-Periodic</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>word</code> of size <code>n</code>, and an integer <code>k</code> such that <code>k</code> divides <code>n</code>.</p>
<p>In one operation, you can pick any two indices <code>i</code> and <code>j</code>, that are divisible by <code>k</code>, then replace the substring of length <code>k</code> starting at <code>i</code> with the substring of length <code>k</code> starting at <code>j</code>. That is, replace the substring <code>word[i..i + k - 1]</code> with the substring <code>word[j..j + k - 1]</code>.</p>
<p>Return the <strong>minimum</strong>  number of operations required to make <code>word</code> <strong>k-periodic</strong> .</p>
<p>We say that <code>word</code> is <strong>k-periodic</strong>  if there is some string <code>s</code> of length <code>k</code> such that <code>word</code> can be obtained by concatenating <code>s</code> an arbitrary number of times. For example, if <code>word == “ababab”</code>, then <code>word</code> is 2-periodic for <code>s = &quot;ab&quot;</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;leetcodeleet&quot;</span>, k = 4</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to <span class="string">&quot;leetleetleet&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;leetcoleet&quot;</span>, k = 2</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We can obtain a 2-periodic string by applying the operations <span class="keyword">in</span> the table below.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n == word.length &lt;= 10^5</code></li>
<li><code>1 &lt;= k &lt;= word.length</code></li>
<li><code>k</code> divides <code>word.length</code>.</li>
<li><code>word</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumOperationsToMakeKPeriodic</span><span class="params">(string word, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">        map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i = i + k) &#123;</span><br><span class="line">            string cur = word.<span class="built_in">substr</span>(i, k);</span><br><span class="line">            m[cur]++;</span><br><span class="line">            maxCount = <span class="built_in">max</span>(maxCount, m[cur]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word.<span class="built_in">size</span>() / k - maxCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>3138. Minimum Length of Anagram Concatenation</title>
    <url>/2024/05/17/3138-Minimum-Length-of-Anagram-Concatenation/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-length-of-anagram-concatenation/description/">3138. Minimum Length of Anagram Concatenation</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code>, which is known to be a concatenation of <strong>anagrams</strong>  of some string <code>t</code>.</p>
<p>Return the <strong>minimum</strong>  possible length of the string <code>t</code>.</p>
<p>An <strong>anagram</strong>  is formed by rearranging the letters of a string. For example, “aab”, “aba”, and, “baa” are anagrams of “aab”.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abba&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">One possible string `t` could be `<span class="string">&quot;ba&quot;</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;cdef&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">One possible string `t` could be `<span class="string">&quot;cdef&quot;</span>`, notice that `t` can be equal to `s`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 10^5</code></li>
<li><code>s</code> consist only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>iterate the factors</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minAnagramLength</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= size / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size % i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                m[s[j] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> ok = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; size) &#123;</span><br><span class="line">                map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cur;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + i; k++) &#123;</span><br><span class="line">                    cur[s[k] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (it.second != cur[it.first]) &#123;</span><br><span class="line">                        ok = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!ok) <span class="keyword">break</span>;</span><br><span class="line">                j += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ok) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>3139. Minimum Cost to Equalize Array</title>
    <url>/2024/05/17/3139-Minimum-Cost-to-Equalize-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-cost-to-equalize-array/description/">3139. Minimum Cost to Equalize Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> and two integers <code>cost1</code> and <code>cost2</code>. You are allowed to perform <strong>either</strong>  of the following operations <strong>any</strong>  number of times:</p>
<ul>
<li>Choose an index <code>i</code> from <code>nums</code> and <strong>increase</strong>  <code>nums[i]</code> by <code>1</code> for a cost of <code>cost1</code>.</li>
<li>Choose two <strong>different</strong>  indices <code>i</code>, <code>j</code>, from <code>nums</code> and <strong>increase</strong>  <code>nums[i]</code> and <code>nums[j]</code> by <code>1</code> for a cost of <code>cost2</code>.</li>
</ul>
<p>Return the <strong>minimum</strong>  <strong>cost</strong>  required to make all elements in the array <strong>equal</strong> .</p>
<p>Since the answer may be very large, return it <strong>modulo</strong>  <code>10^9 + 7</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,1], cost1 = 5, cost2 = 2</span><br><span class="line"></span><br><span class="line">Output: 15</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The following operations can be performed to make the values equal:</span><br><span class="line"></span><br><span class="line">- Increase `nums[1]` by 1 <span class="keyword">for</span> a cost of 5. `nums` becomes `[4,2]`.</span><br><span class="line">- Increase `nums[1]` by 1 <span class="keyword">for</span> a cost of 5. `nums` becomes `[4,3]`.</span><br><span class="line">- Increase `nums[1]` by 1 <span class="keyword">for</span> a cost of 5. `nums` becomes `[4,4]`.</span><br><span class="line"></span><br><span class="line">The total cost is 15.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,3,3,5], cost1 = 2, cost2 = 1</span><br><span class="line"></span><br><span class="line">Output: 6</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The following operations can be performed to make the values equal:</span><br><span class="line"></span><br><span class="line">- Increase `nums[0]` and `nums[1]` by 1 <span class="keyword">for</span> a cost of 1. `nums` becomes `[3,4,3,3,5]`.</span><br><span class="line">- Increase `nums[0]` and `nums[2]` by 1 <span class="keyword">for</span> a cost of 1. `nums` becomes `[4,4,4,3,5]`.</span><br><span class="line">- Increase `nums[0]` and `nums[3]` by 1 <span class="keyword">for</span> a cost of 1. `nums` becomes `[5,4,4,4,5]`.</span><br><span class="line">- Increase `nums[1]` and `nums[2]` by 1 <span class="keyword">for</span> a cost of 1. `nums` becomes `[5,5,5,4,5]`.</span><br><span class="line">- Increase `nums[3]` by 1 <span class="keyword">for</span> a cost of 2. `nums` becomes `[5,5,5,5,5]`.</span><br><span class="line"></span><br><span class="line">The total cost is 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,5,3], cost1 = 1, cost2 = 3</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The following operations can be performed to make the values equal:</span><br><span class="line"></span><br><span class="line">- Increase `nums[0]` by 1 <span class="keyword">for</span> a cost of 1. `nums` becomes `[4,5,3]`.</span><br><span class="line">- Increase `nums[0]` by 1 <span class="keyword">for</span> a cost of 1. `nums` becomes `[5,5,3]`.</span><br><span class="line">- Increase `nums[2]` by 1 <span class="keyword">for</span> a cost of 1. `nums` becomes `[5,5,4]`.</span><br><span class="line">- Increase `nums[2]` by 1 <span class="keyword">for</span> a cost of 1. `nums` becomes `[5,5,5]`.</span><br><span class="line"></span><br><span class="line">The total cost is 4.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^6</code></li>
<li><code>1 &lt;= cost1 &lt;= 10^6</code></li>
<li><code>1 &lt;= cost2 &lt;= 10^6</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>need to iterate through the maxDiff value</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostToEqualizeArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> cost1, <span class="type">int</span> cost2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxNumber = <span class="number">0</span>, mod_ = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">            maxNumber = <span class="built_in">max</span>(num, maxNumber);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>, maxDiff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            nums[i] = maxNumber - nums[i];</span><br><span class="line">            maxDiff = <span class="built_in">max</span>(maxDiff, (<span class="type">long</span> <span class="type">long</span>)nums[i]);</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// the case that we can just use cost1 to do single addition</span></span><br><span class="line">        <span class="keyword">if</span> (cost1 * <span class="number">2</span> &lt;= cost2) &#123;</span><br><span class="line">            <span class="keyword">return</span> (sum * cost1) % mod_;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// there&#x27;s no need to do the minus one by one, we can just use the sum</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = LLONG_MAX, mx = maxDiff;</span><br><span class="line">        <span class="keyword">for</span> (; maxDiff &lt;= mx * <span class="number">2</span>; maxDiff++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> curRes = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (maxDiff * <span class="number">2</span> &lt;= sum) &#123;</span><br><span class="line">                curRes = curRes + sum / <span class="number">2</span> * cost2;</span><br><span class="line">                curRes = curRes + sum % <span class="number">2</span> * cost1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> tmp = sum - maxDiff;</span><br><span class="line">                curRes = curRes + tmp * cost2;</span><br><span class="line">                curRes = curRes + (maxDiff - tmp) * cost1;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">min</span>(res, curRes);</span><br><span class="line">            sum += nums.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res % mod_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Greedy</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>3142. Check if Grid Satisfies Conditions</title>
    <url>/2024/05/22/3142-Check-if-Grid-Satisfies-Conditions/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/check-if-grid-satisfies-conditions/description/">3142. Check if Grid Satisfies Conditions</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D matrix <code>grid</code> of size <code>m x n</code>. You need to check if each cell <code>grid[i][j]</code> is:</p>
<ul>
<li>Equal to the cell below it, i.e. <code>grid[i][j] == grid[i + 1][j]</code> (if it exists).</li>
<li>Different from the cell to its right, i.e. <code>grid[i][j] != grid[i][j + 1]</code> (if it exists).</li>
</ul>
<p>Return <code>true</code> if <strong>all</strong>  the cells satisfy these conditions, otherwise, return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0,2],[1,0,2]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png" style="width: 254px; height: 186px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor=""></strong></p>
<p>All the cells in the grid satisfy the conditions.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,1,1],[0,0,0]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/03/27/example21.png" style="width: 254px; height: 186px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor=""></strong></p>
<p>All cells in the first row are equal.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1],[2],[3]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/31/changed.png" style="width: 86px; height: 277px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p>Cells in the first column have different values.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n, m &lt;= 10</code></li>
<li><code>0 &lt;= grid[i][j] &lt;= 9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">satisfiesConditions</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] != grid[i + <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; grid[<span class="number">0</span>][j] == grid[<span class="number">0</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3143. Maximum Points Inside the Square</title>
    <url>/2024/05/22/3143-Maximum-Points-Inside-the-Square/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-points-inside-the-square/description/">3143. Maximum Points Inside the Square</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D array <code>points</code> and a string <code>s</code> where, <code>points[i]</code> represents the coordinates of point <code>i</code>, and <code>s[i]</code> represents the <strong>tag</strong>  of point <code>i</code>.</p>
<p>A <strong>valid</strong>  square is a square centered at the origin <code>(0, 0)</code>, has edges parallel to the axes, and <strong>does not</strong>  contain two points with the same tag.</p>
<p>Return the <strong>maximum</strong>  number of points contained in a <strong>valid</strong>  square.</p>
<p>Note:</p>
<ul>
<li>A point is considered to be inside the square if it lies on or within the square’s boundaries.</li>
<li>The side length of the square can be zero.</li>
</ul>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/29/3708-tc1.png" style="width: 303px; height: 303px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: points = [[2,2],[-1,-2],[-4,4],[-3,1],[3,-3]], s = <span class="string">&quot;abdca&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The square of side length 4 covers two points `points[0]` and `points[1]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/29/3708-tc2.png" style="width: 302px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: points = [[1,1],[-2,-2],[-2,2]], s = <span class="string">&quot;abb&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The square of side length 2 covers one point, <span class="built_in">which</span> is `points[0]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: points = [[1,1],[-1,-1],[2,-2]], s = <span class="string">&quot;ccd&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">It<span class="string">&#x27;s impossible to make any valid squares centered at the origin such that it covers only one point among `points[0]` and `points[1]`.</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length, points.length &lt;= 10^5</code></li>
<li><code>points[i].length == 2</code></li>
<li><code>-10^9 &lt;= points[i][0], points[i][1] &lt;= 10^9</code></li>
<li><code>s.length == points.length</code></li>
<li><code>points</code> consists of distinct coordinates.</li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPointsInsideSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points, string s)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; m;</span><br><span class="line">        <span class="type">int</span> size = points.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> point = points[i];</span><br><span class="line">            <span class="type">char</span> c = s[i];</span><br><span class="line">            <span class="type">int</span> x = <span class="built_in">abs</span>(point[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> y = <span class="built_in">abs</span>(point[<span class="number">1</span>]);</span><br><span class="line">            <span class="type">int</span> r = <span class="built_in">max</span>(x, y);</span><br><span class="line">            m[r].<span class="built_in">push_back</span>(c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">bool</span> finished = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">            <span class="keyword">auto</span> v = it.second;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> tag : v) &#123;</span><br><span class="line">                count[tag]++;</span><br><span class="line">                <span class="keyword">if</span> (count[tag] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    finished = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (finished) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res += v.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Binary Search</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>3146. Permutation Difference between Two Strings</title>
    <url>/2024/05/22/3146-Permutation-Difference-between-Two-Strings/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/permutation-difference-between-two-strings/description/">3146. Permutation Difference between Two Strings</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two strings <code>s</code> and <code>t</code> such that every character occurs at most once in <code>s</code> and <code>t</code> is a permutation of <code>s</code>.</p>
<p>The <strong>permutation difference</strong>  between <code>s</code> and <code>t</code> is defined as the <strong>sum</strong>  of the absolute difference between the index of the occurrence of each character in <code>s</code> and the index of the occurrence of the same character in <code>t</code>.</p>
<p>Return the <strong>permutation difference</strong>  between <code>s</code> and <code>t</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abc&quot;</span>, t = <span class="string">&quot;bac&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">For `s = <span class="string">&quot;abc&quot;</span>` and `t = <span class="string">&quot;bac&quot;</span>`, the permutation difference of `s` and `t` is equal to the <span class="built_in">sum</span> of:</span><br><span class="line"></span><br><span class="line">- The absolute difference between the index of the occurrence of `<span class="string">&quot;a&quot;</span>` <span class="keyword">in</span> `s` and the index of the occurrence of `<span class="string">&quot;a&quot;</span>` <span class="keyword">in</span> `t`.</span><br><span class="line">- The absolute difference between the index of the occurrence of `<span class="string">&quot;b&quot;</span>` <span class="keyword">in</span> `s` and the index of the occurrence of `<span class="string">&quot;b&quot;</span>` <span class="keyword">in</span> `t`.</span><br><span class="line">- The absolute difference between the index of the occurrence of `<span class="string">&quot;c&quot;</span>` <span class="keyword">in</span> `s` and the index of the occurrence of `<span class="string">&quot;c&quot;</span>` <span class="keyword">in</span> `t`.</span><br><span class="line"></span><br><span class="line">That is, the permutation difference between `s` and `t` is equal to `|0 - 1| + |2 - 2| + |1 - 0| = 2`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abcde&quot;</span>, t = <span class="string">&quot;edbac&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 12</span><br><span class="line"></span><br><span class="line">Explanation: The permutation difference between `s` and `t` is equal to `|0 - 3| + |1 - 2| + |2 - 4| + |3 - 1| + |4 - 0| = 12`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 26</code></li>
<li>Each character occurs at most once in <code>s</code>.</li>
<li><code>t</code> is a permutation of <code>s</code>.</li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPermutationDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            m[s[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res += <span class="built_in">abs</span>(i - m[t[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>3144. Minimum Substring Partition of Equal Character Frequency</title>
    <url>/2024/05/22/3144-Minimum-Substring-Partition-of-Equal-Character-Frequency/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-substring-partition-of-equal-character-frequency/description/">3144. Minimum Substring Partition of Equal Character Frequency</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string <code>s</code>, you need to partition it into one or more <strong>balanced</strong>  substrings. For example, if <code>s == &quot;ababcc&quot;</code> then <code>(&quot;abab&quot;, &quot;c&quot;, &quot;c&quot;)</code>, <code>(&quot;ab&quot;, &quot;abc&quot;, &quot;c&quot;)</code>, and <code>(&quot;ababcc&quot;)</code> are all valid partitions, but <code>(&quot;a&quot;, &quot;bab&quot; , &quot;cc&quot;)</code>, <code>(&quot;aba&quot; , &quot;bc&quot;, &quot;c&quot;)</code>, and <code>(&quot;ab&quot;, &quot;abcc&quot;)</code> are not. The unbalanced substrings are bolded.</p>
<p>Return the <strong>minimum</strong>  number of substrings that you can partition <code>s</code> into.</p>
<p><strong>Note:</strong>  A <strong>balanced</strong>  string is a string where each character in the string occurs the same number of times.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;fabccddg&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We can partition the string `s` into 3 substrings <span class="keyword">in</span> one of the following ways: `(<span class="string">&quot;fab, &quot;</span>ccdd<span class="string">&quot;, &quot;</span>g<span class="string">&quot;)`, or `(&quot;</span>fabc<span class="string">&quot;, &quot;</span><span class="built_in">cd</span><span class="string">&quot;, &quot;</span>dg<span class="string">&quot;)`.</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abababaccddb&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We can partition the string `s` into 2 substrings like so: `(<span class="string">&quot;abab&quot;</span>, <span class="string">&quot;abaccddb&quot;</span>)`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> consists only of English lowercase letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dynamic programming</li>
<li>for dp, the less we need to memorize the better</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumSubstringsInPartition</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(s.size() + <span class="number">1</span>, <span class="number">1001</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(<span class="number">0</span>, s, dp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> index, string&amp; s, vector&lt;<span class="type">int</span>&gt;&amp; dp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[index] != <span class="number">1001</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1001</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            m[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            <span class="keyword">if</span> (m[s[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((i - index + <span class="number">1</span>) % count != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> freq = m[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="type">bool</span> balanced = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it.second != freq) &#123;</span><br><span class="line">                    balanced = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (balanced) &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, <span class="built_in">traverse</span>(i + <span class="number">1</span>, s, dp) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[index] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>3147. Taking Maximum Energy From the Mystic Dungeon</title>
    <url>/2024/05/22/3147-Taking-Maximum-Energy-From-the-Mystic-Dungeon/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/taking-maximum-energy-from-the-mystic-dungeon/description/">3147. Taking Maximum Energy From the Mystic Dungeon</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In a mystic dungeon, <code>n</code> magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.</p>
<p>You have been cursed in such a way that after absorbing energy from magician <code>i</code>, you will be instantly transported to magician <code>(i + k)</code>. This process will be repeated until you reach the magician where <code>(i + k)</code> does not exist.</p>
<p>In other words, you will choose a starting point and then teleport with <code>k</code> jumps until you reach the end of the magicians’ sequence, <strong>absorbing all the energy</strong>  during the journey.</p>
<p>You are given an array <code>energy</code> and an integer <code>k</code>. Return the <strong>maximum</strong>  possible energy you can gain.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input:  energy = [5,2,-10,-5,1], k = 3</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation: We can gain a total energy of 3 by starting from magician 1 absorbing 2 + 1 = 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: energy = [-2,-3,-1], k = 2</span><br><span class="line"></span><br><span class="line">Output: -1</span><br><span class="line"></span><br><span class="line">Explanation: We can gain a total energy of -1 by starting from magician 2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= energy.length &lt;= 10^5</code></li>
<li><code>-1000 &lt;= energy[i] &lt;= 1000</code></li>
<li><code>1 &lt;= k &lt;= energy.length - 1</code><br>​​​​</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumEnergy</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; energy, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sums</span><span class="params">(k, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> res = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = energy.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            sums[i % k] += energy[i];</span><br><span class="line">            res = <span class="built_in">max</span>(sums[i % k], res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>3148. Maximum Difference Score in a Grid</title>
    <url>/2024/05/22/3148-Maximum-Difference-Score-in-a-Grid/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-difference-score-in-a-grid/description/">3148. Maximum Difference Score in a Grid</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an <code>m x n</code> matrix <code>grid</code> consisting of <strong>positive</strong>  integers. You can move from a cell in the matrix to <strong>any</strong>  other cell that is either to the bottom or to the right (not necessarily adjacent). The score of a move from a cell with the value <code>c1</code> to a cell with the value <code>c2</code> is <code>c2 - c1</code>.</p>
<p>You can start at <strong>any</strong>  cell, and you have to make <strong>at least</strong>  one move.</p>
<p>Return the <strong>maximum</strong>  total score you can achieve.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/03/14/grid1.png" style="width: 240px; height: 240px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[9,5,7,3],[8,9,6,1],[6,7,14,3],[2,5,3,1]]</span><br><span class="line"></span><br><span class="line">Output: 9</span><br><span class="line"></span><br><span class="line">Explanation: We start at the cell `(0, 1)`, and we perform the following moves:&lt;br&gt;</span><br><span class="line">- Move from the cell `(0, 1)` to `(2, 1)` with a score of `7 - 5 = 2`.&lt;br&gt;</span><br><span class="line">- Move from the cell `(2, 1)` to `(2, 2)` with a score of `14 - 7 = 7`.&lt;br&gt;</span><br><span class="line">The total score is `2 + 7 = 9`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/04/08/moregridsdrawio-1.png" style="width: 180px; height: 116px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[4,3,2],[3,2,1]]</span><br><span class="line"></span><br><span class="line">Output: -1</span><br><span class="line"></span><br><span class="line">Explanation: We start at the cell `(0, 0)`, and we perform one move: `(0, 0)` to `(0, 1)`. The score is `3 - 4 = -1`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>2 &lt;= m, n &lt;= 1000</code></li>
<li><code>4 &lt;= m * n &lt;= 10^5</code></li>
<li><code>1 &lt;= grid[i][j] &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly contest 397</li>
<li>Calculate prevMin is like 2D preSum</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxScore</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">minNum</span>(grid.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(grid[<span class="number">0</span>].<span class="built_in">size</span>() + <span class="number">1</span>, INT_MAX));</span><br><span class="line">        <span class="type">int</span> res = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; grid.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="type">int</span> prevMin = <span class="built_in">min</span>(minNum[i][j + <span class="number">1</span>], minNum[i + <span class="number">1</span>][j]);</span><br><span class="line">                res = <span class="built_in">max</span>(res, grid[i][j] - prevMin);</span><br><span class="line">                minNum[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="built_in">min</span>(grid[i][j], prevMin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3149. Find the Minimum Cost Array Permutation</title>
    <url>/2024/05/23/3149-Find-the-Minimum-Cost-Array-Permutation/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-minimum-cost-array-permutation/description/">3149. Find the Minimum Cost Array Permutation</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>nums</code> which is a permutation of <code>[0, 1, 2, ..., n - 1]</code>. The <strong>score</strong>  of any permutation of <code>[0, 1, 2, ..., n - 1]</code> named <code>perm</code> is defined as:</p>
<p><code>score(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|</code></p>
<p>Return the permutation <code>perm</code> which has the <strong>minimum</strong>  possible score. If multiple permutations exist with this score, return the one that is lexicographically smallest among them.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,0,2]</span><br><span class="line"></span><br><span class="line">Output: [0,1,2]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/04/04/example0gif.gif" style="width: 235px; height: 235px;"></strong></p>
<p>The lexicographically smallest permutation with minimum cost is <code>[0,1,2]</code>. The cost of this permutation is <code>|0 - 0| + |1 - 2| + |2 - 1| = 2</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,2,1]</span><br><span class="line"></span><br><span class="line">Output: [0,2,1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/04/04/example1gif.gif" style="width: 235px; height: 235px;"></strong></p>
<p>The lexicographically smallest permutation with minimum cost is <code>[0,2,1]</code>. The cost of this permutation is <code>|0 - 1| + |2 - 2| + |1 - 0| = 2</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n == nums.length &lt;= 14</code></li>
<li><code>nums</code> is a permutation of <code>[0, 1, 2, ..., n - 1]</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly contest 397</li>
<li>Rotate the array we can get the same result, so always start with zero</li>
<li>Think about how to transition from one state to next</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> size_;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        size_ = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span>&gt;&gt; <span class="built_in">dp</span>((<span class="number">1</span> &lt;&lt; size_) - <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">long</span>&gt;(nums.<span class="built_in">size</span>(), INT_MAX));</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, dp, nums);</span><br><span class="line">        <span class="built_in">make_ans</span>(<span class="number">1</span>, <span class="number">0</span>, dp, nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">long</span> i, <span class="type">int</span> j, vector&lt;vector&lt;<span class="type">long</span>&gt;&gt;&amp; dp, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == (<span class="number">1</span> &lt;&lt; size_) - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(j - nums[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] != INT_MAX) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; size_; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; k) &amp; i) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(j - nums[k]) + <span class="built_in">dfs</span>(i | (<span class="number">1</span> &lt;&lt; k), k, dp, nums));</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][j] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">make_ans</span><span class="params">(<span class="type">long</span> i, <span class="type">int</span> j, vector&lt;vector&lt;<span class="type">long</span>&gt;&gt;&amp; dp, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(j);</span><br><span class="line">        <span class="keyword">if</span> (i == (<span class="number">1</span> &lt;&lt; size_) - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; size_; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; k)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(i | <span class="number">1</span> &lt;&lt; k, k, dp, nums) + <span class="built_in">abs</span>(j - nums[k]) == dp[i][j]) &#123;</span><br><span class="line">                <span class="built_in">make_ans</span>(i | (<span class="number">1</span> &lt;&lt; k), k, dp, nums);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Bit Manipulation</tag>
        <tag>Bitmask</tag>
      </tags>
  </entry>
  <entry>
    <title>315. Count of Smaller Numbers After Self</title>
    <url>/2023/08/24/315-Count-of-Smaller-Numbers-After-Self/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/">315. Count of Smaller Numbers After Self</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-indexed-tree//">Binary Indexed Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/segment-tree//">Segment Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/merge-sort//">Merge Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/ordered-set//">Ordered Set</a></p>
<p>Given an integer array <code>nums</code>, return <em>an integer array</em> <code>counts</code> <em>where</em> <code>counts[i]</code> <em>is the number of smaller elements to the right of</em> <code>nums[i]</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,2,6,1]</span><br><span class="line">Output: [2,1,1,0]</span><br><span class="line">Explanation:</span><br><span class="line">To the right of 5 there are 2 smaller elements (2 and 1).</span><br><span class="line">To the right of 2 there is only 1 smaller element (1).</span><br><span class="line">To the right of 6 there is 1 smaller element (1).</span><br><span class="line">To the right of 1 there is 0 smaller element.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1]</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,-1]</span><br><span class="line">Output: [0,0]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Merge sort</li>
<li>Compare tmp array with doing the merge</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; tmp;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countSmaller</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">       vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; arr;</span><br><span class="line">       <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">           arr.<span class="built_in">push_back</span>(&#123;nums[i], i&#125;);</span><br><span class="line">       &#125;</span><br><span class="line">       res = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size, <span class="number">0</span>);</span><br><span class="line">       tmp = vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;(size, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">       <span class="built_in">sort</span>(arr, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">sort</span>(arr, low, mid);</span><br><span class="line">        <span class="built_in">sort</span>(arr, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="built_in">merge</span>(arr, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; arr, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">            tmp[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> index = low, p1 = low, p2 = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == mid + <span class="number">1</span>) &#123;</span><br><span class="line">                arr[index++] = tmp[p2++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == high + <span class="number">1</span>) &#123;</span><br><span class="line">                res[tmp[p1].second] += p2 - mid - <span class="number">1</span>;</span><br><span class="line">                arr[index++] = tmp[p1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp[p1].first &gt; tmp[p2].first) &#123;</span><br><span class="line">                arr[index++] = tmp[p2++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[tmp[p1].second] += p2 - mid - <span class="number">1</span>;</span><br><span class="line">                arr[index++] = tmp[p1++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Divide and Conquer</tag>
        <tag>Ordered Set</tag>
        <tag>Merge Sort</tag>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3151. Special Array I</title>
    <url>/2024/05/23/3151-Special-Array-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/special-array-i/description/">3151. Special Array I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>An array is considered <strong>special</strong>  if every pair of its adjacent elements contains two numbers with different parity.</p>
<p>You are given an array of integers <code>nums</code>. Return <code>true</code> if <code>nums</code> is a <strong>special</strong>  array, otherwise, return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There is only one element. So the answer is `<span class="literal">true</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,1,4]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There is only two pairs: `(2,1)` and `(1,4)`, and both of them contain numbers with different parity. So the answer is `<span class="literal">true</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,3,1,6]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">`nums[1]` and `nums[2]` are both odd. So the answer is `<span class="literal">false</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly contest 398</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isArraySpecial</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> isSpecial = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!((nums[i] % <span class="number">2</span>) ^ (nums[i + <span class="number">1</span>] % <span class="number">2</span>))) &#123;</span><br><span class="line">                isSpecial = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isSpecial;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>3152. Special Array II</title>
    <url>/2024/05/23/3152-Special-Array-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/special-array-ii/description/">3152. Special Array II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>An array is considered <strong>special</strong>  if every pair of its adjacent elements contains two numbers with different parity.</p>
<p>You are given an array of integer <code>nums</code> and a 2D integer matrix <code>queries</code>, where for queries[i] &#x3D; [from<sub>i</sub>, to<sub>i</sub>] your task is to check that subarray nums[from<sub>i</sub>..to<sub>i</sub>] is <strong>special</strong>  or not.</p>
<p>Return an array of booleans <code>answer</code> such that <code>answer[i]</code> is <code>true</code> if nums[from<sub>i</sub>..to<sub>i</sub>] is special.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,4,1,2,6], queries = [[0,4]]</span><br><span class="line"></span><br><span class="line">Output: [<span class="literal">false</span>]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The subarray is `[3,4,1,2,6]`. 2 and 6 are both even.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,3,1,6], queries = [[0,2],[2,3]]</span><br><span class="line"></span><br><span class="line">Output: [<span class="literal">false</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">- The subarray is `[4,3,1]`. 3 and 1 are both odd. So the answer to this query is `<span class="literal">false</span>`.</span><br><span class="line">- The subarray is `[1,6]`. There is only one pair: `(1,6)` and it contains numbers with different parity. So the answer to this query is `<span class="literal">true</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>
<li><code>1 &lt;= queries.length &lt;= 10^5</code></li>
<li><code>queries[i].length == 2</code></li>
<li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;= nums.length - 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly contest 398</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">isArraySpecial</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,</span></span></span><br><span class="line"><span class="params"><span class="function">                                vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nums[i] % <span class="number">2</span>) ^ (nums[i + <span class="number">1</span>] % <span class="number">2</span>)) &#123;</span><br><span class="line">                preSum[i + <span class="number">1</span>] = preSum[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                preSum[i + <span class="number">1</span>] = preSum[i] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> query : queries) &#123;</span><br><span class="line">            <span class="type">int</span> from = query[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> to = query[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (from == to) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (preSum[to] &gt; preSum[from]) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>3153. Sum of Digit Differences of All Pairs</title>
    <url>/2024/05/23/3153-Sum-of-Digit-Differences-of-All-Pairs/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sum-of-digit-differences-of-all-pairs/description/">3153. Sum of Digit Differences of All Pairs</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>nums</code> consisting of <strong>positive</strong>  integers where all integers have the <strong>same</strong>  number of digits.</p>
<p>The <strong>digit difference</strong>  between two integers is the count of different digits that are in the <strong>same</strong>  position in the two integers.</p>
<p>Return the <strong>sum</strong>  of the <strong>digit differences</strong>  between <strong>all</strong>  pairs of integers in <code>nums</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [13,23,12]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">We have the following:&lt;br&gt;</span><br><span class="line">- The digit difference between **1** 3 and **2** 3 is 1.&lt;br&gt;</span><br><span class="line">- The digit difference between 1**3**  and 1**2**  is 1.&lt;br&gt;</span><br><span class="line">- The digit difference between **23**  and **12**  is 2.&lt;br&gt;</span><br><span class="line">So the total <span class="built_in">sum</span> of digit differences between all pairs of integers is `1 + 1 + 2 = 4`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [10,10,10,10]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">All the integers <span class="keyword">in</span> the array are the same. So the total <span class="built_in">sum</span> of digit differences between all pairs of integers will be 0.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt; 10^9</code></li>
<li>All integers in <code>nums</code> have the same number of digits.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly contest 398</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">sumDigitDifferences</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">bits</span>(<span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> val = num % <span class="number">10</span>;</span><br><span class="line">                bits[index][val]++;</span><br><span class="line">                num /= <span class="number">10</span>;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bits[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">                    sum += bits[i][j] * bits[i][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Math</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>3154. Find Number of Ways to Reach the K-th Stair</title>
    <url>/2024/05/23/3154-Find-Number-of-Ways-to-Reach-the-K-th-Stair/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-number-of-ways-to-reach-the-k-th-stair/description/">3154. Find Number of Ways to Reach the K-th Stair</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a <strong>non-negative</strong>  integer <code>k</code>. There exists a staircase with an infinite number of stairs, with the <strong>lowest</strong>  stair numbered 0.</p>
<p>Alice has an integer <code>jump</code>, with an initial value of 0. She starts on stair 1 and wants to reach stair <code>k</code> using <strong>any</strong>  number of <strong>operations</strong> . If she is on stair <code>i</code>, in one <strong>operation</strong>  she can:</p>
<ul>
<li>Go down to stair <code>i - 1</code>. This operation <strong>cannot</strong>  be used consecutively or on stair 0.</li>
<li>Go up to stair <code>i + 2^jump</code>. And then, <code>jump</code> becomes <code>jump + 1</code>.</li>
</ul>
<p>Return the total number of ways Alice can reach stair <code>k</code>.</p>
<p><strong>Note</strong>  that it is possible that Alice reaches the stair <code>k</code>, and performs some operations to reach the stair <code>k</code> again.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: k = 0</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The 2 possible ways of reaching stair 0 are:</span><br><span class="line"></span><br><span class="line">- Alice starts at stair 1.</span><br><span class="line"></span><br><span class="line">- Using an operation of the first <span class="built_in">type</span>, she goes down 1 stair to reach stair 0.</span><br><span class="line"></span><br><span class="line">- Alice starts at stair 1.</span><br><span class="line"></span><br><span class="line">- Using an operation of the first <span class="built_in">type</span>, she goes down 1 stair to reach stair 0.</span><br><span class="line">- Using an operation of the second <span class="built_in">type</span>, she goes up 2^0 stairs to reach stair 1.</span><br><span class="line">- Using an operation of the first <span class="built_in">type</span>, she goes down 1 stair to reach stair 0.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: k = 1</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The 4 possible ways of reaching stair 1 are:</span><br><span class="line"></span><br><span class="line">- Alice starts at stair 1. Alice is at stair 1.</span><br><span class="line">- Alice starts at stair 1.</span><br><span class="line"></span><br><span class="line">- Using an operation of the first <span class="built_in">type</span>, she goes down 1 stair to reach stair 0.</span><br><span class="line">- Using an operation of the second <span class="built_in">type</span>, she goes up 2^0 stairs to reach stair 1.</span><br><span class="line"></span><br><span class="line">- Alice starts at stair 1.</span><br><span class="line"></span><br><span class="line">- Using an operation of the second <span class="built_in">type</span>, she goes up 2^0 stairs to reach stair 2.</span><br><span class="line">- Using an operation of the first <span class="built_in">type</span>, she goes down 1 stair to reach stair 1.</span><br><span class="line"></span><br><span class="line">- Alice starts at stair 1.</span><br><span class="line"></span><br><span class="line">- Using an operation of the first <span class="built_in">type</span>, she goes down 1 stair to reach stair 0.</span><br><span class="line">- Using an operation of the second <span class="built_in">type</span>, she goes up 2^0 stairs to reach stair 1.</span><br><span class="line">- Using an operation of the first <span class="built_in">type</span>, she goes down 1 stair to reach stair 0.</span><br><span class="line">- Using an operation of the second <span class="built_in">type</span>, she goes up 2^1 stairs to reach stair 2.</span><br><span class="line">- Using an operation of the first <span class="built_in">type</span>, she goes down 1 stair to reach stair 1.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= k &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly contest 398</li>
<li>dynamic programming</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> k_;</span><br><span class="line">    vector&lt;vector&lt;map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">waysToReachStair</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        k_ = k;</span><br><span class="line">        dp = vector&lt;vector&lt;map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt;(<span class="number">2</span>, vector&lt;map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;(<span class="number">32</span>, <span class="built_in">map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;()));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> jump, <span class="type">int</span> preDown)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jump &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur &gt; k_ + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[preDown][jump].<span class="built_in">contains</span>(cur)) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[preDown][jump][cur];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = cur == k_ ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> next_jump = cur + <span class="built_in">pow</span>(<span class="number">2</span>, jump);</span><br><span class="line">        res += <span class="built_in">traverse</span>(cur + <span class="built_in">pow</span>(<span class="number">2</span>, jump), jump + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!preDown) &#123;</span><br><span class="line">            res += <span class="built_in">traverse</span>(cur - <span class="number">1</span>, jump, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[preDown][jump][cur] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
        <tag>Memoization</tag>
        <tag>Bit Manipulation</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>3158. Find the XOR of Numbers Which Appear Twice</title>
    <url>/2024/05/28/3158-Find-the-XOR-of-Numbers-Which-Appear-Twice/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-xor-of-numbers-which-appear-twice/description/">3158. Find the XOR of Numbers Which Appear Twice</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>nums</code>, where each number in the array appears <strong>either</strong>  once or twice.</p>
<p>Return the bitwise <code>XOR</code> of all the numbers that appear twice in the array, or 0 if no number appears twice.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,1,3]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The only number that appears twice <span class="keyword">in</span>`nums`is 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">No number appears twice <span class="keyword">in</span>`nums`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,2,1]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Numbers 1 and 2 appeared twice. `1 XOR 2 == 3`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 50</code></li>
<li><code>1 &lt;= nums[i] &lt;= 50</code></li>
<li>Each number in <code>nums</code> appears either once or twice.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 131</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">duplicateNumbersXOR</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            m[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.second == <span class="number">2</span>) &#123;</span><br><span class="line">                res ^= it.first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>316. Remove Duplicate Letters</title>
    <url>/2023/02/01/316-Remove-Duplicate-Letters/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/remove-duplicate-letters/">316. Remove Duplicate Letters</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/stack/">Stack</a>, <a href="https://leetcode.com/tag/greedy/">Greedy</a>, <a href="https://leetcode.com/tag/monotonic-stack/">Monotonic Stack</a></p>
<p>Given a string <code>s</code>, remove duplicate letters so that every letter appears once and only once. You must make sure your result is <span data-keyword="lexicographically-smaller-string"><strong>the smallest in lexicographical order</strong></span> among all possible results.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;bcabc&quot;</span><br><span class="line">Output: &quot;abc&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;cbacdcbc&quot;</span><br><span class="line">Output: &quot;acdb&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>s</code> consists of lowercase English letters.</li>
</ul>
<p><strong>Note:</strong> This question is the same as 1081: <a href="https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/">https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/</a></p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>With stack and set we can get the substring with no duplicate, but not necessarily the smallest</li>
<li>Add a counter to count the frequency of letters, then we can pop the letters without worrying there’s no more</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicateLetters</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">inStack</span><span class="params">(<span class="number">26</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            count[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="type">int</span> idx = c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            count[idx]--;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (inStack[idx]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">top</span>() &gt; c) &#123;</span><br><span class="line">                <span class="type">char</span> top = stk.<span class="built_in">top</span>();</span><br><span class="line">                <span class="keyword">if</span> (count[top - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                inStack[top - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stk.<span class="built_in">push</span>(c);</span><br><span class="line">            inStack[c - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res += stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3159. Find Occurrences of an Element in an Array</title>
    <url>/2024/05/28/3159-Find-Occurrences-of-an-Element-in-an-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-occurrences-of-an-element-in-an-array/description/">3159. Find Occurrences of an Element in an Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code>, an integer array <code>queries</code>, and an integer <code>x</code>.</p>
<p>For each <code>queries[i]</code>, you need to find the index of the <code>queries[i]^th</code> occurrence of <code>x</code> in the <code>nums</code> array. If there are fewer than <code>queries[i]</code> occurrences of <code>x</code>, the answer should be -1 for that query.</p>
<p>Return an integer array <code>answer</code> containing the answers to all queries.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,1,7], queries = [1,3,2,4], x = 1</span><br><span class="line"></span><br><span class="line">Output: [0,-1,2,-1]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">- For the 1^st query, the first occurrence of 1 is at index 0.</span><br><span class="line">- For the 2^nd query, there are only two occurrences of 1 <span class="keyword">in</span> `nums`, so the answer is -1.</span><br><span class="line">- For the 3^rd query, the second occurrence of 1 is at index 2.</span><br><span class="line">- For the 4^th query, there are only two occurrences of 1 <span class="keyword">in</span> `nums`, so the answer is -1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3], queries = [10], x = 5</span><br><span class="line"></span><br><span class="line">Output: [-1]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">- For the 1^st query, 5 doesn<span class="string">&#x27;t exist in `nums`, so the answer is -1.</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length, queries.length &lt;= 10^5</code></li>
<li><code>1 &lt;= queries[i] &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i], x &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 131</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">occurrencesOfElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; queries,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; occurances;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == x) &#123;</span><br><span class="line">                occurances.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> query : queries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (query - <span class="number">1</span> &gt;= occurances.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(occurances[query - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>3160. Find the Number of Distinct Colors Among the Balls</title>
    <url>/2024/05/28/3160-Find-the-Number-of-Distinct-Colors-Among-the-Balls/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-number-of-distinct-colors-among-the-balls/description/">3160. Find the Number of Distinct Colors Among the Balls</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer <code>limit</code> and a 2D array <code>queries</code> of size <code>n x 2</code>.</p>
<p>There are <code>limit + 1</code> balls with <strong>distinct</strong>  labels in the range <code>[0, limit]</code>. Initially, all balls are uncolored. For every query in <code>queries</code> that is of the form <code>[x, y]</code>, you mark ball <code>x</code> with the color <code>y</code>. After each query, you need to find the number of <strong>distinct</strong>  colors among the balls.</p>
<p>Return an array <code>result</code> of length <code>n</code>, where <code>result[i]</code> denotes the number of distinct colors after <code>i^th</code> query.</p>
<p><strong>Note</strong>  that when answering a query, lack of a color will not be considered as a color.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">limit</span> = 4, queries = [[1,4],[2,5],[1,3],[3,4]]</span><br><span class="line"></span><br><span class="line">Output: [1,2,2,3]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop.gif" style="width: 455px; height: 145px;">

<ul>
<li>After query 0, ball 1 has color 4.</li>
<li>After query 1, ball 1 has color 4, and ball 2 has color 5.</li>
<li>After query 2, ball 1 has color 3, and ball 2 has color 5.</li>
<li>After query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">limit</span> = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]]</span><br><span class="line"></span><br><span class="line">Output: [1,2,2,3,4]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/04/17/ezgifcom-crop2.gif" style="width: 457px; height: 144px;"></strong></p>
<ul>
<li>After query 0, ball 0 has color 1.</li>
<li>After query 1, ball 0 has color 1, and ball 1 has color 2.</li>
<li>After query 2, ball 0 has color 1, and balls 1 and 2 have color 2.</li>
<li>After query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4.</li>
<li>After query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= limit &lt;= 10^9</code></li>
<li><code>1 &lt;= n == queries.length &lt;= 10^5</code></li>
<li><code>queries[i].length == 2</code></li>
<li><code>0 &lt;= queries[i][0] &lt;= limit</code></li>
<li><code>1 &lt;= queries[i][1] &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 131</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">queryResults</span><span class="params">(<span class="type">int</span> limit, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; colorToOccurances;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> query : queries) &#123;</span><br><span class="line">            <span class="type">int</span> x = query[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> y = query[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!m.<span class="built_in">contains</span>(x)) &#123;</span><br><span class="line">                m[x] = y;</span><br><span class="line">                colorToOccurances[y]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> previousColor = m[x];</span><br><span class="line">                colorToOccurances[previousColor]--;</span><br><span class="line">                <span class="keyword">if</span> (colorToOccurances[previousColor] == <span class="number">0</span>) &#123;</span><br><span class="line">                    colorToOccurances.<span class="built_in">erase</span>(previousColor);</span><br><span class="line">                &#125;</span><br><span class="line">                m[x] = y;</span><br><span class="line">                colorToOccurances[y]++;</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(colorToOccurances.<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3161. Block Placement Queries</title>
    <url>/2024/05/28/3161-Block-Placement-Queries/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/block-placement-queries/description/">3161. Block Placement Queries</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There exists an infinite number line, with its origin at 0 and extending towards the <strong>positive</strong>  x-axis.</p>
<p>You are given a 2D array <code>queries</code>, which contains two types of queries:</p>
<ul>
<li>For a query of type 1, <code>queries[i] = [1, x]</code>. Build an obstacle at distance <code>x</code> from the origin. It is guaranteed that there is <strong>no</strong>  obstacle at distance <code>x</code> when the query is asked.</li>
<li>For a query of type 2, <code>queries[i] = [2, x, sz]</code>. Check if it is possible to place a block of size <code>sz</code> anywhere in the range <code>[0, x]</code> on the line, such that the block <strong>entirely</strong>  lies in the range <code>[0, x]</code>. A block <strong>cannot ** be placed if it intersects with any obstacle, but it may touch it. Note that you do</strong> not**  actually place the block. Queries are separate.</li>
</ul>
<p>Return a boolean array <code>results</code>, where <code>results[i]</code> is <code>true</code> if you can place the block specified in the <code>i^th</code> query of type 2, and <code>false</code> otherwise.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: queries = [[1,2],[2,3,3],[2,3,1],[2,2,2]]</span><br><span class="line"></span><br><span class="line">Output: [<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/04/22/example0block.png" style="padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 309px; height: 129px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor=""></strong></p>
<p>For query 0, place an obstacle at <code>x = 2</code>. A block of size at most 2 can be placed before <code>x = 3</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: queries = [[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]</span><br><span class="line"></span><br><span class="line">Output: [<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">false</span>]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/04/22/example1block.png" style="padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 310px; height: 130px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor=""></strong></p>
<ul>
<li>Place an obstacle at <code>x = 7</code> for query 0. A block of size at most 7 can be placed before <code>x = 7</code>.</li>
<li>Place an obstacle at <code>x = 2</code> for query 2. Now, a block of size at most 5 can be placed before <code>x = 7</code>, and a block of size at most 2 before <code>x = 2</code>.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= queries.length &lt;= 15 * 10^4</code></li>
<li><code>2 &lt;= queries[i].length &lt;= 3</code></li>
<li><code>1 &lt;= queries[i][0] &lt;= 2</code></li>
<li><code>1 &lt;= x, sz &lt;= min(5 * 10^4, 3 * queries.length)</code></li>
<li>The input is generated such that for queries of type 1, no obstacle exists at distance <code>x</code> when the query is asked.</li>
<li>The input is generated such that there is at least one query of type 2.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 131</li>
<li>segment tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; mx;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">getResults</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> boundary = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> query : queries) &#123;</span><br><span class="line">            boundary = <span class="built_in">max</span>(boundary, query[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        boundary++;</span><br><span class="line">        mx = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(boundary * <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; obstacles&#123;<span class="number">0</span>, boundary&#125;;</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> q : queries) &#123;</span><br><span class="line">            <span class="type">int</span> x = q[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">auto</span> it = obstacles.<span class="built_in">lower_bound</span>(x);</span><br><span class="line">            <span class="type">int</span> pre = *<span class="built_in">prev</span>(it); <span class="comment">// x 左侧最近障碍物的位置</span></span><br><span class="line">            <span class="keyword">if</span> (q[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> nxt = *it;</span><br><span class="line">                obstacles.<span class="built_in">insert</span>(x);</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, boundary, x, x - pre);</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, boundary, nxt, nxt - x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> max_gap = <span class="built_in">max</span>(<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, boundary, pre), x - pre);</span><br><span class="line">                res.<span class="built_in">push_back</span>(max_gap &gt;= q[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            mx[o] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= m) &#123;</span><br><span class="line">            <span class="built_in">update</span>(o * <span class="number">2</span>, l, m, i, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">update</span>(o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r, i, val);</span><br><span class="line">        &#125;</span><br><span class="line">        mx[o] = <span class="built_in">max</span>(mx[o * <span class="number">2</span>], mx[o * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= R) &#123;</span><br><span class="line">            <span class="keyword">return</span> mx[o];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">        <span class="keyword">if</span> (R &lt;= m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(o * <span class="number">2</span>, l, m, R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(mx[o * <span class="number">2</span>], <span class="built_in">query</span>(o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r, R));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3162. Find the Number of Good Pairs I</title>
    <url>/2024/05/29/3162-Find-the-Number-of-Good-Pairs-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-number-of-good-pairs-i/description/">3162. Find the Number of Good Pairs I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given 2 integer arrays <code>nums1</code> and <code>nums2</code> of lengths <code>n</code> and <code>m</code> respectively. You are also given a <strong>positive</strong>  integer <code>k</code>.</p>
<p>A pair <code>(i, j)</code> is called <strong>good</strong>  if <code>nums1[i]</code> is divisible by <code>nums2[j] * k</code> (<code>0 &lt;= i &lt;= n - 1</code>, <code>0 &lt;= j &lt;= m - 1</code>).</p>
<p>Return the total number of <strong>good</strong>  pairs.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,3,4], nums2 = [1,3,4], k = 1</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The 5 good pairs are `(0, 0)`, `(1, 0)`, `(1, 1)`, `(2, 0)`, and `(2, 2)`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2,4,12], nums2 = [2,4], k = 3</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The 2 good pairs are `(3, 0)` and `(3, 1)`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n, m &lt;= 50</code></li>
<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 50</code></li>
<li><code>1 &lt;= k &lt;= 50</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 399</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num1 : nums1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num2 : nums2) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num1 % (num2 * k) == <span class="number">0</span>) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>3163. String Compression III</title>
    <url>/2024/05/29/3163-String-Compression-III/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/string-compression-iii/description/">3163. String Compression III</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string <code>word</code>, compress it using the following algorithm:</p>
<ul>
<li><p>Begin with an empty string <code>comp</code>. While <code>word</code> is <strong>not</strong>  empty, use the following operation:</p>
</li>
<li><p>Remove a maximum length prefix of <code>word</code> made of a single character <code>c</code> repeating <strong>at most</strong>  9 times.</p>
</li>
<li><p>Append the length of the prefix followed by <code>c</code> to <code>comp</code>.</p>
</li>
</ul>
<p>Return the string <code>comp</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;abcde&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;1a1b1c1d1e&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Initially, `comp = <span class="string">&quot;&quot;</span>`. Apply the operation 5 <span class="built_in">times</span>, choosing `<span class="string">&quot;a&quot;</span>`, `<span class="string">&quot;b&quot;</span>`, `<span class="string">&quot;c&quot;</span>`, `<span class="string">&quot;d&quot;</span>`, and `<span class="string">&quot;e&quot;</span>` as the prefix <span class="keyword">in</span> each operation.</span><br><span class="line"></span><br><span class="line">For each prefix, append `<span class="string">&quot;1&quot;</span>` followed by the character to `comp`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;aaaaaaaaaaaaaabb&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;9a5a2b&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Initially, `comp = <span class="string">&quot;&quot;</span>`. Apply the operation 3 <span class="built_in">times</span>, choosing `<span class="string">&quot;aaaaaaaaa&quot;</span>`, `<span class="string">&quot;aaaaa&quot;</span>`, and `<span class="string">&quot;bb&quot;</span>` as the prefix <span class="keyword">in</span> each operation.</span><br><span class="line"></span><br><span class="line">- For prefix `<span class="string">&quot;aaaaaaaaa&quot;</span>`, append `<span class="string">&quot;9&quot;</span>` followed by `<span class="string">&quot;a&quot;</span>` to `comp`.</span><br><span class="line">- For prefix `<span class="string">&quot;aaaaa&quot;</span>`, append `<span class="string">&quot;5&quot;</span>` followed by `<span class="string">&quot;a&quot;</span>` to `comp`.</span><br><span class="line">- For prefix `<span class="string">&quot;bb&quot;</span>`, append `<span class="string">&quot;2&quot;</span>` followed by `<span class="string">&quot;b&quot;</span>` to `comp`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word.length &lt;= 2 * 10^5</code></li>
<li><code>word</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 399</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">compressedString</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index != word.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">char</span> c = word[index];</span><br><span class="line">            <span class="type">int</span> i = index;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; <span class="built_in">min</span>(index + <span class="number">9</span>, (<span class="type">int</span>)word.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word[i] != c) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res += <span class="built_in">to_string</span>(i - index) + c;</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>3164. Find the Number of Good Pairs II</title>
    <url>/2024/05/30/3164-Find-the-Number-of-Good-Pairs-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-number-of-good-pairs-ii/description/">3164. Find the Number of Good Pairs II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given 2 integer arrays <code>nums1</code> and <code>nums2</code> of lengths <code>n</code> and <code>m</code> respectively. You are also given a <strong>positive</strong>  integer <code>k</code>.</p>
<p>A pair <code>(i, j)</code> is called <strong>good</strong>  if <code>nums1[i]</code> is divisible by <code>nums2[j] * k</code> (<code>0 &lt;= i &lt;= n - 1</code>, <code>0 &lt;= j &lt;= m - 1</code>).</p>
<p>Return the total number of <strong>good</strong>  pairs.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,3,4], nums2 = [1,3,4], k = 1</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The 5 good pairs are `(0, 0)`, `(1, 0)`, `(1, 1)`, `(2, 0)`, and `(2, 2)`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2,4,12], nums2 = [2,4], k = 3</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The 2 good pairs are `(3, 0)` and `(3, 1)`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n, m &lt;= 10^5</code></li>
<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 10^6</code></li>
<li><code>1 &lt;= k &lt;= 10^3</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 399</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">numberOfPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; candidates;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; nums2map;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] % k == <span class="number">0</span>) &#123;</span><br><span class="line">                candidates.<span class="built_in">push_back</span>(nums1[i] / k);</span><br><span class="line">                m[nums1[i] / k]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (candidates.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num2 : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums2map.<span class="built_in">contains</span>(num2)) &#123;</span><br><span class="line">                res += nums2map[num2];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> index = <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (index * num2 &lt;= candidates.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (m.<span class="built_in">contains</span>(index * num2)) &#123;</span><br><span class="line">                    res += m[index * num2];</span><br><span class="line">                    cur += m[index * num2];</span><br><span class="line">                &#125;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            nums2map[num2] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>3165. Maximum Sum of Subsequence With Non-adjacent Elements</title>
    <url>/2024/05/30/3165-Maximum-Sum-of-Subsequence-With-Non-adjacent-Elements/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-sum-of-subsequence-with-non-adjacent-elements/description/">3165. Maximum Sum of Subsequence With Non-adjacent Elements</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>nums</code> consisting of integers. You are also given a 2D array <code>queries</code>, where queries[i] &#x3D; [pos<sub>i</sub>, x<sub>i</sub>].</p>
<p>For query <code>i</code>, we first set nums[pos<sub>i</sub>] equal to x<sub>i</sub>, then we calculate the answer to query <code>i</code> which is the <strong>maximum</strong>  sum of a subsequence of <code>nums</code> where <strong>no two adjacent elements are selected</strong> .</p>
<p>Return the sum of the answers to all queries.</p>
<p>Since the final answer may be very large, return it <strong>modulo</strong>  <code>10^9 + 7</code>.</p>
<p>A <strong>subsequence</strong>  is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,5,9], queries = [[1,-2],[0,-3]]</span><br><span class="line"></span><br><span class="line">Output: 21</span><br><span class="line"></span><br><span class="line">Explanation:&lt;br&gt;</span><br><span class="line">After the 1^st query, `nums = [3,-2,9]` and the maximum <span class="built_in">sum</span> of a subsequence with non-adjacent elements is `3 + 9 = 12`.&lt;br&gt;</span><br><span class="line">After the 2^nd query, `nums = [-3,-2,9]` and the maximum <span class="built_in">sum</span> of a subsequence with non-adjacent elements is 9.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,-1], queries = [[0,-5]]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:&lt;br&gt;</span><br><span class="line">After the 1^st query, `nums = [-5,-1]` and the maximum <span class="built_in">sum</span> of a subsequence with non-adjacent elements is 0 (choosing an empty subsequence).</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 5 * 10^4</code></li>
<li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li>
<li><code>1 &lt;= queries.length &lt;= 5 * 10^4</code></li>
<li><code>queries[i] == [pos&lt;sub&gt;i&lt;/sub&gt;, x&lt;sub&gt;i&lt;/sub&gt;]</code></li>
<li><code>0 &lt;= pos&lt;sub&gt;i&lt;/sub&gt; &lt;= nums.length - 1</code></li>
<li><code>-10^5 &lt;= x&lt;sub&gt;i&lt;/sub&gt; &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 399</li>
<li>Segment Tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;array&lt;<span class="type">unsigned</span>, 4&gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumSumSubsequence</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        t.<span class="built_in">resize</span>(<span class="number">2</span> &lt;&lt; (<span class="number">32</span> - __builtin_clz(n)));</span><br><span class="line">        <span class="built_in">build</span>(nums, <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; q : queries) &#123;</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, q[<span class="number">0</span>], q[<span class="number">1</span>]);</span><br><span class="line">            res += t[<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res % <span class="number">1&#x27;000&#x27;000&#x27;007</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[o][<span class="number">3</span>] = <span class="built_in">max</span>(val, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= m) &#123;</span><br><span class="line">            <span class="built_in">update</span>(o * <span class="number">2</span>, l, m, i, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">update</span>(o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r, i, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">maintain</span>(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            t[o][<span class="number">3</span>] = <span class="built_in">max</span>(nums[l], <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">        <span class="built_in">build</span>(nums, o * <span class="number">2</span>, l, m);</span><br><span class="line">        <span class="built_in">build</span>(nums, o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">maintain</span>(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(<span class="type">int</span> o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;a = t[o * <span class="number">2</span>], b = t[o * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        t[o] = &#123;</span><br><span class="line">            <span class="comment">// 0: 00, 1: 01</span></span><br><span class="line">            <span class="comment">// 2: 10, 3: 11</span></span><br><span class="line">            <span class="built_in">max</span>(a[<span class="number">0</span>] + b[<span class="number">2</span>], a[<span class="number">1</span>] + b[<span class="number">0</span>]),</span><br><span class="line">            <span class="built_in">max</span>(a[<span class="number">0</span>] + b[<span class="number">3</span>], a[<span class="number">1</span>] + b[<span class="number">1</span>]),</span><br><span class="line">            <span class="built_in">max</span>(a[<span class="number">2</span>] + b[<span class="number">2</span>], a[<span class="number">3</span>] + b[<span class="number">0</span>]),</span><br><span class="line">            <span class="built_in">max</span>(a[<span class="number">2</span>] + b[<span class="number">3</span>], a[<span class="number">3</span>] + b[<span class="number">1</span>]),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Divide and Conquer</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3168. Minimum Number of Chairs in a Waiting Room</title>
    <url>/2024/06/05/3168-Minimum-Number-of-Chairs-in-a-Waiting-Room/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-number-of-chairs-in-a-waiting-room/description/">3168. Minimum Number of Chairs in a Waiting Room</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code>. Simulate events at each second <code>i</code>:</p>
<ul>
<li>If <code>s[i] == &#39;E&#39;</code>, a person enters the waiting room and takes one of the chairs in it.</li>
<li>If <code>s[i] == &#39;L&#39;</code>, a person leaves the waiting room, freeing up a chair.</li>
</ul>
<p>Return the <strong>minimum</strong> number of chairs needed so that a chair is available for every person who enters the waiting room given that it is initially <strong>empty</strong> .</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;EEEEEEE&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 7</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">After each second, a person enters the waiting room and no person leaves it. Therefore, a minimum of 7 chairs is needed.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;ELELEEL&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Let<span class="string">&#x27;s consider that there are 2 chairs in the waiting room. The table below shows the state of the waiting room at each second.</span></span><br></pre></td></tr></table></figure>

<table><tbody><tr><th>Second</th><th>Event</th><th>People in the Waiting Room</th><th>Available Chairs</th></tr><tr><td>0</td><td>Enter</td><td>1</td><td>1</td></tr><tr><td>1</td><td>Leave</td><td>0</td><td>2</td></tr><tr><td>2</td><td>Enter</td><td>1</td><td>1</td></tr><tr><td>3</td><td>Leave</td><td>0</td><td>2</td></tr><tr><td>4</td><td>Enter</td><td>1</td><td>1</td></tr><tr><td>5</td><td>Enter</td><td>2</td><td>0</td></tr><tr><td>6</td><td>Leave</td><td>1</td><td>1</td></tr></tbody></table>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;ELEELEELLL&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Let<span class="string">&#x27;s consider that there are 3 chairs in the waiting room. The table below shows the state of the waiting room at each second.</span></span><br></pre></td></tr></table></figure>

<table><tbody><tr><th>Second</th><th>Event</th><th>People in the Waiting Room</th><th>Available Chairs</th></tr><tr><td>0</td><td>Enter</td><td>1</td><td>2</td></tr><tr><td>1</td><td>Leave</td><td>0</td><td>3</td></tr><tr><td>2</td><td>Enter</td><td>1</td><td>2</td></tr><tr><td>3</td><td>Enter</td><td>2</td><td>1</td></tr><tr><td>4</td><td>Leave</td><td>1</td><td>2</td></tr><tr><td>5</td><td>Enter</td><td>2</td><td>1</td></tr><tr><td>6</td><td>Enter</td><td>3</td><td>0</td></tr><tr><td>7</td><td>Leave</td><td>2</td><td>1</td></tr><tr><td>8</td><td>Leave</td><td>1</td><td>2</td></tr><tr><td>9</td><td>Leave</td><td>0</td><td>3</td></tr></tbody></table>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 50</code></li>
<li><code>s</code> consists only of the letters <code>&#39;E&#39;</code> and <code>&#39;L&#39;</code>.</li>
<li><code>s</code> represents a valid sequence of entries and exits.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 400</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumChairs</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur--;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">max</span>(res, cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3169. Count Days Without Meetings</title>
    <url>/2024/06/05/3169-Count-Days-Without-Meetings/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-days-without-meetings/description/">3169. Count Days Without Meetings</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a positive integer <code>days</code> representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array <code>meetings</code> of size <code>n</code> where, <code>meetings[i] = [start_i, end_i]</code> represents the starting and ending days of meeting <code>i</code> (inclusive).</p>
<p>Return the count of days when the employee is available for work but no meetings are scheduled.</p>
<p><strong>Note:</strong> The meetings may overlap.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: days = 10, meetings = [[5,7],[1,3],[9,10]]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There is no meeting scheduled on the 4^th and 8^th days.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: days = 5, meetings = [[2,4],[1,3]]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There is no meeting scheduled on the 5^th day.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: days = 6, meetings = [[1,6]]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Meetings are scheduled <span class="keyword">for</span> all working days.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= days &lt;= 10^9</code></li>
<li><code>1 &lt;= meetings.length &lt;= 10^5</code></li>
<li><code>meetings[i].length == 2</code></li>
<li><code>1 &lt;= meetings[i][0] &lt;= meetings[i][1] &lt;= days</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 400</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countDays</span><span class="params">(<span class="type">int</span> days, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; meetings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](vector&lt;<span class="type">int</span>&gt;&amp; lhs, vector&lt;<span class="type">int</span>&gt;&amp; rhs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lhs[<span class="number">0</span>] == rhs[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> lhs[<span class="number">1</span>] &gt; rhs[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> lhs[<span class="number">0</span>] &lt; rhs[<span class="number">0</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">sort</span>(meetings.<span class="built_in">begin</span>(), meetings.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; meeting : meetings) &#123;</span><br><span class="line">            <span class="keyword">if</span> (meeting[<span class="number">1</span>] &lt;= cur) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (meeting[<span class="number">0</span>] &lt;= cur) &#123;</span><br><span class="line">                cur = meeting[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += meeting[<span class="number">0</span>] - cur - <span class="number">1</span>;</span><br><span class="line">                cur = meeting[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur &lt; days) &#123;</span><br><span class="line">            res += days - cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>3171. Find Subarray With Bitwise AND Closest to K</title>
    <url>/2024/06/05/3171-Find-Subarray-With-Bitwise-AND-Closest-to-K/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-subarray-with-bitwise-and-closest-to-k/description/">3171. Find Subarray With Bitwise AND Closest to K</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>nums</code> and an integer <code>k</code>. You need to find a subarray of <code>nums</code> such that the <strong>absolute difference</strong>  between <code>k</code> and the bitwise <code>AND</code> of the subarray elements is as <strong>small</strong>  as possible. In other words, select a subarray <code>nums[l..r]</code> such that <code>|k - (nums[l] AND nums[l + 1] ... AND nums[r])|</code> is minimum.</p>
<p>Return the <strong>minimum</strong>  possible value of the absolute difference.</p>
<p>A <strong>subarray</strong>  is a contiguous <b>non-empty</b> sequence of elements within an array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,4,5], k = 3</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The subarray `nums[2..3]` has `AND` value 4, <span class="built_in">which</span> gives the minimum absolute difference `|3 - 4| = 1`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,1,2], k = 2</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The subarray `nums[1..1]` has `AND` value 2, <span class="built_in">which</span> gives the minimum absolute difference `|2 - 2| = 0`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1], k = 10</span><br><span class="line"></span><br><span class="line">Output: 9</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There is a single subarray with `AND` value 1, <span class="built_in">which</span> gives the minimum absolute difference `|10 - 1| = 9`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>1 &lt;= k &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window or bit operation</li>
<li>Weekly Contest 400</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<p>Bit operation:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumDifference</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> x = nums[i];</span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(x - k));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[j] &amp; x) == nums[j]) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                nums[j] &amp;= x;</span><br><span class="line">                res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(nums[j] - k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Sliding window:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumDifference</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, cur = INT_MAX, res = INT_MAX;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            cur &amp;= nums[right];</span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(k - cur));</span><br><span class="line">            <span class="keyword">if</span> (cur == k) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur &lt; k) &#123;</span><br><span class="line">                <span class="type">int</span> tmp = INT_MAX, j = right;</span><br><span class="line">                <span class="keyword">for</span> ( ; j &gt;= left; j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((tmp &amp; nums[j]) == k) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((tmp &amp; nums[j]) &lt; k) &#123;</span><br><span class="line">                        res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(k - (tmp &amp; nums[j])));</span><br><span class="line">                        cur = tmp;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    tmp &amp;= nums[j];</span><br><span class="line">                    res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(k - tmp));</span><br><span class="line">                &#125;</span><br><span class="line">                left = j;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Bit Manipulation</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3170. Lexicographically Minimum String After Removing Stars</title>
    <url>/2024/06/05/3170-Lexicographically-Minimum-String-After-Removing-Stars/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/lexicographically-minimum-string-after-removing-stars/description/">3170. Lexicographically Minimum String After Removing Stars</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code>. It may contain any number of <code>&#39;*&#39;</code> characters. Your task is to remove all <code>&#39;*&#39;</code> characters.</p>
<p>While there is a <code>&#39;*&#39;</code>, do the following operation:</p>
<ul>
<li>Delete the leftmost <code>&#39;*&#39;</code> and the <strong>smallest</strong>  non-<code>&#39;*&#39;</code> character to its left. If there are several smallest characters, you can delete any of them.</li>
</ul>
<p>Return the lexicographically smallest resulting string after removing all <code>&#39;*&#39;</code> characters.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aaba*&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;aab&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We should delete one of the `<span class="string">&#x27;a&#x27;</span>` characters with `<span class="string">&#x27;*&#x27;</span>`. If we choose `s[3]`, `s` becomes the lexicographically smallest.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There is no `<span class="string">&#x27;*&#x27;</span>` <span class="keyword">in</span> the string.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 10^5</code></li>
<li><code>s</code> consists only of lowercase English letters and <code>&#39;*&#39;</code>.</li>
<li>The input is generated such that it is possible to delete all <code>&#39;*&#39;</code> characters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 400</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">clearStars</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; m;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; toRemove;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c = s[i];</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                m[c - <span class="string">&#x27;a&#x27;</span>].<span class="built_in">push_back</span>(res.<span class="built_in">size</span>());</span><br><span class="line">                res.<span class="built_in">push_back</span>(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = m.<span class="built_in">begin</span>();</span><br><span class="line">                <span class="type">int</span> index = it-&gt;second.<span class="built_in">back</span>();</span><br><span class="line">                toRemove.<span class="built_in">insert</span>(index);</span><br><span class="line">                it-&gt;second.<span class="built_in">pop_back</span>();</span><br><span class="line">                <span class="keyword">if</span> (it-&gt;second.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    m.<span class="built_in">erase</span>(it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string trueRes;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!toRemove.<span class="built_in">contains</span>(i)) &#123;</span><br><span class="line">                trueRes.<span class="built_in">push_back</span>(res[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> trueRes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Stack</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3174. Clear Digits</title>
    <url>/2024/06/14/3174-Clear-Digits/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/clear-digits/description/">3174. Clear Digits</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code>.</p>
<p>Your task is to remove <strong>all</strong>  digits by doing this operation repeatedly:</p>
<ul>
<li>Delete the first digit and the <strong>closest</strong>  <b>non-digit</b> character to its left.</li>
</ul>
<p>Return the resulting string after removing all digits.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">There is no digit <span class="keyword">in</span> the string.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;cb34&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">First, we apply the operation on `s[2]`, and `s` becomes `<span class="string">&quot;c4&quot;</span>`.</span><br><span class="line"></span><br><span class="line">Then we apply the operation on `s[1]`, and `s` becomes `<span class="string">&quot;&quot;</span>`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 100</code></li>
<li><code>s</code> consists only of lowercase English letters and digits.</li>
<li>The input is generated such that it is possible to delete all digits.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 132</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">clearDigits</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                str.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">while</span> (!str.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(str.<span class="built_in">top</span>());</span><br><span class="line">            str.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3175. Find The First Player to win K Games in a Row</title>
    <url>/2024/06/14/3175-Find-The-First-Player-to-win-K-Games-in-a-Row/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-first-player-to-win-k-games-in-a-row/description/">3175. Find The First Player to win K Games in a Row</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A competition consists of <code>n</code> players numbered from <code>0</code> to <code>n - 1</code>.</p>
<p>You are given an integer array <code>skills</code> of size <code>n</code> and a <strong>positive</strong>  integer <code>k</code>, where <code>skills[i]</code> is the skill level of player <code>i</code>. All integers in <code>skills</code> are <strong>unique</strong> .</p>
<p>All players are standing in a queue in order from player <code>0</code> to player <code>n - 1</code>.</p>
<p>The competition process is as follows:</p>
<ul>
<li>The first two players in the queue play a game, and the player with the <strong>higher</strong>  skill level wins.</li>
<li>After the game, the winner stays at the beginning of the queue, and the loser goes to the end of it.</li>
</ul>
<p>The winner of the competition is the <strong>first</strong>  player who wins <code>k</code> games <strong>in a row</strong> .</p>
<p>Return the initial index of the winning player.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: skills = [4,2,6,3,9], k = 2</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Initially, the queue of players is `[0,1,2,3,4]`. The following process happens:</span><br><span class="line"></span><br><span class="line">- Players 0 and 1 play a game, since the skill of player 0 is higher than that of player 1, player 0 wins. The resulting queue is `[0,2,3,4,1]`.</span><br><span class="line">- Players 0 and 2 play a game, since the skill of player 2 is higher than that of player 0, player 2 wins. The resulting queue is `[2,3,4,1,0]`.</span><br><span class="line">- Players 2 and 3 play a game, since the skill of player 2 is higher than that of player 3, player 2 wins. The resulting queue is `[2,4,1,0,3]`.</span><br><span class="line"></span><br><span class="line">Player 2 won `k = 2` games <span class="keyword">in</span> a row, so the winner is player 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: skills = [2,5,4], k = 3</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Initially, the queue of players is `[0,1,2]`. The following process happens:</span><br><span class="line"></span><br><span class="line">- Players 0 and 1 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is `[1,2,0]`.</span><br><span class="line">- Players 1 and 2 play a game, since the skill of player 1 is higher than that of player 2, player 1 wins. The resulting queue is `[1,0,2]`.</span><br><span class="line">- Players 1 and 0 play a game, since the skill of player 1 is higher than that of player 0, player 1 wins. The resulting queue is `[1,2,0]`.</span><br><span class="line"></span><br><span class="line">Player 1 won `k = 3` games <span class="keyword">in</span> a row, so the winner is player 1.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == skills.length</code></li>
<li><code>2 &lt;= n &lt;= 10^5</code></li>
<li><code>1 &lt;= k &lt;= 10^9</code></li>
<li><code>1 &lt;= skills[i] &lt;= 10^6</code></li>
<li>All integers in <code>skills</code> are unique.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 132</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findWinningPlayer</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; skills, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxNum = INT_MIN, index = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; skills.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (skills[i] &gt; maxNum) &#123;</span><br><span class="line">                maxNum = skills[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= skills.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">        maxNum = skills[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; skills.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (skills[i] &gt; maxNum) &#123;</span><br><span class="line">                maxNum = skills[i];</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> tmp = (maxIndex == <span class="number">0</span>) ? i - maxIndex : i - maxIndex + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt;= k) &#123;</span><br><span class="line">                <span class="keyword">return</span> maxIndex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3176. Find the Maximum Length of a Good Subsequence I</title>
    <url>/2024/06/14/3176-Find-the-Maximum-Length-of-a-Good-Subsequence-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-maximum-length-of-a-good-subsequence-i/description/">3176. Find the Maximum Length of a Good Subsequence I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> and a <strong>non-negative</strong>  integer <code>k</code>. A sequence of integers <code>seq</code> is called <strong>good</strong>  if there are <strong>at most</strong>  <code>k</code> indices <code>i</code> in the range <code>[0, seq.length - 2]</code> such that <code>seq[i] != seq[i + 1]</code>.</p>
<p>Return the <strong>maximum</strong>  possible length of a <strong>good</strong> subsequence of <code>nums</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,1,1,3], k = 2</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The maximum length subsequence is [<strong>1</strong>,<strong>2</strong>,<strong>1</strong>,<strong>1</strong>,3].</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5,1], k = 0</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The maximum length subsequence is [<strong>1</strong>,2,3,4,5,<strong>1</strong>].</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 500</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>0 &lt;= k &lt;= min(nums.length, 25)</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweenly Contest 132</li>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(size, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(k + <span class="number">1</span>, INT_MIN));</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">traverse</span>(i, k, nums));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> curIndex, <span class="type">int</span> remaining, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curIndex == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curIndex == nums.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[curIndex][remaining] != INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[curIndex][remaining];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = curIndex + <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[curIndex] == nums[i]) &#123;</span><br><span class="line">                res = <span class="built_in">max</span>(res, <span class="built_in">traverse</span>(i, remaining, nums) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res = <span class="built_in">max</span>(res, <span class="built_in">traverse</span>(i, remaining - <span class="number">1</span>, nums) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[curIndex][remaining] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3177. Find the Maximum Length of a Good Subsequence II</title>
    <url>/2024/06/14/3177-Find-the-Maximum-Length-of-a-Good-Subsequence-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-maximum-length-of-a-good-subsequence-ii/description/">3177. Find the Maximum Length of a Good Subsequence II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> and a <strong>non-negative</strong>  integer <code>k</code>. A sequence of integers <code>seq</code> is called <strong>good</strong>  if there are <strong>at most</strong>  <code>k</code> indices <code>i</code> in the range <code>[0, seq.length - 2]</code> such that <code>seq[i] != seq[i + 1]</code>.</p>
<p>Return the <strong>maximum</strong>  possible length of a <strong>good</strong> subsequence of <code>nums</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,1,1,3], k = 2</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The maximum length subsequence is `[1,2,1,1,3]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5,1], k = 0</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The maximum length subsequence is `[1,2,3,4,5,1]`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 5 * 10^3</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>0 &lt;= k &lt;= min(50, nums.length)</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 132</li>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<p>simpler implementation:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// the definition of dp:</span></span><br><span class="line">        <span class="comment">// dp[i][j] marks the longest sequence ending with i, with at most k mismatches</span></span><br><span class="line">        <span class="comment">// state transition:</span></span><br><span class="line">        <span class="comment">//  dp[i][j] can be transitioned with dp[i][j] + 1</span></span><br><span class="line">        <span class="comment">//  dp[i][j] can be transitioned from mx[i - 1] + 1</span></span><br><span class="line">        map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mx</span><span class="params">(k + <span class="number">1</span>, <span class="number">0</span>)</span></span>; <span class="comment">// the mx, the m1, the m2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dp.<span class="built_in">contains</span>(num)) &#123;</span><br><span class="line">                dp[num] = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(k + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = k; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                dp[num][i]++;</span><br><span class="line">                <span class="keyword">if</span> (i) &#123;</span><br><span class="line">                    dp[num][i] = <span class="built_in">max</span>(dp[num][i], mx[i - <span class="number">1</span>]+ <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (dp[num][i] &gt; mx[i]) &#123;</span><br><span class="line">                    mx[i] = dp[num][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mx[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dp[num][k]: the longest subsequence ending with num and with k</span></span><br><span class="line">        <span class="comment">// non-equal neighbors</span></span><br><span class="line">        <span class="comment">// how to update dp[num][k]:</span></span><br><span class="line">        <span class="comment">//  dp[num][k] = dp[num][k - 1] + 1</span></span><br><span class="line">        map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; m;</span><br><span class="line">        <span class="comment">// the numbers in mx: mx1, mx2, mn</span></span><br><span class="line">        vector&lt;array&lt;<span class="type">int</span>, 3&gt;&gt; <span class="built_in">mx</span>(k + <span class="number">1</span>, <span class="built_in">array</span>&lt;<span class="type">int</span>, <span class="number">3</span>&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!m.<span class="built_in">contains</span>(num)) &#123;</span><br><span class="line">                m[num] = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(k + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = k; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                m[num][i]++;</span><br><span class="line">                <span class="keyword">if</span> (i) &#123;</span><br><span class="line">                    m[num][i] = <span class="built_in">max</span>(m[num][i], mx[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (m[num][i] &gt; mx[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (num != mx[i][<span class="number">2</span>]) &#123;</span><br><span class="line">                        mx[i][<span class="number">2</span>] = num;</span><br><span class="line">                        mx[i][<span class="number">1</span>] = mx[i][<span class="number">0</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    mx[i][<span class="number">0</span>] = m[num][i];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m[num][i] &gt; mx[i][<span class="number">1</span>] &amp;&amp; num != mx[i][<span class="number">2</span>]) &#123;</span><br><span class="line">                    mx[i][<span class="number">1</span>] = m[num][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mx[k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3178. Find the Child Who Has the Ball After K Seconds</title>
    <url>/2024/06/14/3178-Find-the-Child-Who-Has-the-Ball-After-K-Seconds/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-child-who-has-the-ball-after-k-seconds/description/">3178. Find the Child Who Has the Ball After K Seconds</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two <strong>positive</strong>  integers <code>n</code> and <code>k</code>. There are <code>n</code> children numbered from <code>0</code> to <code>n - 1</code> standing in a queue in order from left to right.</p>
<p>Initially, child 0 holds a ball and the direction of passing the ball is towards the right direction. After each second, the child holding the ball passes it to the child next to them. Once the ball reaches <strong>either</strong>  end of the line, i.e. child 0 or child <code>n - 1</code>, the direction of passing is <strong>reversed</strong> .</p>
<p>Return the number of the child who receives the ball after <code>k</code> seconds.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, k = 5</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, k = 6</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, k = 2</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 50</code></li>
<li><code>1 &lt;= k &lt;= 50</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 401</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfChild</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        k = k % (<span class="number">2</span> * n - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (k &lt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * n - <span class="number">2</span> - k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3179. Find the N-th Value After K Seconds</title>
    <url>/2024/06/14/3179-Find-the-N-th-Value-After-K-Seconds/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-n-th-value-after-k-seconds/description/">3179. Find the N-th Value After K Seconds</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two integers <code>n</code> and <code>k</code>.</p>
<p>Initially, you start with an array <code>a</code> of <code>n</code> integers where <code>a[i] = 1</code> for all <code>0 &lt;= i &lt;= n - 1</code>. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, <code>a[0]</code> remains the same, <code>a[1]</code> becomes <code>a[0] + a[1]</code>, <code>a[2]</code> becomes <code>a[0] + a[1] + a[2]</code>, and so on.</p>
<p>Return the <strong>value</strong>  of <code>a[n - 1]</code> after <code>k</code> seconds.</p>
<p>Since the answer may be very large, return it <strong>modulo</strong>  <code>10^9 + 7</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, k = 5</span><br><span class="line"></span><br><span class="line">Output: 56</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<table border="1"><tbody><tr><th>Second</th><th>State After</th></tr><tr><td>0</td><td>[1,1,1,1]</td></tr><tr><td>1</td><td>[1,2,3,4]</td></tr><tr><td>2</td><td>[1,3,6,10]</td></tr><tr><td>3</td><td>[1,4,10,20]</td></tr><tr><td>4</td><td>[1,5,15,35]</td></tr><tr><td>5</td><td>[1,6,21,56]</td></tr></tbody></table>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, k = 3</span><br><span class="line"></span><br><span class="line">Output: 35</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<table border="1"><tbody><tr><th>Second</th><th>State After</th></tr><tr><td>0</td><td>[1,1,1,1,1]</td></tr><tr><td>1</td><td>[1,2,3,4,5]</td></tr><tr><td>2</td><td>[1,3,6,10,15]</td></tr><tr><td>3</td><td>[1,4,10,20,35]</td></tr></tbody></table>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n, k &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 401</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">valueAfterKSeconds</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span>&gt; <span class="title">nums</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="type">long</span> cur = nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">long</span> tmp = nums[j];</span><br><span class="line">                nums[j] = (nums[j] + cur) % <span class="number">1000000007</span>;</span><br><span class="line">                cur += tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[n - <span class="number">1</span>] % (<span class="number">1000000007</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
        <tag>Math</tag>
        <tag>Simulation</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>3180. Maximum Total Reward Using Operations I</title>
    <url>/2024/06/14/3180-Maximum-Total-Reward-Using-Operations-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-total-reward-using-operations-i/description/">3180. Maximum Total Reward Using Operations I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>rewardValues</code> of length <code>n</code>, representing the values of rewards.</p>
<p>Initially, your total reward <code>x</code> is 0, and all indices are <strong>unmarked</strong> . You are allowed to perform the following operation <strong>any</strong>  number of times:</p>
<ul>
<li>Choose an <strong>unmarked</strong>  index <code>i</code> from the range <code>[0, n - 1]</code>.</li>
<li>If <code>rewardValues[i]</code> is <strong>greater</strong>  than your current total reward <code>x</code>, then add <code>rewardValues[i]</code> to <code>x</code> (i.e., <code>x = x + rewardValues[i]</code>), and <strong>mark</strong>  the index <code>i</code>.</li>
</ul>
<p>Return an integer denoting the <strong>maximum</strong> total reward you can collect by performing the operations optimally.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: rewardValues = [1,1,3,3]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">During the operations, we can choose to mark the indices 0 and 2 <span class="keyword">in</span> order, and the total reward will be 4, <span class="built_in">which</span> is the maximum.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: rewardValues = [1,6,4,3,2]</span><br><span class="line"></span><br><span class="line">Output: 11</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Mark the indices 0, 2, and 1 <span class="keyword">in</span> order. The total reward will <span class="keyword">then</span> be 11, <span class="built_in">which</span> is the maximum.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= rewardValues.length &lt;= 2000</code></li>
<li><code>1 &lt;= rewardValues[i] &lt;= 2000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 401</li>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxTotalReward</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; rewardValues)</span> </span>&#123;</span><br><span class="line">        <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(rewardValues.begin(), rewardValues.end())</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(<span class="number">0</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> curValue, set&lt;<span class="type">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">lower_bound</span>(curValue + <span class="number">1</span>) == s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> curValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">contains</span>(curValue)) &#123;</span><br><span class="line">            <span class="keyword">return</span> m[curValue];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(curValue + <span class="number">1</span>); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">traverse</span>(curValue + *it, s));</span><br><span class="line">        &#125;</span><br><span class="line">        m[curValue] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3181. Maximum Total Reward Using Operations II</title>
    <url>/2024/06/14/3181-Maximum-Total-Reward-Using-Operations-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-total-reward-using-operations-ii/description/">3181. Maximum Total Reward Using Operations II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>rewardValues</code> of length <code>n</code>, representing the values of rewards.</p>
<p>Initially, your total reward <code>x</code> is 0, and all indices are <strong>unmarked</strong> . You are allowed to perform the following operation <strong>any</strong>  number of times:</p>
<ul>
<li>Choose an <strong>unmarked</strong>  index <code>i</code> from the range <code>[0, n - 1]</code>.</li>
<li>If <code>rewardValues[i]</code> is <strong>greater</strong>  than your current total reward <code>x</code>, then add <code>rewardValues[i]</code> to <code>x</code> (i.e., <code>x = x + rewardValues[i]</code>), and <strong>mark</strong>  the index <code>i</code>.</li>
</ul>
<p>Return an integer denoting the <strong>maximum</strong> total reward you can collect by performing the operations optimally.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: rewardValues = [1,1,3,3]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">During the operations, we can choose to mark the indices 0 and 2 <span class="keyword">in</span> order, and the total reward will be 4, <span class="built_in">which</span> is the maximum.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: rewardValues = [1,6,4,3,2]</span><br><span class="line"></span><br><span class="line">Output: 11</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Mark the indices 0, 2, and 1 <span class="keyword">in</span> order. The total reward will <span class="keyword">then</span> be 11, <span class="built_in">which</span> is the maximum.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= rewardValues.length &lt;= 5 * 10^4</code></li>
<li><code>1 &lt;= rewardValues[i] &lt;= 5 * 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 401</li>
<li>bitset</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxTotalReward</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; rewardValues)</span> </span>&#123;</span><br><span class="line">        <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(rewardValues.begin(), rewardValues.end())</span></span>;</span><br><span class="line">        <span class="comment">// we use bit to mark if one number can be achieved</span></span><br><span class="line">        <span class="comment">// bitset = 1 -&gt; bit[0] = 1 -&gt; 0 can be achieved</span></span><br><span class="line">        bitset&lt;100000&gt; b&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : s) &#123;</span><br><span class="line">            b |= b &lt;&lt; (<span class="number">100000</span> - num) &gt;&gt; (<span class="number">100000</span> - num) &lt;&lt; num;</span><br><span class="line">            max = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span> * max - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b.<span class="built_in">test</span>(i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3184. Count Pairs That Form a Complete Day I</title>
    <url>/2024/06/19/3184-Count-Pairs-That-Form-a-Complete-Day-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-pairs-that-form-a-complete-day-i/description/">3184. Count Pairs That Form a Complete Day I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array <code>hours</code> representing times in <strong>hours</strong> , return an integer denoting the number of pairs <code>i</code>, <code>j</code> where <code>i &lt; j</code> and <code>hours[i] + hours[j]</code> forms a <strong>complete day</strong> .</p>
<p>A <strong>complete day</strong>  is defined as a time duration that is an <strong>exact</strong>  <strong>multiple</strong>  of 24 hours.</p>
<p>For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: hours = [12,12,30,24,24]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The pairs of indices that form a complete day are `(0, 1)` and `(3, 4)`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: hours = [72,48,24,3]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The pairs of indices that form a complete day are `(0, 1)`, `(0, 2)`, and `(1, 2)`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= hours.length &lt;= 100</code></li>
<li><code>1 &lt;= hours[i] &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 402</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countCompleteDayPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; hours)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">long</span> <span class="type">long</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> hour: hours) &#123;</span><br><span class="line">            <span class="type">int</span> h = (<span class="number">24</span> - hour % <span class="number">24</span>) % <span class="number">24</span>;</span><br><span class="line">            res += m[h];</span><br><span class="line">            m[hour % <span class="number">24</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>3185. Count Pairs That Form a Complete Day II</title>
    <url>/2024/06/19/3185-Count-Pairs-That-Form-a-Complete-Day-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-pairs-that-form-a-complete-day-ii/description/">3185. Count Pairs That Form a Complete Day II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array <code>hours</code> representing times in <strong>hours</strong> , return an integer denoting the number of pairs <code>i</code>, <code>j</code> where <code>i &lt; j</code> and <code>hours[i] + hours[j]</code> forms a <strong>complete day</strong> .</p>
<p>A <strong>complete day</strong>  is defined as a time duration that is an <strong>exact</strong>  <strong>multiple</strong>  of 24 hours.</p>
<p>For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: hours = [12,12,30,24,24]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation: The pairs of indices that form a complete day are `(0, 1)` and `(3, 4)`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: hours = [72,48,24,3]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation: The pairs of indices that form a complete day are `(0, 1)`, `(0, 2)`, and `(1, 2)`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= hours.length &lt;= 5 * 10^5</code></li>
<li><code>1 &lt;= hours[i] &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 402</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countCompleteDayPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; hours)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">long</span> <span class="type">long</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> hour: hours) &#123;</span><br><span class="line">            <span class="type">int</span> h = (<span class="number">24</span> - hour % <span class="number">24</span>) % <span class="number">24</span>;</span><br><span class="line">            res += m[h];</span><br><span class="line">            m[hour % <span class="number">24</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>3186. Maximum Total Damage With Spell Casting</title>
    <url>/2024/06/19/3186-Maximum-Total-Damage-With-Spell-Casting/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-total-damage-with-spell-casting/description/">3186. Maximum Total Damage With Spell Casting</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A magician has various spells.</p>
<p>You are given an array <code>power</code>, where each element represents the damage of a spell. Multiple spells can have the same damage value.</p>
<p>It is a known fact that if a magician decides to cast a spell with a damage of <code>power[i]</code>, they <strong>cannot</strong>  cast any spell with a damage of <code>power[i] - 2</code>, <code>power[i] - 1</code>, <code>power[i] + 1</code>, or <code>power[i] + 2</code>.</p>
<p>Each spell can be cast <strong>only once</strong>.</p>
<p>Return the <strong>maximum</strong>  possible total damage that a magician can cast.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: power = [1,1,3,4]</span><br><span class="line"></span><br><span class="line">Output: 6</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The maximum possible damage of 6 is produced by casting spells 0, 1, 3 with damage 1, 1, 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: power = [7,1,6,6]</span><br><span class="line"></span><br><span class="line">Output: 13</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The maximum possible damage of 13 is produced by casting spells 1, 2, 3 with damage 1, 6, 6.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= power.length &lt;= 10^5</code></li>
<li><code>1 &lt;= power[i] &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 402</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> size_;</span><br><span class="line">    vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maximumTotalDamage</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; power)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(power.<span class="built_in">begin</span>(), power.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; pairs;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; power.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (i + <span class="number">1</span> &lt; power.<span class="built_in">size</span>() &amp;&amp; power[i] == power[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            pairs.<span class="built_in">push_back</span>(&#123;power[i], count&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        size_ = pairs.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(size_, LLONG_MIN);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="built_in">dfs</span>(<span class="number">0</span>, pairs);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> curIndex, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; pairs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curIndex == size_) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[curIndex] != LLONG_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[curIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> val = pairs[curIndex].first;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> firstRes = val * pairs[curIndex].second;</span><br><span class="line">        <span class="type">int</span> nextIndex = curIndex;</span><br><span class="line">        <span class="keyword">while</span> (nextIndex &lt; size_ &amp;&amp; pairs[nextIndex].first - val &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            nextIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">        firstRes += <span class="built_in">dfs</span>(nextIndex, pairs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curIndex == pairs.<span class="built_in">size</span>() - <span class="number">1</span> ||</span><br><span class="line">            (pairs[curIndex + <span class="number">1</span>].first - pairs[curIndex].first &gt; <span class="number">2</span>)) &#123;</span><br><span class="line">            dp[curIndex] = firstRes;</span><br><span class="line">            <span class="keyword">return</span> firstRes;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> secondRes = <span class="built_in">dfs</span>(curIndex + <span class="number">1</span>, pairs);</span><br><span class="line">        dp[curIndex] = <span class="built_in">max</span>(firstRes, secondRes);</span><br><span class="line">        <span class="keyword">return</span> dp[curIndex];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
        <tag>Sorting</tag>
        <tag>Two Pointers</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>3187. Peaks in Array</title>
    <url>/2024/06/19/3187-Peaks-in-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/peaks-in-array/description/">3187. Peaks in Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A <strong>peak</strong>  in an array <code>arr</code> is an element that is <strong>greater</strong>  than its previous and next element in <code>arr</code>.</p>
<p>You are given an integer array <code>nums</code> and a 2D integer array <code>queries</code>.</p>
<p>You have to process queries of two types:</p>
<ul>
<li>queries[i] &#x3D; [1, l<sub>i</sub>, r<sub>i</sub>], determine the count of <strong>peak</strong>  elements in the subarray nums[l<sub>i</sub>..r<sub>i</sub>].</li>
<li>queries[i] &#x3D; [2, index<sub>i</sub>, val<sub>i</sub>], change nums[index<sub>i</sub>] to val<sub>i</sub>.</li>
</ul>
<p>Return an array <code>answer</code> containing the results of the queries of the first type in order.</p>
<p><strong>Notes:</strong></p>
<ul>
<li>The <strong>first</strong> and the <strong>last</strong> element of an array or a subarray <strong>cannot</strong> be a peak.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,1,4,2,5], queries = [[2,3,4],[1,0,4]]</span><br><span class="line"></span><br><span class="line">Output: [0]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">First query: We change `nums[3]` to 4 and `nums` becomes `[3,1,4,4,5]`.</span><br><span class="line"></span><br><span class="line">Second query: The number of peaks <span class="keyword">in</span> the `[3,1,4,4,5]` is 0.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,1,4,2,1,5], queries = [[2,2,4],[1,0,2],[1,0,4]]</span><br><span class="line"></span><br><span class="line">Output: [0,1]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">First query: `nums[2]` should become 4, but it is already <span class="built_in">set</span> to 4.</span><br><span class="line"></span><br><span class="line">Second query: The number of peaks <span class="keyword">in</span> the `[4,1,4]` is 0.</span><br><span class="line"></span><br><span class="line">Third query: The second 4 is a peak <span class="keyword">in</span> the `[4,1,4,2,1]`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>
<li><code>1 &lt;= queries.length &lt;= 10^5</code></li>
<li><code>queries[i][0] == 1</code> or <code>queries[i][0] == 2</code></li>
<li>For all <code>i</code> that:<ul>
<li><code>queries[i][0] == 1</code>: <code>0 &lt;= queries[i][1] &lt;= queries[i][2] &lt;= nums.length - 1</code></li>
<li><code>queries[i][0] == 2</code>: <code>0 &lt;= queries[i][1] &lt;= nums.length - 1</code>, <code>1 &lt;= queries[i][2] &lt;= 10^5</code></li>
</ul>
</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>segment tree</li>
<li>Weekly Contest 402</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countOfPeaks</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        t.<span class="built_in">resize</span>(<span class="number">2</span> &lt;&lt; (<span class="number">32</span> - __builtin_clz(n)), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">build</span>(nums, <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> q : queries) &#123;</span><br><span class="line">            <span class="type">int</span> type = q[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> l = q[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> r = q[<span class="number">2</span>];</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="built_in">query</span>(nums, <span class="number">1</span>, l, r, <span class="number">0</span>, n - <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> idx = q[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> val = q[<span class="number">2</span>];</span><br><span class="line">                nums[idx] = val;</span><br><span class="line">                <span class="built_in">update</span>(nums, <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, idx, val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= m) &#123;</span><br><span class="line">            <span class="built_in">update</span>(nums, o * <span class="number">2</span>, l, m, i, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">update</span>(nums, o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r, i, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">maintain</span>(nums, o, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = (R - L) / <span class="number">2</span> + L;</span><br><span class="line">        <span class="keyword">if</span> (l == r || l == r - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l == L &amp;&amp; r == R) &#123;</span><br><span class="line">            <span class="keyword">return</span> t[o];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(nums, o * <span class="number">2</span>, l, r, L, m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= m + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(nums, o * <span class="number">2</span> + <span class="number">1</span>, l, r, m + <span class="number">1</span>, R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(nums, o * <span class="number">2</span>, l, m, L, m) +</span><br><span class="line">               <span class="built_in">query</span>(nums, o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r, m + <span class="number">1</span>, R) +</span><br><span class="line">               <span class="built_in">check</span>(nums, m, l, r) + <span class="built_in">check</span>(nums, m + <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r || l == r - <span class="number">1</span>) &#123;</span><br><span class="line">            t[o] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">        <span class="built_in">build</span>(nums, o * <span class="number">2</span>, l, m);</span><br><span class="line">        <span class="built_in">build</span>(nums, o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">maintain</span>(nums, o, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">        t[o] = t[o * <span class="number">2</span>] + t[o * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(nums, m, l, r) || <span class="built_in">check</span>(nums, m + <span class="number">1</span>, l, r)) &#123;</span><br><span class="line">            t[o]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> m, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m == l || m == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[m] &gt; nums[m - <span class="number">1</span>] &amp;&amp; nums[m] &gt; nums[m + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3190. Find Minimum Operations to Make All Elements Divisible by Three</title>
    <url>/2024/06/27/3190-Find-Minimum-Operations-to-Make-All-Elements-Divisible-by-Three/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-minimum-operations-to-make-all-elements-divisible-by-three/description/">3190. Find Minimum Operations to Make All Elements Divisible by Three</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code>. In one operation, you can add or subtract 1 from <strong>any</strong>  element of <code>nums</code>.</p>
<p>Return the <strong>minimum</strong>  number of operations to make all elements of <code>nums</code> divisible by 3.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>All array elements can be made divisible by 3 using 3 operations:</p>
<ul>
<li>Subtract 1 from 1.</li>
<li>Add 1 to 2.</li>
<li>Subtract 1 from 4.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,6,9]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 50</code></li>
<li><code>1 &lt;= nums[i] &lt;= 50</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 133</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            res += <span class="built_in">min</span>(num % <span class="number">3</span>, <span class="number">3</span> - num % <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>3191. Minimum Operations to Make Binary Array Elements Equal to One I</title>
    <url>/2024/06/27/3191-Minimum-Operations-to-Make-Binary-Array-Elements-Equal-to-One-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-i/description/">3191. Minimum Operations to Make Binary Array Elements Equal to One I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a binary array <code>nums</code>.</p>
<p>You can do the following operation on the array <strong>any</strong>  number of times (possibly zero):</p>
<ul>
<li>Choose <strong>any</strong> 3 <strong>consecutive</strong> elements from the array and <strong>flip</strong> <strong>all</strong> of them.</li>
</ul>
<p><strong>Flipping</strong> an element means changing its value from 0 to 1, and from 1 to 0.</p>
<p>Return the <strong>minimum</strong>  number of operations required to make all elements in <code>nums</code> equal to 1. If it is impossible, return -1.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,1,1,0,0]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can do the following operations:</p>
<ul>
<li>Choose the elements at indices 0, 1 and 2. The resulting array is nums &#x3D; [<strong>1</strong> ,<strong>0</strong> ,<strong>0</strong> ,1,0,0].</li>
<li>Choose the elements at indices 1, 2 and 3. The resulting array is nums &#x3D; [1,<strong>1</strong> ,<strong>1</strong> ,<strong>0</strong> ,0,0].</li>
<li>Choose the elements at indices 3, 4 and 5. The resulting array is nums &#x3D; [1,1,1,<strong>1</strong> ,<strong>1</strong> ,<strong>1</strong> ].</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,1,1]</span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>It is impossible to make all elements equal to 1.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>0 &lt;= nums[i] &lt;= 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 133</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> numOps = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                nums[i + <span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line">                nums[i + <span class="number">2</span>] ^= <span class="number">1</span>;</span><br><span class="line">                numOps++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> nums[size - <span class="number">2</span>] &amp;&amp; nums[size - <span class="number">1</span>] ? numOps : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
        <tag>Prefix Sum</tag>
        <tag>Bit Manipulation</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>3192. Minimum Operations to Make Binary Array Elements Equal to One II</title>
    <url>/2024/06/27/3192-Minimum-Operations-to-Make-Binary-Array-Elements-Equal-to-One-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-ii/description/">3192. Minimum Operations to Make Binary Array Elements Equal to One II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a binary array <code>nums</code>.</p>
<p>You can do the following operation on the array <strong>any</strong> number of times (possibly zero):</p>
<ul>
<li>Choose <strong>any</strong> index <code>i</code> from the array and <strong>flip all</strong> the elements from index <code>i</code> to the end of the array.</li>
</ul>
<p><strong>Flipping</strong> an element means changing its value from 0 to 1, and from 1 to 0.</p>
<p>Return the <strong>minimum</strong> number of operations required to make all elements in <code>nums</code> equal to 1.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,1,0,1]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can do the following operations:</p>
<ul>
<li>Choose the index <code>i = 1</code>. The resulting array will be nums &#x3D; [0,<strong>0</strong> ,<strong>0</strong> ,<strong>1</strong> ,<strong>0</strong> ].</li>
<li>Choose the index <code>i = 0</code>. The resulting array will be nums &#x3D; [<strong>1</strong> ,<strong>1</strong> ,<strong>1</strong> ,<strong>0</strong> ,<strong>1</strong> ].</li>
<li>Choose the index <code>i = 4</code>. The resulting array will be nums &#x3D; [1,1,1,0,<strong>0</strong> ].</li>
<li>Choose the index <code>i = 3</code>. The resulting array will be nums &#x3D; [1,1,1,<strong>1</strong> ,<strong>1</strong> ].</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,0,0,0]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can do the following operation:</p>
<ul>
<li>Choose the index <code>i = 1</code>. The resulting array will be nums &#x3D; [1,<strong>1</strong> ,<strong>1</strong> ,<strong>1</strong> ].</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>0 &lt;= nums[i] &lt;= 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 133</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>(), numOps = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == cur) &#123;</span><br><span class="line">                numOps++;</span><br><span class="line">                cur ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numOps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3193. Count the Number of Inversions</title>
    <url>/2024/06/27/3193-Count-the-Number-of-Inversions/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-the-number-of-inversions/description/">3193. Count the Number of Inversions</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer <code>n</code> and a 2D array <code>requirements</code>, where requirements[i] &#x3D; [end<sub>i</sub>, cnt<sub>i</sub>] represents the end index and the <strong>inversion</strong> count of each requirement.</p>
<p>A pair of indices <code>(i, j)</code> from an integer array <code>nums</code> is called an <strong>inversion</strong> if:</p>
<ul>
<li><code>i &lt; j</code> and <code>nums[i] &gt; nums[j]</code></li>
</ul>
<p>Return the number of permutations <code>perm</code> of <code>[0, 1, 2, ..., n - 1]</code> such that for <strong>all</strong> requirements[i], perm[0..end<sub>i</sub>] has exactly cnt<sub>i</sub> inversions.</p>
<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10^9 + 7</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, requirements = [[2,2],[0,0]]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The two permutations are:</p>
<ul>
<li><p><code>[2, 0, 1]</code></p>
<ul>
<li>Prefix <code>[2, 0, 1]</code> has inversions <code>(0, 1)</code> and <code>(0, 2)</code>.</li>
<li>Prefix <code>[2]</code> has 0 inversions.</li>
</ul>
</li>
<li><p><code>[1, 2, 0]</code></p>
<ul>
<li>Prefix <code>[1, 2, 0]</code> has inversions <code>(0, 2)</code> and <code>(1, 2)</code>.</li>
<li>Prefix <code>[1]</code> has 0 inversions.</li>
</ul>
</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, requirements = [[2,2],[1,1],[0,0]]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The only satisfying permutation is <code>[2, 0, 1]</code>:</p>
<ul>
<li>Prefix <code>[2, 0, 1]</code> has inversions <code>(0, 1)</code> and <code>(0, 2)</code>.</li>
<li>Prefix <code>[2, 0]</code> has an inversion <code>(0, 1)</code>.</li>
<li>Prefix <code>[2]</code> has 0 inversions.</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 2, requirements = [[0,0],[1,0]]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The only satisfying permutation is <code>[0, 1]</code>:</p>
<ul>
<li>Prefix <code>[0]</code> has 0 inversions.</li>
<li>Prefix <code>[0, 1]</code> has an inversion <code>(0, 1)</code>.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 300</code></li>
<li><code>1 &lt;= requirements.length &lt;= n</code></li>
<li><code>requirements[i] = [end&lt;sub&gt;i&lt;/sub&gt;, cnt&lt;sub&gt;i&lt;/sub&gt;]</code></li>
<li><code>0 &lt;= end&lt;sub&gt;i&lt;/sub&gt; &lt;= n - 1</code></li>
<li><code>0 &lt;= cnt&lt;sub&gt;i&lt;/sub&gt; &lt;= 400</code></li>
<li>The input is generated such that there is at least one <code>i</code> such that <code>end&lt;sub&gt;i&lt;/sub&gt; == n - 1</code>.</li>
<li>The input is generated such that all <code>end&lt;sub&gt;i&lt;/sub&gt;</code> are unique.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dynamic programming</li>
<li>Biweekly Contest 133</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">    vector&lt;unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfPermutations</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; requirements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> r : requirements) &#123;</span><br><span class="line">            m[r[<span class="number">0</span>]] = r[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        dp.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(n - <span class="number">1</span>, m[n - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> curIndex, <span class="type">int</span> numInv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> numInv == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dp[curIndex].<span class="built_in">contains</span>(numInv)) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[curIndex][numInv];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">contains</span>(curIndex - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="type">int</span> r = m[curIndex - <span class="number">1</span>];</span><br><span class="line">            ans = (numInv &gt;= r &amp;&amp; curIndex + r &gt;= numInv)</span><br><span class="line">                      ? <span class="built_in">traverse</span>(curIndex - <span class="number">1</span>, m[curIndex - <span class="number">1</span>])</span><br><span class="line">                      : <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">min</span>(numInv, curIndex); i++) &#123;</span><br><span class="line">                ans = (ans + <span class="built_in">traverse</span>(curIndex - <span class="number">1</span>, numInv - i) % mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[curIndex][numInv] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3194. Minimum Average of Smallest and Largest Elements</title>
    <url>/2024/06/27/3194-Minimum-Average-of-Smallest-and-Largest-Elements/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-average-of-smallest-and-largest-elements/description/">3194. Minimum Average of Smallest and Largest Elements</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have an array of floating point numbers <code>averages</code> which is initially empty. You are given an array <code>nums</code> of <code>n</code> integers where <code>n</code> is even.</p>
<p>You repeat the following procedure <code>n / 2</code> times:</p>
<ul>
<li>Remove the <strong>smallest</strong> element, <code>minElement</code>, and the <strong>largest</strong> element <code>maxElement</code>,from <code>nums</code>.</li>
<li>Add <code>(minElement + maxElement) / 2</code> to <code>averages</code>.</li>
</ul>
<p>Return the <strong>minimum</strong>  element in <code>averages</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [7,8,3,4,15,13,4,1]</span><br><span class="line"></span><br><span class="line">Output: 5.5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<table><tbody><tr><th>step</th><th>nums</th><th>averages</th></tr><tr><td>0</td><td>[7,8,3,4,15,13,4,1]</td><td>[]</td></tr><tr><td>1</td><td>[7,8,3,4,13,4]</td><td>[8]</td></tr><tr><td>2</td><td>[7,8,4,4]</td><td>[8,8]</td></tr><tr><td>3</td><td>[7,4]</td><td>[8,8,6]</td></tr><tr><td>4</td><td>[]</td><td>[8,8,6,5.5]</td></tr></tbody></table>
The smallest element of averages, 5.5, is returned.

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,9,8,3,10,5]</span><br><span class="line"></span><br><span class="line">Output: 5.5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<table><tbody><tr><th>step</th><th>nums</th><th>averages</th></tr><tr><td>0</td><td>[1,9,8,3,10,5]</td><td>[]</td></tr><tr><td>1</td><td>[9,8,3,5]</td><td>[5.5]</td></tr><tr><td>2</td><td>[8,5]</td><td>[5.5,6]</td></tr><tr><td>3</td><td>[]</td><td>[5.5,6,6.5]</td></tr></tbody></table>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,7,8,9]</span><br><span class="line"></span><br><span class="line">Output: 5.0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<table><tbody><tr><th>step</th><th>nums</th><th>averages</th></tr><tr><td>0</td><td>[1,2,3,7,8,9]</td><td>[]</td></tr><tr><td>1</td><td>[2,3,7,8]</td><td>[5]</td></tr><tr><td>2</td><td>[3,7]</td><td>[5,5]</td></tr><tr><td>3</td><td>[]</td><td>[5,5,5]</td></tr></tbody></table>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n == nums.length &lt;= 50</code></li>
<li><code>n</code> is even.</li>
<li><code>1 &lt;= nums[i] &lt;= 50</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 403</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">minimumAverage</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">double</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            res = <span class="built_in">min</span>((nums[left] + nums[right]) * <span class="number">1.0</span> / <span class="number">2</span>, res);</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>3195. Find the Minimum Area to Cover All Ones I</title>
    <url>/2024/06/27/3195-Find-the-Minimum-Area-to-Cover-All-Ones-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-minimum-area-to-cover-all-ones-i/description/">3195. Find the Minimum Area to Cover All Ones I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D <strong>binary</strong>  array <code>grid</code>. Find a rectangle with horizontal and vertical sides with the <strong>smallest</strong> area, such that all the 1’s in <code>grid</code> lie inside this rectangle.</p>
<p>Return the <strong>minimum</strong> possible area of the rectangle.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1,0],[1,0,1]]</span><br><span class="line"></span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/08/examplerect0.png" style="padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 279px; height: 198px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p>The smallest rectangle has a height of 2 and a width of 3, so it has an area of <code>2 * 3 = 6</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0],[0,0]]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/08/examplerect1.png" style="padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 204px; height: 201px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p>The smallest rectangle has both height and width 1, so its area is <code>1 * 1 = 1</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= grid.length, grid[i].length &lt;= 1000</code></li>
<li><code>grid[i][j]</code> is either 0 or 1.</li>
<li>The input is generated such that there is at least one 1 in <code>grid</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 403</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumArea</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> minI = INT_MAX, minJ = INT_MAX, maxI = INT_MIN, maxJ = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; grid.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    minI = <span class="built_in">min</span>(minI, i);</span><br><span class="line">                    minJ = <span class="built_in">min</span>(minJ, j);</span><br><span class="line">                    maxI = <span class="built_in">max</span>(maxI, i);</span><br><span class="line">                    maxJ = <span class="built_in">max</span>(maxJ, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (maxI - minI + <span class="number">1</span>) * (maxJ - minJ + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3196. Maximize Total Cost of Alternating Subarrays</title>
    <url>/2024/06/27/3196-Maximize-Total-Cost-of-Alternating-Subarrays/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximize-total-cost-of-alternating-subarrays/description/">3196. Maximize Total Cost of Alternating Subarrays</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> with length <code>n</code>.</p>
<p>The <strong>cost</strong> of a subarray <code>nums[l..r]</code>, where <code>0 &lt;= l &lt;= r &lt; n</code>, is defined as:</p>
<p><code>cost(l, r) = nums[l] - nums[l + 1] + ... + nums[r] * (−1)^r − l</code></p>
<p>Your task is to <strong>split</strong> <code>nums</code> into subarrays such that the <strong>total</strong> <strong>cost</strong> of the subarrays is <strong>maximized</strong>, ensuring each element belongs to <strong>exactly one</strong>  subarray.</p>
<p>Formally, if <code>nums</code> is split into <code>k</code> subarrays, where <code>k &gt; 1</code>, at indices i<sub>1</sub>, i<sub>2</sub>, …, i<sub>k − 1</sub>, where 0 &lt;&#x3D; i<sub>1</sub> &lt; i<sub>2</sub> &lt; … &lt; i<sub>k - 1</sub> &lt; n - 1, then the total cost will be:</p>
<p>cost(0, i<sub>1</sub>) + cost(i<sub>1</sub> + 1, i<sub>2</sub>) + … + cost(i<sub>k − 1</sub> + 1, n − 1)</p>
<p>Return an integer denoting the maximum total cost of the subarrays after splitting the array optimally.</p>
<p><strong>Note:</strong>  If <code>nums</code> is not split into subarrays, i.e. <code>k = 1</code>, the total cost is simply <code>cost(0, n - 1)</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,-2,3,4]</span><br><span class="line"></span><br><span class="line">Output: 10</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">One way to maximize the total cost is by splitting `[1, -2, 3, 4]` into subarrays `[1, -2, 3]` and `[4]`. The total cost will be `(1 + 2 + 3) + 4 = 10`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,-1,1,-1]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">One way to maximize the total cost is by splitting `[1, -1, 1, -1]` into subarrays `[1, -1]` and `[1, -1]`. The total cost will be `(1 + 1) + (1 + 1) = 4`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We cannot <span class="built_in">split</span> the array further, so the answer is 0.</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,-1]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">Selecting the whole array gives a total cost of `1 + 1 = 2`, <span class="built_in">which</span> is the maximum.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 403</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maximumTotalCost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(size, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(<span class="number">2</span>, LLONG_MIN));</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="literal">true</span>, nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> curIndex, <span class="type">bool</span> first, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curIndex &gt;= dp.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[curIndex][first] != LLONG_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[curIndex][first];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = first ? nums[curIndex] : -nums[curIndex];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (first) &#123;</span><br><span class="line">            res = res + <span class="built_in">max</span>(<span class="built_in">traverse</span>(curIndex + <span class="number">1</span>, <span class="literal">true</span>, nums),</span><br><span class="line">                            <span class="built_in">traverse</span>(curIndex + <span class="number">1</span>, <span class="literal">false</span>, nums));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = res + <span class="built_in">traverse</span>(curIndex + <span class="number">1</span>, <span class="literal">true</span>, nums);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[curIndex][first] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3197. Find the Minimum Area to Cover All Ones II</title>
    <url>/2024/06/27/3197-Find-the-Minimum-Area-to-Cover-All-Ones-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-minimum-area-to-cover-all-ones-ii/description/">3197. Find the Minimum Area to Cover All Ones II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D <strong>binary</strong> array <code>grid</code>. You need to find 3 <strong>non-overlapping</strong> rectangles having <strong>non-zero</strong> areas with horizontal and vertical sides such that all the 1’s in <code>grid</code> lie inside these rectangles.</p>
<p>Return the <strong>minimum</strong> possible sum of the area of these rectangles.</p>
<p><strong>Note</strong> that the rectangles are allowed to touch.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0,1],[1,1,1]]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/14/example0rect21.png" style="padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 280px; height: 198px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<ul>
<li>The 1’s at <code>(0, 0)</code> and <code>(1, 0)</code> are covered by a rectangle of area 2.</li>
<li>The 1’s at <code>(0, 2)</code> and <code>(1, 2)</code> are covered by a rectangle of area 2.</li>
<li>The 1 at <code>(1, 1)</code> is covered by a rectangle of area 1.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0,1,0],[0,1,0,1]]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/14/example1rect2.png" style="padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 356px; height: 198px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<ul>
<li>The 1’s at <code>(0, 0)</code> and <code>(0, 2)</code> are covered by a rectangle of area 3.</li>
<li>The 1 at <code>(1, 1)</code> is covered by a rectangle of area 1.</li>
<li>The 1 at <code>(1, 3)</code> is covered by a rectangle of area 1.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= grid.length, grid[i].length &lt;= 30</code></li>
<li><code>grid[i][j]</code> is either 0 or 1.</li>
<li>The input is generated such that there are at least three 1’s in <code>grid</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>brutal force</li>
<li>Weekly Contest 403</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; grid2 = <span class="built_in">rotate</span>(grid);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">minimum</span>(grid), <span class="built_in">minimum</span>(grid2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">rotate</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">res</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                res[j][i] = grid[m - <span class="number">1</span> - i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = INT_MAX;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">// 3 horizontal rectangle</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    <span class="type">int</span> area1 = <span class="built_in">minimumArea</span>(grid, <span class="number">0</span>, i, <span class="number">0</span>, n);</span><br><span class="line">                    <span class="type">int</span> area2 = <span class="built_in">minimumArea</span>(grid, i, j, <span class="number">0</span>, n);</span><br><span class="line">                    <span class="type">int</span> area3 = <span class="built_in">minimumArea</span>(grid, j, m, <span class="number">0</span>, n);</span><br><span class="line">                    res = <span class="built_in">min</span>(res, area1 + area2 + area3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m &gt;= <span class="number">2</span> &amp;&amp; n &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="comment">// one rectangle above, and 2 below</span></span><br><span class="line">                    <span class="type">int</span> area1 = <span class="built_in">minimumArea</span>(grid, <span class="number">0</span>, i, <span class="number">0</span>, n);</span><br><span class="line">                    <span class="type">int</span> area2 = <span class="built_in">minimumArea</span>(grid, i, m, <span class="number">0</span>, j);</span><br><span class="line">                    <span class="type">int</span> area3 = <span class="built_in">minimumArea</span>(grid, i, m, j, n);</span><br><span class="line">                    res = <span class="built_in">min</span>(res, area1 + area2 + area3);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="comment">// one rectangle below, and 2 above</span></span><br><span class="line">                    <span class="type">int</span> area1 = <span class="built_in">minimumArea</span>(grid, i, m, <span class="number">0</span>, n);</span><br><span class="line">                    <span class="type">int</span> area2 = <span class="built_in">minimumArea</span>(grid, <span class="number">0</span>, i, <span class="number">0</span>, j);</span><br><span class="line">                    <span class="type">int</span> area3 = <span class="built_in">minimumArea</span>(grid, <span class="number">0</span>, i, j, n);</span><br><span class="line">                    res = <span class="built_in">min</span>(res, area1 + area2 + area3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumArea</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> i1, <span class="type">int</span> i2, <span class="type">int</span> j1, <span class="type">int</span> j2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> minI = INT_MAX, minJ = INT_MAX, maxI = INT_MIN, maxJ = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = i1; i &lt; i2; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = j1; j &lt; j2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    minI = <span class="built_in">min</span>(minI, i);</span><br><span class="line">                    minJ = <span class="built_in">min</span>(minJ, j);</span><br><span class="line">                    maxI = <span class="built_in">max</span>(maxI, i);</span><br><span class="line">                    maxJ = <span class="built_in">max</span>(maxJ, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minI == INT_MAX ? <span class="number">0</span> : (maxI - minI + <span class="number">1</span>) * (maxJ - minJ + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Matrix</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>3200. Maximum Height of a Triangle</title>
    <url>/2024/07/03/3200-Maximum-Height-of-a-Triangle/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-height-of-a-triangle/description/">3200. Maximum Height of a Triangle</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two integers <code>red</code> and <code>blue</code> representing the count of red and blue colored balls. You have to arrange these balls to form a triangle such that the 1^st row will have 1 ball, the 2^nd row will have 2 balls, the 3^rd row will have 3 balls, and so on.</p>
<p>All the balls in a particular row should be the <strong>same</strong> color, and adjacent rows should have <strong>different</strong> colors.</p>
<p>Return the <strong>maximum</strong> height of the triangle that can be achieved.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: red = 2, blue = 4</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/16/brb.png" style="width: 300px; height: 240px; padding: 10px;">

<p>The only possible arrangement is shown above.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: red = 2, blue = 1</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><img alt="" src="https://assets.leetcode.com/uploads/2024/06/16/br.png" style="width: 150px; height: 135px; padding: 10px;"><br><br>The only possible arrangement is shown above.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: red = 1, blue = 1</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: red = 10, blue = 1</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><img alt="" src="https://assets.leetcode.com/uploads/2024/06/16/br.png" style="width: 150px; height: 135px; padding: 10px;"><br><br>The only possible arrangement is shown above.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= red, blue &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 404</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxHeightOfTriangle</span><span class="params">(<span class="type">int</span> red, <span class="type">int</span> blue)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> odd = <span class="number">0</span>, even = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">                odd += i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                even += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">max</span>(odd, even) &gt; <span class="built_in">max</span>(red, blue)) ||</span><br><span class="line">                (<span class="built_in">min</span>(odd, even) &gt; <span class="built_in">min</span>(red, blue))) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>3201. Find the Maximum Length of Valid Subsequence I</title>
    <url>/2024/07/03/3201-Find-the-Maximum-Length-of-Valid-Subsequence-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-maximum-length-of-valid-subsequence-i/description/">3201. Find the Maximum Length of Valid Subsequence I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code>.</p>
<p>A subsequence <code>sub</code> of <code>nums</code> with length <code>x</code> is called <strong>valid</strong>  if it satisfies:</p>
<ul>
<li><code>(sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2] + sub[x - 1]) % 2.</code></li>
</ul>
<p>Return the length of the <strong>longest</strong> <strong>valid</strong> subsequence of <code>nums</code>.</p>
<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The longest valid subsequence is `[1, 2, 3, 4]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,1,1,2,1,2]</span><br><span class="line"></span><br><span class="line">Output: 6</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The longest valid subsequence is `[1, 2, 1, 2, 1, 2]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The longest valid subsequence is `[1, 3]`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 2 * 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^7</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 404</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> allEven = <span class="number">0</span>, allOdd = <span class="number">0</span>, prevEven = <span class="number">0</span>, prevOdd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                allEven++;</span><br><span class="line">                prevEven = prevOdd + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allOdd++;</span><br><span class="line">                prevOdd = prevEven + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(allEven, <span class="built_in">max</span>(allOdd, <span class="built_in">max</span>(prevEven, prevOdd)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3202. Find the Maximum Length of Valid Subsequence II</title>
    <url>/2024/07/03/3202-Find-the-Maximum-Length-of-Valid-Subsequence-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-maximum-length-of-valid-subsequence-ii/description/">3202. Find the Maximum Length of Valid Subsequence II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> and a <strong>positive</strong> integer <code>k</code>.</p>
<p>A subsequence <code>sub</code> of <code>nums</code> with length <code>x</code> is called <strong>valid</strong> if it satisfies:</p>
<ul>
<li><code>(sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2] + sub[x - 1]) % k.</code></li>
</ul>
<p>Return the length of the <strong>longest</strong>  <strong>valid</strong>  subsequence of <code>nums</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5], k = 2</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The longest valid subsequence is `[1, 2, 3, 4, 5]`.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,4,2,3,1,4], k = 3</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">The longest valid subsequence is `[1, 4, 1, 4]`.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 10^3</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^7</code></li>
<li><code>1 &lt;= k &lt;= 10^3</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 404</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">                <span class="type">int</span> key = (i + k - num % k) % k;</span><br><span class="line">                m[num % k] = m[key] + <span class="number">1</span>;</span><br><span class="line">                res = <span class="built_in">max</span>(res, m[num % k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3203. Find Minimum Diameter After Merging Two Trees</title>
    <url>/2024/07/03/3203-Find-Minimum-Diameter-After-Merging-Two-Trees/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-minimum-diameter-after-merging-two-trees/description/">3203. Find Minimum Diameter After Merging Two Trees</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There exist two <strong>undirected</strong> trees with <code>n</code> and <code>m</code> nodes, numbered from <code>0</code> to <code>n - 1</code> and from <code>0</code> to <code>m - 1</code>, respectively. You are given two 2D integer arrays <code>edges1</code> and <code>edges2</code> of lengths <code>n - 1</code> and <code>m - 1</code>, respectively, where edges1[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] indicates that there is an edge between nodes a<sub>i</sub> and b<sub>i</sub> in the first tree and edges2[i] &#x3D; [u<sub>i</sub>, v<sub>i</sub>] indicates that there is an edge between nodes u<sub>i</sub> and v<sub>i</sub> in the second tree.</p>
<p>You must connect one node from the first tree with another node from the second tree with an edge.</p>
<p>Return the <strong>minimum</strong> possible <strong>diameter</strong> of the resulting tree.</p>
<p>The <strong>diameter</strong> of a tree is the length of the longest path between any two nodes in the tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/04/22/example11-transformed.png">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We can obtain a tree of diameter 3 by connecting node 0 from the first tree with any node from the second tree.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/04/22/example211.png">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">We can obtain a tree of diameter 5 by connecting node 0 from the first tree with node 0 from the second tree.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n, m &lt;= 10^5</code></li>
<li><code>edges1.length == n - 1</code></li>
<li><code>edges2.length == m - 1</code></li>
<li><code>edges1[i].length == edges2[i].length == 2</code></li>
<li>edges1[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>]</li>
<li>0 &lt;&#x3D; a<sub>i</sub>, b<sub>i</sub> &lt; n</li>
<li>edges2[i] &#x3D; [u<sub>i</sub>, v<sub>i</sub>]</li>
<li>0 &lt;&#x3D; u<sub>i</sub>, v<sub>i</sub> &lt; m</li>
<li>The input is generated such that <code>edges1</code> and <code>edges2</code> represent valid trees.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Tree dp</li>
<li>Weekly Contest 404</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumDiameterAfterMerge</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges1, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> selfD1, selfD2;</span><br><span class="line">        <span class="type">int</span> d1 = <span class="built_in">findRoot</span>(edges1, selfD1);</span><br><span class="line">        <span class="type">int</span> d2 = <span class="built_in">findRoot</span>(edges2, selfD2);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; d1 &lt;&lt; &quot; &quot; &lt;&lt; d2 &lt;&lt; &quot; &quot; &lt;&lt; selfD1 &lt;&lt; &quot; &quot; &lt;&lt; selfD2 &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(d1 + d2 + <span class="number">1</span>, <span class="built_in">max</span>(selfD1, selfD2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRoot</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span>&amp; self)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (edges.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            self = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        self = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> size = edges.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">tree</span>(size, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = edge[<span class="number">1</span>];</span><br><span class="line">            tree[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            tree[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">            m[u]++;</span><br><span class="line">            m[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                visited.<span class="built_in">insert</span>(i);</span><br><span class="line">                m[i]--;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> d = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> num : tree[u]) &#123;</span><br><span class="line">                    m[num]--;</span><br><span class="line">                    <span class="keyword">if</span> (!visited.<span class="built_in">contains</span>(num) &amp;&amp; m[num] == <span class="number">1</span>) &#123;</span><br><span class="line">                        visited.<span class="built_in">insert</span>(num);</span><br><span class="line">                        m[num]--;</span><br><span class="line">                        q.<span class="built_in">push</span>(num);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                d++;</span><br><span class="line">                self += <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                self += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Another approach: Tree DP</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumDiameterAfterMerge</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges1, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> selfD1, selfD2;</span><br><span class="line">        <span class="type">int</span> d1 = <span class="built_in">diameter</span>(edges1);</span><br><span class="line">        <span class="type">int</span> d2 = <span class="built_in">diameter</span>(edges2);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; d1 &lt;&lt; &quot; &quot; &lt;&lt; d2 &lt;&lt; &quot; &quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>((d1 + <span class="number">1</span>) / <span class="number">2</span> + (d2 + <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>, <span class="built_in">max</span>(d1, d2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diameter</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (edges.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> size = edges.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">tree</span>(size, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = edge[<span class="number">1</span>];</span><br><span class="line">            tree[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            tree[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>, tree);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> prev, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; tree)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mx1 = <span class="number">0</span>, mx2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : tree[cur]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != prev) &#123;</span><br><span class="line">                <span class="type">int</span> tmp = <span class="built_in">dfs</span>(v, cur, tree);</span><br><span class="line">                <span class="keyword">if</span> (tmp &gt; mx1) &#123;</span><br><span class="line">                    mx2 = mx1;</span><br><span class="line">                    mx1 = tmp;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp &gt; mx2) &#123;</span><br><span class="line">                    mx2 = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, mx1 + mx2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(mx1, mx2) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>3206. Alternating Groups I</title>
    <url>/2024/07/10/3206-Alternating-Groups-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/alternating-groups-i/description/">3206. Alternating Groups I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a circle of red and blue tiles. You are given an array of integers <code>colors</code>. The color of tile <code>i</code> is represented by <code>colors[i]</code>:</p>
<ul>
<li><code>colors[i] == 0</code> means that tile <code>i</code> is <strong>red</strong>.</li>
<li><code>colors[i] == 1</code> means that tile <code>i</code> is <strong>blue</strong>.</li>
</ul>
<p>Every 3 contiguous tiles in the circle with <strong>alternating</strong> colors (the middle tile has a different color from its <strong>left</strong> and <strong>right</strong> tiles) is called an <strong>alternating</strong> group.</p>
<p>Return the number of <strong>alternating</strong> groups.</p>
<p><strong>Note</strong> that since <code>colors</code> represents a <strong>circle</strong>, the <strong>first</strong> and the <strong>last</strong> tiles are considered to be next to each other.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: colors = [1,1,1]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-53-171.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: colors = [0,1,0,0,1]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-47-491.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p>Alternating groups:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-50-441.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<img alt="" src="https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-48-211.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<img alt="" src="https://assets.leetcode.com/uploads/2024/05/16/image_2024-05-16_23-49-351.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= colors.length &lt;= 100</code></li>
<li><code>0 &lt;= colors[i] &lt;= 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 134</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfAlternatingGroups</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; colors)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = colors.<span class="built_in">size</span>(), res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (colors[(i - <span class="number">1</span> + n) % n] != colors[i] &amp;&amp;</span><br><span class="line">                colors[i] != colors[(i + <span class="number">1</span>) % n]) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>3207. Maximum Points After Enemy Battles</title>
    <url>/2024/07/10/3207-Maximum-Points-After-Enemy-Battles/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-points-after-enemy-battles/description/">3207. Maximum Points After Enemy Battles</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>enemyEnergies</code> denoting the energy values of various enemies.</p>
<p>You are also given an integer <code>currentEnergy</code> denoting the amount of energy you have initially.</p>
<p>You start with 0 points, and all the enemies are unmarked initially.</p>
<p>You can perform <strong>either</strong>  of the following operations <strong>zero</strong> or multiple times to gain points:</p>
<ul>
<li><p>Choose an <strong>unmarked</strong>  enemy, <code>i</code>, such that <code>currentEnergy &gt;= enemyEnergies[i]</code>. By choosing this option:</p>
<ul>
<li>You gain 1 point.</li>
<li>Your energy is reduced by the enemy’s energy, i.e. <code>currentEnergy = currentEnergy - enemyEnergies[i]</code>.</li>
</ul>
</li>
<li><p>If you have <strong>at least</strong>  1 point, you can choose an <strong>unmarked</strong>  enemy, <code>i</code>. By choosing this option:</p>
<ul>
<li>Your energy increases by the enemy’s energy, i.e. <code>currentEnergy = currentEnergy + enemyEnergies[i]</code>.</li>
<li>The enemy <code>i</code> is <strong>marked</strong> .</li>
</ul>
</li>
</ul>
<p>Return an integer denoting the <strong>maximum</strong>  points you can get in the end by optimally performing operations.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: enemyEnergies = [3,2,2], currentEnergy = 2</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The following operations can be performed to get 3 points, which is the maximum:</p>
<ul>
<li>First operation on enemy 1: <code>points</code> increases by 1, and <code>currentEnergy</code> decreases by 2. So, <code>points = 1</code>, and <code>currentEnergy = 0</code>.</li>
<li>Second operation on enemy 0: <code>currentEnergy</code> increases by 3, and enemy 0 is marked. So, <code>points = 1</code>, <code>currentEnergy = 3</code>, and marked enemies &#x3D; <code>[0]</code>.</li>
<li>First operation on enemy 2: <code>points</code> increases by 1, and <code>currentEnergy</code> decreases by 2. So, <code>points = 2</code>, <code>currentEnergy = 1</code>, and marked enemies &#x3D; <code>[0]</code>.</li>
<li>Second operation on enemy 2: <code>currentEnergy</code> increases by 2, and enemy 2 is marked. So, <code>points = 2</code>, <code>currentEnergy = 3</code>, and marked enemies &#x3D; <code>[0, 2]</code>.</li>
<li>First operation on enemy 1: <code>points</code> increases by 1, and <code>currentEnergy</code> decreases by 2. So, <code>points = 3</code>, <code>currentEnergy = 1</code>, and marked enemies &#x3D; <code>[0, 2]</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: enemyEnergies = [2], currentEnergy = 10</span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Performing the first operation 5 times on enemy 0 results in the maximum number of points.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= enemyEnergies.length &lt;= 10^5</code></li>
<li><code>1 &lt;= enemyEnergies[i] &lt;= 10^9</code></li>
<li><code>0 &lt;= currentEnergy &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 134</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maximumPoints</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; enemyEnergies, <span class="type">int</span> currentEnergy)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(enemyEnergies.<span class="built_in">begin</span>(), enemyEnergies.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (currentEnergy &lt; enemyEnergies[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        currentEnergy -= enemyEnergies[<span class="number">0</span>];</span><br><span class="line">        res++;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = currentEnergy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; enemyEnergies.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            sum += enemyEnergies[i];</span><br><span class="line">        &#125;</span><br><span class="line">        res += sum / enemyEnergies[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3209. Number of Subarrays With AND Value of K</title>
    <url>/2024/07/10/3209-Number-of-Subarrays-With-AND-Value-of-K/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/number-of-subarrays-with-and-value-of-k/description/">3209. Number of Subarrays With AND Value of K</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return the number of subarrays of <code>nums</code> where the bitwise <code>AND</code> of the elements of the subarray equals <code>k</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,1], k = 1</span><br><span class="line"></span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>All subarrays contain only 1’s.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,2], k = 1</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Subarrays having an <code>AND</code> value of 1 are: <code>[**1** ,1,2]</code>, <code>[1,**1** ,2]</code>, <code>[**1,1** ,2]</code>.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3], k = 2</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Subarrays having an <code>AND</code> value of 2 are: <code>[1,&lt;b&gt;2&lt;/b&gt;,3]</code>, <code>[1,**2,3** ]</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>0 &lt;= nums[i], k &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>logTrick</li>
<li>Biweekly Contest 134</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> x = nums[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[j] &amp; x) == nums[j]) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                nums[j] &amp;= x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = <span class="built_in">findLeft</span>(nums, <span class="number">0</span>, i, k);</span><br><span class="line">            <span class="type">int</span> right = <span class="built_in">findRight</span>(nums, <span class="number">0</span>, i, k);</span><br><span class="line">            res += right - left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLeft</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = low, right = high;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == k) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; k) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRight</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = low, right = high;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == k) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; k) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Bit Manipulation</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3208. Alternating Groups II</title>
    <url>/2024/07/10/3208-Alternating-Groups-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/alternating-groups-ii/description/">3208. Alternating Groups II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a circle of red and blue tiles. You are given an array of integers <code>colors</code> and an integer <code>k</code>. The color of tile <code>i</code> is represented by <code>colors[i]</code>:</p>
<ul>
<li><code>colors[i] == 0</code> means that tile <code>i</code> is <strong>red</strong> .</li>
<li><code>colors[i] == 1</code> means that tile <code>i</code> is <strong>blue</strong> .</li>
</ul>
<p>An <strong>alternating</strong>  group is every <code>k</code> contiguous tiles in the circle with <strong>alternating</strong>  colors (each tile in the group except the first and last one has a different color from its <strong>left</strong>  and <strong>right</strong>  tiles).</p>
<p>Return the number of <strong>alternating</strong>  groups.</p>
<p><strong>Note</strong>  that since <code>colors</code> represents a <strong>circle</strong> , the <strong>first</strong>  and the <strong>last</strong>  tiles are considered to be next to each other.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: colors = [0,1,0,1,0], k = 3</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" data-darkreader-inline-bgcolor="" data-darkreader-inline-bgimage="" src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183519.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;">

<p>Alternating groups:</p>
<img alt="" data-darkreader-inline-bgcolor="" data-darkreader-inline-bgimage="" src="https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182448.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;">

<img alt="" data-darkreader-inline-bgcolor="" data-darkreader-inline-bgimage="" src="https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-182844.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;">

<img alt="" data-darkreader-inline-bgcolor="" data-darkreader-inline-bgimage="" src="https://assets.leetcode.com/uploads/2024/05/28/screenshot-2024-05-28-183057.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;">

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: colors = [0,1,0,0,1,0,1], k = 6</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" data-darkreader-inline-bgcolor="" data-darkreader-inline-bgimage="" src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-183907.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;"></strong></p>
<p>Alternating groups:</p>
<img alt="" data-darkreader-inline-bgcolor="" data-darkreader-inline-bgimage="" src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184128.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;">

<img alt="" data-darkreader-inline-bgcolor="" data-darkreader-inline-bgimage="" src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184240.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;">

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: colors = [1,1,0,1], k = 4</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" data-darkreader-inline-bgcolor="" data-darkreader-inline-bgimage="" src="https://assets.leetcode.com/uploads/2024/06/19/screenshot-2024-05-28-184516.png" style="width: 150px; height: 150px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;">

<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= colors.length &lt;= 10^5</code></li>
<li><code>0 &lt;= colors[i] &lt;= 1</code></li>
<li><code>3 &lt;= k &lt;= colors.length</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 134</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfAlternatingGroups</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; colors, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = colors.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cur = colors[<span class="number">0</span>], curLength = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n + k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (colors[i % n] != cur) &#123;</span><br><span class="line">                curLength++;</span><br><span class="line">                cur = <span class="number">1</span> - cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += <span class="built_in">max</span>(<span class="number">0</span>, curLength - k + <span class="number">1</span>);</span><br><span class="line">                cur = colors[i % n];</span><br><span class="line">                curLength = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res += <span class="built_in">max</span>(<span class="number">0</span>, curLength - k);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>3210. Find the Encrypted String</title>
    <url>/2024/07/11/3210-Find-the-Encrypted-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-encrypted-string/description/">3210. Find the Encrypted String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code> and an integer <code>k</code>. Encrypt the string using the following algorithm:</p>
<ul>
<li>For each character <code>c</code> in <code>s</code>, replace <code>c</code> with the <code>k^th</code> character after <code>c</code> in the string (in a cyclic manner).</li>
</ul>
<p>Return the encrypted string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;dart&quot;</span>, k = 3</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;tdar&quot;</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>For <code>i = 0</code>, the 3^rd character after <code>&#39;d&#39;</code> is <code>&#39;t&#39;</code>.</li>
<li>For <code>i = 1</code>, the 3^rd character after <code>&#39;a&#39;</code> is <code>&#39;d&#39;</code>.</li>
<li>For <code>i = 2</code>, the 3^rd character after <code>&#39;r&#39;</code> is <code>&#39;a&#39;</code>.</li>
<li>For <code>i = 3</code>, the 3^rd character after <code>&#39;t&#39;</code> is <code>&#39;r&#39;</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aaa&quot;</span>, k = 1</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">As all the characters are the same, the encrypted string will also be the same.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 100</code></li>
<li><code>1 &lt;= k &lt;= 10^4</code></li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 405</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getEncryptedString</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(s[(i + k) % n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>3211. Generate Binary Strings Without Adjacent Zeros</title>
    <url>/2024/07/11/3211-Generate-Binary-Strings-Without-Adjacent-Zeros/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/generate-binary-strings-without-adjacent-zeros/description/">3211. Generate Binary Strings Without Adjacent Zeros</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a positive integer <code>n</code>.</p>
<p>A binary string <code>x</code> is <strong>valid</strong> if all substrings of <code>x</code> of length 2 contain <strong>at least</strong> one <code>&quot;1&quot;</code>.</p>
<p>Return all <strong>valid</strong>  strings with length <code>n</code>, in <em>any order</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line"></span><br><span class="line">Output: [<span class="string">&quot;010&quot;</span>,<span class="string">&quot;011&quot;</span>,<span class="string">&quot;101&quot;</span>,<span class="string">&quot;110&quot;</span>,<span class="string">&quot;111&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The valid strings of length 3 are: <code>&quot;010&quot;</code>, <code>&quot;011&quot;</code>, <code>&quot;101&quot;</code>, <code>&quot;110&quot;</code>, and <code>&quot;111&quot;</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line"></span><br><span class="line">Output: [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The valid strings of length 1 are: <code>&quot;0&quot;</code> and <code>&quot;1&quot;</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 18</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
<li>Weekly Contest 405</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n_;</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">validStrings</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        n_ = n;</span><br><span class="line">        string cur;</span><br><span class="line">        <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="literal">true</span>, cur);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> prevOne, string&amp; cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == n_) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(cur);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prevOne) &#123;</span><br><span class="line">            cur += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            <span class="built_in">traverse</span>(index + <span class="number">1</span>, <span class="literal">false</span>, cur);</span><br><span class="line">            cur.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(index + <span class="number">1</span>, <span class="literal">true</span>, cur);</span><br><span class="line">        cur.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Recursion</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3212. Count Submatrices With Equal Frequency of X and Y</title>
    <url>/2024/07/11/3212-Count-Submatrices-With-Equal-Frequency-of-X-and-Y/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-submatrices-with-equal-frequency-of-x-and-y/description/">3212. Count Submatrices With Equal Frequency of X and Y</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D character matrix <code>grid</code>, where <code>grid[i][j]</code> is either <code>&#39;X&#39;</code>, <code>&#39;Y&#39;</code>, or <code>&#39;.&#39;</code>, return the number of submatrices that contain:</p>
<ul>
<li><code>grid[0][0]</code></li>
<li>an <strong>equal</strong>  frequency of <code>&#39;X&#39;</code> and <code>&#39;Y&#39;</code>.</li>
<li><strong>at least</strong>  one <code>&#39;X&#39;</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[<span class="string">&quot;X&quot;</span>,<span class="string">&quot;Y&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;Y&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>]]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/07/examplems.png" style="padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 175px; height: 350px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #242729;" data-darkreader-inline-bgimage="" data-darkreader-inline-bgcolor="">

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[<span class="string">&quot;X&quot;</span>,<span class="string">&quot;X&quot;</span>],[<span class="string">&quot;X&quot;</span>,<span class="string">&quot;Y&quot;</span>]]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>No submatrix has an equal frequency of <code>&#39;X&#39;</code> and <code>&#39;Y&#39;</code>.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>]]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>No submatrix has at least one <code>&#39;X&#39;</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= grid.length, grid[i].length &lt;= 1000</code></li>
<li><code>grid[i][j]</code> is either <code>&#39;X&#39;</code>, <code>&#39;Y&#39;</code>, or <code>&#39;.&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum</li>
<li>Weekly Contest 405</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSubmatrices</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>(), res = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">preSum</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">count</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">                    val = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">                    val = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                preSum[i + <span class="number">1</span>][j + <span class="number">1</span>] =</span><br><span class="line">                    preSum[i][j + <span class="number">1</span>] + preSum[i + <span class="number">1</span>][j] - preSum[i][j] + val;</span><br><span class="line">                count[i + <span class="number">1</span>][j + <span class="number">1</span>] =</span><br><span class="line">                    count[i][j + <span class="number">1</span>] + count[i + <span class="number">1</span>][j] - count[i][j] + <span class="built_in">abs</span>(val);</span><br><span class="line">                <span class="keyword">if</span> (preSum[i + <span class="number">1</span>][j + <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; count[i + <span class="number">1</span>][j + <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3213. Construct String with Minimum Cost</title>
    <url>/2024/07/11/3213-Construct-String-with-Minimum-Cost/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/construct-string-with-minimum-cost/description/">3213. Construct String with Minimum Cost</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>target</code>, an array of strings <code>words</code>, and an integer array <code>costs</code>, both arrays of the same length.</p>
<p>Imagine an empty string <code>s</code>.</p>
<p>You can perform the following operation any number of times (including <strong>zero</strong> ):</p>
<ul>
<li>Choose an index <code>i</code> in the range <code>[0, words.length - 1]</code>.</li>
<li>Append <code>words[i]</code> to <code>s</code>.</li>
<li>The cost of operation is <code>costs[i]</code>.</li>
</ul>
<p>Return the <strong>minimum</strong>  cost to make <code>s</code> equal to <code>target</code>. If it’s not possible, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: target = <span class="string">&quot;abcdef&quot;</span>, words = [<span class="string">&quot;abdef&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ef&quot;</span>], costs = [100,1,1,10,5]</span><br><span class="line"></span><br><span class="line">Output: 7</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The minimum cost can be achieved by performing the following operations:</p>
<ul>
<li>Select index 1 and append <code>&quot;abc&quot;</code> to <code>s</code> at a cost of 1, resulting in <code>s = &quot;abc&quot;</code>.</li>
<li>Select index 2 and append <code>&quot;d&quot;</code> to <code>s</code> at a cost of 1, resulting in <code>s = &quot;abcd&quot;</code>.</li>
<li>Select index 4 and append <code>&quot;ef&quot;</code> to <code>s</code> at a cost of 5, resulting in <code>s = &quot;abcdef&quot;</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: target = <span class="string">&quot;aaaa&quot;</span>, words = [<span class="string">&quot;z&quot;</span>,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;zzz&quot;</span>], costs = [1,10,100]</span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>It is impossible to make <code>s</code> equal to <code>target</code>, so we return -1.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= target.length &lt;= 5 * 10^4</code></li>
<li><code>1 &lt;= words.length == costs.length &lt;= 5 * 10^4</code></li>
<li><code>1 &lt;= words[i].length &lt;= target.length</code></li>
<li>The total sum of <code>words[i].length</code> is less than or equal to <code>5 * 10^4</code>.</li>
<li><code>target</code> and <code>words[i]</code> consist only of lowercase English letters.</li>
<li><code>1 &lt;= costs[i] &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Trie</li>
<li>Weekly Contest 405</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Trie* children[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Trie</span>(<span class="type">int</span> val) : <span class="built_in">val</span>(val), <span class="built_in">children</span>() &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Trie* root;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dp;</span><br><span class="line">    string target_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumCost</span><span class="params">(string target, vector&lt;string&gt;&amp; words, vector&lt;<span class="type">int</span>&gt;&amp; costs)</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">Trie</span>(<span class="number">-1</span>);</span><br><span class="line">        target_ = target;</span><br><span class="line">        <span class="type">int</span> n = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size = target.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(size, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            string&amp; word = words[i];</span><br><span class="line">            Trie* cur = root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span>&amp; c : word) &#123;</span><br><span class="line">                <span class="type">int</span> idx = c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;children[idx] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                    cur-&gt;children[idx] = <span class="keyword">new</span> <span class="built_in">Trie</span>(INT_MAX);</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur-&gt;children[idx];</span><br><span class="line">            &#125;</span><br><span class="line">            cur-&gt;val = <span class="built_in">min</span>(costs[i], cur-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res == INT_MAX ? <span class="number">-1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == target_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[index] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> res = INT_MAX;</span><br><span class="line">        Trie* cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; target_.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">char</span>&amp; c = target_[i];</span><br><span class="line">            <span class="type">int</span> idx = c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;children[idx] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;children[idx]-&gt;val != INT_MAX) &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, cur-&gt;children[idx]-&gt;val + <span class="built_in">traverse</span>(i + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;children[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[index] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Suffix Array</tag>
      </tags>
  </entry>
  <entry>
    <title>3217. Delete Nodes From Linked List Present in Array</title>
    <url>/2024/07/23/3217-Delete-Nodes-From-Linked-List-Present-in-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/delete-nodes-from-linked-list-present-in-array/description/">3217. Delete Nodes From Linked List Present in Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of integers <code>nums</code> and the <code>head</code> of a linked list. Return the <code>head</code> of the modified linked list after <strong>removing</strong>  all nodes from the linked list that have a value that exists in <code>nums</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3], <span class="built_in">head</span> = [1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">Output: [4,5]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample0.png" style="width: 400px; height: 66px;"></strong></p>
<p>Remove the nodes with values 1, 2, and 3.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1], <span class="built_in">head</span> = [1,2,1,2,1,2]</span><br><span class="line"></span><br><span class="line">Output: [2,2,2]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample1.png" style="height: 62px; width: 450px;">

<p>Remove the nodes with value 1.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5], <span class="built_in">head</span> = [1,2,3,4]</span><br><span class="line"></span><br><span class="line">Output: [1,2,3,4]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample2.png" style="width: 400px; height: 83px;"></strong></p>
<p>No node has value 5.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>
<li>All elements in <code>nums</code> are unique.</li>
<li>The number of nodes in the given list is in the range <code>[1, 10^5]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 10^5</code></li>
<li>The input is generated such that there is at least one node in the linked list that has a value not present in <code>nums</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Linked list</li>
<li>Weekly Contest 406</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<p>Solution 1:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">modifiedList</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(nums.begin(), nums.end())</span></span>;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode* p = &amp;dummy;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!s.<span class="built_in">contains</span>(head-&gt;val)) &#123;</span><br><span class="line">                p-&gt;next = head;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Solution 2:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">modifiedList</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(nums.begin(), nums.end())</span></span>;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode* tmp = &amp;dummy;</span><br><span class="line">        <span class="keyword">while</span> (tmp-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">contains</span>(tmp-&gt;next-&gt;val)) &#123;</span><br><span class="line">                tmp-&gt;next = tmp-&gt;next-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp = tmp-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>3219. Minimum Cost for Cutting Cake II</title>
    <url>/2024/07/23/3219-Minimum-Cost-for-Cutting-Cake-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-cost-for-cutting-cake-ii/description/">3219. Minimum Cost for Cutting Cake II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is an <code>m x n</code> cake that needs to be cut into <code>1 x 1</code> pieces.</p>
<p>You are given integers <code>m</code>, <code>n</code>, and two arrays:</p>
<ul>
<li><code>horizontalCut</code> of size <code>m - 1</code>, where <code>horizontalCut[i]</code> represents the cost to cut along the horizontal line <code>i</code>.</li>
<li><code>verticalCut</code> of size <code>n - 1</code>, where <code>verticalCut[j]</code> represents the cost to cut along the vertical line <code>j</code>.</li>
</ul>
<p>In one operation, you can choose any piece of cake that is not yet a <code>1 x 1</code> square and perform one of the following cuts:</p>
<ul>
<li>Cut along a horizontal line <code>i</code> at a cost of <code>horizontalCut[i]</code>.</li>
<li>Cut along a vertical line <code>j</code> at a cost of <code>verticalCut[j]</code>.</li>
</ul>
<p>After the cut, the piece of cake is divided into two distinct pieces.</p>
<p>The cost of a cut depends only on the initial cost of the line and does not change.</p>
<p>Return the <strong>minimum</strong>  total cost to cut the entire cake into <code>1 x 1</code> pieces.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]</span><br><span class="line"></span><br><span class="line">Output: 13</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif" style="width: 280px; height: 320px;">

<ul>
<li>Perform a cut on the vertical line 0 with cost 5, current total cost is 5.</li>
<li>Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid with cost 1.</li>
<li>Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid with cost 1.</li>
<li>Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid with cost 3.</li>
<li>Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid with cost 3.</li>
</ul>
<p>The total cost is <code>5 + 1 + 1 + 3 + 3 = 13</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: m = 2, n = 2, horizontalCut = [7], verticalCut = [4]</span><br><span class="line"></span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>Perform a cut on the horizontal line 0 with cost 7.</li>
<li>Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid with cost 4.</li>
<li>Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid with cost 4.</li>
</ul>
<p>The total cost is <code>7 + 4 + 4 = 15</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= m, n &lt;= 10^5</code></li>
<li><code>horizontalCut.length == m - 1</code></li>
<li><code>verticalCut.length == n - 1</code></li>
<li><code>1 &lt;= horizontalCut[i], verticalCut[i] &lt;= 10^3</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Greedy</li>
<li>Weekly Contest 406</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minimumCost</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt;&amp; horizontalCut,</span></span></span><br><span class="line"><span class="params"><span class="function">                          vector&lt;<span class="type">int</span>&gt;&amp; verticalCut)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(horizontalCut.<span class="built_in">begin</span>(), horizontalCut.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(verticalCut.<span class="built_in">begin</span>(), verticalCut.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> hCnt = <span class="number">1</span>, vCnt = <span class="number">1</span>, hIdx = horizontalCut.<span class="built_in">size</span>() - <span class="number">1</span>,</span><br><span class="line">            vIdx = verticalCut.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (hIdx &gt;= <span class="number">0</span> || vIdx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hIdx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                res += verticalCut[vIdx--] * hCnt;</span><br><span class="line">                vCnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vIdx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                res += horizontalCut[hIdx--] * vCnt;</span><br><span class="line">                hCnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (verticalCut[vIdx] &gt; horizontalCut[hIdx]) &#123;</span><br><span class="line">                res += verticalCut[vIdx--] * hCnt;</span><br><span class="line">                vCnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += horizontalCut[hIdx--] * vCnt;</span><br><span class="line">                hCnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>322. Coin Change</title>
    <url>/2023/11/08/322-Coin-Change/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/coin-change/">322. Coin Change</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/dynamic-programming//">Dynamic Programming</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a></p>
<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p>
<p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p>
<p>You may assume that you have an infinite number of each kind of coin.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: coins = [1,2,5], amount = 11</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: 11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: coins = [2], amount = 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: coins = [1], amount = 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= coins.length &lt;= 12</code></li>
<li>1 &lt;&#x3D; coins[i] &lt;&#x3D; 2<sup>31</sup> - 1</li>
<li>0 &lt;&#x3D; amount &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(amount + <span class="number">1</span>, amount + <span class="number">1</span>)</span></span>;</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - coin &gt;= <span class="number">0</span> &amp;&amp; res[i - coin] != amount + <span class="number">1</span>) &#123;</span><br><span class="line">                    res[i] = <span class="built_in">min</span>(res[i], res[i - coin] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[amount] == amount + <span class="number">1</span> ? <span class="number">-1</span> : res[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Breadth-First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>3223. Minimum Length of String After Operations</title>
    <url>/2024/07/26/3223-Minimum-Length-of-String-After-Operations/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-length-of-string-after-operations/description/">3223. Minimum Length of String After Operations</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code>.</p>
<p>You can perform the following process on <code>s</code> <strong>any</strong>  number of times:</p>
<ul>
<li>Choose an index <code>i</code> in the string such that there is <strong>at least</strong>  one character to the left of index <code>i</code> that is equal to <code>s[i]</code>, and <strong>at least</strong>  one character to the right that is also equal to <code>s[i]</code>.</li>
<li>Delete the <strong>closest</strong>  character to the <strong>left</strong>  of index <code>i</code> that is equal to <code>s[i]</code>.</li>
<li>Delete the <strong>closest</strong>  character to the <strong>right</strong>  of index <code>i</code> that is equal to <code>s[i]</code>.</li>
</ul>
<p>Return the <strong>minimum</strong>  length of the final string <code>s</code> that you can achieve.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abaacbcbb&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:<br>We do the following operations:</p>
<ul>
<li>Choose index 2, then remove the characters at indices 0 and 3. The resulting string is <code>s = &quot;bacbcbb&quot;</code>.</li>
<li>Choose index 3, then remove the characters at indices 0 and 5. The resulting string is <code>s = &quot;acbcb&quot;</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aa&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:<br>We cannot perform any operations, so we return the length of the original string.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 2 * 10^5</code></li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><p>-Biweekly Contest 135</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumLength</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            count[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count[i] &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                res += <span class="number">2</span> - count[i] % <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += count[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>3224. Minimum Array Changes to Make Differences Equal</title>
    <url>/2024/07/26/3224-Minimum-Array-Changes-to-Make-Differences-Equal/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-array-changes-to-make-differences-equal/description/">3224. Minimum Array Changes to Make Differences Equal</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> of size <code>n</code> where <code>n</code> is <strong>even</strong> , and an integer <code>k</code>.</p>
<p>You can perform some changes on the array, where in one change you can replace <strong>any</strong>  element in the array with <strong>any</strong>  integer in the range from <code>0</code> to <code>k</code>.</p>
<p>You need to perform some changes (possibly none) such that the final array satisfies the following condition:</p>
<ul>
<li>There exists an integer <code>X</code> such that <code>abs(a[i] - a[n - i - 1]) = X</code> for all <code>(0 &lt;= i &lt; n)</code>.</li>
</ul>
<p>Return the <strong>minimum</strong>  number of changes required to satisfy the above condition.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,0,1,2,4,3], k = 4</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:<br>We can perform the following changes:</p>
<ul>
<li>Replace <code>nums[1]</code> by 2. The resulting array is nums &#x3D; [1,<strong>2</strong>,1,2,4,3].</li>
<li>Replace <code>nums[3]</code> by 3. The resulting array is nums &#x3D; [1,2,1,<strong>3</strong>,4,3].</li>
</ul>
<p>The integer <code>X</code> will be 2.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,2,3,3,6,5,4], k = 6</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:<br>We can perform the following operations:</p>
<ul>
<li>Replace <code>nums[3]</code> by 0. The resulting array is nums &#x3D; [0,1,2,<strong>0</strong>,3,6,5,4].</li>
<li>Replace <code>nums[4]</code> by 4. The resulting array is nums &#x3D; [0,1,2,0,<strong>4</strong>,6,5,4].</li>
</ul>
<p>The integer <code>X</code> will be 4.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n == nums.length &lt;= 10^5</code></li>
<li><code>n</code> is even.</li>
<li><code>0 &lt;= nums[i] &lt;= k &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>diff and preSum array</li>
<li>Biweekly contest 135</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minChanges</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diffs</span><span class="params">(k + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mins</span><span class="params">(k + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; n - i - <span class="number">1</span> &gt; i; i++) &#123;</span><br><span class="line">            <span class="type">int</span> diff = <span class="built_in">abs</span>(nums[i] - nums[n - i - <span class="number">1</span>]);</span><br><span class="line">            diffs[diff]++;</span><br><span class="line">            <span class="type">int</span> mi = <span class="built_in">min</span>(nums[i], nums[n - i - <span class="number">1</span>]), mx = <span class="built_in">max</span>(nums[i], nums[n - i - <span class="number">1</span>]);</span><br><span class="line">            mins[<span class="built_in">max</span>(mx, k - mi)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = INT_MAX, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(res, n / <span class="number">2</span> - diffs[i] + sum);</span><br><span class="line">            sum += mins[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>3227. Vowels Game in a String</title>
    <url>/2024/07/23/3227-Vowels-Game-in-a-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/vowels-game-in-a-string/description/">3227. Vowels Game in a String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Alice and Bob are playing a game on a string.</p>
<p>You are given a string <code>s</code>, Alice and Bob will take turns playing the following game where Alice starts <strong>first</strong> :</p>
<ul>
<li>On Alice’s turn, she has to remove any <strong>non-empty</strong> substring from <code>s</code> that contains an <strong>odd</strong>  number of vowels.</li>
<li>On Bob’s turn, he has to remove any <strong>non-empty</strong> substring from <code>s</code> that contains an <strong>even</strong>  number of vowels.</li>
</ul>
<p>The first player who cannot make a move on their turn loses the game. We assume that both Alice and Bob play <strong>optimally</strong> .</p>
<p>Return <code>true</code> if Alice wins the game, and <code>false</code> otherwise.</p>
<p>The English vowels are: <code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, and <code>u</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;leetcoder&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Alice can win the game as follows:</p>
<ul>
<li>Alice plays first, she can delete the underlined substring in <code>s = &quot;**leetco** der&quot;</code> which contains 3 vowels. The resulting string is <code>s = &quot;der&quot;</code>.</li>
<li>Bob plays second, he can delete the underlined substring in <code>s = &quot;**d** er&quot;</code> which contains 0 vowels. The resulting string is <code>s = &quot;er&quot;</code>.</li>
<li>Alice plays third, she can delete the whole string <code>s = &quot;**er** &quot;</code> which contains 1 vowel.</li>
<li>Bob plays fourth, since the string is empty, there is no valid play for Bob. So Alice wins the game.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;bbcd&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>Explanation:<br>There is no valid play for Alice in her first turn, so Alice loses the game.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 10^5</code></li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 407</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">doesAliceWin</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> numVowels = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;a&#x27;</span> || s[i] == <span class="string">&#x27;e&#x27;</span> || s[i] == <span class="string">&#x27;i&#x27;</span> || s[i] == <span class="string">&#x27;o&#x27;</span> ||</span><br><span class="line">                s[i] == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">                numVowels++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (numVowels == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Math</tag>
        <tag>Brainteaser</tag>
        <tag>Game Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>3228. Maximum Number of Operations to Move Ones to the End</title>
    <url>/2024/07/23/3228-Maximum-Number-of-Operations-to-Move-Ones-to-the-End/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-number-of-operations-to-move-ones-to-the-end/description/">3228. Maximum Number of Operations to Move Ones to the End</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a binary string <code>s</code>.</p>
<p>You can perform the following operation on the string <strong>any</strong>  number of times:</p>
<ul>
<li>Choose <strong>any</strong>  index <code>i</code> from the string where <code>i + 1 &lt; s.length</code> such that <code>s[i] == &#39;1&#39;</code> and <code>s[i + 1] == &#39;0&#39;</code>.</li>
<li>Move the character <code>s[i]</code> to the <strong>right</strong>  until it reaches the end of the string or another <code>&#39;1&#39;</code>. For example, for <code>s = &quot;010010&quot;</code>, if we choose <code>i = 1</code>, the resulting string will be s &#x3D; “0<strong>001</strong>10”.</li>
</ul>
<p>Return the <strong>maximum</strong>  number of operations that you can perform.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;1001101&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can perform the following operations:</p>
<ul>
<li>Choose index <code>i = 0</code>. The resulting string is s &#x3D; “<strong>001</strong> 1101”.</li>
<li>Choose index <code>i = 4</code>. The resulting string is s &#x3D; “0011<strong>01</strong> 1”.</li>
<li>Choose index <code>i = 3</code>. The resulting string is s &#x3D; “001<strong>01</strong> 11”.</li>
<li>Choose index <code>i = 2</code>. The resulting string is s &#x3D; “00<strong>01</strong> 111”.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;00111&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 10^5</code></li>
<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Move 1s from left to right</li>
<li>Weekly Contest 407</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxOperations</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> curOnes = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>();) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                curOnes++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                res += curOnes;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Greedy</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>3229. Minimum Operations to Make Array Equal to Target</title>
    <url>/2024/07/23/3229-Minimum-Operations-to-Make-Array-Equal-to-Target/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-operations-to-make-array-equal-to-target/description/">3229. Minimum Operations to Make Array Equal to Target</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two positive integer arrays <code>nums</code> and <code>target</code>, of the same length.</p>
<p>In a single operation, you can select any subarray of <code>nums</code> and increment or decrement each element within that subarray by 1.</p>
<p>Return the <strong>minimum</strong>  number of operations required to make <code>nums</code> equal to the array <code>target</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,5,1,2], target = [4,6,2,4]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We will perform the following operations to make <code>nums</code> equal to <code>target</code>:</p>
<ul>
<li>Increment<code>nums[0..3]</code> by 1, <code>nums = [4,6,2,3]</code>.</li>
<li>Increment<code>nums[3..3]</code> by 1, <code>nums = [4,6,2,4]</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,2], target = [2,1,4]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We will perform the following operations to make <code>nums</code> equal to <code>target</code>:</p>
<ul>
<li>Increment<code>nums[0..0]</code> by 1, <code>nums = [2,3,2]</code>.</li>
<li>Decrement<code>nums[1..1]</code> by 1, <code>nums = [2,2,2]</code>.</li>
<li>Decrement<code>nums[1..1]</code> by 1, <code>nums = [2,1,2]</code>.</li>
<li>Increment<code>nums[2..2]</code> by 1, <code>nums = [2,1,3]</code>.</li>
<li>Increment<code>nums[2..2]</code> by 1, <code>nums = [2,1,4]</code>.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length == target.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i], target[i] &lt;= 10^8</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>diff array</li>
<li>Weekly Contest 407</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minimumOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; gap;</span><br><span class="line">        <span class="comment">// first we get the gap array</span></span><br><span class="line">        <span class="comment">// from the question, it would be &#123;1, 1, 1, 2&#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            gap.<span class="built_in">push_back</span>(target[i] - nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// then, we get the diff array of the difference array</span></span><br><span class="line">        <span class="comment">// it would be &#123;1, 0, 0, 1&#125;</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; diff;</span><br><span class="line">        diff.<span class="built_in">push_back</span>(gap[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            diff.<span class="built_in">push_back</span>(gap[i] - gap[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// the diff array&#x27;s default effect is to the end of the array</span></span><br><span class="line">        <span class="comment">// but since we can apply the change to any subArray, we get free</span></span><br><span class="line">        <span class="comment">// add/minus from previous minus/add</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; diff.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((cur &gt;= <span class="number">0</span> &amp;&amp; diff[i] &gt;= <span class="number">0</span>) || (cur &lt;= <span class="number">0</span> &amp;&amp; diff[i] &lt;= <span class="number">0</span>)) &#123;</span><br><span class="line">                res += <span class="built_in">abs</span>(diff[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(cur) &lt; <span class="built_in">abs</span>(diff[i])) &#123;</span><br><span class="line">                    res += <span class="built_in">abs</span>(diff[i] + cur);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur += diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>323. Number of Connected Components in an Undirected Graph</title>
    <url>/2023/09/02/323-Number-of-Connected-Components-in-an-Undirected-Graph/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/">323. Number of Connected Components in an Undirected Graph</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/union-find//">Union Find</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a></p>
<p>You have a graph of <code>n</code> nodes. You are given an integer <code>n</code> and an array <code>edges</code> where edges[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] indicates that there is an edge between a<sub>i</sub> and b<sub>i</sub> in the graph.</p>
<p>Return <em>the number of connected components in the graph</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/14/conn1-graph.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, edges = [[0,1],[1,2],[3,4]]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/14/conn2-graph.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 2000</code></li>
<li><code>1 &lt;= edges.length &lt;= 5000</code></li>
<li><code>edges[i].length == 2</code></li>
<li>0 &lt;&#x3D; a<sub>i</sub> &lt;&#x3D; b<sub>i</sub> &lt; n</li>
<li>a<sub>i</sub> !&#x3D; b<sub>i</sub></li>
<li>There are no repeated edges.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>union find</li>
<li>if the edge’s two nodes are not connected previously, then minus the number of component<br>(now they are connected)</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countComponents</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        parent = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> num = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> pair : edges) &#123;</span><br><span class="line">            <span class="type">int</span> p = pair[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> q = pair[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> rootP = <span class="built_in">find</span>(p);</span><br><span class="line">            <span class="type">int</span> rootQ = <span class="built_in">find</span>(q);</span><br><span class="line">            <span class="keyword">if</span> (rootP != rootQ) &#123;</span><br><span class="line">                parent[rootP] = rootQ;</span><br><span class="line">                num--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[node] != node) &#123;</span><br><span class="line">            parent[node] = <span class="built_in">find</span>(parent[node]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[node];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>3233. Find the Count of Numbers Which Are Not Special</title>
    <url>/2024/08/14/3233-Find-the-Count-of-Numbers-Which-Are-Not-Special/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-count-of-numbers-which-are-not-special/description/">3233. Find the Count of Numbers Which Are Not Special</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given 2 <strong>positive</strong>  integers <code>l</code> and <code>r</code>. For any number <code>x</code>, all positive divisors of <code>x</code> except <code>x</code> are called the <strong>proper divisors</strong>  of <code>x</code>.</p>
<p>A number is called <strong>special</strong>  if it has exactly 2 <strong>proper divisors</strong> . For example:</p>
<ul>
<li>The number 4 is special because it has proper divisors 1 and 2.</li>
<li>The number 6 is not special because it has proper divisors 1, 2, and 3.</li>
</ul>
<p>Return the count of numbers in the range <code>[l, r]</code> that are <strong>not</strong>  <strong>special</strong> .</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: l = 5, r = 7</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>There are no special numbers in the range <code>[5, 7]</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: l = 4, r = 16</span><br><span class="line"></span><br><span class="line">Output: 11</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The special numbers in the range <code>[4, 16]</code> are 4 and 9.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= l &lt;= r &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>only value that’s square of prime number satisfies the need</li>
<li>Weekly Contest 408</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nonSpecialCount</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i * i &lt;= r; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * i &lt; l) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isPrime</span>(i)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r - l + <span class="number">1</span> - count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i * i &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>Number Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>3234. Count the Number of Substrings With Dominant Ones</title>
    <url>/2024/08/14/3234-Count-the-Number-of-Substrings-With-Dominant-Ones/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-the-number-of-substrings-with-dominant-ones/description/">3234. Count the Number of Substrings With Dominant Ones</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a binary string <code>s</code>.</p>
<p>Return the number of substrings with <strong>dominant</strong>  ones.</p>
<p>A string has <strong>dominant</strong>  ones if the number of ones in the string is <strong>greater than or equal to</strong>  the <strong>square</strong>  of the number of zeros in the string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;00011&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The substrings with dominant ones are shown in the table below.</p>
<table><thead><tr><th>i</th><th>j</th><th>s[i..j]</th><th>Number of Zeros</th><th>Number of Ones</th></tr></thead><tbody><tr><td>3</td><td>3</td><td>1</td><td>0</td><td>1</td></tr><tr><td>4</td><td>4</td><td>1</td><td>0</td><td>1</td></tr><tr><td>2</td><td>3</td><td>01</td><td>1</td><td>1</td></tr><tr><td>3</td><td>4</td><td>11</td><td>0</td><td>2</td></tr><tr><td>2</td><td>4</td><td>011</td><td>1</td><td>2</td></tr></tbody></table>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;101101&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 16</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The substrings with <strong>non-dominant</strong>  ones are shown in the table below.</p>
<p>Since there are 21 substrings total and 5 of them have non-dominant ones, it follows that there are 16 substrings with dominant ones.</p>
<table><thead><tr><th>i</th><th>j</th><th>s[i..j]</th><th>Number of Zeros</th><th>Number of Ones</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>4</td><td>4</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>4</td><td>0110</td><td>2</td><td>2</td></tr><tr><td>0</td><td>4</td><td>10110</td><td>2</td><td>3</td></tr><tr><td>1</td><td>5</td><td>01101</td><td>2</td><td>3</td></tr></tbody></table>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 4 * 10^4</code></li>
<li><code>s</code> consists only of characters <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 408</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSubstrings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; zeros;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                zeros.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> totalOne = s.<span class="built_in">size</span>() - zeros.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> zeroIdx = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        zeros.<span class="built_in">push_back</span>(s.<span class="built_in">size</span>());</span><br><span class="line">        <span class="comment">// start from 0, we want to calculate the number of dominant substring</span></span><br><span class="line">        <span class="comment">// with l as subString left index</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>; left &lt; s.<span class="built_in">size</span>(); left++) &#123;</span><br><span class="line">            <span class="comment">// the meaning of the inner for loop:</span></span><br><span class="line">            <span class="comment">//  we calculate the number of zero and one up to jth zero(included)</span></span><br><span class="line">            <span class="comment">//  then we check the if the numZero and numOne fits the need</span></span><br><span class="line">            <span class="comment">//  if it fits, then all indexes starting from the jth zero,</span></span><br><span class="line">            <span class="comment">//  but before the (j+1)th zero works</span></span><br><span class="line">            <span class="comment">//  if it doesn&#x27;t fit, then we need 1 from the next segment</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = zeroIdx; j &lt; zeros.<span class="built_in">size</span>() - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="type">int</span> numZero = j - zeroIdx + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (numZero * numZero &gt; totalOne) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> numOne = zeros[j] + <span class="number">1</span> - left - numZero;</span><br><span class="line">                <span class="type">int</span> p = zeros[j], q = zeros[j + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (numZero * numZero &lt;= numOne) &#123;</span><br><span class="line">                    res += q - p;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res += <span class="built_in">max</span>(<span class="number">0</span>, q - p + numOne - numZero * numZero);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[left] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                zeroIdx++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// from l to the left of first 0, all strings are valid</span></span><br><span class="line">                res += zeros[zeroIdx] - left;</span><br><span class="line">                totalOne--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Sliding Window</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>3235. Check if the Rectangle Corner Is Reachable</title>
    <url>/2024/10/03/3235-Check-if-the-Rectangle-Corner-Is-Reachable/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/check-if-the-rectangle-corner-is-reachable/description/">3235. Check if the Rectangle Corner Is Reachable</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two positive integers <code>xCorner</code> and <code>yCorner</code>, and a 2D array <code>circles</code>, where circles[i] &#x3D; [x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub>] denotes a circle with center at (x<sub>i</sub>, y<sub>i</sub>) and radius r<sub>i</sub>.</p>
<p>There is a rectangle in the coordinate plane with its bottom left corner at the origin and top right corner at the coordinate <code>(xCorner, yCorner)</code>. You need to check whether there is a path from the bottom left corner to the top right corner such that the <strong>entire path</strong>  lies inside the rectangle, <strong>does not</strong>  touch or lie inside <strong>any</strong>  circle, and touches the rectangle <strong>only</strong>  at the two corners.</p>
<p>Return <code>true</code> if such a path exists, and <code>false</code> otherwise.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: xCorner = 3, yCorner = 4, circles = [[2,1,1]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/18/example2circle1.png" style="width: 346px; height: 264px;">

<p>The black curve shows a possible path between <code>(0, 0)</code> and <code>(3, 4)</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: xCorner = 3, yCorner = 3, circles = [[1,1,2]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/18/example1circle.png" style="width: 346px; height: 264px;">

<p>No path exists from <code>(0, 0)</code> to <code>(3, 3)</code>.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: xCorner = 3, yCorner = 3, circles = [[2,1,1],[1,2,1]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/18/example0circle.png" style="width: 346px; height: 264px;">

<p>No path exists from <code>(0, 0)</code> to <code>(3, 3)</code>.</p>
<p><strong>Example 4:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: xCorner = 4, yCorner = 4, circles = [[5,5,1]]</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/04/rectangles.png" style="width: 346px; height: 264px;">

<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= xCorner, yCorner &lt;= 10^9</code></li>
<li><code>1 &lt;= circles.length &lt;= 1000</code></li>
<li><code>circles[i].length == 3</code></li>
<li>1 &lt;&#x3D; x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub> &lt;&#x3D; 10^9</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>union find</li>
<li>Weekly Contest 408</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canReachCorner</span><span class="params">(<span class="type">int</span> xCorner, <span class="type">int</span> yCorner,</span></span></span><br><span class="line"><span class="params"><span class="function">                        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; circles)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = circles.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">2</span>; i++) &#123;</span><br><span class="line">            nodes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// the left and up side is n, the right and down side is n + 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">long</span> x1 = circles[i][<span class="number">0</span>], y1 = circles[i][<span class="number">1</span>], r1 = circles[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">long</span> x2 = circles[j][<span class="number">0</span>], y2 = circles[j][<span class="number">1</span>], r2 = circles[j][<span class="number">2</span>];</span><br><span class="line">                <span class="comment">// in this case, the two circle intersects</span></span><br><span class="line">                <span class="keyword">if</span> ((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) &lt;=</span><br><span class="line">                    (r1 + r2) * (r1 + r2)) &#123;</span><br><span class="line">                    <span class="comment">// check one point, if it&#x27;s within the rectangle</span></span><br><span class="line">                    <span class="keyword">if</span> (x2 * r1 + x1 * r2 &lt; (r1 + r2) * xCorner &amp;&amp;</span><br><span class="line">                        y2 * r1 + y1 * r2 &lt; (r1 + r2) * yCorner) &#123;</span><br><span class="line">                        <span class="built_in">merge</span>(i, j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">bool</span> leftUp = <span class="built_in">inCircle</span>(<span class="number">0</span>, yCorner, x1, y1, r1);</span><br><span class="line">            <span class="type">bool</span> rightDown = <span class="built_in">inCircle</span>(xCorner, <span class="number">0</span>, x1, y1, r1);</span><br><span class="line">            <span class="type">bool</span> rightUp = <span class="built_in">inCircle</span>(xCorner, yCorner, x1, y1, r1);</span><br><span class="line">            <span class="comment">// the circles are solid, so if it covers all one side, then there&#x27;s</span></span><br><span class="line">            <span class="comment">// no way to reach the destination</span></span><br><span class="line">            <span class="keyword">if</span> ((y1 &lt;= yCorner &amp;&amp; x1 &lt;= r1) || (y1 &gt; yCorner &amp;&amp; leftUp)) &#123;</span><br><span class="line">                <span class="built_in">merge</span>(i, n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((x1 &lt;= xCorner &amp;&amp; <span class="built_in">abs</span>(y1 - yCorner) &lt;= r1) ||</span><br><span class="line">                (x1 &gt; xCorner &amp;&amp; rightUp)) &#123;</span><br><span class="line">                <span class="built_in">merge</span>(i, n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((y1 &lt;= yCorner &amp;&amp; <span class="built_in">abs</span>(x1 - xCorner) &lt;= r1) ||</span><br><span class="line">                (y1 &gt; yCorner &amp;&amp; rightUp)) &#123;</span><br><span class="line">                <span class="built_in">merge</span>(i, n + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((x1 &lt;= xCorner &amp;&amp; y1 &lt;= r1) || (y1 &gt; yCorner &amp;&amp; rightDown)) &#123;</span><br><span class="line">                <span class="built_in">merge</span>(i, n + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(n) == <span class="built_in">find</span>(n + <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootU = <span class="built_in">find</span>(u), rootV = <span class="built_in">find</span>(v);</span><br><span class="line">        nodes[rootU] = rootV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (nodes[u] != u) &#123;</span><br><span class="line">            nodes[u] = <span class="built_in">find</span>(nodes[u]);</span><br><span class="line">            u = nodes[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">inCircle</span><span class="params">(<span class="type">long</span> x0, <span class="type">long</span> y0, <span class="type">long</span> x1, <span class="type">long</span> y1, <span class="type">long</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) &lt;= r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Math</tag>
        <tag>Union Find</tag>
        <tag>Geometry</tag>
      </tags>
  </entry>
  <entry>
    <title>3239. Minimum Number of Flips to Make Binary Grid Palindromic I</title>
    <url>/2024/08/14/3239-Minimum-Number-of-Flips-to-Make-Binary-Grid-Palindromic-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-i/description/">3239. Minimum Number of Flips to Make Binary Grid Palindromic I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an <code>m x n</code> binary matrix <code>grid</code>.</p>
<p>A row or column is considered <strong>palindromic</strong>  if its values read the same forward and backward.</p>
<p>You can <strong>flip</strong>  any number of cells in <code>grid</code> from <code>0</code> to <code>1</code>, or from <code>1</code> to <code>0</code>.</p>
<p>Return the <strong>minimum</strong>  number of cells that need to be flipped to make <strong>either</strong>  all rows <strong>palindromic</strong>  or all columns <strong>palindromic</strong> .</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0,0],[0,0,0],[0,0,1]]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/07/07/screenshot-from-2024-07-08-00-20-10.png" style="width: 420px; height: 108px;">

<p>Flipping the highlighted cells makes all the rows palindromic.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1],[0,1],[0,0]]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/07/07/screenshot-from-2024-07-08-00-31-23.png" style="width: 300px; height: 100px;">

<p>Flipping the highlighted cell makes all the columns palindromic.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1],[0]]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>All rows are already palindromic.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m * n &lt;= 2 * 10^5</code></li>
<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 136</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minFlips</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hRes = <span class="number">0</span>, vRes = <span class="number">0</span>, m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] != grid[i][n - <span class="number">1</span> - j]) &#123;</span><br><span class="line">                    hRes++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] != grid[m - <span class="number">1</span> - i][j]) &#123;</span><br><span class="line">                    vRes++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(hRes, vRes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3240. Minimum Number of Flips to Make Binary Grid Palindromic II</title>
    <url>/2024/08/14/3240-Minimum-Number-of-Flips-to-Make-Binary-Grid-Palindromic-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-ii/description/">3240. Minimum Number of Flips to Make Binary Grid Palindromic II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an <code>m x n</code> binary matrix <code>grid</code>.</p>
<p>A row or column is considered <strong>palindromic</strong>  if its values read the same forward and backward.</p>
<p>You can <strong>flip</strong>  any number of cells in <code>grid</code> from <code>0</code> to <code>1</code>, or from <code>1</code> to <code>0</code>.</p>
<p>Return the <strong>minimum</strong>  number of cells that need to be flipped to make <strong>all</strong>  rows and columns <strong>palindromic</strong> , and the total number of <code>1</code>‘s in <code>grid</code> <strong>divisible</strong>  by <code>4</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0,0],[0,1,0],[0,0,1]]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img src="https://assets.leetcode.com/uploads/2024/08/01/image.png" style="width: 400px; height: 105px;">

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1],[0,1],[0,0]]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/07/08/screenshot-from-2024-07-09-01-37-48.png" style="width: 300px; height: 104px;">

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1],[1]]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/01/screenshot-from-2024-08-01-23-05-26.png" style="width: 200px; height: 70px;">

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m * n &lt;= 2 * 10^5</code></li>
<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 136</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minFlips</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="type">int</span> tmp = grid[i][j] + grid[m - <span class="number">1</span> - i][j] + grid[i][n - <span class="number">1</span> - j] +</span><br><span class="line">                          grid[m - <span class="number">1</span> - i][n - <span class="number">1</span> - j];</span><br><span class="line">                res += <span class="built_in">min</span>(tmp, <span class="number">4</span> - tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// the center point must be zero</span></span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span> &amp;&amp; n % <span class="number">2</span>) &#123;</span><br><span class="line">            res += grid[m / <span class="number">2</span>][n / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for the middle row and middle col, we sum</span></span><br><span class="line">        <span class="comment">// 1. the number of 1s when the numbers are the same</span></span><br><span class="line">        <span class="comment">// 2. the number of diff</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 1. if the number of 1s is divisible by 4, then we only</span></span><br><span class="line">        <span class="comment">// need to add diff, which means make all 1 zero</span></span><br><span class="line">        <span class="comment">// 2. if the number of 1s divide 4 == 2, then if we have diff</span></span><br><span class="line">        <span class="comment">// we can make 1 pair of diff to 1, otherwise, we need diff + 2</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>, diff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[m / <span class="number">2</span>][i] != grid[m / <span class="number">2</span>][n - <span class="number">1</span> - i]) &#123;</span><br><span class="line">                    diff++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count += <span class="number">2</span> * grid[m / <span class="number">2</span>][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][n / <span class="number">2</span>] != grid[m - <span class="number">1</span> - i][n / <span class="number">2</span>]) &#123;</span><br><span class="line">                    diff++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count += <span class="number">2</span> * grid[i][n / <span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            res += diff;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count % <span class="number">4</span> == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                res += diff;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3241. Time Taken to Mark All Nodes</title>
    <url>/2024/08/14/3241-Time-Taken-to-Mark-All-Nodes/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/time-taken-to-mark-all-nodes/description/">3241. Time Taken to Mark All Nodes</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There exists an <strong>undirected</strong>  tree with <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code>, where edges[i] &#x3D; [u<sub>i</sub>, v<sub>i</sub>] indicates that there is an edge between nodes u<sub>i</sub> and v<sub>i</sub> in the tree.</p>
<p>Initially, <strong>all</strong>  nodes are <strong>unmarked</strong> . For each node <code>i</code>:</p>
<ul>
<li>If <code>i</code> is odd, the node will get marked at time <code>x</code> if there is <strong>at least</strong>  one node adjacent to it which was marked at time <code>x - 1</code>.</li>
<li>If <code>i</code> is even, the node will get marked at time <code>x</code> if there is <strong>at least</strong>  one node adjacent to it which was marked at time <code>x - 2</code>.</li>
</ul>
<p>Return an array <code>times</code> where <code>times[i]</code> is the time when all nodes get marked in the tree, if you mark node <code>i</code> at time <code>t = 0</code>.</p>
<p><strong>Note</strong>  that the answer for each <code>times[i]</code> is <strong>independent</strong> , i.e. when you mark node <code>i</code> all other nodes are unmarked.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[0,2]]</span><br><span class="line"></span><br><span class="line">Output: [2,4,3]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/01/screenshot-2024-06-02-122236.png" style="width: 500px; height: 241px;">

<ul>
<li><p>For <code>i = 0</code>:</p>
</li>
<li><p>Node 1 is marked at <code>t = 1</code>, and Node 2 at <code>t = 2</code>.</p>
</li>
<li><p>For <code>i = 1</code>:</p>
</li>
<li><p>Node 0 is marked at <code>t = 2</code>, and Node 2 at <code>t = 4</code>.</p>
</li>
<li><p>For <code>i = 2</code>:</p>
</li>
<li><p>Node 0 is marked at <code>t = 2</code>, and Node 1 at <code>t = 3</code>.</p>
</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1]]</span><br><span class="line"></span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/01/screenshot-2024-06-02-122249.png" style="width: 500px; height: 257px;">

<ul>
<li><p>For <code>i = 0</code>:</p>
</li>
<li><p>Node 1 is marked at <code>t = 1</code>.</p>
</li>
<li><p>For <code>i = 1</code>:</p>
</li>
<li><p>Node 0 is marked at <code>t = 2</code>.</p>
</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges = [[2,4],[0,1],[2,3],[0,2]]</span><br><span class="line"></span><br><span class="line">Output: [4,6,3,5,5]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/03/screenshot-2024-06-03-210550.png" style="height: 266px; width: 500px;">

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 10^5</code></li>
<li><code>edges.length == n - 1</code></li>
<li><code>edges[i].length == 2</code></li>
<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>
<li>The input is generated such that <code>edges</code> represents a valid tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>reroot dp</li>
<li>Biweekly Contest 136</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; nodes;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">timeTaken</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dfs then reroot</span></span><br><span class="line">        <span class="type">int</span> n = edges.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        graph.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        nodes.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        res.<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">build</span>(edges);</span><br><span class="line">        <span class="comment">// what we get from dfs?</span></span><br><span class="line">        <span class="comment">//  after dfs, for each of the node in the graph</span></span><br><span class="line">        <span class="comment">//  we get &#123;mx, mx2, mv&#125;:</span></span><br><span class="line">        <span class="comment">//      mx: the time to mark the node&#x27;s children</span></span><br><span class="line">        <span class="comment">//      mx2: the time to mark the node&#x27;s children other than mv</span></span><br><span class="line">        <span class="comment">//      mv: the child which takes mx to mark</span></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// now how to reroot?</span></span><br><span class="line">        <span class="comment">//  for the root, we can just use mx</span></span><br><span class="line">        <span class="comment">//  for the nodes not root:</span></span><br><span class="line">        <span class="comment">//      the mx value can come either from downstream or upstream</span></span><br><span class="line">        <span class="comment">//      for downstream, the value is fixed at mx</span></span><br><span class="line">        <span class="comment">//      for upstream, the value can be either from upper, or from</span></span><br><span class="line">        <span class="comment">//      another branch of the parent node</span></span><br><span class="line">        <span class="built_in">reroot</span>(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reroot</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> origin, <span class="type">int</span> up)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mx = nodes[node][<span class="number">0</span>], mx2 = nodes[node][<span class="number">1</span>], mv = nodes[node][<span class="number">2</span>];</span><br><span class="line">        res[node] = <span class="built_in">max</span>(up, mx);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : graph[node]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != origin) &#123;</span><br><span class="line">                <span class="type">int</span> up1 = up + (node + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> up2 = (node + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">1</span> + ((v == mv) ? mx2 : mx);</span><br><span class="line">                <span class="built_in">reroot</span>(v, node, <span class="built_in">max</span>(up1, up2));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> origin)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">0</span>, mx2 = <span class="number">0</span>, mv = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : graph[node]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == origin) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> tmp = (v + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">1</span> + <span class="built_in">dfs</span>(v, node);</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; mx) &#123;</span><br><span class="line">                mx2 = mx;</span><br><span class="line">                mx = tmp;</span><br><span class="line">                mv = v;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp &gt; mx2) &#123;</span><br><span class="line">                mx2 = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nodes[node] = &#123;mx, mx2, mv&#125;;</span><br><span class="line">        <span class="keyword">return</span> mx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = e[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = e[<span class="number">1</span>];</span><br><span class="line">            graph[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            graph[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>3243. Shortest Distance After Road Addition Queries I</title>
    <url>/2024/08/14/3243-Shortest-Distance-After-Road-Addition-Queries-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/shortest-distance-after-road-addition-queries-i/description/">3243. Shortest Distance After Road Addition Queries I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer <code>n</code> and a 2D integer array <code>queries</code>.</p>
<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. Initially, there is a <strong>unidirectional</strong>  road from city <code>i</code> to city <code>i + 1</code> for all <code>0 &lt;= i &lt; n - 1</code>.</p>
<p>queries[i] &#x3D; [u<sub>i</sub>, v<sub>i</sub>] represents the addition of a new <strong>unidirectional</strong>  road from city u<sub>i</sub> to city v<sub>i</sub>. After each query, you need to find the <strong>length</strong>  of the <strong>shortest path</strong>  from city <code>0</code> to city <code>n - 1</code>.</p>
<p>Return an array <code>answer</code> where for each <code>i</code> in the range <code>[0, queries.length - 1]</code>, <code>answer[i]</code> is the length of the shortest path from city <code>0</code> to city <code>n - 1</code> after processing the <strong>first</strong> <code>i + 1</code> queries.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, queries = [[2,4],[0,2],[0,4]]</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image8.jpg" style="width: 350px; height: 60px;">

<p>After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image9.jpg" style="width: 350px; height: 60px;">

<p>After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image10.jpg" style="width: 350px; height: 96px;">

<p>After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, queries = [[0,3],[0,2]]</span><br><span class="line"></span><br><span class="line">Output: [1,1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image11.jpg" style="width: 300px; height: 70px;">

<p>After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image12.jpg" style="width: 300px; height: 70px;">

<p>After the addition of the road from 0 to 2, the length of the shortest path remains 1.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= n &lt;= 500</code></li>
<li><code>1 &lt;= queries.length &lt;= 500</code></li>
<li><code>queries[i].length == 2</code></li>
<li><code>0 &lt;= queries[i][0] &lt; queries[i][1] &lt; n</code></li>
<li><code>1 &lt; queries[i][1] - queries[i][0]</code></li>
<li>There are no repeated roads among the queries.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>BFS for each query</li>
<li>Weekly Contest 409</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">shortestDistanceAfterQueries</span><span class="params">(<span class="type">int</span> n,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        graph.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">                graph[i].<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; query : queries) &#123;</span><br><span class="line">            <span class="type">int</span> u = query[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = query[<span class="number">1</span>];</span><br><span class="line">            graph[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>);</span><br><span class="line">            q = <span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">            <span class="built_in">cut</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="type">bool</span> finished = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                cur++;</span><br><span class="line">                <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                    <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span> (u == n - <span class="number">1</span>) &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                        finished = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">cut</span>(u);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (finished) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : graph[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[v]) &#123;</span><br><span class="line">                visited[v] = <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Breadth-First Search</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>3249. Count the Number of Good Nodes</title>
    <url>/2024/08/15/3249-Count-the-Number-of-Good-Nodes/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-the-number-of-good-nodes/description/">3249. Count the Number of Good Nodes</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is an <strong>undirected</strong>  tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, and rooted at node <code>0</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code>, where edges[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] indicates that there is an edge between nodes a<sub>i</sub> and b<sub>i</sub> in the tree.</p>
<p>A node is <strong>good</strong>  if all the subtrees rooted at its children have the same size.</p>
<p>Return the number of <strong>good</strong>  nodes in the given tree.</p>
<p>A <strong>subtree</strong>  of <code>treeName</code> is a tree consisting of a node in <code>treeName</code> and all of its descendants.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]</span><br><span class="line"></span><br><span class="line">Output: 7</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/05/26/tree1.png" style="width: 360px; height: 158px;">

<p>All of the nodes of the given tree are good.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[1,2],[2,3],[3,4],[0,5],[1,6],[2,7],[3,8]]</span><br><span class="line"></span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/03/screenshot-2024-06-03-193552.png" style="width: 360px; height: 303px;">

<p>There are 6 good nodes in the given tree. They are colored in the image above.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[1,2],[1,3],[1,4],[0,5],[5,6],[6,7],[7,8],[0,9],[9,10],[9,12],[10,11]]</span><br><span class="line"></span><br><span class="line">Output: 12</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/08/rob.jpg" style="width: 450px; height: 277px;">

<p>All nodes except node 9 are good.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 10^5</code></li>
<li><code>edges.length == n - 1</code></li>
<li><code>edges[i].length == 2</code></li>
<li>0 &lt;&#x3D; a<sub>i</sub>, b<sub>i</sub> &lt; n</li>
<li>The input is generated such that <code>edges</code> represents a valid tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 410</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodNodes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = edges.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        graph.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        visited.<span class="built_in">resize</span>(n, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>];</span><br><span class="line">            graph[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            graph[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">            m[u]++;</span><br><span class="line">            m[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m[root] == <span class="number">0</span>) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[root] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> first = <span class="number">-1</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; u : graph[root]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[u]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            m[u]--;</span><br><span class="line">            <span class="type">int</span> cur = <span class="built_in">traverse</span>(u);</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="number">-1</span>) &#123;</span><br><span class="line">                first = cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (first != cur) &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>3244. Shortest Distance After Road Addition Queries II</title>
    <url>/2024/08/15/3244-Shortest-Distance-After-Road-Addition-Queries-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/shortest-distance-after-road-addition-queries-ii/description/">3244. Shortest Distance After Road Addition Queries II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer <code>n</code> and a 2D integer array <code>queries</code>.</p>
<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. Initially, there is a <strong>unidirectional</strong>  road from city <code>i</code> to city <code>i + 1</code> for all <code>0 &lt;= i &lt; n - 1</code>.</p>
<p>queries[i] &#x3D; [u<sub>i</sub>, v<sub>i</sub>] represents the addition of a new <strong>unidirectional</strong>  road from city u<sub>i</sub> to city v<sub>i</sub>. After each query, you need to find the <strong>length</strong>  of the <strong>shortest path</strong>  from city <code>0</code> to city <code>n - 1</code>.</p>
<p>There are no two queries such that <code>queries[i][0] &lt; queries[j][0] &lt; queries[i][1] &lt; queries[j][1]</code>.</p>
<p>Return an array <code>answer</code> where for each <code>i</code> in the range <code>[0, queries.length - 1]</code>, <code>answer[i]</code> is the length of the shortest path from city <code>0</code> to city <code>n - 1</code> after processing the <strong>first</strong> <code>i + 1</code> queries.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, queries = [[2,4],[0,2],[0,4]]</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image8.jpg" style="width: 350px; height: 60px;">

<p>After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image9.jpg" style="width: 350px; height: 60px;">

<p>After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image10.jpg" style="width: 350px; height: 96px;">

<p>After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, queries = [[0,3],[0,2]]</span><br><span class="line"></span><br><span class="line">Output: [1,1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image11.jpg" style="width: 300px; height: 70px;">

<p>After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/06/28/image12.jpg" style="width: 300px; height: 70px;">

<p>After the addition of the road from 0 to 2, the length of the shortest path remains 1.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= n &lt;= 10^5</code></li>
<li><code>1 &lt;= queries.length &lt;= 10^5</code></li>
<li><code>queries[i].length == 2</code></li>
<li><code>0 &lt;= queries[i][0] &lt; queries[i][1] &lt; n</code></li>
<li><code>1 &lt; queries[i][1] - queries[i][0]</code></li>
<li>There are no repeated roads among the queries.</li>
<li>There are no two queries such that <code>i != j</code> and <code>queries[i][0] &lt; queries[j][0] &lt; queries[i][1] &lt; queries[j][1]</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Union find</li>
<li>Weekly Contest 409</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">shortestDistanceAfterQueries</span><span class="params">(<span class="type">int</span> n,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        nodes.<span class="built_in">resize</span>(n - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nodes.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// use node[i] to mark the edge between i and i + 1</span></span><br><span class="line">            nodes[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> count = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> q : queries) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="built_in">find</span>(q[<span class="number">0</span>]), r = <span class="built_in">find</span>(q[<span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// merge all the way from l, l + 1, ... r - 1 -&gt; r</span></span><br><span class="line">            <span class="keyword">while</span> (l != r) &#123;</span><br><span class="line">                <span class="built_in">merge</span>(l, r);</span><br><span class="line">                count--;</span><br><span class="line">                l = <span class="built_in">find</span>(l + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; nodes[l] = r; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (node != nodes[node]) &#123;</span><br><span class="line">            nodes[node] = <span class="built_in">find</span>(nodes[node]);</span><br><span class="line">            node = nodes[node];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Graph</tag>
        <tag>Greedy</tag>
        <tag>Ordered Set</tag>
      </tags>
  </entry>
  <entry>
    <title>325. Maximum Size Subarray Sum Equals k</title>
    <url>/2023/11/13/325-Maximum-Size-Subarray-Sum-Equals-k/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/">325. Maximum Size Subarray Sum Equals k</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the maximum length of a</em><span data-keyword="subarray" class=" cursor-pointer relative text-dark-blue-s text-sm"></span> <em>subarray that sums to</em> <code>k</code>. If there is not one, return <code>0</code> instead.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,-1,5,-2,3], k = 3</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,-1,2,1], k = 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The subarray [-1, 2] sums to 1 and is the longest.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 2 * 10<sup>5</sup></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; k &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum + map</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArrayLen</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(size + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;<span class="type">long</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">count</span>((<span class="type">long</span>)preSum[i] - k)) &#123;</span><br><span class="line">                res = <span class="built_in">max</span>(res, i - m[preSum[i] - k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!m.<span class="built_in">count</span>(preSum[i])) &#123;</span><br><span class="line">                m[preSum[i]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>3250. Find the Count of Monotonic Pairs I</title>
    <url>/2024/08/15/3250-Find-the-Count-of-Monotonic-Pairs-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-count-of-monotonic-pairs-i/description/">3250. Find the Count of Monotonic Pairs I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of <strong>positive</strong>  integers <code>nums</code> of length <code>n</code>.</p>
<p>We call a pair of <strong>non-negative</strong>  integer arrays <code>(arr1, arr2)</code> <strong>monotonic</strong>  if:</p>
<ul>
<li>The lengths of both arrays are <code>n</code>.</li>
<li><code>arr1</code> is monotonically <strong>non-decreasing</strong> , in other words, <code>arr1[0] &lt;= arr1[1] &lt;= ... &lt;= arr1[n - 1]</code>.</li>
<li><code>arr2</code> is monotonically <strong>non-increasing</strong> , in other words, <code>arr2[0] &gt;= arr2[1] &gt;= ... &gt;= arr2[n - 1]</code>.</li>
<li><code>arr1[i] + arr2[i] == nums[i]</code> for all <code>0 &lt;= i &lt;= n - 1</code>.</li>
</ul>
<p>Return the count of <strong>monotonic</strong>  pairs.</p>
<p>Since the answer may be very large, return it <strong>modulo</strong>  <code>10^9 + 7</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,2]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The good pairs are:</p>
<ul>
<li><code>([0, 1, 1], [2, 2, 1])</code></li>
<li><code>([0, 1, 2], [2, 2, 0])</code></li>
<li><code>([0, 2, 2], [2, 1, 0])</code></li>
<li><code>([1, 2, 2], [1, 1, 0])</code></li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,5,5,5]</span><br><span class="line"></span><br><span class="line">Output: 126</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n == nums.length &lt;= 2000</code></li>
<li><code>1 &lt;= nums[i] &lt;= 50</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
<li>Weekly Contest 410</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countOfPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(n, <span class="built_in">map</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;());</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= nums[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">            res += <span class="built_in">traverse</span>(<span class="number">0</span>, i, nums);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dp[index][arr1]: at index, when the num1 is equal to arr1, the number of</span></span><br><span class="line">    <span class="comment">// valid monotonic pairs</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> arr1, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == nums.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[index].<span class="built_in">contains</span>(arr1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[index][arr1];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> arr2 = nums[index] - arr1;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">max</span>(arr1, nums[index + <span class="number">1</span>] - arr2); i &lt;= nums[index + <span class="number">1</span>];</span><br><span class="line">            i++) &#123;</span><br><span class="line">            res += <span class="built_in">traverse</span>(index + <span class="number">1</span>, i, nums);</span><br><span class="line">            res %= <span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[index][arr1] = (<span class="type">int</span>)res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Prefix Sum</tag>
        <tag>Math</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>3251. Find the Count of Monotonic Pairs II</title>
    <url>/2024/08/15/3251-Find-the-Count-of-Monotonic-Pairs-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-count-of-monotonic-pairs-ii/description/">3251. Find the Count of Monotonic Pairs II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of <strong>positive</strong>  integers <code>nums</code> of length <code>n</code>.</p>
<p>We call a pair of <strong>non-negative</strong>  integer arrays <code>(arr1, arr2)</code> <strong>monotonic</strong>  if:</p>
<ul>
<li>The lengths of both arrays are <code>n</code>.</li>
<li><code>arr1</code> is monotonically <strong>non-decreasing</strong> , in other words, <code>arr1[0] &lt;= arr1[1] &lt;= ... &lt;= arr1[n - 1]</code>.</li>
<li><code>arr2</code> is monotonically <strong>non-increasing</strong> , in other words, <code>arr2[0] &gt;= arr2[1] &gt;= ... &gt;= arr2[n - 1]</code>.</li>
<li><code>arr1[i] + arr2[i] == nums[i]</code> for all <code>0 &lt;= i &lt;= n - 1</code>.</li>
</ul>
<p>Return the count of <strong>monotonic</strong>  pairs.</p>
<p>Since the answer may be very large, return it <strong>modulo</strong>  <code>10^9 + 7</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,2]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The good pairs are:</p>
<ul>
<li><code>([0, 1, 1], [2, 2, 1])</code></li>
<li><code>([0, 1, 2], [2, 2, 0])</code></li>
<li><code>([0, 2, 2], [2, 1, 0])</code></li>
<li><code>([1, 2, 2], [1, 1, 0])</code></li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,5,5,5]</span><br><span class="line"></span><br><span class="line">Output: 126</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n == nums.length &lt;= 2000</code></li>
<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
<li>preSum</li>
<li>Weekly Contest 410</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// dp[index][arr1]: at index, when the num1 is equal to arr1, the number of</span></span><br><span class="line">    <span class="comment">// valid monotonic pairs</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countOfPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1001</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span>&gt; <span class="title">preSum</span><span class="params">(<span class="number">1002</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">// at index i, assume the number is j, the transition is:</span></span><br><span class="line">        <span class="comment">// at i + 1, the arr1 value k must be &gt;= j,</span></span><br><span class="line">        <span class="comment">// at i + 1, the arr2 value nums[i + 1] - k must be &lt;= nums[i] - j</span></span><br><span class="line">        <span class="comment">// and the arr2 value must be &gt;= 0</span></span><br><span class="line">        <span class="comment">// i.e 1. nums[i + 1] - k &lt;= nums[i] - j</span></span><br><span class="line">        <span class="comment">//     =&gt; k &gt;= nums[i + 1] - nums[i] + j</span></span><br><span class="line">        <span class="comment">//     2. nums[i + 1] - k &gt;= 0</span></span><br><span class="line">        <span class="comment">//     =&gt; k &lt;= nums[i + 1]</span></span><br><span class="line">        <span class="comment">// so the state transition of dp[i][j]</span></span><br><span class="line">        <span class="comment">//  dp[i][j] =</span></span><br><span class="line">        <span class="comment">//    sum(dp[i + 1][k]) for nums[i + 1] - nums[i] + j &lt; k &lt; nums[i + 1]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= nums[i]; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == nums.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> start = <span class="built_in">max</span>(nums[i + <span class="number">1</span>] - nums[i], <span class="number">0</span>) + j;</span><br><span class="line">                <span class="type">int</span> end = nums[i + <span class="number">1</span>];</span><br><span class="line">                dp[i][j] =</span><br><span class="line">                    end &gt;= start</span><br><span class="line">                        ? ((preSum[end + <span class="number">1</span>] - preSum[start]) % MOD + MOD) % MOD</span><br><span class="line">                        : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// dimension compression</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; dp[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                preSum[j + <span class="number">1</span>] = (preSum[j] + dp[i][j]) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            res = (res + dp[<span class="number">0</span>][i]) % <span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Prefix Sum</tag>
        <tag>Math</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>3255. Find the Power of K-Size Subarrays II</title>
    <url>/2024/10/03/3255-Find-the-Power-of-K-Size-Subarrays-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-power-of-k-size-subarrays-ii/">3255. Find the Power of K-Size Subarrays II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of integers <code>nums</code> of length <code>n</code> and a positive integer <code>k</code>.</p>
<p>The <strong>power</strong>  of an array is defined as:</p>
<ul>
<li>Its <strong>maximum</strong>  element if all of its elements are <strong>consecutive</strong>  and <strong>sorted</strong>  in <strong>ascending</strong>  order.</li>
<li>-1 otherwise.</li>
</ul>
<p>You need to find the <strong>power</strong>  of all subarrays of <code>nums</code> of size <code>k</code>.</p>
<p>Return an integer array <code>results</code> of size <code>n - k + 1</code>, where <code>results[i]</code> is the power of <code>nums[i..(i + k - 1)]</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,3,2,5], k = 3</span><br><span class="line"></span><br><span class="line">Output: [3,4,-1,-1,-1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>There are 5 subarrays of <code>nums</code> of size 3:</p>
<ul>
<li><code>[1, 2, 3]</code> with the maximum element 3.</li>
<li><code>[2, 3, 4]</code> with the maximum element 4.</li>
<li><code>[3, 4, 3]</code> whose elements are <strong>not</strong>  consecutive.</li>
<li><code>[4, 3, 2]</code> whose elements are <strong>not</strong>  sorted.</li>
<li><code>[3, 2, 5]</code> whose elements are <strong>not</strong>  consecutive.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,2,2,2,2], k = 4</span><br><span class="line"></span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,3,2,3,2], k = 2</span><br><span class="line"></span><br><span class="line">Output: [-1,3,-1,3,-1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n == nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^6</code></li>
<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Sliding window</li>
<li>The same as 3254</li>
<li>Biweekly Contest 137</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">resultsArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> prev = <span class="number">0</span>, curLen = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prev == <span class="number">-1</span> || (prev == nums[right] - <span class="number">1</span>)) &#123;</span><br><span class="line">                curLen++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curLen = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curLen &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(nums[right]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = nums[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>3254. Find the Power of K-Size Subarrays I</title>
    <url>/2024/10/03/3254-Find-the-Power-of-K-Size-Subarrays-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-power-of-k-size-subarrays-i/description/">3254. Find the Power of K-Size Subarrays I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of integers <code>nums</code> of length <code>n</code> and a positive integer <code>k</code>.</p>
<p>The <strong>power</strong>  of an array is defined as:</p>
<ul>
<li>Its <strong>maximum</strong>  element if all of its elements are <strong>consecutive</strong>  and <strong>sorted</strong>  in <strong>ascending</strong>  order.</li>
<li>-1 otherwise.</li>
</ul>
<p>You need to find the <strong>power</strong>  of all subarrays of <code>nums</code> of size <code>k</code>.</p>
<p>Return an integer array <code>results</code> of size <code>n - k + 1</code>, where <code>results[i]</code> is the power of <code>nums[i..(i + k - 1)]</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,3,2,5], k = 3</span><br><span class="line"></span><br><span class="line">Output: [3,4,-1,-1,-1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>There are 5 subarrays of <code>nums</code> of size 3:</p>
<ul>
<li><code>[1, 2, 3]</code> with the maximum element 3.</li>
<li><code>[2, 3, 4]</code> with the maximum element 4.</li>
<li><code>[3, 4, 3]</code> whose elements are <strong>not</strong>  consecutive.</li>
<li><code>[4, 3, 2]</code> whose elements are <strong>not</strong>  sorted.</li>
<li><code>[3, 2, 5]</code> whose elements are <strong>not</strong>  consecutive.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,2,2,2,2], k = 4</span><br><span class="line"></span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,3,2,3,2], k = 2</span><br><span class="line"></span><br><span class="line">Output: [-1,3,-1,3,-1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n == nums.length &lt;= 500</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>
<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Sliding window</li>
<li>The same as 3255</li>
<li>Biweekly Contest 137</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">resultsArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> prev = <span class="number">0</span>, tmp = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prev == <span class="number">-1</span> || (prev == nums[right] - <span class="number">1</span>)) &#123;</span><br><span class="line">                tmp++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = nums[right];</span><br><span class="line">            <span class="keyword">if</span> (right &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(prev);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>3257. Maximum Value Sum by Placing Three Rooks II</title>
    <url>/2024/10/03/3257-Maximum-Value-Sum-by-Placing-Three-Rooks-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-value-sum-by-placing-three-rooks-ii/description/">3257. Maximum Value Sum by Placing Three Rooks II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a <code>m x n</code> 2D array <code>board</code> representing a chessboard, where <code>board[i][j]</code> represents the <strong>value</strong>  of the cell <code>(i, j)</code>.</p>
<p>Rooks in the <strong>same</strong>  row or column <strong>attack</strong>  each other. You need to place three rooks on the chessboard such that the rooks <strong>do not</strong>  <strong>attack</strong>  each other.</p>
<p>Return the <strong>maximum</strong>  sum of the cell <strong>values</strong>  on which the rooks are placed.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: board = [[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/08/rooks2.png" style="width: 294px; height: 450px;">

<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 3)</code>, and <code>(2, 1)</code> for a sum of <code>1 + 1 + 2 = 4</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: board = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line"></span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can place the rooks in the cells <code>(0, 0)</code>, <code>(1, 1)</code>, and <code>(2, 2)</code> for a sum of <code>1 + 5 + 9 = 15</code>.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: board = [[1,1,1],[1,1,1],[1,1,1]]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 1)</code>, and <code>(2, 0)</code> for a sum of <code>1 + 1 + 1 = 3</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= m == board.length &lt;= 500</code></li>
<li><code>3 &lt;= n == board[i].length &lt;= 500</code></li>
<li><code>-10^9 &lt;= board[i][j] &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>iterate the mid row</li>
<li>preSum and suffixSum</li>
<li>Biweekly Contest 137</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maximumValueSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// the pre, suf we need:</span></span><br><span class="line">        <span class="comment">//  when we reach a specific line, we want to know the top 3 biggest</span></span><br><span class="line">        <span class="comment">//  numbers in different colomn, so we need an array size of</span></span><br><span class="line">        <span class="comment">//  board.size(), with 3 pairs</span></span><br><span class="line">        vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; pre, suf;</span><br><span class="line">        <span class="type">int</span> m = board.<span class="built_in">size</span>(), n = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        suf.<span class="built_in">resize</span>(m, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;(<span class="number">3</span>, <span class="built_in">make_pair</span>(INT_MIN, <span class="number">-1</span>)));</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mx</span><span class="params">(<span class="number">3</span>, INT_MIN)</span>, <span class="title">c</span><span class="params">(<span class="number">3</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">update</span>(mx, c, i, board);</span><br><span class="line">            suf[i][<span class="number">0</span>] = <span class="built_in">make_pair</span>(mx[<span class="number">0</span>], c[<span class="number">0</span>]);</span><br><span class="line">            suf[i][<span class="number">1</span>] = <span class="built_in">make_pair</span>(mx[<span class="number">1</span>], c[<span class="number">1</span>]);</span><br><span class="line">            suf[i][<span class="number">2</span>] = <span class="built_in">make_pair</span>(mx[<span class="number">2</span>], c[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fill</span>(mx.<span class="built_in">begin</span>(), mx.<span class="built_in">end</span>(), INT_MIN);</span><br><span class="line">        <span class="built_in">fill</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = LLONG_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="comment">// now, iterate through the pre, suf</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (c[k] == j) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="number">3</span>; l++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (suf[i + <span class="number">1</span>][l].second != j &amp;&amp;</span><br><span class="line">                                suf[i + <span class="number">1</span>][l].second != c[k]) &#123;</span><br><span class="line">                                <span class="type">long</span> <span class="type">long</span> tmp = (<span class="type">long</span> <span class="type">long</span>)suf[i + <span class="number">1</span>][l].first +</span><br><span class="line">                                                board[i][j] + mx[k];</span><br><span class="line">                                res = <span class="built_in">max</span>(tmp, res);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">update</span>(mx, c, i, board);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; m, vector&lt;<span class="type">int</span>&gt;&amp; c, <span class="type">int</span> i,</span></span></span><br><span class="line"><span class="params"><span class="function">                vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] &gt; m[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j != c[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j != c[<span class="number">1</span>]) &#123;</span><br><span class="line">                        m[<span class="number">2</span>] = m[<span class="number">1</span>];</span><br><span class="line">                        c[<span class="number">2</span>] = c[<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    m[<span class="number">1</span>] = m[<span class="number">0</span>];</span><br><span class="line">                    c[<span class="number">1</span>] = c[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// if j is equal to c[0], then we just need to update the m[0]</span></span><br><span class="line">                <span class="comment">// and c[0]</span></span><br><span class="line">                m[<span class="number">0</span>] = board[i][j];</span><br><span class="line">                c[<span class="number">0</span>] = j;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] &gt; m[<span class="number">1</span>] &amp;&amp; j != c[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j != c[<span class="number">1</span>]) &#123;</span><br><span class="line">                    m[<span class="number">2</span>] = m[<span class="number">1</span>];</span><br><span class="line">                    c[<span class="number">2</span>] = c[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                m[<span class="number">1</span>] = board[i][j];</span><br><span class="line">                c[<span class="number">1</span>] = j;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] &gt; m[<span class="number">2</span>] &amp;&amp; j != c[<span class="number">0</span>] &amp;&amp; j != c[<span class="number">1</span>]) &#123;</span><br><span class="line">                m[<span class="number">2</span>] = board[i][j];</span><br><span class="line">                c[<span class="number">2</span>] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Matrix</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>3258. Count Substrings That Satisfy K-Constraint I</title>
    <url>/2024/10/03/3258-Count-Substrings-That-Satisfy-K-Constraint-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-substrings-that-satisfy-k-constraint-i/description/">3258. Count Substrings That Satisfy K-Constraint I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a <strong>binary</strong>  string <code>s</code> and an integer <code>k</code>.</p>
<p>A <strong>binary string</strong>  satisfies the <strong>k-constraint</strong>  if <strong>either</strong>  of the following conditions holds:</p>
<ul>
<li>The number of <code>0</code>‘s in the string is at most <code>k</code>.</li>
<li>The number of <code>1</code>‘s in the string is at most <code>k</code>.</li>
</ul>
<p>Return an integer denoting the number of substrings of <code>s</code> that satisfy the <strong>k-constraint</strong> .</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;10101&quot;</span>, k = 1</span><br><span class="line"></span><br><span class="line">Output: 12</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Every substring of <code>s</code> except the substrings <code>&quot;1010&quot;</code>, <code>&quot;10101&quot;</code>, and <code>&quot;0101&quot;</code> satisfies the k-constraint.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;1010101&quot;</span>, k = 2</span><br><span class="line"></span><br><span class="line">Output: 25</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Every substring of <code>s</code> except the substrings with a length greater than 5 satisfies the k-constraint.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;11111&quot;</span>, k = 1</span><br><span class="line"></span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>All substrings of <code>s</code> satisfy the k-constraint.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 50</code></li>
<li><code>1 &lt;= k &lt;= s.length</code></li>
<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
<li>Weekly Contest 411</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countKConstraintSubstrings</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, left = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">// the meaning of sliding window: all the valid substring ending with s[right]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> right = <span class="number">0</span>; right &lt; s.<span class="built_in">size</span>(); right++) &#123;</span><br><span class="line">            <span class="type">int</span> val = s[right] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            count[val % <span class="number">2</span>]++;</span><br><span class="line">            <span class="keyword">while</span> (count[<span class="number">0</span>] &gt; k &amp;&amp; count[<span class="number">1</span>] &gt; k) &#123;</span><br><span class="line">                val = s[left] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                count[val % <span class="number">2</span>]--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += right + <span class="number">1</span> - left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>3259. Maximum Energy Boost From Two Drinks</title>
    <url>/2024/10/03/3259-Maximum-Energy-Boost-From-Two-Drinks/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-energy-boost-from-two-drinks/description/">3259. Maximum Energy Boost From Two Drinks</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two integer arrays <code>energyDrinkA</code> and <code>energyDrinkB</code> of the same length <code>n</code> by a futuristic sports scientist. These arrays represent the energy boosts per hour provided by two different energy drinks, A and B, respectively.</p>
<p>You want to maximize your total energy boost by drinking one energy drink per hour. However, if you want to switch from consuming one energy drink to the other, you need to wait for one hour to cleanse your system (meaning you won’t get any energy boost in that hour).</p>
<p>Return the <strong>maximum</strong>  total energy boost you can gain in the next <code>n</code> hours.</p>
<p><strong>Note</strong>  that you can start consuming either of the two energy drinks.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: energyDrinkA = [1,3,1], energyDrinkB = [3,1,1]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>To gain an energy boost of 5, drink only the energy drink A (or only B).</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: energyDrinkA = [4,1,1], energyDrinkB = [1,1,3]</span><br><span class="line"></span><br><span class="line">Output: 7</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>To gain an energy boost of 7:</p>
<ul>
<li>Drink the energy drink A for the first hour.</li>
<li>Switch to the energy drink B and we lose the energy boost of the second hour.</li>
<li>Gain the energy boost of the drink B in the third hour.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == energyDrinkA.length == energyDrinkB.length</code></li>
<li><code>3 &lt;= n &lt;= 10^5</code></li>
<li><code>1 &lt;= energyDrinkA[i], energyDrinkB[i] &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
<li>Weekly Contest 411</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maxEnergyBoost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; energyDrinkA,</span></span></span><br><span class="line"><span class="params"><span class="function">                             vector&lt;<span class="type">int</span>&gt;&amp; energyDrinkB)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = energyDrinkA.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(<span class="number">2</span>, <span class="number">-1</span>));</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="built_in">max</span>(<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, energyDrinkA, energyDrinkB),</span><br><span class="line">                            <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">1</span>, energyDrinkA, energyDrinkB));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> cur, vector&lt;<span class="type">int</span>&gt;&amp; energyDrinkA,</span></span></span><br><span class="line"><span class="params"><span class="function">                  vector&lt;<span class="type">int</span>&gt;&amp; energyDrinkB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= energyDrinkA.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[index][cur] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[index][cur];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = cur ? energyDrinkA[index] : energyDrinkB[index];</span><br><span class="line">        res += <span class="built_in">max</span>(<span class="built_in">dfs</span>(index + <span class="number">1</span>, cur, energyDrinkA, energyDrinkB),</span><br><span class="line">                   <span class="built_in">dfs</span>(index + <span class="number">2</span>, <span class="number">1</span> - cur, energyDrinkA, energyDrinkB));</span><br><span class="line">        dp[index][cur] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3260. Find the Largest Palindrome Divisible by K</title>
    <url>/2024/10/03/3260-Find-the-Largest-Palindrome-Divisible-by-K/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-largest-palindrome-divisible-by-k/description/">3260. Find the Largest Palindrome Divisible by K</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two <strong>positive</strong>  integers <code>n</code> and <code>k</code>.</p>
<p>An integer <code>x</code> is called <strong>k-palindromic</strong>  if:</p>
<ul>
<li><code>x</code> is a palindrome.</li>
<li><code>x</code> is divisible by <code>k</code>.</li>
</ul>
<p>Return the <strong>largest</strong> integer having <code>n</code> digits (as a string) that is <strong>k-palindromic</strong> .</p>
<p><strong>Note</strong>  that the integer must <strong>not</strong>  have leading zeros.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, k = 5</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;595&quot;</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>595 is the largest k-palindromic integer with 3 digits.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1, k = 4</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;8&quot;</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>4 and 8 are the only k-palindromic integers with 1 digit.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, k = 6</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;89898&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
<li><code>1 &lt;= k &lt;= 9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
<li>Weekly Contest 411</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]: when we are handling the ith digit</span></span><br><span class="line">    <span class="comment">// (also n - 1 - i), with remainder = j, can we form the number successfully</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; div;</span><br><span class="line">    <span class="type">int</span> n_, k_, h_;</span><br><span class="line">    string res;</span><br><span class="line">    <span class="function">string <span class="title">largestPalindrome</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        h_ = (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        n_ = n;</span><br><span class="line">        k_ = k;</span><br><span class="line">        dp.<span class="built_in">resize</span>(h_, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(k, <span class="number">-1</span>));</span><br><span class="line">        div.<span class="built_in">resize</span>(n, <span class="number">1</span>);</span><br><span class="line">        res = <span class="built_in">string</span>(n, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            div[i] = div[i - <span class="number">1</span>] * <span class="number">10</span> % k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= h_) &#123;</span><br><span class="line">            <span class="keyword">return</span> j == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> ans = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">9</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">            <span class="type">int</span> j2 = j;</span><br><span class="line">            <span class="keyword">if</span> (n_ % <span class="number">2</span> &amp;&amp; i == h_ - <span class="number">1</span>) &#123;</span><br><span class="line">                j2 = (j2 + k * div[i]) % k_;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j2 = (j2 + k * div[i] + k * div[n_ - <span class="number">1</span> - i]) % k_;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(i + <span class="number">1</span>, j2)) &#123;</span><br><span class="line">                res[i] = k + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                res[n_ - <span class="number">1</span> - i] = k + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                ans = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][j] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
        <tag>Number Theory</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3261. Count Substrings That Satisfy K-Constraint II</title>
    <url>/2024/10/04/3261-Count-Substrings-That-Satisfy-K-Constraint-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-substrings-that-satisfy-k-constraint-ii/description/">3261. Count Substrings That Satisfy K-Constraint II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a <strong>binary</strong>  string <code>s</code> and an integer <code>k</code>.</p>
<p>You are also given a 2D integer array <code>queries</code>, where queries[i] &#x3D; [l<sub>i</sub>, r<sub>i</sub>].</p>
<p>A <strong>binary string</strong>  satisfies the <strong>k-constraint</strong>  if <strong>either</strong>  of the following conditions holds:</p>
<ul>
<li>The number of <code>0</code>‘s in the string is at most <code>k</code>.</li>
<li>The number of <code>1</code>‘s in the string is at most <code>k</code>.</li>
</ul>
<p>Return an integer array <code>answer</code>, where <code>answer[i]</code> is the number of substrings of s[l<sub>i</sub>..r<sub>i</sub>] that satisfy the <strong>k-constraint</strong> .</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;0001111&quot;</span>, k = 2, queries = [[0,6]]</span><br><span class="line"></span><br><span class="line">Output: [26]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>For the query <code>[0, 6]</code>, all substrings of <code>s[0..6] = &quot;0001111&quot;</code> satisfy the k-constraint except for the substrings <code>s[0..5] = &quot;000111&quot;</code> and <code>s[0..6] = &quot;0001111&quot;</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;010101&quot;</span>, k = 1, queries = [[0,5],[1,4],[2,3]]</span><br><span class="line"></span><br><span class="line">Output: [15,9,3]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The substrings of <code>s</code> with a length greater than 3 do not satisfy the k-constraint.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 10^5</code></li>
<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>
<li><code>1 &lt;= k &lt;= s.length</code></li>
<li><code>1 &lt;= queries.length &lt;= 10^5</code></li>
<li>queries[i] &#x3D;&#x3D; [l<sub>i</sub>, r<sub>i</sub>]</li>
<li>0 &lt;&#x3D; l<sub>i</sub> &lt;&#x3D; r<sub>i</sub> &lt; s.length</li>
<li>All queries are distinct.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window + preSum + binarySearch</li>
<li>Weekly Contest 411</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">countKConstraintSubstrings</span><span class="params">(string s, <span class="type">int</span> k,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                 vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span>, leftIdx</span>;</span><br><span class="line">        <span class="comment">// first step, for each right index, find their left index</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> right = <span class="number">0</span>; right &lt; s.<span class="built_in">size</span>(); right++) &#123;</span><br><span class="line">            <span class="type">int</span> val = s[right] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            count[val % <span class="number">2</span>]++;</span><br><span class="line">            <span class="keyword">while</span> (count[<span class="number">0</span>] &gt; k &amp;&amp; count[<span class="number">1</span>] &gt; k) &#123;</span><br><span class="line">                val = s[left] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                count[val % <span class="number">2</span>]--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            leftIdx.<span class="built_in">push_back</span>(left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// the meaning of preSum[i]: starting from 0, how many valid substrings until index i</span></span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; preSum;</span><br><span class="line">        preSum.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            preSum.<span class="built_in">push_back</span>(preSum.<span class="built_in">back</span>() + i - leftIdx[i] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> q : queries) &#123;</span><br><span class="line">            <span class="comment">// what&#x27;s the remaining question here:</span></span><br><span class="line">            <span class="comment">//  we need to find the index i between l and r such that leftIdx[i] &gt; l</span></span><br><span class="line">            <span class="comment">//  special case: if leftIdx[r] is &lt;= l, then all substrings are valid</span></span><br><span class="line">            <span class="type">int</span> l = q[<span class="number">0</span>], r = q[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">                <span class="keyword">if</span> (leftIdx[mid] &gt; q[<span class="number">0</span>]) &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// now l points to the boundary, on the left side of the boundary,</span></span><br><span class="line">            <span class="comment">// the i has leftIdx[i] &lt; l, so all substrings are valid, on the right side</span></span><br><span class="line">            <span class="comment">// we can use the preSum to calculate</span></span><br><span class="line">            <span class="type">long</span> first = l - q[<span class="number">0</span>];</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> tmp =</span><br><span class="line">                (first + <span class="number">1</span>) * first / <span class="number">2</span> + preSum[q[<span class="number">1</span>] + <span class="number">1</span>] - preSum[l];</span><br><span class="line">            res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>String</tag>
        <tag>Binary Search</tag>
        <tag>Sliding Window</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>3264. Final Array State After K Multiplication Operations I</title>
    <url>/2024/10/06/3264-Final-Array-State-After-K-Multiplication-Operations-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/final-array-state-after-k-multiplication-operations-i/description/">3264. Final Array State After K Multiplication Operations I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code>, an integer <code>k</code>, and an integer <code>multiplier</code>.</p>
<p>You need to perform <code>k</code> operations on <code>nums</code>. In each operation:</p>
<ul>
<li>Find the <strong>minimum</strong>  value <code>x</code> in <code>nums</code>. If there are multiple occurrences of the minimum value, select the one that appears <strong>first</strong> .</li>
<li>Replace the selected minimum value <code>x</code> with <code>x * multiplier</code>.</li>
</ul>
<p>Return an integer array denoting the final state of <code>nums</code> after performing all <code>k</code> operations.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,1,3,5,6], k = 5, multiplier = 2</span><br><span class="line"></span><br><span class="line">Output: [8,4,6,5,6]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<table><tbody><tr><th>Operation</th><th>Result</th></tr><tr><td>After operation 1</td><td>[2, 2, 3, 5, 6]</td></tr><tr><td>After operation 2</td><td>[4, 2, 3, 5, 6]</td></tr><tr><td>After operation 3</td><td>[4, 4, 3, 5, 6]</td></tr><tr><td>After operation 4</td><td>[4, 4, 6, 5, 6]</td></tr><tr><td>After operation 5</td><td>[8, 4, 6, 5, 6]</td></tr></tbody></table>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2], k = 3, multiplier = 4</span><br><span class="line"></span><br><span class="line">Output: [16,8]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<table><tbody><tr><th>Operation</th><th>Result</th></tr><tr><td>After operation 1</td><td>[4, 2]</td></tr><tr><td>After operation 2</td><td>[4, 8]</td></tr><tr><td>After operation 3</td><td>[16, 8]</td></tr></tbody></table>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
<li><code>1 &lt;= k &lt;= 10</code></li>
<li><code>1 &lt;= multiplier &lt;= 5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
<li>Weekly Contest 412</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getFinalState</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> multiplier)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;</span><br><span class="line">            pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;nums[i], i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> v = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;v[<span class="number">0</span>] * multiplier, v[<span class="number">1</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> v = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> idx = v[<span class="number">1</span>], val = v[<span class="number">0</span>];</span><br><span class="line">            res[idx] = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3265. Count Almost Equal Pairs I</title>
    <url>/2024/10/06/3265-Count-Almost-Equal-Pairs-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-almost-equal-pairs-i/description/">3265. Count Almost Equal Pairs I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>nums</code> consisting of positive integers.</p>
<p>We call two integers <code>x</code> and <code>y</code> in this problem <strong>almost equal</strong>  if both integers can become equal after performing the following operation <strong>at most once</strong> :</p>
<ul>
<li>Choose <strong>either</strong>  <code>x</code> or <code>y</code> and swap any two digits within the chosen number.</li>
</ul>
<p>Return the number of indices <code>i</code> and <code>j</code> in <code>nums</code> where <code>i &lt; j</code> such that <code>nums[i]</code> and <code>nums[j]</code> are <strong>almost equal</strong> .</p>
<p><strong>Note</strong>  that it is allowed for an integer to have leading zeros after performing an operation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,12,30,17,21]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The almost equal pairs of elements are:</p>
<ul>
<li>3 and 30. By swapping 3 and 0 in 30, you get 3.</li>
<li>12 and 21. By swapping 1 and 2 in 12, you get 21.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,1,1,1]</span><br><span class="line"></span><br><span class="line">Output: 10</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Every two elements in the array are almost equal.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [123,231]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We cannot swap any two digits of 123 or 231 to reach the other.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 100</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^6</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 412</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<p>My solutino:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">almostEqual</span>(nums[i], nums[j])) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">almostEqual</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> diff1 = <span class="number">-1</span>, diff2 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span> || y != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> a = x % <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> b = y % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">                <span class="keyword">if</span> (diff1 == <span class="number">-1</span>) &#123;</span><br><span class="line">                    diff1 = a;</span><br><span class="line">                    diff2 = b;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(diff1 == b &amp;&amp; diff2 == a)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    diff1 = <span class="number">-2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            y /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diff1 &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Apply the solution for t4:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            string numStr = <span class="built_in">to_string</span>(num);</span><br><span class="line">            <span class="type">int</span> n = numStr.<span class="built_in">size</span>();</span><br><span class="line">            unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">            s.<span class="built_in">insert</span>(num);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="type">char</span> tmp = numStr[i];</span><br><span class="line">                    numStr[i] = numStr[j];</span><br><span class="line">                    numStr[j] = tmp;</span><br><span class="line">                    s.<span class="built_in">insert</span>(<span class="built_in">stoi</span>(numStr));</span><br><span class="line">                    numStr[j] = numStr[i];</span><br><span class="line">                    numStr[i] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> val : s) &#123;</span><br><span class="line">                res += m[val];</span><br><span class="line">            &#125;</span><br><span class="line">            m[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Sorting</tag>
        <tag>Counting</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>3266. Final Array State After K Multiplication Operations II</title>
    <url>/2024/10/06/3266-Final-Array-State-After-K-Multiplication-Operations-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/final-array-state-after-k-multiplication-operations-ii/description/">3266. Final Array State After K Multiplication Operations II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code>, an integer <code>k</code>, and an integer <code>multiplier</code>.</p>
<p>You need to perform <code>k</code> operations on <code>nums</code>. In each operation:</p>
<ul>
<li>Find the <strong>minimum</strong>  value <code>x</code> in <code>nums</code>. If there are multiple occurrences of the minimum value, select the one that appears <strong>first</strong> .</li>
<li>Replace the selected minimum value <code>x</code> with <code>x * multiplier</code>.</li>
</ul>
<p>After the <code>k</code> operations, apply <strong>modulo</strong>  <code>10^9 + 7</code> to every value in <code>nums</code>.</p>
<p>Return an integer array denoting the final state of <code>nums</code> after performing all <code>k</code> operations and then applying the modulo.</p>
<p><strong>Example 1:</strong></p>
<div class="example-block">
Input: nums = [2,1,3,5,6], k = 5, multiplier = 2

<p>Output: [8,4,6,5,6]</p>
<p>Explanation:</p>
<table><tbody><tr><th>Operation</th><th>Result</th></tr><tr><td>After operation 1</td><td>[2, 2, 3, 5, 6]</td></tr><tr><td>After operation 2</td><td>[4, 2, 3, 5, 6]</td></tr><tr><td>After operation 3</td><td>[4, 4, 3, 5, 6]</td></tr><tr><td>After operation 4</td><td>[4, 4, 6, 5, 6]</td></tr><tr><td>After operation 5</td><td>[8, 4, 6, 5, 6]</td></tr><tr><td>After applying modulo</td><td>[8, 4, 6, 5, 6]</td></tr></tbody></table>

<p><strong>Example 2:</strong></p>
<div class="example-block">
Input: nums = [100000,2000], k = 2, multiplier = 1000000

<p>Output: [999999307,999999993]</p>
<p>Explanation:</p>
<table><tbody><tr><th>Operation</th><th>Result</th></tr><tr><td>After operation 1</td><td>[100000, 2000000000]</td></tr><tr><td>After operation 2</td><td>[100000000000, 2000000000]</td></tr><tr><td>After applying modulo</td><td>[999999307, 999999993]</td></tr></tbody></table>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^4</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>1 &lt;= k &lt;= 10^9</code></li>
<li><code>1 &lt;= multiplier &lt;= 10^6</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>find the cycle</li>
<li>fast power</li>
<li>Weekly Contest 412</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getFinalState</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> multiplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (multiplier == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">long</span>&gt;, vector&lt;vector&lt;<span class="type">long</span>&gt;&gt;,</span><br><span class="line">                       greater&lt;vector&lt;<span class="type">long</span>&gt;&gt;&gt;</span><br><span class="line">            pq;</span><br><span class="line">        <span class="type">int</span> maxVal = INT_MIN, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            maxVal = <span class="built_in">max</span>(maxVal, nums[i]);</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;nums[i], i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> v = pq.<span class="built_in">top</span>();</span><br><span class="line">            <span class="type">long</span> newVal = v[<span class="number">0</span>] * multiplier;</span><br><span class="line">            <span class="comment">// at this moment, the order of the numbers has been fixed,</span></span><br><span class="line">            <span class="comment">// if the remaining number of multiplication is mutiple of n</span></span><br><span class="line">            <span class="comment">// then each item would get the same number of multiplication</span></span><br><span class="line">            <span class="keyword">if</span> (newVal &gt; maxVal) &#123;</span><br><span class="line">                <span class="comment">// the number of operation we have done: i</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;newVal, v[<span class="number">1</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// the remaining number of operation: k - i</span></span><br><span class="line">        <span class="comment">// every item can get (k - i) / n operations</span></span><br><span class="line">        <span class="comment">// the top (k - i) % n items can get (k - i) / n + 1 operations</span></span><br><span class="line">        <span class="type">int</span> numOps = (k - i) / n, residue = (k - i) % n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        <span class="type">long</span> mul = <span class="built_in">fast_exp</span>(multiplier, numOps);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> v = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> idx = v[<span class="number">1</span>];</span><br><span class="line">            <span class="type">long</span> val = v[<span class="number">0</span>];</span><br><span class="line">            val = (val * mul) % MOD;</span><br><span class="line">            <span class="keyword">if</span> (residue &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                val = (val * multiplier) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            residue--;</span><br><span class="line">            res[idx] = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fast_exp</span><span class="params">(<span class="type">long</span> mul, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">                res = (res * mul) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            mul = (mul * mul) % MOD;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3267. Count Almost Equal Pairs II</title>
    <url>/2024/10/06/3267-Count-Almost-Equal-Pairs-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-almost-equal-pairs-ii/description/">3267. Count Almost Equal Pairs II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><strong>Attention</strong> : In this version, the number of operations that can be performed, has been increased to <strong>twice</strong> .</p>
<p>You are given an array <code>nums</code> consisting of positive integers.</p>
<p>We call two integers <code>x</code> and <code>y</code> <strong>almost equal</strong>  if both integers can become equal after performing the following operation <strong>at most twice</strong> :</p>
<ul>
<li>Choose <strong>either</strong>  <code>x</code> or <code>y</code> and swap any two digits within the chosen number.</li>
</ul>
<p>Return the number of indices <code>i</code> and <code>j</code> in <code>nums</code> where <code>i &lt; j</code> such that <code>nums[i]</code> and <code>nums[j]</code> are <strong>almost equal</strong> .</p>
<p><strong>Note</strong>  that it is allowed for an integer to have leading zeros after performing an operation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1023,2310,2130,213]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The almost equal pairs of elements are:</p>
<ul>
<li>1023 and 2310. By swapping the digits 1 and 2, and then the digits 0 and 3 in 1023, you get 2310.</li>
<li>1023 and 213. By swapping the digits 1 and 0, and then the digits 1 and 2 in 1023, you get 0213, which is 213.</li>
<li>2310 and 213. By swapping the digits 2 and 0, and then the digits 3 and 2 in 2310, you get 0213, which is 213.</li>
<li>2310 and 2130. By swapping the digits 3 and 1 in 2310, you get 2130.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,10,100]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The almost equal pairs of elements are:</p>
<ul>
<li>1 and 10. By swapping the digits 1 and 0 in 10, you get 01 which is 1.</li>
<li>1 and 100. By swapping the second 0 with the digit 1 in 100, you get 001, which is 1.</li>
<li>10 and 100. By swapping the first 0 with the digit 1 in 100, you get 010, which is 10.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 5000</code></li>
<li><code>1 &lt;= nums[i] &lt; 10^7</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>brutal force</li>
<li>Weekly Contest 412</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; count;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">            s.<span class="built_in">insert</span>(num);</span><br><span class="line">            string numStr = <span class="built_in">to_string</span>(num);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numStr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; numStr.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                    <span class="type">char</span> tmp = numStr[i];</span><br><span class="line">                    numStr[i] = numStr[j];</span><br><span class="line">                    numStr[j] = tmp;</span><br><span class="line">                    s.<span class="built_in">insert</span>(<span class="built_in">stoi</span>(numStr));</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> p = i + <span class="number">1</span>; p &lt; numStr.<span class="built_in">size</span>(); p++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> q = p + <span class="number">1</span>; q &lt; numStr.<span class="built_in">size</span>(); q++) &#123;</span><br><span class="line">                            <span class="type">char</span> tmp1 = numStr[p];</span><br><span class="line">                            numStr[p] = numStr[q];</span><br><span class="line">                            numStr[q] = tmp1;</span><br><span class="line">                            s.<span class="built_in">insert</span>(<span class="built_in">stoi</span>(numStr));</span><br><span class="line">                            numStr[q] = numStr[p];</span><br><span class="line">                            numStr[p] = tmp1;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    numStr[j] = numStr[i];</span><br><span class="line">                    numStr[i] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> val : s) &#123;</span><br><span class="line">                res += count[val];</span><br><span class="line">            &#125;</span><br><span class="line">            count[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Sorting</tag>
        <tag>Counting</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>327. Count of Range Sum</title>
    <url>/2023/08/26/327-Count-of-Range-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-of-range-sum/">327. Count of Range Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-indexed-tree//">Binary Indexed Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/segment-tree//">Segment Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/merge-sort//">Merge Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/ordered-set//">Ordered Set</a></p>
<p>Given an integer array <code>nums</code> and two integers <code>lower</code> and <code>upper</code>, return <em>the number of range sums that lie in</em> <code>[lower, upper]</code> <em>inclusive</em>.</p>
<p>Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> inclusive, where <code>i &lt;= j</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,5,-1], lower = -2, upper = 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0], lower = 0, upper = 0</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-2<sup>31</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 2<sup>31</sup> - 1</li>
<li>-10<sup>5</sup> &lt;&#x3D; lower &lt;&#x3D; upper &lt;&#x3D; 10<sup>5</sup></li>
<li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Merge sort</li>
</ul>
<h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p>First we need to calculate the preSum, since the problem is about range sum. But to get the<br>number of range sum, the intuitive way is to check each preSum[i] against every preSum[j]<br>where j &gt; i. But this solution’s time complexity is O(n^2). So we need to find a solution<br>with better time complexity.</p>
<p>The key requirement here is: for each preSum[i], we should find the preSum[j] (j &gt; i) where<br>min &lt; preSum[j] - preSum[i] &lt; max. If for one fixed preSum[i], all preSum[j] are sorted then<br>it’s easy to just find the lower and upper bound of j, and count &#x3D; upper - lower. This implies<br>that the problem can be solved with sorted fragments of the array, so merge sort would help<br>here. We only need to add one step during the merge.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">long</span>&gt; tmp;</span><br><span class="line">    vector&lt;<span class="type">long</span>&gt; preSum;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lower_, upper_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countRangeSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> lower, <span class="type">int</span> upper)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        tmp = <span class="built_in">vector</span>&lt;<span class="type">long</span>&gt;(size + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        preSum = <span class="built_in">vector</span>&lt;<span class="type">long</span>&gt;(size + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        lower_ = lower;</span><br><span class="line">        upper_ = upper;</span><br><span class="line">        <span class="built_in">sort</span>(preSum, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">long</span>&gt;&amp; preSum, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">sort</span>(preSum, low, mid);</span><br><span class="line">        <span class="built_in">sort</span>(preSum, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="built_in">merge</span>(preSum, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">long</span>&gt;&amp; preSum, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">            tmp[i] = preSum[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> start = mid + <span class="number">1</span>, end = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= mid; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (start &lt;= high &amp;&amp; preSum[start] - preSum[i] &lt; lower_) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            end = start;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (end &lt;= high &amp;&amp; preSum[end] - preSum[i] &lt;= upper_) &#123;</span><br><span class="line">                end++;</span><br><span class="line">            &#125;</span><br><span class="line">            count += end - start;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> p1 = low, p2 = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == mid + <span class="number">1</span>) &#123;</span><br><span class="line">                preSum[i] = tmp[p2++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == high + <span class="number">1</span>) &#123;</span><br><span class="line">                preSum[i] = tmp[p1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp[p1] &gt; tmp[p2]) &#123;</span><br><span class="line">                preSum[i] = tmp[p2++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                preSum[i] = tmp[p1++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Divide and Conquer</tag>
        <tag>Ordered Set</tag>
        <tag>Merge Sort</tag>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3270. Find the Key of the Numbers</title>
    <url>/2024/10/06/3270-Find-the-Key-of-the-Numbers/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-key-of-the-numbers/description/">3270. Find the Key of the Numbers</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given three <strong>positive</strong>  integers <code>num1</code>, <code>num2</code>, and <code>num3</code>.</p>
<p>The <code>key</code> of <code>num1</code>, <code>num2</code>, and <code>num3</code> is defined as a four-digit number such that:</p>
<ul>
<li>Initially, if any number has <strong>less than</strong>  four digits, it is padded with <strong>leading zeros</strong> .</li>
<li>The <code>i^th</code> digit (<code>1 &lt;= i &lt;= 4</code>) of the <code>key</code> is generated by taking the <strong>smallest</strong>  digit among the <code>i^th</code> digits of <code>num1</code>, <code>num2</code>, and <code>num3</code>.</li>
</ul>
<p>Return the <code>key</code> of the three numbers <strong>without</strong>  leading zeros (if any).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: num1 = 1, num2 = 10, num3 = 1000</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>On padding, <code>num1</code> becomes <code>&quot;0001&quot;</code>, <code>num2</code> becomes <code>&quot;0010&quot;</code>, and <code>num3</code> remains <code>&quot;1000&quot;</code>.</p>
<ul>
<li>The <code>1^st</code> digit of the <code>key</code> is <code>min(0, 0, 1)</code>.</li>
<li>The <code>2^nd</code> digit of the <code>key</code> is <code>min(0, 0, 0)</code>.</li>
<li>The <code>3^rd</code> digit of the <code>key</code> is <code>min(0, 1, 0)</code>.</li>
<li>The <code>4^th</code> digit of the <code>key</code> is <code>min(1, 0, 0)</code>.</li>
</ul>
<p>Hence, the <code>key</code> is <code>&quot;0000&quot;</code>, i.e. 0.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: num1 = 987, num2 = 879, num3 = 798</span><br><span class="line"></span><br><span class="line">Output: 777</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: num1 = 1, num2 = 2, num3 = 3</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= num1, num2, num3 &lt;= 9999</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 138</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">generateKey</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2, <span class="type">int</span> num3)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> exp = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> t1 = num1 % <span class="number">10</span>, t2 = num2 % <span class="number">10</span>, t3 = num3 % <span class="number">10</span>;</span><br><span class="line">            res = res + exp * (<span class="built_in">min</span>(t1, <span class="built_in">min</span>(t2, t3)));</span><br><span class="line">            exp *= <span class="number">10</span>; num1 /= <span class="number">10</span>; num2 /= <span class="number">10</span>; num3 /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>3271. Hash Divided String</title>
    <url>/2024/10/06/3271-Hash-Divided-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/hash-divided-string/description/">3271. Hash Divided String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>s</code> of length <code>n</code> and an integer <code>k</code>, where <code>n</code> is a <strong>multiple</strong>  of <code>k</code>. Your task is to hash the string <code>s</code> into a new string called <code>result</code>, which has a length of <code>n / k</code>.</p>
<p>First, divide <code>s</code> into <code>n / k</code> <strong>substrings</strong> , each with a length of <code>k</code>. Then, initialize <code>result</code> as an <strong>empty</strong>  string.</p>
<p>For each <strong>substring</strong>  in order from the beginning:</p>
<ul>
<li>The <strong>hash value</strong>  of a character is the index of that character in the <strong>English alphabet</strong>  (e.g., <code>&#39;a&#39; → 0</code>, <code>&#39;b&#39; → 1</code>, …, <code>&#39;z&#39; → 25</code>).</li>
<li>Calculate the sum of all the <strong>hash values</strong>  of the characters in the substring.</li>
<li>Find the remainder of this sum when divided by 26, which is called <code>hashedChar</code>.</li>
<li>Identify the character in the English lowercase alphabet that corresponds to <code>hashedChar</code>.</li>
<li>Append that character to the end of <code>result</code>.</li>
</ul>
<p>Return <code>result</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abcd&quot;</span>, k = 2</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;bf&quot;</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>First substring: <code>&quot;ab&quot;</code>, <code>0 + 1 = 1</code>, <code>1 % 26 = 1</code>, <code>result[0] = &#39;b&#39;</code>.</p>
<p>Second substring: <code>&quot;cd&quot;</code>, <code>2 + 3 = 5</code>, <code>5 % 26 = 5</code>, <code>result[1] = &#39;f&#39;</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;mxz&quot;</span>, k = 3</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;i&quot;</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The only substring: <code>&quot;mxz&quot;</code>, <code>12 + 23 + 25 = 60</code>, <code>60 % 26 = 8</code>, <code>result[0] = &#39;i&#39;</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= 100</code></li>
<li><code>k &lt;= s.length &lt;= 1000</code></li>
<li><code>s.length</code> is divisible by <code>k</code>.</li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 138</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">stringHash</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += k) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + k; j++) &#123;</span><br><span class="line">                sum += s[j] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum %= <span class="number">26</span>;</span><br><span class="line">            res.<span class="built_in">push_back</span>(sum + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3272. Find the Count of Good Integers</title>
    <url>/2024/10/06/3272-Find-the-Count-of-Good-Integers/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-count-of-good-integers/description/">3272. Find the Count of Good Integers</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two <strong>positive</strong>  integers <code>n</code> and <code>k</code>.</p>
<p>An integer <code>x</code> is called <strong>k-palindromic</strong>  if:</p>
<ul>
<li><code>x</code> is a palindrome.</li>
<li><code>x</code> is divisible by <code>k</code>.</li>
</ul>
<p>An integer is called <strong>good</strong>  if its digits can be rearranged to form a <strong>k-palindromic</strong>  integer. For example, for <code>k = 2</code>, 2020 can be rearranged to form the k-palindromic integer 2002, whereas 1010 cannot be rearranged to form a k-palindromic integer.</p>
<p>Return the count of <strong>good</strong>  integers containing <code>n</code> digits.</p>
<p><strong>Note</strong>  that any integer must <strong>not</strong>  have leading zeros, <strong>neither</strong>  before <strong>nor</strong>  after rearrangement. For example, 1010 cannot be rearranged to form 101.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, k = 5</span><br><span class="line"></span><br><span class="line">Output: 27</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Some of the good integers are:</p>
<ul>
<li>551 because it can be rearranged to form 515.</li>
<li>525 because it is already k-palindromic.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1, k = 4</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The two good integers are 4 and 8.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, k = 6</span><br><span class="line"></span><br><span class="line">Output: 2468</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10</code></li>
<li><code>1 &lt;= k &lt;= 9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Combinatorics</li>
<li>Biweekly Contest 138</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countGoodIntegers</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; fac = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> prev = fac.<span class="built_in">back</span>();</span><br><span class="line">            fac.<span class="built_in">push_back</span>(prev * i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> start = (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>, (n - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        unordered_set&lt;<span class="type">long</span>&gt; visited;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; start * <span class="number">10</span>; i++) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; bits;</span><br><span class="line">            <span class="type">int</span> count[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;, val = i, curIdx = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (val != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> tmp = val % <span class="number">10</span>;</span><br><span class="line">                bits.<span class="built_in">insert</span>(bits.<span class="built_in">begin</span>(), tmp);</span><br><span class="line">                val /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">whole</span><span class="params">(bits)</span></span>;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rev</span><span class="params">(bits.rbegin() + n % <span class="number">2</span>, bits.rend())</span></span>;</span><br><span class="line">            whole.<span class="built_in">insert</span>(whole.<span class="built_in">end</span>(), rev.<span class="built_in">begin</span>(), rev.<span class="built_in">end</span>());</span><br><span class="line">            <span class="type">long</span> wholeNum = <span class="built_in">getVal</span>(whole);</span><br><span class="line">            <span class="keyword">if</span> (wholeNum % k) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// by the end of a valid iteration, we have calculated all the</span></span><br><span class="line">            <span class="comment">// combinator of digits in whole, so if a later number has the</span></span><br><span class="line">            <span class="comment">// same digit set, we can skip</span></span><br><span class="line">            <span class="type">long</span> minVal = <span class="built_in">reordered</span>(whole);</span><br><span class="line">            <span class="keyword">if</span> (visited.<span class="built_in">contains</span>(minVal)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited.<span class="built_in">insert</span>(minVal);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; whole.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                count[whole[j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// at this time, we are sure that this number is palindromic</span></span><br><span class="line">            <span class="comment">// now we want to know how many combinations we can get</span></span><br><span class="line">            <span class="comment">// the first digit cannot be 0, while the following bits can</span></span><br><span class="line">            <span class="comment">// be any number</span></span><br><span class="line">            <span class="type">int</span> num = (n - count[<span class="number">0</span>]) * fac[n - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// for each digits(0 ~ 9), their own permutation should be divided</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                num /= fac[count[j]];</span><br><span class="line">            &#125;</span><br><span class="line">            res += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">reordered</span><span class="params">(vector&lt;<span class="type">int</span>&gt; bits)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(bits.<span class="built_in">begin</span>(), bits.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getVal</span>(bits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">getVal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; bits)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bits.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            sum *= <span class="number">10</span>;</span><br><span class="line">            sum += bits[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Math</tag>
        <tag>Enumeration</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>3273. Minimum Amount of Damage Dealt to Bob</title>
    <url>/2024/10/06/3273-Minimum-Amount-of-Damage-Dealt-to-Bob/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-amount-of-damage-dealt-to-bob/description/">3273. Minimum Amount of Damage Dealt to Bob</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer <code>power</code> and two integer arrays <code>damage</code> and <code>health</code>, both having length <code>n</code>.</p>
<p>Bob has <code>n</code> enemies, where enemy <code>i</code> will deal Bob <code>damage[i]</code> <strong>points</strong>  of damage per second while they are alive (i.e. <code>health[i] &gt; 0</code>).</p>
<p>Every second, <strong>after</strong>  the enemies deal damage to Bob, he chooses <strong>one</strong>  of the enemies that is still alive and deals <code>power</code> points of damage to them.</p>
<p>Determine the <strong>minimum</strong>  total amount of damage points that will be dealt to Bob before <strong>all</strong>  <code>n</code> enemies are dead.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: power = 4, damage = [1,2,3,4], health = [4,5,6,8]</span><br><span class="line"></span><br><span class="line">Output: 39</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>Attack enemy 3 in the first two seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is <code>10 + 10 = 20</code> points.</li>
<li>Attack enemy 2 in the next two seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is <code>6 + 6 = 12</code> points.</li>
<li>Attack enemy 0 in the next second, after which enemy 0 will go down, the number of damage points dealt to Bob is <code>3</code> points.</li>
<li>Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is <code>2 + 2 = 4</code> points.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: power = 1, damage = [1,1,1,1], health = [1,2,3,4]</span><br><span class="line"></span><br><span class="line">Output: 20</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>Attack enemy 0 in the first second, after which enemy 0 will go down, the number of damage points dealt to Bob is <code>4</code> points.</li>
<li>Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is <code>3 + 3 = 6</code> points.</li>
<li>Attack enemy 2 in the next three seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is <code>2 + 2 + 2 = 6</code> points.</li>
<li>Attack enemy 3 in the next four seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is <code>1 + 1 + 1 + 1 = 4</code> points.</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: power = 8, damage = [40], health = [59]</span><br><span class="line"></span><br><span class="line">Output: 320</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= power &lt;= 10^4</code></li>
<li><code>1 &lt;= n == damage.length == health.length &lt;= 10^5</code></li>
<li><code>1 &lt;= damage[i], health[i] &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Math</li>
<li>Biweekly Contest 138</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minDamage</span><span class="params">(<span class="type">int</span> power, vector&lt;<span class="type">int</span>&gt;&amp; damage, vector&lt;<span class="type">int</span>&gt;&amp; health)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = damage.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;pair&lt;<span class="type">double</span>, <span class="type">int</span>&gt;&gt; pairs;</span><br><span class="line">        <span class="comment">// assume we have only 2 pairs of damage and health: h1, d1 and h2, d2</span></span><br><span class="line">        <span class="comment">// if we work on d1 first, and it gives us the smaller damage</span></span><br><span class="line">        <span class="comment">// (d1 + d2) * t1 + d2 * t2 &lt; (d1 + d2) * t2 + d2 * t2</span></span><br><span class="line">        <span class="comment">// =&gt; d2 * t1 &lt; d1 * t2 =&gt; d1/t1 &gt; d2/t2</span></span><br><span class="line">        <span class="comment">// it means, we should work on the items with larger d/t first</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> t = (health[i] - <span class="number">1</span>) / power + <span class="number">1</span>;</span><br><span class="line">            pairs.<span class="built_in">push_back</span>(&#123;(<span class="type">double</span>)damage[i]/ t, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// after the sort, the items are ordered with ascending d/t</span></span><br><span class="line">        <span class="built_in">sort</span>(pairs.<span class="built_in">begin</span>(), pairs.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> totalDamage = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : pairs) &#123;</span><br><span class="line">            <span class="type">int</span> idx = p.second, d = damage[idx], h = health[idx], t = (health[idx] - <span class="number">1</span>) / power + <span class="number">1</span>;</span><br><span class="line">            totalDamage += d;</span><br><span class="line">            res += (<span class="type">long</span>)totalDamage * t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3276. Select Cells in Grid With Maximum Score</title>
    <url>/2024/10/06/3276-Select-Cells-in-Grid-With-Maximum-Score/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/select-cells-in-grid-with-maximum-score/description/">3276. Select Cells in Grid With Maximum Score</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D matrix <code>grid</code> consisting of positive integers.</p>
<p>You have to select one or more cells from the matrix such that the following conditions are satisfied:</p>
<ul>
<li>No two selected cells are in the <strong>same</strong>  row of the matrix.</li>
<li>The values in the set of selected cells are <strong>unique</strong> .</li>
</ul>
<p>Your score will be the <strong>sum</strong>  of the values of the selected cells.</p>
<p>Return the <strong>maximum</strong>  score you can achieve.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,2,3],[4,3,2],[1,1,1]]</span><br><span class="line"></span><br><span class="line">Output: 8</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/07/29/grid1drawio.png">

<p>We can select the cells with values 1, 3, and 4 that are colored above.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[8,7,6],[8,3,2]]</span><br><span class="line"></span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/07/29/grid8_8drawio.png" style="width: 170px; height: 114px;">

<p>We can select the cells with values 7 and 8 that are colored above.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= grid.length, grid[i].length &lt;= 10</code></li>
<li><code>1 &lt;= grid[i][j] &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>state compression dp</li>
<li>Weekly Contest 413</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]:</span></span><br><span class="line">    <span class="comment">//  with maxVal of i, and we can choose from the rows</span></span><br><span class="line">    <span class="comment">//  not marked by j, what&#x27;s the maximum value we can get</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    vector&lt;unordered_set&lt;<span class="type">int</span>&gt;&gt; valToRow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxScore</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxVal = <span class="number">0</span>, m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                maxVal = <span class="built_in">max</span>(maxVal, grid[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp.<span class="built_in">resize</span>(maxVal + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span> &lt;&lt; m, <span class="number">-1</span>));</span><br><span class="line">        <span class="comment">// valToRow is to avoid duplication and simplify the iteration</span></span><br><span class="line">        valToRow.<span class="built_in">resize</span>(maxVal + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                valToRow[grid[i][j]].<span class="built_in">insert</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">dfs</span>(maxVal, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> maxVal, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (maxVal &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[maxVal][k] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[maxVal][k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">dfs</span>(maxVal - <span class="number">1</span>, k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> row : valToRow[maxVal]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(k &gt;&gt; row &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">                res = <span class="built_in">max</span>(res, <span class="built_in">dfs</span>(maxVal - <span class="number">1</span>, k | <span class="number">1</span> &lt;&lt; row) + maxVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[maxVal][k] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Bit Manipulation</tag>
        <tag>Bitmask</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3277. Maximum XOR Score Subarray Queries</title>
    <url>/2024/10/06/3277-Maximum-XOR-Score-Subarray-Queries/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-xor-score-subarray-queries/description/">3277. Maximum XOR Score Subarray Queries</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>nums</code> of <code>n</code> integers, and a 2D integer array <code>queries</code> of size <code>q</code>, where queries[i] &#x3D; [l<sub>i</sub>, r<sub>i</sub>].</p>
<p>For each query, you must find the <strong>maximum XOR score</strong>  of any subarray of nums[l<sub>i</sub>..r<sub>i</sub>].</p>
<p>The <strong>XOR score</strong>  of an array <code>a</code> is found by repeatedly applying the following operations on <code>a</code> so that only one element remains, that is the <strong>score</strong> :</p>
<ul>
<li>Simultaneously replace <code>a[i]</code> with <code>a[i] XOR a[i + 1]</code> for all indices <code>i</code> except the last one.</li>
<li>Remove the last element of <code>a</code>.</li>
</ul>
<p>Return an array <code>answer</code> of size <code>q</code> where <code>answer[i]</code> is the answer to query <code>i</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,8,4,32,16,1], queries = [[0,2],[1,4],[0,5]]</span><br><span class="line"></span><br><span class="line">Output: [12,60,60]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>In the first query, <code>nums[0..2]</code> has 6 subarrays <code>[2]</code>, <code>[8]</code>, <code>[4]</code>, <code>[2, 8]</code>, <code>[8, 4]</code>, and <code>[2, 8, 4]</code> each with a respective XOR score of 2, 8, 4, 10, 12, and 6. The answer for the query is 12, the largest of all XOR scores.</p>
<p>In the second query, the subarray of <code>nums[1..4]</code> with the largest XOR score is <code>nums[1..4]</code> with a score of 60.</p>
<p>In the third query, the subarray of <code>nums[0..5]</code> with the largest XOR score is <code>nums[1..4]</code> with a score of 60.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,7,3,2,8,5,1], queries = [[0,3],[1,5],[2,4],[2,6],[5,6]]</span><br><span class="line"></span><br><span class="line">Output: [7,14,11,14,5]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<table height="70" width="472"><thead><tr><th>Index</th><th>nums[l<sub>i</sub>..r<sub>i</sub>]</th><th>Maximum XOR Score Subarray</th><th>Maximum Subarray XOR Score</th></tr></thead><tbody><tr><td>0</td><td>[0, 7, 3, 2]</td><td>[7]</td><td>7</td></tr><tr><td>1</td><td>[7, 3, 2, 8, 5]</td><td>[7, 3, 2, 8]</td><td>14</td></tr><tr><td>2</td><td>[3, 2, 8]</td><td>[3, 2, 8]</td><td>11</td></tr><tr><td>3</td><td>[3, 2, 8, 5, 1]</td><td>[2, 8, 5, 1]</td><td>14</td></tr><tr><td>4</td><td>[5, 1]</td><td>[5]</td><td>5</td></tr></tbody></table>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n == nums.length &lt;= 2000</code></li>
<li><code>0 &lt;= nums[i] &lt;= 2^31 - 1</code></li>
<li><code>1 &lt;= q == queries.length &lt;= 10^5</code></li>
<li><code>queries[i].length == 2</code></li>
<li><code>queries[i] = [l&lt;sub&gt;i&lt;/sub&gt;, r&lt;sub&gt;i&lt;/sub&gt;]</code></li>
<li><code>0 &lt;= l&lt;sub&gt;i&lt;/sub&gt; &lt;= r&lt;sub&gt;i&lt;/sub&gt; &lt;= n - 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>digit dp</li>
<li>Weekly Contest 413</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]: the maximum xor score of all subarrays between [i, j]</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    <span class="comment">// the meaning of score[i][j]: the value of xor score of subarray [i, i + 1, ..., j]</span></span><br><span class="line">    <span class="comment">// the state transition:</span></span><br><span class="line">    <span class="comment">//  score[i][j] = score[i + 1][j] ^ score[i][j - 1]</span></span><br><span class="line">    <span class="comment">//  to calculate (i, j), we need larger i and smaller j</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; score;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maximumSubarrayXor</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">-1</span>));</span><br><span class="line">        score.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            score[i][i] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                score[i][j] = score[i + <span class="number">1</span>][j] ^ score[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> q : queries) &#123;</span><br><span class="line">            <span class="type">int</span> i = q[<span class="number">0</span>], j = q[<span class="number">1</span>];</span><br><span class="line">            res.<span class="built_in">push_back</span>(dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            dp[i][j] = score[i][j];</span><br><span class="line">            <span class="keyword">return</span> score[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = score[i][j];</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(<span class="built_in">dfs</span>(i + <span class="number">1</span>, j), <span class="built_in">dfs</span>(i, j - <span class="number">1</span>)));</span><br><span class="line">        dp[i][j] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3275. K-th Nearest Obstacle Queries</title>
    <url>/2024/10/06/3275-K-th-Nearest-Obstacle-Queries/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/k-th-nearest-obstacle-queries/description/">3275. K-th Nearest Obstacle Queries</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is an infinite 2D plane.</p>
<p>You are given a positive integer <code>k</code>. You are also given a 2D array <code>queries</code>, which contains the following queries:</p>
<ul>
<li><code>queries[i] = [x, y]</code>: Build an obstacle at coordinate <code>(x, y)</code> in the plane. It is guaranteed that there is <strong>no</strong>  obstacle at this coordinate when this query is made.</li>
</ul>
<p>After each query, you need to find the <strong>distance</strong>  of the <code>k^th</code> <strong>nearest</strong>  obstacle from the origin.</p>
<p>Return an integer array <code>results</code> where <code>results[i]</code> denotes the <code>k^th</code> nearest obstacle after query <code>i</code>, or <code>results[i] == -1</code> if there are less than <code>k</code> obstacles.</p>
<p><strong>Note</strong>  that initially there are <strong>no</strong>  obstacles anywhere.</p>
<p>The <strong>distance</strong>  of an obstacle at coordinate <code>(x, y)</code> from the origin is given by <code>|x| + |y|</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: queries = [[1,2],[3,4],[2,3],[-3,0]], k = 2</span><br><span class="line"></span><br><span class="line">Output: [-1,7,5,3]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>Initially, there are 0 obstacles.</li>
<li>After <code>queries[0]</code>, there are less than 2 obstacles.</li>
<li>After <code>queries[1]</code>, there are obstacles at distances 3 and 7.</li>
<li>After <code>queries[2]</code>, there are obstacles at distances 3, 5, and 7.</li>
<li>After <code>queries[3]</code>, there are obstacles at distances 3, 3, 5, and 7.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: queries = [[5,5],[4,4],[3,3]], k = 1</span><br><span class="line"></span><br><span class="line">Output: [10,8,6]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>After <code>queries[0]</code>, there is an obstacle at distance 10.</li>
<li>After <code>queries[1]</code>, there are obstacles at distances 8 and 10.</li>
<li>After <code>queries[2]</code>, there are obstacles at distances 6, 8, and 10.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= queries.length &lt;= 2 * 10^5</code></li>
<li>All <code>queries[i]</code> are unique.</li>
<li><code>-10^9 &lt;= queries[i][0], queries[i][1] &lt;= 10^9</code></li>
<li><code>1 &lt;= k &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
<li>Weekly Contest 413</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">resultsArray</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> q : queries) &#123;</span><br><span class="line">            <span class="type">int</span> x = <span class="built_in">abs</span>(q[<span class="number">0</span>]), y = <span class="built_in">abs</span>(q[<span class="number">1</span>]);</span><br><span class="line">            pq.<span class="built_in">push</span>(x + y);</span><br><span class="line">            <span class="keyword">if</span> (pq.<span class="built_in">size</span>() &gt; k) &#123;</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pq.<span class="built_in">size</span>() &lt; k) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(pq.<span class="built_in">top</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Heap (Priority Queue)</tag>
      </tags>
  </entry>
  <entry>
    <title>3280. Convert Date to Binary</title>
    <url>/2024/10/08/3280-Convert-Date-to-Binary/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/convert-date-to-binary/description/">3280. Convert Date to Binary</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>date</code> representing a Gregorian calendar date in the <code>yyyy-mm-dd</code> format.</p>
<p><code>date</code> can be written in its binary representation obtained by converting year, month, and day to their binary representations without any leading zeroes and writing them down in <code>year-month-day</code> format.</p>
<p>Return the <strong>binary</strong>  representation of <code>date</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">date</span> = <span class="string">&quot;2080-02-29&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;100000100000-10-11101&quot;</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>100000100000, 10, and 11101 are the binary representations of 2080, 02, and 29 respectively.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">date</span> = <span class="string">&quot;1900-01-01&quot;</span></span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;11101101100-1-1&quot;</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>11101101100, 1, and 1 are the binary representations of 1900, 1, and 1 respectively.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>date.length == 10</code></li>
<li><code>date[4] == date[7] == &#39;-&#39;</code>, and all other <code>date[i]</code>‘s are digits.</li>
<li>The input is generated such that <code>date</code> represents a valid Gregorian calendar date between Jan 1^st, 1900 and Dec 31^st, 2100 (both inclusive).</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 414</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convertDateToBinary</span><span class="params">(string date)</span> </span>&#123;</span><br><span class="line">        string res = <span class="built_in">convertDate</span>(date.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">4</span>)) + <span class="string">&quot;-&quot;</span> + <span class="built_in">convertDate</span>(date.<span class="built_in">substr</span>(<span class="number">5</span>, <span class="number">2</span>)) + <span class="string">&quot;-&quot;</span> + <span class="built_in">convertDate</span>(date.<span class="built_in">substr</span>(<span class="number">8</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">convertDate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> value = <span class="built_in">stoi</span>(s);</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">while</span> (value != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> tmp = value % <span class="number">2</span>;</span><br><span class="line">            res.<span class="built_in">push_back</span>(tmp + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            value /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>3281. Maximize Score of Numbers in Ranges</title>
    <url>/2024/10/08/3281-Maximize-Score-of-Numbers-in-Ranges/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximize-score-of-numbers-in-ranges/description/">3281. Maximize Score of Numbers in Ranges</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of integers <code>start</code> and an integer <code>d</code>, representing <code>n</code> intervals <code>[start[i], start[i] + d]</code>.</p>
<p>You are asked to choose <code>n</code> integers where the <code>i^th</code> integer must belong to the <code>i^th</code> interval. The <strong>score</strong>  of the chosen integers is defined as the <strong>minimum</strong>  absolute difference between any two integers that have been chosen.</p>
<p>Return the <strong>maximum</strong>  possible score of the chosen integers.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: start = [6,0,3], d = 2</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The maximum possible score can be obtained by choosing integers: 8, 0, and 4. The score of these chosen integers is <code>min(|8 - 0|, |8 - 4|, |0 - 4|)</code> which equals 4.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: start = [2,6,13,13], d = 5</span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The maximum possible score can be obtained by choosing integers: 2, 7, 13, and 18. The score of these chosen integers is <code>min(|2 - 7|, |2 - 13|, |2 - 18|, |7 - 13|, |7 - 18|, |13 - 18|)</code> which equals 5.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= start.length &lt;= 10^5</code></li>
<li><code>0 &lt;= start[i] &lt;= 10^9</code></li>
<li><code>0 &lt;= d &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Binary search</li>
<li>Weekly Contest 414</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> d_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPossibleScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; start, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(start.<span class="built_in">begin</span>(), start.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = start.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> max_range;</span><br><span class="line">        d_ = d;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = (start[n - <span class="number">1</span>] + d - start[<span class="number">0</span>]) / (n - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">valid</span>(mid, start)) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">valid</span><span class="params">(<span class="type">int</span> range, vector&lt;<span class="type">int</span>&gt;&amp; start)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> pre = start[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; start.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre + range &gt; start[i] + d_) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = <span class="built_in">max</span>((<span class="type">long</span>)start[i], pre + range);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Sorting</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3283. Maximum Number of Moves to Kill All Pawns</title>
    <url>/2024/10/08/3283-Maximum-Number-of-Moves-to-Kill-All-Pawns/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-number-of-moves-to-kill-all-pawns/description/">3283. Maximum Number of Moves to Kill All Pawns</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a <code>50 x 50</code> chessboard with <strong>one</strong>  knight and some pawns on it. You are given two integers <code>kx</code> and <code>ky</code> where <code>(kx, ky)</code> denotes the position of the knight, and a 2D array <code>positions</code> where positions[i] &#x3D; [x<sub>i</sub>, y<sub>i</sub>] denotes the position of the pawns on the chessboard.</p>
<p>Alice and Bob play a turn-based game, where Alice goes first. In each player’s turn:</p>
<ul>
<li>The player selects a pawn that still exists on the board and captures it with the knight in the <strong>fewest</strong>  possible <strong>moves</strong> . <strong>Note</strong>  that the player can select <strong>any</strong>  pawn, it <strong>might not</strong>  be one that can be captured in the <strong>least</strong>  number of moves.</li>
<li>In the process of capturing the selected pawn, the knight <strong>may</strong>  pass other pawns <strong>without</strong>  capturing them. <strong>Only</strong>  the selected pawn can be captured in this turn.</li>
</ul>
<p>Alice is trying to <strong>maximize</strong>  the <strong>sum</strong>  of the number of moves made by both players until there are no more pawns on the board, whereas Bob tries to <strong>minimize</strong>  them.</p>
<p>Return the <strong>maximum</strong>  total number of moves made during the game that Alice can achieve, assuming both players play <strong>optimally</strong> .</p>
<p>Note that in one <strong>move</strong>, a chess knight has eight possible positions it can move to, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.</p>
<img src="https://assets.leetcode.com/uploads/2024/08/01/chess_knight.jpg" style="width: 275px; height: 273px;">

<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: kx = 1, ky = 1, positions = [[0,0]]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/16/gif3.gif" style="width: 275px; height: 275px;">

<p>The knight takes 4 moves to reach the pawn at <code>(0, 0)</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: kx = 0, ky = 2, positions = [[1,1],[2,2],[3,3]]</span><br><span class="line"></span><br><span class="line">Output: 8</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2024/08/16/gif4.gif" style="width: 320px; height: 320px;"></strong></p>
<ul>
<li>Alice picks the pawn at <code>(2, 2)</code> and captures it in two moves: <code>(0, 2) -&gt; (1, 4) -&gt; (2, 2)</code>.</li>
<li>Bob picks the pawn at <code>(3, 3)</code> and captures it in two moves: <code>(2, 2) -&gt; (4, 1) -&gt; (3, 3)</code>.</li>
<li>Alice picks the pawn at <code>(1, 1)</code> and captures it in four moves: <code>(3, 3) -&gt; (4, 1) -&gt; (2, 2) -&gt; (0, 3) -&gt; (1, 1)</code>.</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: kx = 0, ky = 0, positions = [[1,2],[2,4]]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>Alice picks the pawn at <code>(2, 4)</code> and captures it in two moves: <code>(0, 0) -&gt; (1, 2) -&gt; (2, 4)</code>. Note that the pawn at <code>(1, 2)</code> is not captured.</li>
<li>Bob picks the pawn at <code>(1, 2)</code> and captures it in one move: <code>(2, 4) -&gt; (1, 2)</code>.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= kx, ky &lt;= 49</code></li>
<li><code>1 &lt;= positions.length &lt;= 15</code></li>
<li><code>positions[i].length == 2</code></li>
<li><code>0 &lt;= positions[i][0], positions[i][1] &lt;= 49</code></li>
<li>All <code>positions[i]</code> are unique.</li>
<li>The input is generated such that <code>positions[i] != [kx, ky]</code> for all <code>0 &lt;= i &lt; positions.length</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>array has better performance than vector, when accessing the same data block many times</li>
<li>state compression dp</li>
<li>Weekly Contest 414</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> BOUNDARY = <span class="number">50</span>;</span><br><span class="line">    array&lt;array&lt;<span class="type">int</span>, 2&gt;, 8&gt; DIRS = &#123;&#123;&#123;<span class="number">-2</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">-2</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">-2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">2</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>&#125;&#125;&#125;;</span><br><span class="line">    vector&lt;unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; steps;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; visited;</span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]: with previous point at i, and visited points as j, what&#x27; the</span></span><br><span class="line">    <span class="comment">// maximum result we can get</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    <span class="type">int</span> n_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxMoves</span><span class="params">(<span class="type">int</span> kx, <span class="type">int</span> ky, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; positions)</span> </span>&#123;</span><br><span class="line">        positions.<span class="built_in">push_back</span>(&#123;kx, ky&#125;);</span><br><span class="line">        <span class="type">int</span> n = positions.<span class="built_in">size</span>();</span><br><span class="line">        n_ = n;</span><br><span class="line">        steps.<span class="built_in">resize</span>(n);</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pos;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = positions[i];</span><br><span class="line">            pos[<span class="built_in">encode</span>(p[<span class="number">0</span>], p[<span class="number">1</span>])] = i;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; positions.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = positions[i]; <span class="type">int</span> x = p[<span class="number">0</span>], y = p[<span class="number">1</span>];</span><br><span class="line">            visited = vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt;(<span class="number">50</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(<span class="number">50</span>, <span class="literal">false</span>));</span><br><span class="line">            queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x, y&#125;);</span><br><span class="line">            <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (steps[i].<span class="built_in">size</span>() &lt; n) &#123;</span><br><span class="line">                <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sz; j++) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> p = q.<span class="built_in">front</span>();</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="type">int</span> x1 = p.first, y1 = p.second;</span><br><span class="line">                    <span class="type">int</span> cipher = <span class="built_in">encode</span>(x1, y1);</span><br><span class="line">                    <span class="keyword">if</span> (pos.<span class="built_in">contains</span>(cipher)) &#123;</span><br><span class="line">                        steps[i][pos[cipher]] = cur;</span><br><span class="line">                        steps[pos[cipher]][i] = cur;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">cut</span>(x1, y1, q);</span><br><span class="line">                &#125;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// by this time, we have pre-calculated the steps needed to reach each pawn</span></span><br><span class="line">        dp.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>), <span class="number">-1</span>));</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">dfs</span>(n - <span class="number">1</span>, <span class="number">0</span>, positions);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> prev, <span class="type">int</span> mask, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; positions)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = __builtin_popcount(mask);</span><br><span class="line">        <span class="keyword">if</span> (count == n_ - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[prev][mask] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[prev][mask];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> p = positions[prev];</span><br><span class="line">        <span class="type">int</span> x = p[<span class="number">0</span>], y = p[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> res = count % <span class="number">2</span> ? INT_MAX : INT_MIN;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n_ - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mask &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count % <span class="number">2</span>) &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, steps[prev][i] + <span class="built_in">dfs</span>(i, mask | (<span class="number">1</span> &lt;&lt; i), positions));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res = <span class="built_in">max</span>(res, steps[prev][i] + <span class="built_in">dfs</span>(i, mask | (<span class="number">1</span> &lt;&lt; i), positions));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[prev][mask] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&amp; q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> d : DIRS) &#123;</span><br><span class="line">            <span class="type">int</span> x1 = x + d[<span class="number">0</span>], y1 = y + d[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (x1 &lt; <span class="number">0</span> || x1 &gt;= BOUNDARY || y1 &lt; <span class="number">0</span> || y1 &gt;= BOUNDARY || visited[x1][y1]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[x1][y1] = <span class="literal">true</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x1, y1&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">encode</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * <span class="number">50</span> + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Breadth-First Search</tag>
        <tag>Math</tag>
        <tag>Bit Manipulation</tag>
        <tag>Bitmask</tag>
        <tag>Game Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>3282. Reach End of Array With Max Score</title>
    <url>/2024/10/08/3282-Reach-End-of-Array-With-Max-Score/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/reach-end-of-array-with-max-score/description/">3282. Reach End of Array With Max Score</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> of length <code>n</code>.</p>
<p>Your goal is to start at index <code>0</code> and reach index <code>n - 1</code>. You can only jump to indices <strong>greater</strong>  than your current index.</p>
<p>The score for a jump from index <code>i</code> to index <code>j</code> is calculated as <code>(j - i) * nums[i]</code>.</p>
<p>Return the <strong>maximum</strong>  possible <b>total score</b> by the time you reach the last index.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,1,5]</span><br><span class="line"></span><br><span class="line">Output: 7</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>First, jump to index 1 and then jump to the last index. The final score is <code>1 * 1 + 2 * 3 = 7</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,3,1,3,2]</span><br><span class="line"></span><br><span class="line">Output: 16</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Jump directly to the last index. The final score is <code>4 * 4 = 16</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Draw the metric, it’s the sum of rectangles</li>
<li>Weekly Contest 414</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">findMaximumScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[idx]) &#123;</span><br><span class="line">                res += (<span class="type">long</span>)nums[idx] * (i - idx);</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res += (<span class="type">long</span>)(nums[idx]) * (nums.<span class="built_in">size</span>() - <span class="number">1</span> - idx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3286. Find a Safe Walk Through a Grid</title>
    <url>/2024/10/10/3286-Find-a-Safe-Walk-Through-a-Grid/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-a-safe-walk-through-a-grid/description/">3286. Find a Safe Walk Through a Grid</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an <code>m x n</code> binary matrix <code>grid</code> and an integer <code>health</code>.</p>
<p>You start on the upper-left corner <code>(0, 0)</code> and would like to get to the lower-right corner <code>(m - 1, n - 1)</code>.</p>
<p>You can move up, down, left, or right from one cell to another adjacent cell as long as your health remains <strong>positive</strong> .</p>
<p>Cells <code>(i, j)</code> with <code>grid[i][j] = 1</code> are considered <strong>unsafe</strong>  and reduce your health by 1.</p>
<p>Return <code>true</code> if you can reach the final cell with a health value of 1 or more, and <code>false</code> otherwise.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]], health = 1</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The final cell can be reached safely by walking along the gray cells below.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/04/3868_examples_1drawio.png" style="width: 301px; height: 121px;">

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1,1,0,0,0],[1,0,1,0,0,0],[0,1,1,1,0,1],[0,0,1,0,1,0]], health = 3</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>A minimum of 4 health points is needed to reach the final cell safely.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/04/3868_examples_2drawio.png" style="width: 361px; height: 161px;">

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,1,1],[1,0,1],[1,1,1]], health = 5</span><br><span class="line"></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The final cell can be reached safely by walking along the gray cells below.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/04/3868_examples_3drawio.png" style="width: 181px; height: 121px;">

<p>Any path that does not go through the cell <code>(1, 1)</code> is unsafe since your health will drop to 0 when reaching the final cell.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 50</code></li>
<li><code>2 &lt;= m * n</code></li>
<li><code>1 &lt;= health &lt;= m + n</code></li>
<li><code>grid[i][j]</code> is either 0 or 1.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>BFS</li>
<li>Prioritize the safe cells</li>
<li>Biweekly Contest 139</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    array&lt;array&lt;<span class="type">int</span>, 2&gt;, 4&gt; DIRs = &#123;&#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;&#125;;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; visited;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findSafeWalk</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> health)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        visited.<span class="built_in">resize</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        deque&lt;vector&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">push_back</span>(&#123;<span class="number">0</span>, <span class="number">0</span>, health&#125;);</span><br><span class="line">        visited[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="type">int</span> x = p[<span class="number">0</span>], y = p[<span class="number">1</span>], h = p[<span class="number">2</span>] - grid[x][y];</span><br><span class="line">            <span class="keyword">if</span> (x == m - <span class="number">1</span> &amp;&amp; y == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> h &gt; <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> d : DIRs) &#123;</span><br><span class="line">                <span class="type">int</span> x1 = x + d[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> y1 = y + d[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; m &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; y1 &lt; n &amp;&amp; !visited[x1][y1]) &#123;</span><br><span class="line">                    visited[x1][y1] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (grid[x1][y1]) &#123;</span><br><span class="line">                        q.<span class="built_in">push_back</span>(&#123;x1, y1, h&#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        q.<span class="built_in">push_front</span>(&#123;x1, y1, h&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Breadth-First Search</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Graph</tag>
        <tag>Matrix</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>3287. Find the Maximum Sequence Value of Array</title>
    <url>/2024/10/10/3287-Find-the-Maximum-Sequence-Value-of-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-maximum-sequence-value-of-array/description/">3287. Find the Maximum Sequence Value of Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> and a <strong>positive</strong>  integer <code>k</code>.</p>
<p>The <strong>value</strong>  of a sequence <code>seq</code> of size <code>2 * x</code> is defined as:</p>
<ul>
<li><code>(seq[0] OR seq[1] OR ... OR seq[x - 1]) XOR (seq[x] OR seq[x + 1] OR ... OR seq[2 * x - 1])</code>.</li>
</ul>
<p>Return the <strong>maximum</strong>  <strong>value</strong>  of any subsequence of <code>nums</code> having size <code>2 * k</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,6,7], k = 1</span><br><span class="line"></span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The subsequence <code>[2, 7]</code> has the maximum value of <code>2 XOR 7 = 5</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,2,5,6,7], k = 2</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The subsequence <code>[4, 5, 6, 7]</code> has the maximum value of <code>(4 OR 5) XOR (6 OR 7) = 2</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 400</code></li>
<li><code>1 &lt;= nums[i] &lt; 2^7</code></li>
<li><code>1 &lt;= k &lt;= nums.length / 2</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>forwarding dp</li>
<li>Biweekly Contest 139</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// the meaning of suf[i][j][x]: for numbers up until i, can we form number x with j numbers</span></span><br><span class="line">    <span class="comment">// for nums[i](num):</span></span><br><span class="line">    <span class="comment">//  if we don&#x27;t pick it, then suf[i][j][x] |= suf[i + 1][j][x]</span></span><br><span class="line">    <span class="comment">//  if we pick it, then suf[i][j][x | num] |= suf[i + 1][j - 1][x];</span></span><br><span class="line">    vector&lt;vector&lt;array&lt;<span class="type">bool</span>, 128&gt;&gt;&gt; suf;</span><br><span class="line">    vector&lt;vector&lt;array&lt;<span class="type">bool</span>, 128&gt;&gt;&gt; pre;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxValue</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        suf.<span class="built_in">resize</span>(n + <span class="number">1</span>, vector&lt;array&lt;<span class="type">bool</span>, <span class="number">128</span>&gt;&gt;(k + <span class="number">1</span>, array&lt;<span class="type">bool</span>, <span class="number">128</span>&gt;&#123;<span class="literal">false</span>&#125;));</span><br><span class="line">        pre.<span class="built_in">resize</span>(n + <span class="number">1</span>, vector&lt;array&lt;<span class="type">bool</span>, <span class="number">128</span>&gt;&gt;(k + <span class="number">1</span>, array&lt;<span class="type">bool</span>, <span class="number">128</span>&gt;&#123;<span class="literal">false</span>&#125;));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; suf.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                suf[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">                pre[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> v = nums[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= k; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="number">128</span>; x++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                        suf[i][j][x | v] |= suf[i + <span class="number">1</span>][j - <span class="number">1</span>][x];</span><br><span class="line">                    &#125;</span><br><span class="line">                    suf[i][j][x] |= suf[i + <span class="number">1</span>][j][x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> v = nums[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= k; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="number">128</span>; x++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                        pre[i + <span class="number">1</span>][j][x | v] |= pre[i][j - <span class="number">1</span>][x];</span><br><span class="line">                    &#125;</span><br><span class="line">                    pre[i + <span class="number">1</span>][j][x] |= pre[i][j][x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt;= nums.<span class="built_in">size</span>() - k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!pre[i][k][j]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="number">128</span>; l++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!suf[i][k][l]) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res = <span class="built_in">max</span>(res, j ^ l);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3288. Length of the Longest Increasing Path</title>
    <url>/2024/10/10/3288-Length-of-the-Longest-Increasing-Path/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/length-of-the-longest-increasing-path/description/">3288. Length of the Longest Increasing Path</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D array of integers <code>coordinates</code> of length <code>n</code> and an integer <code>k</code>, where <code>0 &lt;= k &lt; n</code>.</p>
<p>coordinates[i] &#x3D; [x<sub>i</sub>, y<sub>i</sub>] indicates the point (x<sub>i</sub>, y<sub>i</sub>) in a 2D plane.</p>
<p>An <strong>increasing path</strong>  of length <code>m</code> is defined as a list of points (x<sub>1</sub>, y<sub>1</sub>), (x<sub>2</sub>, y<sub>2</sub>), (x<sub>3</sub>, y<sub>3</sub>), …, (x<sub>m</sub>, y<sub>m</sub>) such that:</p>
<ul>
<li>x<sub>i</sub> &lt; x<sub>i + 1</sub> and y<sub>i</sub> &lt; y<sub>i + 1</sub> for all <code>i</code> where <code>1 &lt;= i &lt; m</code>.</li>
<li>(x<sub>i</sub>, y<sub>i</sub>) is in the given coordinates for all <code>i</code> where <code>1 &lt;= i &lt;= m</code>.</li>
</ul>
<p>Return the <strong>maximum</strong>  length of an <strong>increasing path</strong>  that contains <code>coordinates[k]</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: coordinates = [[3,1],[2,2],[4,1],[0,0],[5,3]], k = 1</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><code>(0, 0)</code>, <code>(2, 2)</code>, <code>(5, 3)</code> is the longest increasing path that contains <code>(2, 2)</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: coordinates = [[2,1],[7,0],[5,6]], k = 2</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><code>(2, 1)</code>, <code>(5, 6)</code> is the longest increasing path that contains <code>(5, 6)</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n == coordinates.length &lt;= 10^5</code></li>
<li><code>coordinates[i].length == 2</code></li>
<li><code>0 &lt;= coordinates[i][0], coordinates[i][1] &lt;= 10^9</code></li>
<li>All elements in <code>coordinates</code> are <strong>distinct</strong> .</li>
<li><code>0 &lt;= k &lt;= n - 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>LIS</li>
<li>Biweekly Contest 139</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPathLength</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; coordinates, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = coordinates.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="type">int</span> xIndex = <span class="number">-1</span>, yIndex = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            coordinates[i] = &#123;coordinates[i][<span class="number">0</span>], coordinates[i][<span class="number">1</span>], i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](vector&lt;<span class="type">int</span>&gt;&amp; lhs, vector&lt;<span class="type">int</span>&gt;&amp; rhs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lhs[<span class="number">0</span>] != rhs[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> lhs[<span class="number">0</span>] &lt; rhs[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> lhs[<span class="number">1</span>] &gt; rhs[<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">sort</span>(coordinates.<span class="built_in">begin</span>(), coordinates.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> x = coordinates[i][<span class="number">1</span>], idx = coordinates[i][<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> index = <span class="built_in">binarySearch</span>(nums, x);</span><br><span class="line">            <span class="keyword">if</span> (index == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[index] = x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (idx == k) &#123;</span><br><span class="line">                xIndex = index;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> x = -coordinates[i][<span class="number">1</span>], idx = coordinates[i][<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> index = <span class="built_in">binarySearch</span>(nums, x);</span><br><span class="line">            <span class="keyword">if</span> (index == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[index] = x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (idx == k) &#123;</span><br><span class="line">                yIndex = index;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> xIndex + yIndex + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>3290. Maximum Multiplication Score</title>
    <url>/2024/10/15/3290-Maximum-Multiplication-Score/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-multiplication-score/description/">3290. Maximum Multiplication Score</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>a</code> of size 4 and another integer array <code>b</code> of size <strong>at least</strong>  4.</p>
<p>You need to choose 4 indices i<sub>0</sub>, i<sub>1</sub>, i<sub>2</sub>, and i<sub>3</sub> from the array <code>b</code> such that i<sub>0</sub> &lt; i<sub>1</sub> &lt; i<sub>2</sub> &lt; i<sub>3</sub>. Your score will be equal to the value a[0] * b[i<sub>0</sub>] + a[1] * b[i<sub>1</sub>] + a[2] * b[i<sub>2</sub>] + a[3] * b[i<sub>3</sub>].</p>
<p>Return the <strong>maximum</strong>  score you can achieve.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: a = [3,2,5,6], b = [2,-6,4,-5,-3,2,-7]</span><br><span class="line"></span><br><span class="line">Output: 26</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can choose the indices 0, 1, 2, and 5. The score will be <code>3 * 2 + 2 * (-6) + 5 * 4 + 6 * 2 = 26</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: a = [-1,4,5,-2], b = [-5,-1,-3,-2,-4]</span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can choose the indices 0, 1, 3, and 4. The score will be <code>(-1) * (-5) + 4 * (-1) + 5 * (-2) + (-2) * (-4) = -1</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>a.length == 4</code></li>
<li><code>4 &lt;= b.length &lt;= 10^5</code></li>
<li><code>-10^5 &lt;= a[i], b[i] &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
<li>Weekly Contest 415</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_, n_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]: when we are at ith item in a, and jth item in b</span></span><br><span class="line">    <span class="comment">// the maximum number we can achieve</span></span><br><span class="line">    <span class="comment">// the state transition:</span></span><br><span class="line">    <span class="comment">//  at jth item of a, we can either match or not</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; dp;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maxScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        m_ = a.<span class="built_in">size</span>(), n_ = b.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(m_, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(n_, LONG_MIN));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = (<span class="type">long</span> <span class="type">long</span>)a[<span class="number">0</span>] * b[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n_ + i + <span class="number">1</span> - m_; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + (<span class="type">long</span> <span class="type">long</span>)a[i] * b[j]);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>], (<span class="type">long</span> <span class="type">long</span>)a[i] * b[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m_ - <span class="number">1</span>][n_ - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3291. Minimum Number of Valid Strings to Form Target I</title>
    <url>/2024/10/15/3291-Minimum-Number-of-Valid-Strings-to-Form-Target-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-number-of-valid-strings-to-form-target-i/description/">3291. Minimum Number of Valid Strings to Form Target I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of strings <code>words</code> and a string <code>target</code>.</p>
<p>A string <code>x</code> is called <strong>valid</strong>  if <code>x</code> is a prefix of <strong>any</strong>  string in <code>words</code>.</p>
<p>Return the <strong>minimum</strong>  number of <strong>valid</strong>  strings that can be concatenated to form <code>target</code>. If it is <strong>not</strong>  possible to form <code>target</code>, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;bcdef&quot;</span>], target = <span class="string">&quot;aabcdabc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The target string can be formed by concatenating:</p>
<ul>
<li>Prefix of length 2 of <code>words[1]</code>, i.e. <code>&quot;aa&quot;</code>.</li>
<li>Prefix of length 3 of <code>words[2]</code>, i.e. <code>&quot;bcd&quot;</code>.</li>
<li>Prefix of length 3 of <code>words[0]</code>, i.e. <code>&quot;abc&quot;</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;abababab&quot;</span>,<span class="string">&quot;ab&quot;</span>], target = <span class="string">&quot;ababaababa&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The target string can be formed by concatenating:</p>
<ul>
<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>
<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;abcdef&quot;</span>], target = <span class="string">&quot;xyz&quot;</span></span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= words.length &lt;= 100</code></li>
<li><code>1 &lt;= words[i].length &lt;= 5 * 10^3</code></li>
<li>The input is generated such that <code>sum(words[i].length) &lt;= 10^5</code>.</li>
<li><code>words[i]</code> consists only of lowercase English letters.</li>
<li><code>1 &lt;= target.length &lt;= 5 * 10^3</code></li>
<li><code>target</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Trie + dp</li>
<li>Weekly Contest 415</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        vector&lt;TrieNode*&gt; children;</span><br><span class="line">        <span class="built_in">TrieNode</span>() &#123;</span><br><span class="line">            children = <span class="built_in">vector</span>&lt;TrieNode*&gt;(<span class="number">26</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    TrieNode* root;</span><br><span class="line">    string target_;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minValidStrings</span><span class="params">(vector&lt;string&gt;&amp; words, string target)</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">        target_ = target;</span><br><span class="line">        <span class="comment">// dp.resize(target.size(), INT_MAX);</span></span><br><span class="line">        <span class="keyword">for</span> (string word : words) &#123;</span><br><span class="line">            TrieNode* cur = root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!cur-&gt;children[c - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                    cur-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res == INT_MAX ? <span class="number">-1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == target_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp.<span class="built_in">contains</span>(index)) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> res = INT_MAX;</span><br><span class="line">        TrieNode* cur = root;</span><br><span class="line">        <span class="type">int</span> end = index;</span><br><span class="line">        <span class="keyword">for</span> (end = index; end &lt; target_.<span class="built_in">size</span>() &amp;&amp; cur; end++) &#123;</span><br><span class="line">            cur = cur-&gt;children[target_[end] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!cur) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// two cases the end stop:</span></span><br><span class="line">        <span class="comment">//  1. the end reaches the end of target</span></span><br><span class="line">        <span class="comment">//  2. the cur is not valid, so cur is valid at end - 1</span></span><br><span class="line">        <span class="comment">//     and we can only matches [index, end - 2]</span></span><br><span class="line">        <span class="keyword">if</span> (end == target_.<span class="built_in">size</span>() &amp;&amp; cur) &#123;</span><br><span class="line">            res = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = end - <span class="number">1</span>; i &gt;= index; i--) &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, (<span class="type">long</span>)<span class="built_in">dfs</span>(i + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[index] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
        <tag>Trie</tag>
        <tag>Rolling Hash</tag>
        <tag>Hash Function</tag>
        <tag>String Matching</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3292. Minimum Number of Valid Strings to Form Target II</title>
    <url>/2024/10/15/3292-Minimum-Number-of-Valid-Strings-to-Form-Target-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-number-of-valid-strings-to-form-target-ii/description/">3292. Minimum Number of Valid Strings to Form Target II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of strings <code>words</code> and a string <code>target</code>.</p>
<p>A string <code>x</code> is called <strong>valid</strong>  if <code>x</code> is a prefix of <strong>any</strong>  string in <code>words</code>.</p>
<p>Return the <strong>minimum</strong>  number of <strong>valid</strong>  strings that can be concatenated to form <code>target</code>. If it is <strong>not</strong>  possible to form <code>target</code>, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;bcdef&quot;</span>], target = <span class="string">&quot;aabcdabc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The target string can be formed by concatenating:</p>
<ul>
<li>Prefix of length 2 of <code>words[1]</code>, i.e. <code>&quot;aa&quot;</code>.</li>
<li>Prefix of length 3 of <code>words[2]</code>, i.e. <code>&quot;bcd&quot;</code>.</li>
<li>Prefix of length 3 of <code>words[0]</code>, i.e. <code>&quot;abc&quot;</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;abababab&quot;</span>,<span class="string">&quot;ab&quot;</span>], target = <span class="string">&quot;ababaababa&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The target string can be formed by concatenating:</p>
<ul>
<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>
<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;abcdef&quot;</span>], target = <span class="string">&quot;xyz&quot;</span></span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= words.length &lt;= 100</code></li>
<li><code>1 &lt;= words[i].length &lt;= 5 * 10^4</code></li>
<li>The input is generated such that <code>sum(words[i].length) &lt;= 10^5</code>.</li>
<li><code>words[i]</code> consists only of lowercase English letters.</li>
<li><code>1 &lt;= target.length &lt;= 5 * 10^4</code></li>
<li><code>target</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>the <code>sum(words[i].length) &lt;= 1e5</code> indicates that we can use prefix match</li>
<li>polynomial hashing function, implement a class for it</li>
<li>Weekly Contest 415</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, unordered_set&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minValidStrings</span><span class="params">(vector&lt;string&gt;&amp; words, string target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxLen = <span class="number">0</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>, base = <span class="number">9&#x27;999&#x27;991</span>;</span><br><span class="line">        <span class="keyword">for</span> (string word : words) &#123;</span><br><span class="line">            maxLen = <span class="built_in">max</span>(maxLen, (<span class="type">int</span>)word.<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// hash(s) = s[0] * base^(n-1) + s[1] * base^(n-2) + ... + s[n-2] * base + s[n-1]</span></span><br><span class="line">        <span class="keyword">for</span> (string word : words) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">min</span>(word.<span class="built_in">size</span>(), target.<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">                cur = (cur * base + word[i]) % MOD;</span><br><span class="line">                m[i + <span class="number">1</span>].<span class="built_in">insert</span>(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = target.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">preHash</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">// why do we need prePow, cause when calculating the hash between</span></span><br><span class="line">        <span class="comment">// target[l, r], we can just use preHash[r + 1] - preHash[l] * prePow(r - l)</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">prePow</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; target.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            preHash[i + <span class="number">1</span>] = (preHash[i] * base + target[i]) % MOD;</span><br><span class="line">            prePow[i + <span class="number">1</span>] = (prePow[i] * base) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right_most</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; target.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> l = i, r = target.<span class="built_in">size</span>();</span><br><span class="line">            <span class="comment">// the meaning of binary search:</span></span><br><span class="line">            <span class="comment">// we try to find the right most index between</span></span><br><span class="line">            <span class="comment">// i and target.size() - 1 that the prefix exists in hashmap</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">                <span class="type">int</span> h = (((preHash[mid + <span class="number">1</span>] - preHash[i] * prePow[mid + <span class="number">1</span> - i]) % MOD) + MOD) % MOD;</span><br><span class="line">                <span class="keyword">if</span> (m[mid - i + <span class="number">1</span>].<span class="built_in">contains</span>(h)) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            right_most[i] = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cur_r = <span class="number">0</span>, next_r = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; target.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            next_r = <span class="built_in">max</span>(next_r, right_most[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == cur_r) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == next_r) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cur_r = next_r;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res ? res : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
        <tag>Rolling Hash</tag>
        <tag>Hash Function</tag>
        <tag>String Matching</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>3296. Minimum Number of Seconds to Make Mountain Height Zero</title>
    <url>/2024/10/15/3296-Minimum-Number-of-Seconds-to-Make-Mountain-Height-Zero/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-number-of-seconds-to-make-mountain-height-zero/description/">3296. Minimum Number of Seconds to Make Mountain Height Zero</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer <code>mountainHeight</code> denoting the height of a mountain.</p>
<p>You are also given an integer array <code>workerTimes</code> representing the work time of workers in <strong>seconds</strong> .</p>
<p>The workers work <strong>simultaneously</strong>  to <strong>reduce</strong>  the height of the mountain. For worker <code>i</code>:</p>
<ul>
<li><p>To decrease the mountain’s height by <code>x</code>, it takes <code>workerTimes[i] + workerTimes[i] * 2 + ... + workerTimes[i] * x</code> seconds. For example:</p>
</li>
<li><p>To reduce the height of the mountain by 1, it takes <code>workerTimes[i]</code> seconds.</p>
</li>
<li><p>To reduce the height of the mountain by 2, it takes <code>workerTimes[i] + workerTimes[i] * 2</code> seconds, and so on.</p>
</li>
</ul>
<p>Return an integer representing the <strong>minimum</strong>  number of seconds required for the workers to make the height of the mountain 0.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: mountainHeight = 4, workerTimes = [2,1,1]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>One way the height of the mountain can be reduced to 0 is:</p>
<ul>
<li>Worker 0 reduces the height by 1, taking <code>workerTimes[0] = 2</code> seconds.</li>
<li>Worker 1 reduces the height by 2, taking <code>workerTimes[1] + workerTimes[1] * 2 = 3</code> seconds.</li>
<li>Worker 2 reduces the height by 1, taking <code>workerTimes[2] = 1</code> second.</li>
</ul>
<p>Since they work simultaneously, the minimum time needed is <code>max(2, 3, 1) = 3</code> seconds.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: mountainHeight = 10, workerTimes = [3,2,2,4]</span><br><span class="line"></span><br><span class="line">Output: 12</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>Worker 0 reduces the height by 2, taking <code>workerTimes[0] + workerTimes[0] * 2 = 9</code> seconds.</li>
<li>Worker 1 reduces the height by 3, taking <code>workerTimes[1] + workerTimes[1] * 2 + workerTimes[1] * 3 = 12</code> seconds.</li>
<li>Worker 2 reduces the height by 3, taking <code>workerTimes[2] + workerTimes[2] * 2 + workerTimes[2] * 3 = 12</code> seconds.</li>
<li>Worker 3 reduces the height by 2, taking <code>workerTimes[3] + workerTimes[3] * 2 = 12</code> seconds.</li>
</ul>
<p>The number of seconds needed is <code>max(9, 12, 12, 12) = 12</code> seconds.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: mountainHeight = 5, workerTimes = [1]</span><br><span class="line"></span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>There is only one worker in this example, so the answer is <code>workerTimes[0] + workerTimes[0] * 2 + workerTimes[0] * 3 + workerTimes[0] * 4 + workerTimes[0] * 5 = 15</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= mountainHeight &lt;= 10^5</code></li>
<li><code>1 &lt;= workerTimes.length &lt;= 10^4</code></li>
<li><code>1 &lt;= workerTimes[i] &lt;= 10^6</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
<li>Weekly Contest 416</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// interpret the problem:</span></span><br><span class="line">    <span class="comment">// n workers, divide the mountainHeight to n sets</span></span><br><span class="line">    <span class="comment">// each set with size h takes t = h * (h + 1) / 2 seconds</span></span><br><span class="line">    <span class="comment">// find the min of max(t * worktime)</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minNumberOfSeconds</span><span class="params">(<span class="type">int</span> mountainHeight, vector&lt;<span class="type">int</span>&gt;&amp; workerTimes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// use priority queue:</span></span><br><span class="line">        <span class="comment">// first, insert all workerTimes into the priority queue,</span></span><br><span class="line">        <span class="comment">// the structure of the priority queue &lt;t, 1, t0)</span></span><br><span class="line">        <span class="comment">// when we pop the item with minmum value out, we then insert a new value updated tri back</span></span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;, vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t : workerTimes) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;t, <span class="number">1</span>, t&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (mountainHeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> tri = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            res = <span class="built_in">max</span>(res, tri[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> n = tri[<span class="number">1</span>] + <span class="number">1</span>, t = tri[<span class="number">2</span>], t1 = (n + <span class="number">1</span>) * n / <span class="number">2</span> * t;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;t1, n, t&#125;);</span><br><span class="line">            mountainHeight--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Math</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3298. Count Substrings That Can Be Rearranged to Contain a String II</title>
    <url>/2024/10/15/3298-Count-Substrings-That-Can-Be-Rearranged-to-Contain-a-String-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-substrings-that-can-be-rearranged-to-contain-a-string-ii/description/">3298. Count Substrings That Can Be Rearranged to Contain a String II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two strings <code>word1</code> and <code>word2</code>.</p>
<p>A string <code>x</code> is called <strong>valid</strong>  if <code>x</code> can be rearranged to have <code>word2</code> as a prefix.</p>
<p>Return the total number of <strong>valid</strong>  substrings of <code>word1</code>.</p>
<p><strong>Note</strong>  that the memory limits in this problem are <strong>smaller</strong>  than usual, so you <strong>must</strong>  implement a solution with a linear runtime complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;bcca&quot;</span>, word2 = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The only valid substring is <code>&quot;bcca&quot;</code> which can be rearranged to <code>&quot;abcc&quot;</code> having <code>&quot;abc&quot;</code> as a prefix.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;abcabc&quot;</span>, word2 = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 10</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>All the substrings except substrings of size 1 and size 2 are valid.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;abcabc&quot;</span>, word2 = <span class="string">&quot;aaabc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word1.length &lt;= 10^6</code></li>
<li><code>1 &lt;= word2.length &lt;= 10^4</code></li>
<li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
<li>t3 is the same question with less number</li>
<li>Weekly Contest 416</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">validSubstringCount</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; target;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; word2.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            target[word2[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, valid = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cur;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; word1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">char</span> c = word1[right];</span><br><span class="line">            <span class="keyword">if</span> (target.<span class="built_in">contains</span>(c)) &#123;</span><br><span class="line">                cur[c]++;</span><br><span class="line">                <span class="keyword">if</span> (cur[c] == target[c]) &#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> prev_l = left;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; valid == target.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="type">char</span> l = word1[left++];</span><br><span class="line">                <span class="keyword">if</span> (target.<span class="built_in">contains</span>(l)) &#123;</span><br><span class="line">                    cur[l]--;</span><br><span class="line">                    <span class="keyword">if</span> (cur[l] &lt; target[l]) &#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// so, for subString with left index in [prev_l, left),</span></span><br><span class="line">            <span class="comment">// they can have substring with right index from right all the way to the end</span></span><br><span class="line">            res += (left - prev_l) * (word1.<span class="built_in">size</span>() - right);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>33. Search in Rotated Sorted Array</title>
    <url>/2023/12/02/33-Search-in-Rotated-Sorted-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">33. Search in Rotated Sorted Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a></p>
<p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p>
<p>Prior to being passed to your function, <code>nums</code> is <strong>possibly rotated</strong> at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p>
<p>Given the array <code>nums</code> <strong>after</strong> the possible rotation and an integer <code>target</code>, return <em>the index of</em> <code>target</code> <em>if it is in</em> <code>nums</code><em>, or</em> <code>-1</code> <em>if it is not in</em> <code>nums</code>.</p>
<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1], target = 0</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 5000</code></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li>All values of <code>nums</code> are <strong>unique</strong>.</li>
<li><code>nums</code> is an ascending array that is possibly rotated.</li>
<li>-10<sup>4</sup> &lt;&#x3D; target &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>It’s very easy to make mistakes on boundary</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    right = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>3301. Maximize the Total Height of Unique Towers</title>
    <url>/2024/10/15/3301-Maximize-the-Total-Height-of-Unique-Towers/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximize-the-total-height-of-unique-towers/description/">3301. Maximize the Total Height of Unique Towers</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>maximumHeight</code>, where <code>maximumHeight[i]</code> denotes the <strong>maximum</strong>  height the <code>i^th</code> tower can be assigned.</p>
<p>Your task is to assign a height to each tower so that:</p>
<ul>
<li>The height of the <code>i^th</code> tower is a positive integer and does not exceed <code>maximumHeight[i]</code>.</li>
<li>No two towers have the same height.</li>
</ul>
<p>Return the <strong>maximum</strong>  possible total sum of the tower heights. If it’s not possible to assign heights, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: maximumHeight = [2,3,4,3]</span><br><span class="line"></span><br><span class="line">Output: 10</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can assign heights in the following way: <code>[1, 2, 4, 3]</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: maximumHeight = [15,10]</span><br><span class="line"></span><br><span class="line">Output: 25</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can assign heights in the following way: <code>[15, 10]</code>.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: maximumHeight = [2,2,1]</span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>It’s impossible to assign positive heights to each index so that no two towers have the same height.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= maximumHeight.length&lt;= 10^5</code></li>
<li><code>1 &lt;= maximumHeight[i] &lt;= 10^9</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sorting or priority_queue</li>
<li>Biweekly Contest 140</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maximumTotalSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; maximumHeight)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h : maximumHeight) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>, curH = INT_MAX;</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> tmp = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="comment">// if the next height limit is less than current height limit(curH)</span></span><br><span class="line">            <span class="comment">// then we decrease the curH to it</span></span><br><span class="line">            <span class="keyword">if</span> (tmp &lt;= curH) &#123;</span><br><span class="line">                curH = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            res += curH;</span><br><span class="line">            curH--;</span><br><span class="line">            <span class="keyword">if</span> (curH &lt; pq.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3302. Find the Lexicographically Smallest Valid Sequence</title>
    <url>/2024/10/15/3302-Find-the-Lexicographically-Smallest-Valid-Sequence/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-lexicographically-smallest-valid-sequence/description/">3302. Find the Lexicographically Smallest Valid Sequence</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two strings <code>word1</code> and <code>word2</code>.</p>
<p>A string <code>x</code> is called <strong>almost equal</strong>  to <code>y</code> if you can change <strong>at most</strong>  one character in <code>x</code> to make it identical to <code>y</code>.</p>
<p>A sequence of indices <code>seq</code> is called <strong>valid</strong>  if:</p>
<ul>
<li>The indices are sorted in <strong>ascending</strong>  order.</li>
<li>Concatenating the characters at these indices in <code>word1</code> in <strong>the same</strong>  order results in a string that is <strong>almost equal</strong>  to <code>word2</code>.</li>
</ul>
<p>Return an array of size <code>word2.length</code> representing the lexicographically smallest <strong>valid</strong>  sequence of indices. If no such sequence of indices exists, return an <strong>empty</strong>  array.</p>
<p><strong>Note</strong>  that the answer must represent the lexicographically smallest array, <strong>not</strong>  the corresponding string formed by those indices.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;vbcca&quot;</span>, word2 = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: [0,1,2]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The lexicographically smallest valid sequence of indices is <code>[0, 1, 2]</code>:</p>
<ul>
<li>Change <code>word1[0]</code> to <code>&#39;a&#39;</code>.</li>
<li><code>word1[1]</code> is already <code>&#39;b&#39;</code>.</li>
<li><code>word1[2]</code> is already <code>&#39;c&#39;</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;bacdc&quot;</span>, word2 = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: [1,2,4]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The lexicographically smallest valid sequence of indices is <code>[1, 2, 4]</code>:</p>
<ul>
<li><code>word1[1]</code> is already <code>&#39;a&#39;</code>.</li>
<li>Change <code>word1[2]</code> to <code>&#39;b&#39;</code>.</li>
<li><code>word1[4]</code> is already <code>&#39;c&#39;</code>.</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;aaaaaa&quot;</span>, word2 = <span class="string">&quot;aaabc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>There is no valid sequence of indices.</p>
<p><strong>Example 4:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;abc&quot;</span>, word2 = <span class="string">&quot;ab&quot;</span></span><br><span class="line"></span><br><span class="line">Output: [0,1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word2.length &lt; word1.length &lt;= 3 * 10^5</code></li>
<li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>two pointers</li>
<li>Biweekly Contest 140</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">validSequence</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n1 = word1.<span class="built_in">size</span>(), n2 = word2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// the meaning of suf[i]: starting from the right end of word1, and up until</span></span><br><span class="line">        <span class="comment">// ith index, what&#x27;s the minimum index in word2 we can match to</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">suf</span><span class="params">(n1 + <span class="number">1</span>)</span></span>;</span><br><span class="line">        suf[n1] = n2;</span><br><span class="line">        <span class="type">int</span> j = n2 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">0</span> &amp;&amp; word1[i] == word2[j]) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            suf[i] = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word1[i] == word2[j]) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (j == n2) &#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!found &amp;&amp; suf[i + <span class="number">1</span>] &lt;= j + <span class="number">1</span>) &#123;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (j == n2) &#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Two Pointers</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3303. Find the Occurrence of First Almost Equal Substring</title>
    <url>/2024/10/15/3303-Find-the-Occurrence-of-First-Almost-Equal-Substring/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-occurrence-of-first-almost-equal-substring/description/">3303. Find the Occurrence of First Almost Equal Substring</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two strings <code>s</code> and <code>pattern</code>.</p>
<p>A string <code>x</code> is called <strong>almost equal</strong>  to <code>y</code> if you can change <strong>at most</strong>  one character in <code>x</code> to make it identical to <code>y</code>.</p>
<p>Return the <strong>smallest</strong>  starting index of a substring in <code>s</code> that is <strong>almost equal</strong>  to <code>pattern</code>. If no such index exists, return <code>-1</code>.<br>A <strong>substring</strong>  is a contiguous <b>non-empty</b> sequence of characters within a string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abcdefg&quot;</span>, pattern = <span class="string">&quot;bcdffg&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The substring <code>s[1..6] == &quot;bcdefg&quot;</code> can be converted to <code>&quot;bcdffg&quot;</code> by changing <code>s[4]</code> to <code>&quot;f&quot;</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;ababbababa&quot;</span>, pattern = <span class="string">&quot;bacaba&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The substring <code>s[4..9] == &quot;bababa&quot;</code> can be converted to <code>&quot;bacaba&quot;</code> by changing <code>s[6]</code> to <code>&quot;c&quot;</code>.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abcd&quot;</span>, pattern = <span class="string">&quot;dba&quot;</span></span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;dde&quot;</span>, pattern = <span class="string">&quot;d&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= pattern.length &lt; s.length &lt;= 10^5</code></li>
<li><code>s</code> and <code>pattern</code> consist only of lowercase English letters.</li>
</ul>
<p><strong>Follow-up:</strong>  Could you solve the problem if <strong>at most</strong>  <code>k</code> <strong>consecutive</strong>  characters can be changed?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>z algorithm</li>
<li>Biweekly Contest 140</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">calc_z</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">z</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> box_l = <span class="number">0</span>, box_r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= box_r) &#123;</span><br><span class="line">                z[i] = <span class="built_in">min</span>(z[i - box_l], box_r - i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i + z[i] &lt; n &amp;&amp; s[z[i]] == s[i + z[i]]) &#123;</span><br><span class="line">                box_l = i;</span><br><span class="line">                box_r = i + z[i];</span><br><span class="line">                z[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minStartingIndex</span><span class="params">(string s, string pattern)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; pre = <span class="built_in">calc_z</span>(pattern + s);</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()); <span class="built_in">reverse</span>(pattern.<span class="built_in">begin</span>(), pattern.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; suf = <span class="built_in">calc_z</span>(pattern + s);</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m = pattern.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m; i &lt;= s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre[i] + suf[n + m - i] &gt;= m - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>String Matching</tag>
      </tags>
  </entry>
  <entry>
    <title>3306. Count of Substrings Containing Every Vowel and K Consonants II</title>
    <url>/2024/10/15/3306-Count-of-Substrings-Containing-Every-Vowel-and-K-Consonants-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-of-substrings-containing-every-vowel-and-k-consonants-ii/description/">3306. Count of Substrings Containing Every Vowel and K Consonants II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>word</code> and a <strong>non-negative</strong>  integer <code>k</code>.</p>
<p>Return the total number of substrings of <code>word</code> that contain every vowel (<code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>) <strong>at least</strong>  once and <strong>exactly</strong>  <code>k</code> consonants.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;aeioqq&quot;</span>, k = 1</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>There is no substring with every vowel.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;aeiou&quot;</span>, k = 0</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The only substring with every vowel and zero consonants is <code>word[0..4]</code>, which is <code>&quot;aeiou&quot;</code>.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word = <span class="string">&quot;ieaouqqieaouqq&quot;</span>, k = 1</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The substrings with every vowel and one consonant are:</p>
<ul>
<li><code>word[0..5]</code>, which is <code>&quot;ieaouq&quot;</code>.</li>
<li><code>word[6..11]</code>, which is <code>&quot;qieaou&quot;</code>.</li>
<li><code>word[7..12]</code>, which is <code>&quot;ieaouq&quot;</code>.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>5 &lt;= word.length &lt;= 2 * 10^5</code></li>
<li><code>word</code> consists only of lowercase English letters.</li>
<li><code>0 &lt;= k &lt;= word.length - 5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>the <strong>exactly</strong> sliding window</li>
<li>translate exactly to (at least k + 1) - (at least k)</li>
<li>Weekly Contest 417</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string word_;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; vowels = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">f</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, numC = <span class="number">0</span>, valid = <span class="number">0</span>, n = word_.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="type">char</span> r = word_[right];</span><br><span class="line">            <span class="keyword">if</span> (vowels.<span class="built_in">contains</span>(r)) &#123;</span><br><span class="line">                m[r]++;</span><br><span class="line">                <span class="keyword">if</span> (m[r] == <span class="number">1</span>) &#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                numC++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">while</span> (valid == vowels.<span class="built_in">size</span>() &amp;&amp; numC &gt;= k) &#123;</span><br><span class="line">                <span class="type">char</span> l = word_[left];</span><br><span class="line">                <span class="keyword">if</span> (vowels.<span class="built_in">contains</span>(l)) &#123;</span><br><span class="line">                    m[l]--;</span><br><span class="line">                    <span class="keyword">if</span> (m[l] == <span class="number">0</span>) &#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    numC--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countOfSubstrings</span><span class="params">(string word, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        word_ = word;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">f</span>(k) - <span class="built_in">f</span>(k + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>3307. Find the K-th Character in String Game II</title>
    <url>/2024/10/15/3307-Find-the-K-th-Character-in-String-Game-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-k-th-character-in-string-game-ii/description/">3307. Find the K-th Character in String Game II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Alice and Bob are playing a game. Initially, Alice has a string <code>word = &quot;a&quot;</code>.</p>
<p>You are given a <strong>positive</strong>  integer <code>k</code>. You are also given an integer array <code>operations</code>, where <code>operations[i]</code> represents the <strong>type</strong>  of the <code>i^th</code> operation.</p>
<p>Now Bob will ask Alice to perform <strong>all</strong>  operations in sequence:</p>
<ul>
<li>If <code>operations[i] == 0</code>, <strong>append</strong>  a copy of <code>word</code> to itself.</li>
<li>If <code>operations[i] == 1</code>, generate a new string by <strong>changing</strong>  each character in <code>word</code> to its <strong>next</strong>  character in the English alphabet, and <strong>append</strong>  it to the original <code>word</code>. For example, performing the operation on <code>&quot;c&quot;</code> generates <code>&quot;cd&quot;</code> and performing the operation on <code>&quot;zb&quot;</code> generates <code>&quot;zbac&quot;</code>.</li>
</ul>
<p>Return the value of the <code>k^th</code> character in <code>word</code> after performing all the operations.</p>
<p><strong>Note</strong>  that the character <code>&#39;z&#39;</code> can be changed to <code>&#39;a&#39;</code> in the second type of operation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: k = 5, operations = [0,0,0]</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Initially, <code>word == &quot;a&quot;</code>. Alice performs the three operations as follows:</p>
<ul>
<li>Appends <code>&quot;a&quot;</code> to <code>&quot;a&quot;</code>, <code>word</code> becomes <code>&quot;aa&quot;</code>.</li>
<li>Appends <code>&quot;aa&quot;</code> to <code>&quot;aa&quot;</code>, <code>word</code> becomes <code>&quot;aaaa&quot;</code>.</li>
<li>Appends <code>&quot;aaaa&quot;</code> to <code>&quot;aaaa&quot;</code>, <code>word</code> becomes <code>&quot;aaaaaaaa&quot;</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: k = 10, operations = [0,1,0,1]</span><br><span class="line"></span><br><span class="line">Output: <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Initially, <code>word == &quot;a&quot;</code>. Alice performs the four operations as follows:</p>
<ul>
<li>Appends <code>&quot;a&quot;</code> to <code>&quot;a&quot;</code>, <code>word</code> becomes <code>&quot;aa&quot;</code>.</li>
<li>Appends <code>&quot;bb&quot;</code> to <code>&quot;aa&quot;</code>, <code>word</code> becomes <code>&quot;aabb&quot;</code>.</li>
<li>Appends <code>&quot;aabb&quot;</code> to <code>&quot;aabb&quot;</code>, <code>word</code> becomes <code>&quot;aabbaabb&quot;</code>.</li>
<li>Appends <code>&quot;bbccbbcc&quot;</code> to <code>&quot;aabbaabb&quot;</code>, <code>word</code> becomes <code>&quot;aabbaabbbbccbbcc&quot;</code>.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= 10^14</code></li>
<li><code>1 &lt;= operations.length &lt;= 100</code></li>
<li><code>operations[i]</code> is either 0 or 1.</li>
<li>The input is generated such that <code>word</code> has <strong>at least</strong>  <code>k</code> characters after all operations.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>bit manipulation</li>
<li>Weekly Contest 417</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">kthCharacter</span><span class="params">(<span class="type">long</span> <span class="type">long</span> k, vector&lt;<span class="type">int</span>&gt;&amp; operations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = operations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// after n operations, there are 2^n digits, which means</span></span><br><span class="line">        <span class="comment">// k is in the range [1, 2^n], and k - 1 is in the range</span></span><br><span class="line">        <span class="comment">// [0, 2^n - 1], i.e. k - 1 would have at most n digits</span></span><br><span class="line">        k--;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 64 - __builtin_clz(k) is the number of bits of k,</span></span><br><span class="line">        <span class="comment">// if k &lt; 2^m, we don&#x27;t need to care about operations [m, n)</span></span><br><span class="line">        <span class="comment">// if k == 0, we still need one iteration, while __builtin_clz() doesn&#x27;t accept 0</span></span><br><span class="line">        n = k ? <span class="built_in">min</span>(<span class="number">64</span> - __builtin_clz(k), n) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// check the nth digit of k</span></span><br><span class="line">            <span class="type">int</span> digit = (<span class="type">long</span> <span class="type">long</span>)(k &gt;&gt; (n - <span class="number">1</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// if digit is 0, then it&#x27;s in the first half, else second half</span></span><br><span class="line">            <span class="comment">//  1. if it&#x27;s in the first half, then operation[n - 1] wouldn&#x27;t matter</span></span><br><span class="line">            <span class="comment">//  2. if it&#x27;s in the second half, then we need to record one</span></span><br><span class="line">            <span class="keyword">if</span> (digit &amp;&amp; operations[n - <span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (count % <span class="number">26</span>) + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Math</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3309. Maximum Possible Number by Binary Concatenation</title>
    <url>/2024/10/19/3309-Maximum-Possible-Number-by-Binary-Concatenation/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-possible-number-by-binary-concatenation/description/">3309. Maximum Possible Number by Binary Concatenation</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of integers <code>nums</code> of size 3.</p>
<p>Return the <strong>maximum</strong>  possible number whose binary representation can be formed by <strong>concatenating</strong>  the binary representation of <strong>all</strong>  elements in <code>nums</code> in some order.</p>
<p><strong>Note</strong>  that the binary representation of any number does not contain leading zeros.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: 30</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Concatenate the numbers in the order <code>[3, 1, 2]</code> to get the result <code>&quot;11110&quot;</code>, which is the binary representation of 30.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,8,16]</span><br><span class="line"></span><br><span class="line">Output: 1296</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Concatenate the numbers in the order <code>[2, 8, 16]</code> to get the result <code>&quot;10100010000&quot;</code>, which is the binary representation of 1296.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>nums.length == 3</code></li>
<li><code>1 &lt;= nums[i] &lt;= 127</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>bit manipulation</li>
<li>Weekly Contest 418</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxGoodNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == i) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> k = <span class="number">3</span> - i - j;</span><br><span class="line">                <span class="type">int</span> bit1 = <span class="number">32</span> - __builtin_clz(nums[j]),</span><br><span class="line">                    bit2 = <span class="number">32</span> - __builtin_clz(nums[k]);</span><br><span class="line">                <span class="type">int</span> tmp =</span><br><span class="line">                    (nums[i] &lt;&lt; (bit1 + bit2)) + (nums[j] &lt;&lt; bit2) + nums[k];</span><br><span class="line">                res = <span class="built_in">max</span>(tmp, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bit Manipulation</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>331. Verify Preorder Serialization of a Binary Tree</title>
    <url>/2024/06/07/331-Verify-Preorder-Serialization-of-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/description/">331. Verify Preorder Serialization of a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>One way to serialize a binary tree is to use <strong>preorder traversal</strong> . When we encounter a non-null node, we record the node’s value. If it is a null node, we record using a sentinel value such as <code>&#39;#&#39;</code>.</p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/12/pre-tree.jpg" style="width: 362px; height: 293px;">

<p>For example, the above binary tree can be serialized to the string <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>, where <code>&#39;#&#39;</code> represents a null node.</p>
<p>Given a string of comma-separated values <code>preorder</code>, return <code>true</code> if it is a correct preorder traversal serialization of a binary tree.</p>
<p>It is <strong>guaranteed</strong>  that each comma-separated value in the string must be either an integer or a character <code>&#39;#&#39;</code> representing null pointer.</p>
<p>You may assume that the input format is always valid.</p>
<ul>
<li>For example, it could never contain two consecutive commas, such as <code>&quot;1,,3&quot;</code>.</li>
</ul>
<p><strong>Note:</strong> You are not allowed to reconstruct the tree.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: preorder = <span class="string">&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: preorder = <span class="string">&quot;1,#&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: preorder = <span class="string">&quot;9,#,#,1&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= preorder.length &lt;= 10^4</code></li>
<li><code>preorder</code> consist of integers in the range <code>[0, 100]</code> and <code>&#39;#&#39;</code> separated by commas <code>&#39;,&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> isValid = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSerialization</span><span class="params">(string preorder)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        string delimiter = <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        preorder += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((pos = preorder.<span class="built_in">find</span>(delimiter)) != string::npos) &#123;</span><br><span class="line">            string numStr = preorder.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">            <span class="keyword">if</span> (numStr == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">                nums.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums.<span class="built_in">push_back</span>(<span class="built_in">stoi</span>(numStr));</span><br><span class="line">            &#125;</span><br><span class="line">            preorder.<span class="built_in">erase</span>(<span class="number">0</span>, pos + delimiter.<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>(nums);</span><br><span class="line">        <span class="keyword">return</span> isValid &amp;&amp; index == nums.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            isValid = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[index] == <span class="number">-1</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="built_in">build</span>(nums);</span><br><span class="line">        <span class="built_in">build</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>3310. Remove Methods From Project</title>
    <url>/2024/10/19/3310-Remove-Methods-From-Project/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/remove-methods-from-project/description/">3310. Remove Methods From Project</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are maintaining a project that has <code>n</code> methods numbered from <code>0</code> to <code>n - 1</code>.</p>
<p>You are given two integers <code>n</code> and <code>k</code>, and a 2D integer array <code>invocations</code>, where invocations[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] indicates that method a<sub>i</sub> invokes method b<sub>i</sub>.</p>
<p>There is a known bug in method <code>k</code>. Method <code>k</code>, along with any method invoked by it, either <strong>directly</strong>  or <strong>indirectly</strong> , are considered <strong>suspicious</strong>  and we aim to remove them.</p>
<p>A group of methods can only be removed if no method <strong>outside</strong>  the group invokes any methods <strong>within</strong>  it.</p>
<p>Return an array containing all the remaining methods after removing all the <strong>suspicious</strong>  methods. You may return the answer in any order. If it is not possible to remove <strong>all</strong>  the suspicious methods, <strong>none</strong>  should be removed.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, k = 1, invocations = [[1,2],[0,1],[3,2]]</span><br><span class="line"></span><br><span class="line">Output: [0,1,2,3]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/07/18/graph-2.png" style="width: 200px; height: 200px;">

<p>Method 2 and method 1 are suspicious, but they are directly invoked by methods 3 and 0, which are not suspicious. We return all elements without removing anything.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, k = 0, invocations = [[1,2],[0,2],[0,1],[3,4]]</span><br><span class="line"></span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/07/18/graph-3.png" style="width: 200px; height: 200px;">

<p>Methods 0, 1, and 2 are suspicious and they are not directly invoked by any other method. We can remove them.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, k = 2, invocations = [[1,2],[0,1],[2,0]]</span><br><span class="line"></span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/07/20/graph.png" style="width: 200px; height: 200px;">

<p>All methods are suspicious. We can remove them.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
<li><code>0 &lt;= k &lt;= n - 1</code></li>
<li><code>0 &lt;= invocations.length &lt;= 2 * 10^5</code></li>
<li>invocations[i] &#x3D;&#x3D; [a<sub>i</sub>, b<sub>i</sub>]</li>
<li>0 &lt;&#x3D; a<sub>i</sub>, b<sub>i</sub> &lt;&#x3D; n - 1</li>
<li>a<sub>i</sub> !&#x3D; b<sub>i</sub></li>
<li><code>invocations[i] != invocations[j]</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dfs</li>
<li>Weekly Contest 418</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; suspicious;</span><br><span class="line">    <span class="type">int</span> k_;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">remainingMethods</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; invocations)</span> </span>&#123;</span><br><span class="line">        k_ = k;</span><br><span class="line">        graph.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="built_in">buildGraph</span>(invocations);</span><br><span class="line">        <span class="built_in">dfs</span>(k);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> invocation : invocations) &#123;</span><br><span class="line">            <span class="type">int</span> from = invocation[<span class="number">0</span>], to = invocation[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!suspicious.<span class="built_in">contains</span>(from) &amp;&amp; suspicious.<span class="built_in">contains</span>(to)) &#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!suspicious.<span class="built_in">contains</span>(i)) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        suspicious.<span class="built_in">insert</span>(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : graph[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!suspicious.<span class="built_in">contains</span>(v)) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildGraph</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; invocations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> invocation : invocations) &#123;</span><br><span class="line">            <span class="type">int</span> from = invocation[<span class="number">0</span>], to = invocation[<span class="number">1</span>];</span><br><span class="line">            graph[from].<span class="built_in">push_back</span>(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>3311. Construct 2D Grid Matching Graph Layout</title>
    <url>/2024/10/19/3311-Construct-2D-Grid-Matching-Graph-Layout/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/construct-2d-grid-matching-graph-layout/description/">3311. Construct 2D Grid Matching Graph Layout</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D integer array <code>edges</code> representing an <strong>undirected</strong>  graph having <code>n</code> nodes, where <code>edges[i] = [u&lt;sub&gt;i&lt;/sub&gt;, v&lt;sub&gt;i&lt;/sub&gt;]</code> denotes an edge between nodes <code>u&lt;sub&gt;i&lt;/sub&gt;</code> and <code>v&lt;sub&gt;i&lt;/sub&gt;</code>.</p>
<p>Construct a 2D grid that satisfies these conditions:</p>
<ul>
<li>The grid contains <strong>all nodes</strong>  from <code>0</code> to <code>n - 1</code> in its cells, with each node appearing exactly <strong>once</strong> .</li>
<li>Two nodes should be in adjacent grid cells (<strong>horizontally</strong>  or <strong>vertically</strong> ) <strong>if and only if</strong>  there is an edge between them in <code>edges</code>.</li>
</ul>
<p>It is guaranteed that <code>edges</code> can form a 2D grid that satisfies the conditions.</p>
<p>Return a 2D integer array satisfying the conditions above. If there are multiple solutions, return any of them.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, edges = [[0,1],[0,2],[1,3],[2,3]]</span><br><span class="line"></span><br><span class="line">Output: [[3,1],[2,0]]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/11/screenshot-from-2024-08-11-14-07-59.png" style="width: 133px; height: 92px;">

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, edges = [[0,1],[1,3],[2,3],[2,4]]</span><br><span class="line"></span><br><span class="line">Output: [[4,2,3,1,0]]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img src="https://assets.leetcode.com/uploads/2024/08/11/screenshot-from-2024-08-11-14-06-02.png" style="width: 325px; height: 50px;">

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 9, edges = [[0,1],[0,4],[0,5],[1,7],[2,3],[2,4],[2,5],[3,6],[4,6],[4,7],[6,8],[7,8]]</span><br><span class="line"></span><br><span class="line">Output: [[8,6,3],[7,4,2],[1,0,5]]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/08/11/screenshot-from-2024-08-11-14-06-38.png" style="width: 198px; height: 133px;">

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 5 * 10^4</code></li>
<li><code>1 &lt;= edges.length &lt;= 10^5</code></li>
<li><code>edges[i] = [u&lt;sub&gt;i&lt;/sub&gt;, v&lt;sub&gt;i&lt;/sub&gt;]</code></li>
<li><code>0 &lt;= u&lt;sub&gt;i&lt;/sub&gt; &lt; v&lt;sub&gt;i&lt;/sub&gt; &lt; n</code></li>
<li>All the edges are distinct.</li>
<li>The input is generated such that <code>edges</code> can form a 2D grid that satisfies the conditions.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>jigsaw puzzle</li>
<li>Weekly Contest 418</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">constructGridLayout</span>(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges) &#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; m;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">graph</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = edge[<span class="number">1</span>];</span><br><span class="line">            graph[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            graph[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> degree = graph[i].<span class="built_in">size</span>();</span><br><span class="line">            m[degree].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; first_row;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="comment">// there are at least 3 columns</span></span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">contains</span>(<span class="number">4</span>)) &#123;</span><br><span class="line">            <span class="type">int</span> u = m[<span class="number">2</span>].<span class="built_in">front</span>();</span><br><span class="line">            visited[u] = <span class="literal">true</span>;</span><br><span class="line">            first_row.<span class="built_in">push_back</span>(u);</span><br><span class="line">            u = graph[u][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">while</span> (graph[u].<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                visited[u] = <span class="literal">true</span>;</span><br><span class="line">                first_row.<span class="built_in">push_back</span>(u);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> v : graph[u]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (graph[v].<span class="built_in">size</span>() &lt; <span class="number">4</span> &amp;&amp; !visited[v]) &#123;</span><br><span class="line">                        u = v;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            first_row.<span class="built_in">push_back</span>(u);</span><br><span class="line">            visited[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// there is only 1 columns</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m.<span class="built_in">contains</span>(<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="type">int</span> u = m[<span class="number">1</span>].<span class="built_in">front</span>();</span><br><span class="line">            visited[u] = <span class="literal">true</span>;</span><br><span class="line">            first_row.<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> u = m[<span class="number">2</span>].<span class="built_in">front</span>();</span><br><span class="line">            visited[u] = <span class="literal">true</span>;</span><br><span class="line">            first_row.<span class="built_in">push_back</span>(u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v : graph[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (graph[v].<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">                    first_row.<span class="built_in">push_back</span>(v);</span><br><span class="line">                    visited[v] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(first_row);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n / (<span class="type">int</span>)first_row.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; next_row;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> u : first_row) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> v : graph[u]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!visited[v]) &#123;</span><br><span class="line">                        visited[v] = <span class="literal">true</span>;</span><br><span class="line">                        next_row.<span class="built_in">push_back</span>(v);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(next_row);</span><br><span class="line">            first_row = next_row;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Graph</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>3312. Sorted GCD Pair Queries</title>
    <url>/2024/10/19/3312-Sorted-GCD-Pair-Queries/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sorted-gcd-pair-queries/description/">3312. Sorted GCD Pair Queries</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> of length <code>n</code> and an integer array <code>queries</code>.</p>
<p>Let <code>gcdPairs</code> denote an array obtained by calculating the GCD of all possible pairs <code>(nums[i], nums[j])</code>, where <code>0 &lt;= i &lt; j &lt; n</code>, and then sorting these values in <strong>ascending</strong>  order.</p>
<p>For each query <code>queries[i]</code>, you need to find the element at index <code>queries[i]</code> in <code>gcdPairs</code>.</p>
<p>Return an integer array <code>answer</code>, where <code>answer[i]</code> is the value at <code>gcdPairs[queries[i]]</code> for each query.</p>
<p>The term <code>gcd(a, b)</code> denotes the <strong>greatest common divisor</strong>  of <code>a</code> and <code>b</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,4], queries = [0,2,2]</span><br><span class="line"></span><br><span class="line">Output: [1,2,2]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><code>gcdPairs = [gcd(nums[0], nums[1]), gcd(nums[0], nums[2]), gcd(nums[1], nums[2])] = [1, 2, 1]</code>.</p>
<p>After sorting in ascending order, <code>gcdPairs = [1, 1, 2]</code>.</p>
<p>So, the answer is <code>[gcdPairs[queries[0]], gcdPairs[queries[1]], gcdPairs[queries[2]]] = [1, 2, 2]</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,4,2,1], queries = [5,3,1,0]</span><br><span class="line"></span><br><span class="line">Output: [4,2,1,1]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><code>gcdPairs</code> sorted in ascending order is <code>[1, 1, 1, 2, 2, 4]</code>.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,2], queries = [0,0]</span><br><span class="line"></span><br><span class="line">Output: [2,2]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p><code>gcdPairs = [2]</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n == nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 5 * 10^4</code></li>
<li><code>1 &lt;= queries.length &lt;= 10^5</code></li>
<li><code>0 &lt;= queries[i] &lt; n * (n - 1) / 2</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>combinatorics</li>
<li>Weekly Contest 418</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">gcdValues</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxVal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            maxVal = <span class="built_in">max</span>(nums[i], maxVal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">gcd_count</span><span class="params">(maxVal + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">count</span><span class="params">(maxVal + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            count[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// the state transition</span></span><br><span class="line">        <span class="comment">// 2, 4, 6, 8 -&gt; n numbers divisible by 2</span></span><br><span class="line">        <span class="comment">// gcd_count(2) = (n - 1) * n / 2 - gcd_count(4) - gcd_count(6) - ...</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = maxVal; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= maxVal; j += i) &#123;</span><br><span class="line">                cnt += count[j];</span><br><span class="line">                gcd_count[i] -= gcd_count[j];</span><br><span class="line">            &#125;</span><br><span class="line">            gcd_count[i] += (cnt - <span class="number">1</span>) * cnt / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; preSum = &#123;gcd_count[<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxVal; i++) &#123;</span><br><span class="line">            preSum.<span class="built_in">push_back</span>(preSum.<span class="built_in">back</span>() + gcd_count[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for the second example, the gcd_count looks like</span></span><br><span class="line">        <span class="comment">// 0, 3, 2, 0, 1</span></span><br><span class="line">        <span class="comment">// the preSum looks like</span></span><br><span class="line">        <span class="comment">// 0, 1, 2, 3, 4</span></span><br><span class="line">        <span class="comment">// 0, 3, 5, 5, 6</span></span><br><span class="line">        <span class="comment">// for queries [5,3,1,0]</span></span><br><span class="line">        <span class="comment">// we are finding the right most value that can suit the need</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> q : queries) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = preSum.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">                <span class="keyword">if</span> (preSum[mid] == q) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preSum[mid] &lt; q) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Binary Search</tag>
        <tag>Prefix Sum</tag>
        <tag>Math</tag>
        <tag>Number Theory</tag>
        <tag>Counting</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>3315. Construct the Minimum Bitwise Array II</title>
    <url>/2024/10/19/3315-Construct-the-Minimum-Bitwise-Array-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/construct-the-minimum-bitwise-array-ii/description/">3315. Construct the Minimum Bitwise Array II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>nums</code> consisting of <code>n</code> prime integers.</p>
<p>You need to construct an array <code>ans</code> of length <code>n</code>, such that, for each index <code>i</code>, the bitwise <code>OR</code> of <code>ans[i]</code> and <code>ans[i] + 1</code> is equal to <code>nums[i]</code>, i.e. <code>ans[i] OR (ans[i] + 1) == nums[i]</code>.</p>
<p>Additionally, you must <strong>minimize</strong>  each value of <code>ans[i]</code> in the resulting array.</p>
<p>If it is not possible to find such a value for <code>ans[i]</code> that satisfies the <strong>condition</strong> , then set <code>ans[i] = -1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,5,7]</span><br><span class="line"></span><br><span class="line">Output: [-1,1,4,3]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>For <code>i = 0</code>, as there is no value for <code>ans[0]</code> that satisfies <code>ans[0] OR (ans[0] + 1) = 2</code>, so <code>ans[0] = -1</code>.</li>
<li>For <code>i = 1</code>, the smallest <code>ans[1]</code> that satisfies <code>ans[1] OR (ans[1] + 1) = 3</code> is <code>1</code>, because <code>1 OR (1 + 1) = 3</code>.</li>
<li>For <code>i = 2</code>, the smallest <code>ans[2]</code> that satisfies <code>ans[2] OR (ans[2] + 1) = 5</code> is <code>4</code>, because <code>4 OR (4 + 1) = 5</code>.</li>
<li>For <code>i = 3</code>, the smallest <code>ans[3]</code> that satisfies <code>ans[3] OR (ans[3] + 1) = 7</code> is <code>3</code>, because <code>3 OR (3 + 1) = 7</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [11,13,31]</span><br><span class="line"></span><br><span class="line">Output: [9,12,15]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>For <code>i = 0</code>, the smallest <code>ans[0]</code> that satisfies <code>ans[0] OR (ans[0] + 1) = 11</code> is <code>9</code>, because <code>9 OR (9 + 1) = 11</code>.</li>
<li>For <code>i = 1</code>, the smallest <code>ans[1]</code> that satisfies <code>ans[1] OR (ans[1] + 1) = 13</code> is <code>12</code>, because <code>12 OR (12 + 1) = 13</code>.</li>
<li>For <code>i = 2</code>, the smallest <code>ans[2]</code> that satisfies <code>ans[2] OR (ans[2] + 1) = 31</code> is <code>15</code>, because <code>15 OR (15 + 1) = 31</code>.</li>
</ul>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>2 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>nums[i]</code> is a prime number.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>bit manipulation, lowbit of t &#x3D; t &amp; -t</li>
<li>Biweekly Contest 141</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">minBitwiseArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((num &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> tmp = ~num;</span><br><span class="line">                tmp &amp;= -tmp;</span><br><span class="line">                res.<span class="built_in">push_back</span>(num ^ (tmp &gt;&gt; <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3316. Find Maximum Removals From Source String</title>
    <url>/2024/10/19/3316-Find-Maximum-Removals-From-Source-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-maximum-removals-from-source-string/description/">3316. Find Maximum Removals From Source String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>source</code> of size <code>n</code>, a string <code>pattern</code> that is a subsequence of <code>source</code>, and a <strong>sorted</strong>  integer array <code>targetIndices</code> that contains <strong>distinct</strong>  numbers in the range <code>[0, n - 1]</code>.</p>
<p>We define an <strong>operation</strong>  as removing a character at an index <code>idx</code> from <code>source</code> such that:</p>
<ul>
<li><code>idx</code> is an element of <code>targetIndices</code>.</li>
<li><code>pattern</code> remains a subsequence of <code>source</code> after removing the character.</li>
</ul>
<p>Performing an operation <strong>does not</strong>  change the indices of the other characters in <code>source</code>. For example, if you remove <code>&#39;c&#39;</code> from <code>&quot;acb&quot;</code>, the character at index 2 would still be <code>&#39;b&#39;</code>.</p>
<p>Return the <strong>maximum</strong>  number of operations that can be performed.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">source</span> = <span class="string">&quot;abbaa&quot;</span>, pattern = <span class="string">&quot;aba&quot;</span>, targetIndices = [0,1,2]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can’t remove <code>source[0]</code> but we can do either of these two operations:</p>
<ul>
<li>Remove <code>source[1]</code>, so that <code>source</code> becomes <code>&quot;a_baa&quot;</code>.</li>
<li>Remove <code>source[2]</code>, so that <code>source</code> becomes <code>&quot;ab_aa&quot;</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">source</span> = <span class="string">&quot;bcda&quot;</span>, pattern = <span class="string">&quot;d&quot;</span>, targetIndices = [0,3]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can remove <code>source[0]</code> and <code>source[3]</code> in two operations.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">source</span> = <span class="string">&quot;dda&quot;</span>, pattern = <span class="string">&quot;dda&quot;</span>, targetIndices = [0,1,2]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can’t remove any character from <code>source</code>.</p>
<p><strong>Example 4:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">source</span> = <span class="string">&quot;yeyeykyded&quot;</span>, pattern = <span class="string">&quot;yeyyd&quot;</span>, targetIndices = [0,2,3,4]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>We can remove <code>source[2]</code> and <code>source[3]</code> in two operations.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n == source.length &lt;= 3 * 10^3</code></li>
<li><code>1 &lt;= pattern.length &lt;= n</code></li>
<li><code>1 &lt;= targetIndices.length &lt;= n</code></li>
<li><code>targetIndices</code> is sorted in ascending order.</li>
<li>The input is generated such that <code>targetIndices</code> contains distinct elements in the range <code>[0, n - 1]</code>.</li>
<li><code>source</code> and <code>pattern</code> consist only of lowercase English letters.</li>
<li>The input is generated such that <code>pattern</code> appears as a subsequence in <code>source</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 141</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]:</span></span><br><span class="line">    <span class="comment">//  when we are at ith index of source and jth index of pattern</span></span><br><span class="line">    <span class="comment">//  the maximum number of removals we can achieve later</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    string source_, pattern_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxRemovals</span><span class="params">(string source, string pattern, vector&lt;<span class="type">int</span>&gt;&amp; targetIndices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = source.<span class="built_in">size</span>(), n = pattern.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">targets</span><span class="params">(targetIndices.begin(), targetIndices.end())</span></span>;</span><br><span class="line">        source_ = source; pattern_ = pattern;</span><br><span class="line">        dp.<span class="built_in">resize</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MIN));</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, targets);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> idx1, <span class="type">int</span> idx2, set&lt;<span class="type">int</span>&gt;&amp; targets)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// all pattern matched, all deletions afterwards can be applied</span></span><br><span class="line">        <span class="keyword">if</span> (idx2 == pattern_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = targets.<span class="built_in">lower_bound</span>(idx1);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">distance</span>(it, targets.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// we cannot match the pattern, return -n as a sign of failure</span></span><br><span class="line">        <span class="keyword">if</span> (idx1 == source_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -targets.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[idx1][idx2] != INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[idx1][idx2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// delete or just skip</span></span><br><span class="line">        <span class="keyword">if</span> (targets.<span class="built_in">contains</span>(idx1)) &#123;</span><br><span class="line">            res = <span class="number">1</span> + <span class="built_in">dfs</span>(idx1 + <span class="number">1</span>, idx2, targets);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = <span class="built_in">dfs</span>(idx1 + <span class="number">1</span>, idx2, targets);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// match</span></span><br><span class="line">        <span class="keyword">if</span> (source_[idx1] == pattern_[idx2]) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">dfs</span>(idx1 + <span class="number">1</span>, idx2 + <span class="number">1</span>, targets));</span><br><span class="line">        &#125;</span><br><span class="line">        dp[idx1][idx2] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>3317. Find the Number of Possible Ways for an Event</title>
    <url>/2024/10/19/3317-Find-the-Number-of-Possible-Ways-for-an-Event/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-number-of-possible-ways-for-an-event/description/">3317. Find the Number of Possible Ways for an Event</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given three integers <code>n</code>, <code>x</code>, and <code>y</code>.</p>
<p>An event is being held for <code>n</code> performers. When a performer arrives, they are <strong>assigned</strong>  to one of the <code>x</code> stages. All performers assigned to the <strong>same</strong>  stage will perform together as a band, though some stages might remain <strong>empty</strong> .</p>
<p>After all performances are completed, the jury will <strong>award</strong>  each band a score in the range <code>[1, y]</code>.</p>
<p>Return the <strong>total</strong>  number of possible ways the event can take place.</p>
<p>Since the answer may be very large, return it <strong>modulo</strong>  <code>10^9 + 7</code>.</p>
<p><strong>Note</strong>  that two events are considered to have been held <strong>differently</strong>  if <strong>either</strong>  of the following conditions is satisfied:</p>
<ul>
<li><strong>Any</strong>  performer is assigned a different stage.</li>
<li><strong>Any</strong>  band is awarded a different score.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1, x = 2, y = 3</span><br><span class="line"></span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>There are 2 ways to assign a stage to the performer.</li>
<li>The jury can award a score of either 1, 2, or 3 to the only band.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 5, x = 2, y = 1</span><br><span class="line"></span><br><span class="line">Output: 32</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>Each performer will be assigned either stage 1 or stage 2.</li>
<li>All bands will be awarded a score of 1.</li>
</ul>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, x = 3, y = 4</span><br><span class="line"></span><br><span class="line">Output: 684</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n, x, y &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Biweekly Contest 141</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// so first, how many stages we are going to use?</span></span><br><span class="line">    <span class="comment">// if n &gt;= x, we can use 1 ~ x stages;</span></span><br><span class="line">    <span class="comment">// if n &lt; x, we can only use a maximum of n stages</span></span><br><span class="line">    <span class="comment">// if we use i stages, then for each stage, the score can vary</span></span><br><span class="line">    <span class="comment">// from 1 ~ y, so i stages can have y ^ i scores</span></span><br><span class="line">    <span class="comment">// also, if we want to use i stage, how to choose that from x stages?</span></span><br><span class="line">    <span class="comment">// this is C(i, n), where 1 &lt;= i &lt;= min(n, x)</span></span><br><span class="line">    <span class="comment">// so assume now we have decided the number of stages i,</span></span><br><span class="line">    <span class="comment">// the next question is how to put the n people on i stages, or the number</span></span><br><span class="line">    <span class="comment">// of permutation to put n people on i stages</span></span><br><span class="line">    <span class="comment">// take example 3: we have 3 people, 3 stages, with max_score = 4</span></span><br><span class="line">    <span class="comment">// now we decided to choose 2 stages, so the factor we have is: C(2, 3) * (4 ^ 2)</span></span><br><span class="line">    <span class="comment">// how to put 3 people on 2 stages?</span></span><br><span class="line">    <span class="comment">// this is Stirling number of the second kind</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfWays</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> max_stages = <span class="built_in">min</span>(n, x), MOD = <span class="number">1&#x27;000&#x27;000&#x27;007</span>;</span><br><span class="line">        <span class="comment">// C(m, n) = C(m - 1, n - 1) + C(m, n - 1)</span></span><br><span class="line">        <span class="comment">// now we want to calculate C(1, x) ~ C(max_stages, x)</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">combinations</span><span class="params">(max_stages + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= x; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="built_in">min</span>(i, max_stages); j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                    combinations[j] = (combinations[j] + combinations[j - <span class="number">1</span>]) % MOD;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    combinations[j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">s</span><span class="params">(max_stages + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// S(n, k) = S(n - 1, k - 1) + k * S(n - 1, k)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="built_in">min</span>(i, max_stages); j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j) &#123;</span><br><span class="line">                    s[j] = (j * s[j] + s[j - <span class="number">1</span>]) % MOD;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    s[j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">fac</span><span class="params">(max_stages + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= max_stages; i++) &#123;</span><br><span class="line">            fac[i] = fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> y_base = y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= max_stages; i++) &#123;</span><br><span class="line">            <span class="comment">// first, choose i stages from x stages</span></span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> cur = combinations[i];</span><br><span class="line">            <span class="comment">// with i stages, there can be y_base score combinations</span></span><br><span class="line">            cur = cur * y_base % MOD;</span><br><span class="line">            <span class="comment">// finally, to put n people on i stages, and every stage</span></span><br><span class="line">            <span class="comment">// must have at one people, there are s[i] combinations</span></span><br><span class="line">            <span class="comment">// multiplied by fac[i] since stages are different</span></span><br><span class="line">            cur = (cur * s[i] % MOD) * fac[i] % MOD;</span><br><span class="line">            res = (res + cur) % MOD;</span><br><span class="line">            y_base = y_base * y % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>3320. Count The Number of Winning Sequences</title>
    <url>/2024/10/21/3320-Count-The-Number-of-Winning-Sequences/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-the-number-of-winning-sequences/description/">3320. Count The Number of Winning Sequences</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Alice and Bob are playing a fantasy battle game consisting of <code>n</code> rounds where they summon one of three magical creatures each round: a Fire Dragon, a Water Serpent, or an Earth Golem. In each round, players <strong>simultaneously</strong>  summon their creature and are awarded points as follows:</p>
<ul>
<li>If one player summons a Fire Dragon and the other summons an Earth Golem, the player who summoned the <strong>Fire Dragon</strong>  is awarded a point.</li>
<li>If one player summons a Water Serpent and the other summons a Fire Dragon, the player who summoned the <strong>Water Serpent</strong>  is awarded a point.</li>
<li>If one player summons an Earth Golem and the other summons a Water Serpent, the player who summoned the <strong>Earth Golem</strong>  is awarded a point.</li>
<li>If both players summon the same creature, no player is awarded a point.</li>
</ul>
<p>You are given a string <code>s</code> consisting of <code>n</code> characters <code>&#39;F&#39;</code>, <code>&#39;W&#39;</code>, and <code>&#39;E&#39;</code>, representing the sequence of creatures Alice will summon in each round:</p>
<ul>
<li>If <code>s[i] == &#39;F&#39;</code>, Alice summons a Fire Dragon.</li>
<li>If <code>s[i] == &#39;W&#39;</code>, Alice summons a Water Serpent.</li>
<li>If <code>s[i] == &#39;E&#39;</code>, Alice summons an Earth Golem.</li>
</ul>
<p>Bob’s sequence of moves is unknown, but it is guaranteed that Bob will never summon the same creature in two consecutive rounds. Bob beats Alice if the total number of points awarded to Bob after <code>n</code> rounds is <strong>strictly greater</strong>  than the points awarded to Alice.</p>
<p>Return the number of distinct sequences Bob can use to beat Alice.</p>
<p>Since the answer may be very large, return it <strong>modulo</strong>  <code>10^9 + 7</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;FFF&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Bob can beat Alice by making one of the following sequences of moves: <code>&quot;WFW&quot;</code>, <code>&quot;FWF&quot;</code>, or <code>&quot;WEW&quot;</code>. Note that other winning sequences like <code>&quot;WWE&quot;</code> or <code>&quot;EWW&quot;</code> are invalid since Bob cannot make the same move twice in a row.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;FWEFW&quot;</span></span><br><span class="line"></span><br><span class="line">Output: 18</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Bob can beat Alice by making one of the following sequences of moves: <code>&quot;FWFWF&quot;</code>, <code>&quot;FWFWE&quot;</code>, <code>&quot;FWEFE&quot;</code>, <code>&quot;FWEWE&quot;</code>, <code>&quot;FEFWF&quot;</code>, <code>&quot;FEFWE&quot;</code>, <code>&quot;FEFEW&quot;</code>, <code>&quot;FEWFE&quot;</code>, <code>&quot;WFEFE&quot;</code>, <code>&quot;WFEWE&quot;</code>, <code>&quot;WEFWF&quot;</code>, <code>&quot;WEFWE&quot;</code>, <code>&quot;WEFEF&quot;</code>, <code>&quot;WEFEW&quot;</code>, <code>&quot;WEWFW&quot;</code>, <code>&quot;WEWFE&quot;</code>, <code>&quot;EWFWE&quot;</code>, or <code>&quot;EWEWE&quot;</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s[i]</code> is one of <code>&#39;F&#39;</code>, <code>&#39;W&#39;</code>, or <code>&#39;E&#39;</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
<li>Weekly Contest 419</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// F vs. E: F win</span></span><br><span class="line">    <span class="comment">// W vs. F: w win</span></span><br><span class="line">    <span class="comment">// E vs. W: E win</span></span><br><span class="line">    <span class="comment">// the problem means, besides the draw games,</span></span><br><span class="line">    <span class="comment">// bob wins more times than alice, considering the number of draw</span></span><br><span class="line">    <span class="comment">// if 0 draw: total match n,</span></span><br><span class="line">    <span class="comment">//  the number of win: 1 -&gt; n / 2 + 1, nC1 + nC2 + ... + nC(n/2 + 1)</span></span><br><span class="line">    <span class="comment">//  the problem here is: bob cannot summon the same creation consecutively</span></span><br><span class="line">    <span class="comment">//  so how to filter out those combinations</span></span><br><span class="line">    <span class="comment">// if 1 draw: total match n - 1, we need to assign the draw nC1</span></span><br><span class="line">    <span class="type">int</span> n_, MOD;</span><br><span class="line">    string s_;</span><br><span class="line">    vector&lt;vector&lt;array&lt;<span class="type">int</span>, 3&gt;&gt;&gt; dp;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countWinningSequences</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        s_ = s;</span><br><span class="line">        n_ = s.<span class="built_in">size</span>();</span><br><span class="line">        MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        dp.<span class="built_in">resize</span>(n_,</span><br><span class="line">                  vector&lt;array&lt;<span class="type">int</span>, <span class="number">3</span>&gt;&gt;(</span><br><span class="line">                      n_ + <span class="number">1000</span>, <span class="built_in">array</span>&lt;<span class="type">int</span>, <span class="number">3</span>&gt;(&#123;INT_MIN, INT_MIN, INT_MIN&#125;)));</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> curScore, <span class="type">int</span> prev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == n_) &#123;</span><br><span class="line">            <span class="keyword">return</span> curScore &gt; <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="number">-1</span> &amp;&amp; dp[index][curScore][prev] != INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[index][curScore][prev];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cur;</span><br><span class="line">        <span class="keyword">if</span> (s_[index] == <span class="string">&#x27;F&#x27;</span>) &#123;</span><br><span class="line">            cur = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s_[index] == <span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">            cur = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != prev) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == cur) &#123;</span><br><span class="line">                    res = (res + <span class="built_in">dfs</span>(index + <span class="number">1</span>, curScore, i)) % MOD;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((i == <span class="number">0</span> &amp;&amp; cur == <span class="number">2</span>) || (i == <span class="number">1</span> &amp;&amp; cur == <span class="number">0</span>) ||</span><br><span class="line">                           (i == <span class="number">2</span> &amp;&amp; cur == <span class="number">1</span>)) &#123;</span><br><span class="line">                    res = (res + <span class="built_in">dfs</span>(index + <span class="number">1</span>, curScore + <span class="number">1</span>, i)) % MOD;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res = (res + <span class="built_in">dfs</span>(index + <span class="number">1</span>, curScore - <span class="number">1</span>, i)) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="number">-1</span>) &#123;</span><br><span class="line">            dp[index][curScore][prev] = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>3319. K-th Largest Perfect Subtree Size in Binary Tree</title>
    <url>/2024/10/21/3319-K-th-Largest-Perfect-Subtree-Size-in-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/k-th-largest-perfect-subtree-size-in-binary-tree/description/">3319. K-th Largest Perfect Subtree Size in Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given the <code>root</code> of a <strong>binary tree</strong>  and an integer <code>k</code>.</p>
<p>Return an integer denoting the size of the <code>k^th</code> <strong>largest perfect binary</strong>  subtree, or <code>-1</code> if it doesn’t exist.</p>
<p>A <strong>perfect binary tree</strong>  is a tree where all leaves are on the same level, and every parent has two children.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,3,6,5,2,5,7,1,8,null,null,6,8], k = 2</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/10/14/tmpresl95rp-1.png" style="width: 400px; height: 173px;">

<p>The roots of the perfect binary subtrees are highlighted in black. Their sizes, in non-increasing order are <code>[3, 3, 1, 1, 1, 1, 1, 1]</code>.<br><br>The <code>2^nd</code> largest size is 3.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6,7], k = 1</span><br><span class="line"></span><br><span class="line">Output: 7</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/10/14/tmp_s508x9e-1.png" style="width: 300px; height: 189px;">

<p>The sizes of the perfect binary subtrees in non-increasing order are <code>[7, 3, 3, 1, 1, 1, 1]</code>. The size of the largest perfect binary subtree is 7.</p>
<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,null,4], k = 3</span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/10/14/tmp74xnmpj4-1.png" style="width: 250px; height: 225px;">

<p>The sizes of the perfect binary subtrees in non-increasing order are <code>[1, 1]</code>. There are fewer than 3 perfect binary subtrees.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 2000]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 2000</code></li>
<li><code>1 &lt;= k &lt;= 1024</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
<li>Weekly Contest 419</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthLargestPerfectSubtree</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>() &amp;&amp; k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> val = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            k--;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="type">int</span> res = left + right + <span class="number">1</span>;</span><br><span class="line">            pq.<span class="built_in">push</span>(res);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>3321. Find X-Sum of All K-Long Subarrays II</title>
    <url>/2024/10/21/3321-Find-X-Sum-of-All-K-Long-Subarrays-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-x-sum-of-all-k-long-subarrays-ii/description/">3321. Find X-Sum of All K-Long Subarrays II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array <code>nums</code> of <code>n</code> integers and two integers <code>k</code> and <code>x</code>.</p>
<p>The <strong>x-sum</strong>  of an array is calculated by the following procedure:</p>
<ul>
<li>Count the occurrences of all elements in the array.</li>
<li>Keep only the occurrences of the top <code>x</code> most frequent elements. If two elements have the same number of occurrences, the element with the <strong>bigger</strong>  value is considered more frequent.</li>
<li>Calculate the sum of the resulting array.</li>
</ul>
<p><strong>Note</strong>  that if an array has less than <code>x</code> distinct elements, its <strong>x-sum</strong>  is the sum of the array.</p>
<p>Return an integer array <code>answer</code> of length <code>n - k + 1</code> where <code>answer[i]</code> is the <strong>x-sum</strong>  of the subarray <code>nums[i..i + k - 1]</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,2,2,3,4,2,3], k = 6, x = 2</span><br><span class="line"></span><br><span class="line">Output: [6,10,12]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>For subarray <code>[1, 1, 2, 2, 3, 4]</code>, only elements 1 and 2 will be kept in the resulting array. Hence, <code>answer[0] = 1 + 1 + 2 + 2</code>.</li>
<li>For subarray <code>[1, 2, 2, 3, 4, 2]</code>, only elements 2 and 4 will be kept in the resulting array. Hence, <code>answer[1] = 2 + 2 + 2 + 4</code>. Note that 4 is kept in the array since it is bigger than 3 and 1 which occur the same number of times.</li>
<li>For subarray <code>[2, 2, 3, 4, 2, 3]</code>, only elements 2 and 3 are kept in the resulting array. Hence, <code>answer[2] = 2 + 2 + 2 + 3 + 3</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,8,7,8,7,5], k = 2, x = 2</span><br><span class="line"></span><br><span class="line">Output: [11,15,15,15,12]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Since <code>k == x</code>, <code>answer[i]</code> is equal to the sum of the subarray <code>nums[i..i + k - 1]</code>.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>nums.length == n</code></li>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>1 &lt;= x &lt;= k &lt;= nums.length</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window with 2 sorted lists</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// we need a mapping here</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">findXSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        set&lt;pair&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt;&gt; mx, mi;</span><br><span class="line">        unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; m;</span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - k; i++) &#123;</span><br><span class="line">            pair&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; p;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; i + k) &#123;</span><br><span class="line">                <span class="type">int</span> r = nums[right];</span><br><span class="line">                <span class="keyword">if</span> (m[r] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    p = <span class="built_in">make_pair</span>(m[r], r);</span><br><span class="line">                    <span class="keyword">if</span> (mx.<span class="built_in">contains</span>(p)) &#123;</span><br><span class="line">                        cur -= p.first * p.second;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mx.<span class="built_in">erase</span>(p); mi.<span class="built_in">erase</span>(p);</span><br><span class="line">                    p.first++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    p = <span class="built_in">make_pair</span>(<span class="number">1</span>, r);</span><br><span class="line">                &#125;</span><br><span class="line">                cur += p.first * p.second;</span><br><span class="line">                m[r] = p.first;</span><br><span class="line">                mx.<span class="built_in">insert</span>(p);</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (mx.<span class="built_in">size</span>() &gt; x) &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = mx.<span class="built_in">begin</span>();</span><br><span class="line">                p = *it;</span><br><span class="line">                mx.<span class="built_in">erase</span>(it);</span><br><span class="line">                mi.<span class="built_in">insert</span>(p);</span><br><span class="line">                cur -= p.first * p.second;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; &quot;From &quot; &lt;&lt; i &lt;&lt; &quot; to &quot; &lt;&lt; i + k - 1 &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// for (auto it = mx.begin(); it != mx.end(); it++) &#123;</span></span><br><span class="line">            <span class="comment">//     cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// for (auto it = mi.begin(); it != mi.end(); it++) &#123;</span></span><br><span class="line">            <span class="comment">//     cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(cur);</span><br><span class="line">            <span class="type">int</span> l = nums[i];</span><br><span class="line">            p = <span class="built_in">make_pair</span>(m[l], l);</span><br><span class="line">            <span class="keyword">if</span> (mx.<span class="built_in">contains</span>(p)) &#123;</span><br><span class="line">                mx.<span class="built_in">erase</span>(p);</span><br><span class="line">                cur -= p.first * p.second;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mi.<span class="built_in">erase</span>(p);</span><br><span class="line">            &#125;</span><br><span class="line">            p.first--;</span><br><span class="line">            m[l]--;</span><br><span class="line">            <span class="keyword">if</span> (m[l] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                mi.<span class="built_in">insert</span>(p);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (mx.<span class="built_in">size</span>() &lt; x &amp;&amp; !mi.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = <span class="built_in">prev</span>(mi.<span class="built_in">end</span>());</span><br><span class="line">                p = *it;</span><br><span class="line">                mi.<span class="built_in">erase</span>(it);</span><br><span class="line">                mx.<span class="built_in">insert</span>(p);</span><br><span class="line">                cur += p.first * p.second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Sliding Window</tag>
        <tag>Heap (Priority Queue)</tag>
      </tags>
  </entry>
  <entry>
    <title>3324. Find the Sequence of Strings Appeared on the Screen</title>
    <url>/2024/10/22/3324-Find-the-Sequence-of-Strings-Appeared-on-the-Screen/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-sequence-of-strings-appeared-on-the-screen/description/">3324. Find the Sequence of Strings Appeared on the Screen</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string <code>target</code>.</p>
<p>Alice is going to type <code>target</code> on her computer using a special keyboard that has <strong>only two</strong>  keys:</p>
<ul>
<li>Key 1 appends the character <code>&quot;a&quot;</code> to the string on the screen.</li>
<li>Key 2 changes the <strong>last</strong>  character of the string on the screen to its <strong>next</strong>  character in the English alphabet. For example, <code>&quot;c&quot;</code> changes to <code>&quot;d&quot;</code> and <code>&quot;z&quot;</code> changes to <code>&quot;a&quot;</code>.</li>
</ul>
<p><strong>Note</strong>  that initially there is an empty string <code>&quot;&quot;</code> on the screen, so she can <strong>only</strong>  press key 1.</p>
<p>Return a list of all strings that appear on the screen as Alice types <code>target</code>, in the order they appear, using the <strong>minimum</strong>  key presses.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: target = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">Output: [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;ab&quot;</span>,<span class="string">&quot;aba&quot;</span>,<span class="string">&quot;abb&quot;</span>,<span class="string">&quot;abc&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The sequence of key presses done by Alice are:</p>
<ul>
<li>Press key 1, and the string on the screen becomes <code>&quot;a&quot;</code>.</li>
<li>Press key 1, and the string on the screen becomes <code>&quot;aa&quot;</code>.</li>
<li>Press key 2, and the string on the screen becomes <code>&quot;ab&quot;</code>.</li>
<li>Press key 1, and the string on the screen becomes <code>&quot;aba&quot;</code>.</li>
<li>Press key 2, and the string on the screen becomes <code>&quot;abb&quot;</code>.</li>
<li>Press key 2, and the string on the screen becomes <code>&quot;abc&quot;</code>.</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: target = <span class="string">&quot;he&quot;</span></span><br><span class="line"></span><br><span class="line">Output: [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;ha&quot;</span>,<span class="string">&quot;hb&quot;</span>,<span class="string">&quot;hc&quot;</span>,<span class="string">&quot;hd&quot;</span>,<span class="string">&quot;he&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= target.length &lt;= 400</code></li>
<li><code>target</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Weekly Contest 420</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">stringSequence</span><span class="params">(string target)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        string cur;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : target) &#123;</span><br><span class="line">            string tmp;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> d = <span class="string">&#x27;a&#x27;</span>; d &lt;= c; d++) &#123;</span><br><span class="line">                tmp = cur;</span><br><span class="line">                tmp += d;</span><br><span class="line">                res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>3325. Count Substrings With K-Frequency Characters I</title>
    <url>/2024/10/22/3325-Count-Substrings-With-K-Frequency-Characters-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/count-substrings-with-k-frequency-characters-i/description/">3325. Count Substrings With K-Frequency Characters I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string <code>s</code> and an integer <code>k</code>, return the total number of substrings of <code>s</code> where <strong>at least one</strong>  character appears <strong>at least</strong>  <code>k</code> times.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abacb&quot;</span>, k = 2</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The valid substrings are:</p>
<ul>
<li><code>&quot;aba&quot;</code> (character <code>&#39;a&#39;</code> appears 2 times).</li>
<li><code>&quot;abac&quot;</code> (character <code>&#39;a&#39;</code> appears 2 times).</li>
<li><code>&quot;abacb&quot;</code> (character <code>&#39;a&#39;</code> appears 2 times).</li>
<li><code>&quot;bacb&quot;</code> (character <code>&#39;b&#39;</code> appears 2 times).</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abcde&quot;</span>, k = 1</span><br><span class="line"></span><br><span class="line">Output: 15</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>All substrings are valid because every character appears at least once.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 3000</code></li>
<li><code>1 &lt;= k &lt;= s.length</code></li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
<li>Weekly Contest 420</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSubstrings</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, n = s.<span class="built_in">size</span>(), valid = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="type">char</span> r = s[right];</span><br><span class="line">            m[r]++;</span><br><span class="line">            <span class="keyword">if</span> (m[r] &gt;= k) &#123;</span><br><span class="line">                valid++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; valid) &#123;</span><br><span class="line">                res += n - right;</span><br><span class="line">                <span class="type">char</span> l = s[left];</span><br><span class="line">                m[l]--;</span><br><span class="line">                <span class="keyword">if</span> (m[l] == k - <span class="number">1</span>) &#123;</span><br><span class="line">                    valid--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>3326. Minimum Division Operations to Make Array Non Decreasing</title>
    <url>/2024/10/22/3326-Minimum-Division-Operations-to-Make-Array-Non-Decreasing/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-division-operations-to-make-array-non-decreasing/description/">3326. Minimum Division Operations to Make Array Non Decreasing</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code>.</p>
<p>Any <strong>positive</strong>  divisor of a natural number <code>x</code> that is <strong>strictly less</strong>  than <code>x</code> is called a <strong>proper divisor</strong>  of <code>x</code>. For example, 2 is a proper divisor of 4, while 6 is not a proper divisor of 6.</p>
<p>You are allowed to perform an <strong>operation</strong>  any number of times on <code>nums</code>, where in each <strong>operation</strong>  you select any one element from <code>nums</code> and divide it by its <strong>greatest</strong>  <strong>proper divisor</strong> .</p>
<p>Return the <strong>minimum</strong>  number of <strong>operations</strong>  required to make the array <strong>non-decreasing</strong> .</p>
<p>If it is <strong>not</strong>  possible to make the array non-decreasing using any number of operations, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [25,7]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Using a single operation, 25 gets divided by 5 and <code>nums</code> becomes <code>[5, 7]</code>.</p>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [7,7,6]</span><br><span class="line"></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,1,1]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^6</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>greedy</li>
<li>Weekly Contest 420</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; max_divisor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="built_in">findMax</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[i] /= max_divisor[nums[i]];</span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">findMax</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (max_divisor.<span class="built_in">contains</span>(num)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            max_divisor[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        max_divisor[num] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">                max_divisor[num] = <span class="built_in">max</span>(max_divisor[num], <span class="built_in">max</span>(i, num / i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>Number Theory</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>3327. Check if DFS Strings Are Palindromes</title>
    <url>/2024/10/22/3327-Check-if-DFS-Strings-Are-Palindromes/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/check-if-dfs-strings-are-palindromes/description/">3327. Check if DFS Strings Are Palindromes</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a tree rooted at node 0, consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The tree is represented by an array <code>parent</code> of size <code>n</code>, where <code>parent[i]</code> is the parent of node <code>i</code>. Since node 0 is the root, <code>parent[0] == -1</code>.</p>
<p>You are also given a string <code>s</code> of length <code>n</code>, where <code>s[i]</code> is the character assigned to node <code>i</code>.</p>
<p>Consider an empty string <code>dfsStr</code>, and define a recursive function <code>dfs(int x)</code> that takes a node <code>x</code> as a parameter and performs the following steps in order:</p>
<ul>
<li>Iterate over each child <code>y</code> of <code>x</code> <strong>in increasing order of their numbers</strong> , and call <code>dfs(y)</code>.</li>
<li>Add the character <code>s[x]</code> to the end of the string <code>dfsStr</code>.</li>
</ul>
<p><strong>Note</strong>  that <code>dfsStr</code> is shared across all recursive calls of <code>dfs</code>.</p>
<p>You need to find a boolean array <code>answer</code> of size <code>n</code>, where for each index <code>i</code> from <code>0</code> to <code>n - 1</code>, you do the following:</p>
<ul>
<li>Empty the string <code>dfsStr</code> and call <code>dfs(i)</code>.</li>
<li>If the resulting string <code>dfsStr</code> is a palindrome, then set <code>answer[i]</code> to <code>true</code>. Otherwise, set <code>answer[i]</code> to <code>false</code>.</li>
</ul>
<p>Return the array <code>answer</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/09/01/tree1drawio.png" style="width: 240px; height: 256px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: parent = [-1,0,0,1,1,2], s = <span class="string">&quot;aababa&quot;</span></span><br><span class="line"></span><br><span class="line">Output: [<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<ul>
<li>Calling <code>dfs(0)</code> results in the string <code>dfsStr = &quot;abaaba&quot;</code>, which is a palindrome.</li>
<li>Calling <code>dfs(1)</code> results in the string <code>dfsStr = &quot;aba&quot;</code>, which is a palindrome.</li>
<li>Calling <code>dfs(2)</code> results in the string <code>dfsStr = &quot;ab&quot;</code>, which is <strong>not</strong>  a palindrome.</li>
<li>Calling <code>dfs(3)</code> results in the string <code>dfsStr = &quot;a&quot;</code>, which is a palindrome.</li>
<li>Calling <code>dfs(4)</code> results in the string <code>dfsStr = &quot;b&quot;</code>, which is a palindrome.</li>
<li>Calling <code>dfs(5)</code> results in the string <code>dfsStr = &quot;a&quot;</code>, which is a palindrome.</li>
</ul>
<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2024/09/01/tree2drawio-1.png" style="width: 260px; height: 167px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: parent = [-1,0,0,0,0], s = <span class="string">&quot;aabcb&quot;</span></span><br><span class="line"></span><br><span class="line">Output: [<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>Every call on <code>dfs(x)</code> results in a palindrome string.</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == parent.length == s.length</code></li>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
<li><code>0 &lt;= parent[i] &lt;= n - 1</code> for all <code>i &gt;= 1</code>.</li>
<li><code>parent[0] == -1</code></li>
<li><code>parent</code> represents a valid tree.</li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Manacher’s algorithm</li>
<li>Weekly Contest 420</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;set&lt;<span class="type">int</span>&gt;&gt; children;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; ranges;</span><br><span class="line">    <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    string s_, postorder;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">findAnswer</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; parent, string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        s_ = s;</span><br><span class="line">        children.<span class="built_in">resize</span>(n);</span><br><span class="line">        ranges.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="built_in">buildTree</span>(parent);</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// now we have the full string in postorder, let&#x27;s manacher</span></span><br><span class="line">        <span class="comment">// step 0: pre-processing the string</span></span><br><span class="line">        string manacher = <span class="string">&quot;^#&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : postorder) &#123;</span><br><span class="line">            manacher.<span class="built_in">push_back</span>(c);</span><br><span class="line">            manacher.<span class="built_in">push_back</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        manacher.<span class="built_in">push_back</span>(<span class="string">&#x27;$&#x27;</span>);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; manacher &lt;&lt; endl;</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">halfLen</span><span class="params">(manacher.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> center = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; manacher.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; right) &#123;</span><br><span class="line">                len = <span class="built_in">min</span>(right - i, halfLen[<span class="number">2</span> * center - i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (manacher[i + len] == manacher[i - len]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + len &gt; right) &#123;</span><br><span class="line">                    right = i + len;</span><br><span class="line">                    center = i;</span><br><span class="line">                &#125;</span><br><span class="line">                len++;</span><br><span class="line">            &#125;</span><br><span class="line">            halfLen[i] = len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; manacher &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; halfLen.size(); i++) &#123;</span></span><br><span class="line">        <span class="comment">//     cout &lt;&lt; halfLen[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> duo = ranges[i];</span><br><span class="line">            <span class="type">int</span> l = duo.first * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> r = duo.second * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; duo.first &lt;&lt; &quot; &quot; &lt;&lt; duo.second &lt;&lt; endl;</span></span><br><span class="line">            res[i] = halfLen[(l + r) / <span class="number">2</span>] &gt; duo.second - duo.first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = cur;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> child : children[u]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(child);</span><br><span class="line">        &#125;</span><br><span class="line">        ranges[u] = &#123;l, cur&#125;;</span><br><span class="line">        cur++;</span><br><span class="line">        postorder.<span class="built_in">push_back</span>(s_[u]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; parent)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = parent.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> p = parent[i];</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="number">-1</span>) &#123;</span><br><span class="line">                children[p].<span class="built_in">insert</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Hash Function</tag>
      </tags>
  </entry>
  <entry>
    <title>34. Find First and Last Position of Element in Sorted Array</title>
    <url>/2023/01/17/34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. Find First and Last Position of Element in Sorted Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a></p>
<p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.</p>
<p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p>
<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [], target = 0</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>0 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li>
<li><code>nums</code> is a non-decreasing array.</li>
<li>-10<sup>9</sup> &lt;&#x3D; target &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Write different helper function to find left and right boundry</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left_bound = <span class="built_in">find_left_bound</span>(nums, target);</span><br><span class="line">        <span class="type">int</span> right_bound = <span class="built_in">find_right_bound</span>(nums, target);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res = &#123;left_bound, right_bound&#125;; </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_left_bound</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                res = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_right_bound</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span>  target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>, res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                res = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>341. Flatten Nested List Iterator</title>
    <url>/2023/08/28/341-Flatten-Nested-List-Iterator/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/flatten-nested-list-iterator/">341. Flatten Nested List Iterator</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/iterator//">Iterator</a></p>
<p>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.</p>
<p>Implement the <code>NestedIterator</code> class:</p>
<ul>
<li><code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> Initializes the iterator with the nested list <code>nestedList</code>.</li>
<li><code>int next()</code> Returns the next integer in the nested list.</li>
<li><code>boolean hasNext()</code> Returns <code>true</code> if there are still some integers in the nested list and <code>false</code> otherwise.</li>
</ul>
<p>Your code will be tested with the following pseudocode:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">initialize iterator with nestedList</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">while</span> iterator.hasNext()</span><br><span class="line">    append iterator.next() to the end of res</span><br><span class="line"><span class="built_in">return</span> res</span><br></pre></td></tr></table></figure>

<p>If <code>res</code> matches the expected flattened list, then your code will be judged as correct.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nestedList = [[1,1],2,[1,1]]</span><br><span class="line">Output: [1,1,2,1,1]</span><br><span class="line">Explanation: By calling next repeatedly <span class="keyword">until</span> hasNext returns <span class="literal">false</span>, the order of elements returned by next should be: [1,1,2,1,1].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nestedList = [1,[4,[6]]]</span><br><span class="line">Output: [1,4,6]</span><br><span class="line">Explanation: By calling next repeatedly <span class="keyword">until</span> hasNext returns <span class="literal">false</span>, the order of elements returned by next should be: [1,4,6].</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nestedList.length &lt;= 500</code></li>
<li>The values of the integers in the nested list is in the range [-10<sup>6</sup>, 10<sup>6</sup>].</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>we can do the traverse and generate the list during construction, or we can do the lazy iterator, which only check if there’s next item when calling <code>hasNext()</code></li>
<li>lazy iterator is better, and it needs us to change the vector when calling <code>hasNext()</code></li>
<li>deque provides the best performance, since we don’t care about random access and deque<br>allocates memory in large blocks</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the interface that allows for creating nested lists.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * class NestedInteger &#123;</span></span><br><span class="line"><span class="comment"> *   public:</span></span><br><span class="line"><span class="comment"> *     // Return true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"><span class="comment"> *     bool isInteger() const;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // Return the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"><span class="comment"> *     // The result is undefined if this NestedInteger holds a nested list</span></span><br><span class="line"><span class="comment"> *     int getInteger() const;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // Return the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"><span class="comment"> *     // The result is undefined if this NestedInteger holds a single integer</span></span><br><span class="line"><span class="comment"> *     const vector&lt;NestedInteger&gt; &amp;getList() const;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NestedIterator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    deque&lt;NestedInteger&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NestedIterator</span>(vector&lt;NestedInteger&gt; &amp;nestedList) &#123;</span><br><span class="line">        <span class="comment">// res = new vector&lt;NestedInteger&gt;(nestedList);</span></span><br><span class="line">        res = <span class="built_in">deque</span>&lt;NestedInteger&gt;(nestedList.<span class="built_in">begin</span>(), nestedList.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val = res.<span class="built_in">front</span>().<span class="built_in">getInteger</span>();</span><br><span class="line">        res.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!res.<span class="built_in">empty</span>() &amp;&amp; res.<span class="built_in">front</span>().<span class="built_in">isInteger</span>() == <span class="literal">false</span>) &#123;</span><br><span class="line">            vector&lt;NestedInteger&gt; frontList = res.<span class="built_in">front</span>().<span class="built_in">getList</span>();</span><br><span class="line">            res.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = frontList.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                res.<span class="built_in">push_front</span>(frontList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !res.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NestedIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NestedIterator i(nestedList);</span></span><br><span class="line"><span class="comment"> * while (i.hasNext()) cout &lt;&lt; i.next();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Stack</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>333. Largest BST Subtree</title>
    <url>/2024/07/01/333-Largest-BST-Subtree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/largest-bst-subtree/description/">333. Largest BST Subtree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.</p>
<p>A <strong>Binary Search Tree (BST)</strong>  is a tree in which all the nodes follow the below-mentioned properties:</p>
<ul>
<li>The left subtree values are less than the value of their parent (root) node’s value.</li>
<li>The right subtree values are greater than the value of their parent (root) node’s value.</li>
</ul>
<p><strong>Note:</strong>  A subtree must include all of its descendants.</p>
<p><strong>Example 1:</strong></p>
<p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/10/17/tmp.jpg" style="width: 571px; height: 302px;"></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [10,5,15,1,8,null,7]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The Largest BST Subtree <span class="keyword">in</span> this <span class="keyword">case</span> is the highlighted one. The <span class="built_in">return</span> value is the subtree<span class="string">&#x27;s size, which is 3.</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 10^4]</code>.</li>
<li><code>-10^4 &lt;= Node.val &lt;= 10^4</code></li>
</ul>
<p><strong>Follow up:</strong>  Can you figure out ways to solve it with <code>O(n)</code> time complexity?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestBSTSubtree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the return value: number of nodes, min, max</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, INT_MAX, INT_MIN&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> valid = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> minVal = root-&gt;val, maxVal = root-&gt;val, cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; left = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val &lt;= left[<span class="number">2</span>]) &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            minVal = left[<span class="number">1</span>];</span><br><span class="line">            cur += left[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; right = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val &gt;= right[<span class="number">1</span>]) &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            maxVal = right[<span class="number">2</span>];</span><br><span class="line">            cur += right[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, cur);</span><br><span class="line">            <span class="keyword">return</span> &#123;cur, minVal, maxVal&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, INT_MIN, INT_MAX&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>344. Reverse String</title>
    <url>/2023/01/19/344-Reverse-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/reverse-string/">344. Reverse String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/string/">String</a></p>
<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p>
<p>You must do this by modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a> with <code>O(1)</code> extra memory.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = [<span class="string">&quot;h&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;o&quot;</span>]</span><br><span class="line">Output: [<span class="string">&quot;o&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;h&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = [<span class="string">&quot;H&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;h&quot;</span>]</span><br><span class="line">Output: [<span class="string">&quot;h&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;H&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>s[i]</code> is a <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters">printable ascii character</a>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> c = s[right];</span><br><span class="line">            s[right] = s[left];</span><br><span class="line">            s[left] = c;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>346. Moving Average from Data Stream</title>
    <url>/2023/12/14/346-Moving-Average-from-Data-Stream/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/moving-average-from-data-stream/">346. Moving Average from Data Stream</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/data-stream//">Data Stream</a></p>
<p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p>
<p>Implement the <code>MovingAverage</code> class:</p>
<ul>
<li><code>MovingAverage(int size)</code> Initializes the object with the size of the window <code>size</code>.</li>
<li><code>double next(int val)</code> Returns the moving average of the last <code>size</code> values of the stream.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;MovingAverage&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>]</span><br><span class="line">[[3], [1], [10], [3], [5]]</span><br><span class="line">Output</span><br><span class="line">[null, 1.0, 5.5, 4.66667, 6.0]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MovingAverage movingAverage = new MovingAverage(3);</span><br><span class="line">movingAverage.next(1); // <span class="built_in">return</span> 1.0 = 1 / 1</span><br><span class="line">movingAverage.next(10); // <span class="built_in">return</span> 5.5 = (1 + 10) / 2</span><br><span class="line">movingAverage.next(3); // <span class="built_in">return</span> 4.66667 = (1 + 10 + 3) / 3</span><br><span class="line">movingAverage.next(5); // <span class="built_in">return</span> 6.0 = (10 + 3 + 5) / 3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= size &lt;= 1000</code></li>
<li>-10<sup>5</sup> &lt;&#x3D; val &lt;&#x3D; 10<sup>5</sup></li>
<li>At most 10<sup>4</sup> calls will be made to <code>next</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MovingAverage</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> size_;</span><br><span class="line">    <span class="type">double</span> sum_;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MovingAverage</span>(<span class="type">int</span> size) &#123;</span><br><span class="line">        size_ = size;</span><br><span class="line">        sum_ = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">next</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        sum_ += val;</span><br><span class="line">        q.<span class="built_in">push</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">size</span>() &gt; size_) &#123;</span><br><span class="line">            sum_ -= q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum_ / q.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MovingAverage object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MovingAverage* obj = new MovingAverage(size);</span></span><br><span class="line"><span class="comment"> * double param_1 = obj-&gt;next(val);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
        <tag>Data Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>347. Top K Frequent Elements</title>
    <url>/2023/11/06/347-Top-K-Frequent-Elements/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/top-k-frequent-elements/">347. Top K Frequent Elements</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/bucket-sort//">Bucket Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/counting//">Counting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/quickselect//">Quickselect</a></p>
<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1], k = 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li>
<li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>
</ul>
<p><strong>Follow up:</strong> Your algorithm’s time complexity must be better than <code>O(n log n)</code>, where n is the array’s size.</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            m[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">            <span class="type">int</span> num = it.first;</span><br><span class="line">            <span class="type">int</span> freq = it.second;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;freq, num&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; !pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> pair = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(pair[<span class="number">1</span>]);</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Divide and Conquer</tag>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Counting</tag>
        <tag>Quickselect</tag>
        <tag>Bucket Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>353. Design Snake Game</title>
    <url>/2023/12/27/353-Design-Snake-Game/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/design-snake-game/">353. Design Snake Game</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/simulation//">Simulation</a></p>
<p>Design a <a href="https://en.wikipedia.org/wiki/Snake_(video_game)">Snake game</a> that is played on a device with screen size <code>height x width</code>. <a href="http://patorjk.com/games/snake/">Play the game online</a> if you are not familiar with the game.</p>
<p>The snake is initially positioned at the top left corner <code>(0, 0)</code> with a length of <code>1</code> unit.</p>
<p>You are given an array <code>food</code> where food[i] &#x3D; (r<sub>i</sub>, c<sub>i</sub>) is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game’s score both increase by <code>1</code>.</p>
<p>Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.</p>
<p>When a piece of food appears on the screen, it is <strong>guaranteed</strong> that it will not appear on a block occupied by the snake.</p>
<p>The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies <strong>after</strong> moving (i.e. a snake of length 4 cannot run into itself).</p>
<p>Implement the <code>SnakeGame</code> class:</p>
<ul>
<li><code>SnakeGame(int width, int height, int[][] food)</code> Initializes the object with a screen of size <code>height x width</code> and the positions of the <code>food</code>.</li>
<li><code>int move(String direction)</code> Returns the score of the game after applying one <code>direction</code> move by the snake. If the game is over, return <code>-1</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/13/snake.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;SnakeGame&quot;</span>, <span class="string">&quot;move&quot;</span>, <span class="string">&quot;move&quot;</span>, <span class="string">&quot;move&quot;</span>, <span class="string">&quot;move&quot;</span>, <span class="string">&quot;move&quot;</span>, <span class="string">&quot;move&quot;</span>]</span><br><span class="line">[[3, 2, [[1, 2], [0, 1]]], [<span class="string">&quot;R&quot;</span>], [<span class="string">&quot;D&quot;</span>], [<span class="string">&quot;R&quot;</span>], [<span class="string">&quot;U&quot;</span>], [<span class="string">&quot;L&quot;</span>], [<span class="string">&quot;U&quot;</span>]]</span><br><span class="line">Output</span><br><span class="line">[null, 0, 0, 1, 1, 2, -1]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">SnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);</span><br><span class="line">snakeGame.move(<span class="string">&quot;R&quot;</span>); // <span class="built_in">return</span> 0</span><br><span class="line">snakeGame.move(<span class="string">&quot;D&quot;</span>); // <span class="built_in">return</span> 0</span><br><span class="line">snakeGame.move(<span class="string">&quot;R&quot;</span>); // <span class="built_in">return</span> 1, snake eats the first piece of food. The second piece of food appears at (0, 1).</span><br><span class="line">snakeGame.move(<span class="string">&quot;U&quot;</span>); // <span class="built_in">return</span> 1</span><br><span class="line">snakeGame.move(<span class="string">&quot;L&quot;</span>); // <span class="built_in">return</span> 2, snake eats the second food. No more food appears.</span><br><span class="line">snakeGame.move(<span class="string">&quot;U&quot;</span>); // <span class="built_in">return</span> -1, game over because snake collides with border</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; width, height &lt;&#x3D; 10<sup>4</sup></li>
<li><code>1 &lt;= food.length &lt;= 50</code></li>
<li><code>food[i].length == 2</code></li>
<li>0 &lt;&#x3D; r<sub>i</sub> &lt; height</li>
<li>0 &lt;&#x3D; c<sub>i</sub> &lt; width</li>
<li><code>direction.length == 1</code></li>
<li><code>direction</code> is <code>&#39;U&#39;</code>, <code>&#39;D&#39;</code>, <code>&#39;L&#39;</code>, or <code>&#39;R&#39;</code>.</li>
<li>At most 10<sup>4</sup> calls will be made to <code>move</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use a queue + set to record where the head&#x2F;tail is and if one node is in the snake</li>
<li>remove the previous tail first before checking if the snake is hitting itself</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnakeGame</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> width_;</span><br><span class="line">    <span class="type">int</span> height_;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; foods;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; body;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="type">bool</span> finished;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SnakeGame</span>(<span class="type">int</span> width, <span class="type">int</span> height, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; food) &#123;</span><br><span class="line">        width_ = width;</span><br><span class="line">        height_ = height;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> f : food) &#123;</span><br><span class="line">            <span class="type">int</span> row = f[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> col = f[<span class="number">1</span>];</span><br><span class="line">            foods.<span class="built_in">push</span>(<span class="built_in">encode</span>(row, col));</span><br><span class="line">        &#125;</span><br><span class="line">        body.<span class="built_in">push</span>(<span class="built_in">encode</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        s.<span class="built_in">insert</span>(<span class="built_in">encode</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        finished = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">move</span><span class="params">(string direction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (finished) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> r = body.<span class="built_in">back</span>() / width_;</span><br><span class="line">        <span class="type">int</span> c = body.<span class="built_in">back</span>() % width_;</span><br><span class="line">        <span class="type">char</span> d = direction[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">switch</span> (d) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                r++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">                r--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                c--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                c++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> val = <span class="built_in">encode</span>(r, c);</span><br><span class="line">        <span class="keyword">if</span> (!foods.<span class="built_in">empty</span>() &amp;&amp; val == foods.<span class="built_in">front</span>()) &#123;</span><br><span class="line">            foods.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> tail = body.<span class="built_in">front</span>();</span><br><span class="line">            body.<span class="built_in">pop</span>();</span><br><span class="line">            s.<span class="built_in">erase</span>(tail);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span> || r &gt;= height_ || c &lt; <span class="number">0</span> || c &gt;= width_ || s.<span class="built_in">count</span>(val)) &#123;</span><br><span class="line">            cout &lt;&lt; r &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">            finished = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;val: &quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">        s.<span class="built_in">insert</span>(val);</span><br><span class="line">        body.<span class="built_in">push</span>(val);</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">encode</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> row * width_ + col;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your SnakeGame object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * SnakeGame* obj = new SnakeGame(width, height, food);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;move(direction);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Simulation</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>354. Russian Doll Envelopes</title>
    <url>/2023/11/09/354-Russian-Doll-Envelopes/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/russian-doll-envelopes/">354. Russian Doll Envelopes</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/dynamic-programming//">Dynamic Programming</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a></p>
<p>You are given a 2D array of integers <code>envelopes</code> where envelopes[i] &#x3D; [w<sub>i</sub>, h<sub>i</sub>] represents the width and the height of an envelope.</p>
<p>One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope’s width and height.</p>
<p>Return <em>the maximum number of envelopes you can Russian doll (i.e., put one inside the other)</em>.</p>
<p><strong>Note:</strong> You cannot rotate an envelope.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: envelopes = [[1,1],[1,1],[1,1]]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; envelopes.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>envelopes[i].length == 2</code></li>
<li>1 &lt;&#x3D; w<sub>i</sub>, h<sub>i</sub> &lt;&#x3D; 10<sup>5</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
<li>sort the w in order but h reversely</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxEnvelopes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](vector&lt;<span class="type">int</span>&gt; lhs, vector&lt;<span class="type">int</span>&gt; rhs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lhs[<span class="number">0</span>] != rhs[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> lhs[<span class="number">0</span>] &lt; rhs[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> lhs[<span class="number">1</span>] &gt; rhs[<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">sort</span>(envelopes.<span class="built_in">begin</span>(), envelopes.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(envelopes.size(), <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; envelopes.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (envelopes[i][<span class="number">1</span>] &gt; envelopes[j][<span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">max</span>(res, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>360. Sort Transformed Array</title>
    <url>/2023/11/11/360-Sort-Transformed-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sort-transformed-array/">360. Sort Transformed Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a></p>
<p>Given a <strong>sorted</strong> integer array <code>nums</code> and three integers <code>a</code>, <code>b</code> and <code>c</code>, apply a quadratic function of the form f(x) &#x3D; ax<sup>2</sup> + bx + c to each element <code>nums[i]</code> in the array, and return <em>the array in a sorted order</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5</span><br><span class="line">Output: [3,9,15,33]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5</span><br><span class="line">Output: [-23,-5,1,7]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 200</code></li>
<li><code>-100 &lt;= nums[i], a, b, c &lt;= 100</code></li>
<li><code>nums</code> is sorted in <strong>ascending</strong> order.</li>
</ul>
<p><strong>Follow up:</strong> Could you solve it in <code>O(n)</code> time?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Two pointers, start and end of the array</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortTransformedArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = nums.<span class="built_in">size</span>() - <span class="number">1</span>, idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            idx = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="type">int</span> v1 = <span class="built_in">f</span>(a, b, c, nums[i]);</span><br><span class="line">            <span class="type">int</span> v2 = <span class="built_in">f</span>(a, b, c, nums[j]);</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1 &lt; v2) &#123;</span><br><span class="line">                    res[idx++] = v1;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res[idx++] = v2;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1 &lt; v2) &#123;</span><br><span class="line">                    res[idx--] = v2;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res[idx--] = v1;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * x * x + b * x + c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>Sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>362. Design Hit Counter</title>
    <url>/2023/12/14/362-Design-Hit-Counter/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/design-hit-counter/">362. Design Hit Counter</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a></p>
<p>Design a hit counter which counts the number of hits received in the past <code>5</code> minutes (i.e., the past <code>300</code> seconds).</p>
<p>Your system should accept a <code>timestamp</code> parameter (<strong>in seconds</strong> granularity), and you may assume that calls are being made to the system in chronological order (i.e., <code>timestamp</code> is monotonically increasing). Several hits may arrive roughly at the same time.</p>
<p>Implement the <code>HitCounter</code> class:</p>
<ul>
<li><code>HitCounter()</code> Initializes the object of the hit counter system.</li>
<li><code>void hit(int timestamp)</code> Records a hit that happened at <code>timestamp</code> (<strong>in seconds</strong>). Several hits may happen at the same <code>timestamp</code>.</li>
<li><code>int getHits(int timestamp)</code> Returns the number of hits in the past 5 minutes from <code>timestamp</code> (i.e., the past <code>300</code> seconds).</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;HitCounter&quot;</span>, <span class="string">&quot;hit&quot;</span>, <span class="string">&quot;hit&quot;</span>, <span class="string">&quot;hit&quot;</span>, <span class="string">&quot;getHits&quot;</span>, <span class="string">&quot;hit&quot;</span>, <span class="string">&quot;getHits&quot;</span>, <span class="string">&quot;getHits&quot;</span>]</span><br><span class="line">[[], [1], [2], [3], [4], [300], [300], [301]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, null, 3, null, 4, 3]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">HitCounter hitCounter = new HitCounter();</span><br><span class="line">hitCounter.hit(1);       // hit at timestamp 1.</span><br><span class="line">hitCounter.hit(2);       // hit at timestamp 2.</span><br><span class="line">hitCounter.hit(3);       // hit at timestamp 3.</span><br><span class="line">hitCounter.getHits(4);   // get hits at timestamp 4, <span class="built_in">return</span> 3.</span><br><span class="line">hitCounter.hit(300);     // hit at timestamp 300.</span><br><span class="line">hitCounter.getHits(300); // get hits at timestamp 300, <span class="built_in">return</span> 4.</span><br><span class="line">hitCounter.getHits(301); // get hits at timestamp 301, <span class="built_in">return</span> 3.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; timestamp &lt;&#x3D; 2 * 10<sup>9</sup></li>
<li>All the calls are being made to the system in chronological order (i.e., <code>timestamp</code> is monotonically increasing).</li>
<li>At most <code>300</code> calls will be made to <code>hit</code> and <code>getHits</code>.</li>
</ul>
<p><strong>Follow up:</strong> What if the number of hits per second could be huge? Does your design scale?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HitCounter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">HitCounter</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hit</span><span class="params">(<span class="type">int</span> timestamp)</span> </span>&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(timestamp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getHits</span><span class="params">(<span class="type">int</span> timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">front</span>() &lt;= timestamp - <span class="number">300</span>) &#123;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your HitCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * HitCounter* obj = new HitCounter();</span></span><br><span class="line"><span class="comment"> * obj-&gt;hit(timestamp);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;getHits(timestamp);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Binary Search</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>355. Design Twitter</title>
    <url>/2023/11/08/355-Design-Twitter/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/design-twitter/">355. Design Twitter</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a></p>
<p>Design a simplified version of Twitter where users can post tweets, follow&#x2F;unfollow another user, and is able to see the <code>10</code> most recent tweets in the user’s news feed.</p>
<p>Implement the <code>Twitter</code> class:</p>
<ul>
<li><code>Twitter()</code> Initializes your twitter object.</li>
<li><code>void postTweet(int userId, int tweetId)</code> Composes a new tweet with ID <code>tweetId</code> by the user <code>userId</code>. Each call to this function will be made with a unique <code>tweetId</code>.</li>
<li><code>List&lt;Integer&gt; getNewsFeed(int userId)</code> Retrieves the <code>10</code> most recent tweet IDs in the user’s news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be <strong>ordered from most recent to least recent</strong>.</li>
<li><code>void follow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started following the user with ID <code>followeeId</code>.</li>
<li><code>void unfollow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started unfollowing the user with ID <code>followeeId</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;Twitter&quot;</span>, <span class="string">&quot;postTweet&quot;</span>, <span class="string">&quot;getNewsFeed&quot;</span>, <span class="string">&quot;follow&quot;</span>, <span class="string">&quot;postTweet&quot;</span>, <span class="string">&quot;getNewsFeed&quot;</span>, <span class="string">&quot;unfollow&quot;</span>, <span class="string">&quot;getNewsFeed&quot;</span>]</span><br><span class="line">[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]</span><br><span class="line">Output</span><br><span class="line">[null, null, [5], null, null, [6, 5], null, [5]]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">Twitter twitter = new Twitter();</span><br><span class="line">twitter.postTweet(1, 5); // User 1 posts a new tweet (<span class="built_in">id</span> = 5).</span><br><span class="line">twitter.getNewsFeed(1);  // User 1<span class="string">&#x27;s news feed should return a list with 1 tweet id -&gt; [5]. return [5]</span></span><br><span class="line"><span class="string">twitter.follow(1, 2);    // User 1 follows user 2.</span></span><br><span class="line"><span class="string">twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).</span></span><br><span class="line"><span class="string">twitter.getNewsFeed(1);  // User 1&#x27;</span>s news feed should <span class="built_in">return</span> a list with 2 tweet ids -&gt; [6, 5]. Tweet <span class="built_in">id</span> 6 should precede tweet <span class="built_in">id</span> 5 because it is posted after tweet <span class="built_in">id</span> 5.</span><br><span class="line">twitter.unfollow(1, 2);  // User 1 unfollows user 2.</span><br><span class="line">twitter.getNewsFeed(1);  // User 1<span class="string">&#x27;s news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2.</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li>
<li>0 &lt;&#x3D; tweetId &lt;&#x3D; 10<sup>4</sup></li>
<li>All the tweets have <strong>unique</strong> IDs.</li>
<li>At most 3 * 10<sup>4</sup> calls will be made to <code>postTweet</code>, <code>getNewsFeed</code>, <code>follow</code>, and <code>unfollow</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue + multiple maps</li>
<li>the timestamp needs to be recorded separately</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Twitter &#123;</span><br><span class="line">public:</span><br><span class="line">    map&lt;int, <span class="built_in">set</span>&lt;int&gt;&gt; followed;</span><br><span class="line">    map&lt;int, vector&lt;int&gt;&gt; tweets;</span><br><span class="line">    map&lt;int, int&gt; tweetIdToTime;</span><br><span class="line">    int timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">Twitter</span></span>() &#123;</span><br><span class="line">        timestamp = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void postTweet(int userId, int tweetId) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!followed.count(userId)) &#123;</span><br><span class="line">            followed[userId] = <span class="built_in">set</span>&lt;int&gt;&#123;userId&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!tweets.count(userId)) &#123;</span><br><span class="line">            tweets[userId] = vector&lt;int&gt;&#123;tweetId&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tweets[userId].push_back(tweetId);</span><br><span class="line">        &#125;</span><br><span class="line">        tweetIdToTime[tweetId] = timestamp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt; getNewsFeed(int userId) &#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;int&gt; follows = followed[userId];</span><br><span class="line">        priority_queue&lt;vector&lt;int&gt;, vector&lt;vector&lt;int&gt;&gt;, less&lt;vector&lt;int&gt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (int follow : follows) &#123;</span><br><span class="line">            int idx = tweets[follow].size() - 1;</span><br><span class="line">            <span class="keyword">if</span> (idx &gt;= 0) &#123;</span><br><span class="line">                int tweetId = tweets[follow][idx];</span><br><span class="line">                pq.push(&#123;tweetIdToTime[tweetId], tweetId, follow, idx&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (pq.size() &gt; 0) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.size() == 10) &#123;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            auto triple = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            res.push_back(triple[1]);</span><br><span class="line">            int idx = triple[3];</span><br><span class="line">            int user = triple[2];</span><br><span class="line">            <span class="keyword">if</span> (idx &gt; 0) &#123;</span><br><span class="line">                int tweetId = tweets[user][idx - 1];</span><br><span class="line">                pq.push(&#123;tweetIdToTime[tweetId], tweetId, user, idx - 1&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void follow(int followerId, int followeeId) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!followed.count(followerId)) &#123;</span><br><span class="line">            followed[followerId] = <span class="built_in">set</span>&lt;int&gt;&#123;followerId&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!followed.count(followeeId)) &#123;</span><br><span class="line">            followed[followeeId] = <span class="built_in">set</span>&lt;int&gt;&#123;followeeId&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        followed[followerId].insert(followeeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void unfollow(int followerId, int followeeId) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!followed.count(followerId)) &#123;</span><br><span class="line">            followed[followerId] = <span class="built_in">set</span>&lt;int&gt;&#123;followerId&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!followed.count(followeeId)) &#123;</span><br><span class="line">            followed[followeeId] = <span class="built_in">set</span>&lt;int&gt;&#123;followeeId&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        followed[followerId].erase(followeeId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your Twitter object will be instantiated and called as such:</span><br><span class="line"> * Twitter* obj = new Twitter();</span><br><span class="line"> * obj-&gt;postTweet(userId,tweetId);</span><br><span class="line"> * vector&lt;int&gt; param_2 = obj-&gt;getNewsFeed(userId);</span><br><span class="line"> * obj-&gt;follow(followerId,followeeId);</span><br><span class="line"> * obj-&gt;unfollow(followerId,followeeId);</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>366. Find Leaves of Binary Tree</title>
    <url>/2024/07/01/366-Find-Leaves-of-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-leaves-of-binary-tree/description/">366. Find Leaves of Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, collect a tree’s nodes as if you were doing this:</p>
<ul>
<li>Collect all the leaf nodes.</li>
<li>Remove all the leaf nodes.</li>
<li>Repeat until the tree is empty.</li>
</ul>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/16/remleaves-tree.jpg" style="width: 500px; height: 215px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5]</span><br><span class="line">Output: [[4,5,3],[2],[1]]</span><br><span class="line">Explanation:</span><br><span class="line">[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on <span class="built_in">which</span> elements are returned.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">findLeaves</span>(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> leftDepth = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> rightDepth = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> depth = <span class="built_in">max</span>(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (depth &gt; res.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;root-&gt;val&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res[depth - <span class="number">1</span>].<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>370. Range Addition</title>
    <url>/2023/01/23/370-Range-Addition/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/range-addition/">370. Range Addition</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer <code>length</code> and an array <code>updates</code> where <code>updates[i] = [startIdx&lt;sub&gt;i&lt;/sub&gt;, endIdx&lt;sub&gt;i&lt;/sub&gt;, inc&lt;sub&gt;i&lt;/sub&gt;]</code>.</p>
<p>You have an array <code>arr</code> of length <code>length</code> with all zeros, and you have some operation to apply on <code>arr</code>. In the <code>i^th</code> operation, you should increment all the elements <code>arr[startIdx&lt;sub&gt;i&lt;/sub&gt;], arr[startIdx&lt;sub&gt;i&lt;/sub&gt; + 1], ..., arr[endIdx&lt;sub&gt;i&lt;/sub&gt;]</code> by <code>inc&lt;sub&gt;i&lt;/sub&gt;</code>.</p>
<p>Return <code>arr</code> after applying all the <code>updates</code>.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/03/27/rangeadd-grid.jpg" style="width: 413px; height: 573px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]</span><br><span class="line">Output: [-2,0,3,5,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: length = 10, updates = [[2,4,6],[5,6,8],[1,9,-4]]</span><br><span class="line">Output: [0,-4,2,2,2,4,4,-4,-4,-4]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= length &lt;= 10^5</code></li>
<li><code>0 &lt;= updates.length &lt;= 10^4</code></li>
<li><code>0 &lt;= startIdx&lt;sub&gt;i&lt;/sub&gt; &lt;= endIdx&lt;sub&gt;i&lt;/sub&gt; &lt; length</code></li>
<li><code>-1000 &lt;= inc&lt;sub&gt;i&lt;/sub&gt; &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use the diff array</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getModifiedArray</span><span class="params">(<span class="type">int</span> length, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; updates)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diffs</span><span class="params">(length, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt; update : updates) &#123;</span><br><span class="line">            <span class="type">int</span> start = update[<span class="number">0</span>], end = update[<span class="number">1</span>], val = update[<span class="number">2</span>];</span><br><span class="line">            diffs[start] += val;</span><br><span class="line">            <span class="keyword">if</span> (end + <span class="number">1</span> &lt; length) &#123;</span><br><span class="line">                diffs[end + <span class="number">1</span>] -= val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(diffs[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(diffs[i - <span class="number">1</span>] + diffs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>373. Find K Pairs with Smallest Sums</title>
    <url>/2023/10/12/373-Find-K-Pairs-with-Smallest-Sums/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-k-pairs-with-smallest-sums/">373. Find K Pairs with Smallest Sums</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a></p>
<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> sorted in <strong>non-decreasing order</strong> and an integer <code>k</code>.</p>
<p>Define a pair <code>(u, v)</code> which consists of one element from the first array and one element from the second array.</p>
<p>Return <em>the</em> <code>k</code> <em>pairs</em> (u<sub>1</sub>, v<sub>1</sub>), (u<sub>2</sub>, v<sub>2</sub>), …, (u<sub>k</sub>, v<sub>k</sub>) <em>with the smallest sums</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3</span><br><span class="line">Output: [[1,2],[1,4],[1,6]]</span><br><span class="line">Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2</span><br><span class="line">Output: [[1,1],[1,1]]</span><br><span class="line">Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2], nums2 = [3], k = 3</span><br><span class="line">Output: [[1,3],[2,3]]</span><br><span class="line">Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums1.length, nums2.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 10<sup>9</sup></li>
<li><code>nums1</code> and <code>nums2</code> both are sorted in <strong>non-decreasing order</strong>.</li>
<li>1 &lt;&#x3D; k &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Priority queue</li>
<li>Don’t think about moving 2 needles together, pair the first item in 1st list with all items in the 2nd list</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">kSmallestPairs</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span> size1 = nums1.<span class="built_in">size</span>(), size2 = nums2.<span class="built_in">size</span>();</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size1; i++) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;nums1[i] + nums2[<span class="number">0</span>], i, <span class="number">0</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; !pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; top = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> i1 = top[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> i2 = top[<span class="number">2</span>];</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;nums1[i1], nums2[i2]&#125;);</span><br><span class="line">            <span class="keyword">if</span> (i2 &lt; size2 - <span class="number">1</span>) &#123;</span><br><span class="line">                i2++;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;nums1[i1] + nums2[i2], i1, i2&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Heap (Priority Queue)</tag>
      </tags>
  </entry>
  <entry>
    <title>378. Kth Smallest Element in a Sorted Matrix</title>
    <url>/2023/10/17/378-Kth-Smallest-Element-in-a-Sorted-Matrix/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/">378. Kth Smallest Element in a Sorted Matrix</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/matrix//">Matrix</a></p>
<p>Given an <code>n x n</code> <code>matrix</code> where each of the rows and columns is sorted in ascending order, return <em>the</em> k<sup>th</sup> <em>smallest element in the matrix</em>.</p>
<p>Note that it is the k<sup>th</sup> smallest element <strong>in the sorted order</strong>, not the k<sup>th</sup> <strong>distinct</strong> element.</p>
<p>You must find a solution with a memory complexity better than O(n<sup>2</sup>).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8</span><br><span class="line">Output: 13</span><br><span class="line">Explanation: The elements <span class="keyword">in</span> the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[-5]], k = 1</span><br><span class="line">Output: -5</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == matrix.length == matrix[i].length</code></li>
<li><code>1 &lt;= n &lt;= 300</code></li>
<li>-10<sup>9</sup> &lt;&#x3D; <code>matrix[i][j]</code> &lt;&#x3D; 10<sup>9</sup></li>
<li>All the rows and columns of <code>matrix</code> are <strong>guaranteed</strong> to be sorted in <strong>non-decreasing order</strong>.</li>
<li>1 &lt;&#x3D; k &lt;&#x3D; n<sup>2</sup></li>
</ul>
<p><strong>Follow up:</strong></p>
<ul>
<li>Could you solve the problem with a constant memory (i.e., <code>O(1)</code> memory complexity)?</li>
<li>Could you solve the problem in <code>O(n)</code> time complexity? The solution may be too advanced for an interview but you may find reading <a href="http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf">this paper</a> fun.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;matrix[i][<span class="number">0</span>], i, <span class="number">0</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> i = p[<span class="number">1</span>], j = p[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;matrix[i][j + <span class="number">1</span>], i, j + <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> p = pq.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">return</span> p[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>379. Design Phone Directory</title>
    <url>/2024/01/03/379-Design-Phone-Directory/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/design-phone-directory/">379. Design Phone Directory</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a></p>
<p>Design a phone directory that initially has <code>maxNumbers</code> empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.</p>
<p>Implement the <code>PhoneDirectory</code> class:</p>
<ul>
<li><code>PhoneDirectory(int maxNumbers)</code> Initializes the phone directory with the number of available slots <code>maxNumbers</code>.</li>
<li><code>int get()</code> Provides a number that is not assigned to anyone. Returns <code>-1</code> if no number is available.</li>
<li><code>bool check(int number)</code> Returns <code>true</code> if the slot <code>number</code> is available and <code>false</code> otherwise.</li>
<li><code>void release(int number)</code> Recycles or releases the slot <code>number</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;PhoneDirectory&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;check&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;check&quot;</span>, <span class="string">&quot;release&quot;</span>, <span class="string">&quot;check&quot;</span>]</span><br><span class="line">[[3], [], [], [2], [], [2], [2], [2]]</span><br><span class="line">Output</span><br><span class="line">[null, 0, 1, <span class="literal">true</span>, 2, <span class="literal">false</span>, null, <span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">PhoneDirectory phoneDirectory = new PhoneDirectory(3);</span><br><span class="line">phoneDirectory.get();      // It can <span class="built_in">return</span> any available phone number. Here we assume it returns 0.</span><br><span class="line">phoneDirectory.get();      // Assume it returns 1.</span><br><span class="line">phoneDirectory.check(2);   // The number 2 is available, so <span class="built_in">return</span> <span class="literal">true</span>.</span><br><span class="line">phoneDirectory.get();      // It returns 2, the only number that is left.</span><br><span class="line">phoneDirectory.check(2);   // The number 2 is no longer available, so <span class="built_in">return</span> <span class="literal">false</span>.</span><br><span class="line">phoneDirectory.release(2); // Release number 2 back to the pool.</span><br><span class="line">phoneDirectory.check(2);   // Number 2 is available again, <span class="built_in">return</span> <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; maxNumbers &lt;&#x3D; 10<sup>4</sup></li>
<li><code>0 &lt;= number &lt; maxNumbers</code></li>
<li>At most 2 * 10<sup>4</sup> calls will be made to <code>get</code>, <code>check</code>, and <code>release</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use set + queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneDirectory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; available;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; used;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PhoneDirectory</span>(<span class="type">int</span> maxNumbers) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxNumbers; i++) &#123;</span><br><span class="line">            available.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!available.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> number = available.<span class="built_in">front</span>();</span><br><span class="line">            used.<span class="built_in">insert</span>(number);</span><br><span class="line">            available.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !used.<span class="built_in">count</span>(number);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">(<span class="type">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (used.<span class="built_in">count</span>(number)) &#123;</span><br><span class="line">            available.<span class="built_in">push</span>(number);</span><br><span class="line">            used.<span class="built_in">erase</span>(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your PhoneDirectory object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * PhoneDirectory* obj = new PhoneDirectory(maxNumbers);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get();</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;check(number);</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>380. Insert Delete GetRandom O(1)</title>
    <url>/2023/01/31/380-Insert-Delete-GetRandom-O-1/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/insert-delete-getrandom-o1/">380. Insert Delete GetRandom O(1)</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/design/">Design</a>, <a href="https://leetcode.com/tag/randomized/">Randomized</a></p>
<p>Implement the <code>RandomizedSet</code> class:</p>
<ul>
<li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li>
<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li>
<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li>
<li><code>int getRandom()</code> Returns a random element from the current set of elements (it’s guaranteed that at least one element exists when this method is called). Each element must have the <strong>same probability</strong> of being returned.</li>
</ul>
<p>You must implement the functions of the class such that each function works in <strong>average</strong> <code>O(1)</code> time complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]</span><br><span class="line">[[], [1], [2], [2], [], [1], [2], []]</span><br><span class="line">Output</span><br><span class="line">[null, true, false, true, 2, true, false, 2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">RandomizedSet randomizedSet = new RandomizedSet();</span><br><span class="line">randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.</span><br><span class="line">randomizedSet.remove(2); // Returns false as 2 does not exist in the set.</span><br><span class="line">randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].</span><br><span class="line">randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.</span><br><span class="line">randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].</span><br><span class="line">randomizedSet.insert(2); // 2 was already in the set, so return false.</span><br><span class="line">randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>-2<sup>31</sup> &lt;&#x3D; val &lt;&#x3D; 2<sup>31</sup> - 1</li>
<li>At most <code>2 *</code> 10<sup>5</sup> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>
<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use array for O(1) random access, map doesn’t have O(1) random access, it needs to advance n slots</li>
<li>Use a map from val to index to ensure O(1) addition&#x2F;removal</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vals;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; valToIndex;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RandomizedSet</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (valToIndex.<span class="built_in">count</span>(val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vals.<span class="built_in">push_back</span>(val);</span><br><span class="line">        valToIndex[val] = vals.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!valToIndex.<span class="built_in">count</span>(val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx = valToIndex[val];</span><br><span class="line">        <span class="type">int</span> last = vals.<span class="built_in">back</span>();</span><br><span class="line">        <span class="comment">// it&#x27;s to remove the value from array in O(1)</span></span><br><span class="line">        vals[idx] = last;</span><br><span class="line">        valToIndex[last] = idx;</span><br><span class="line">        vals.<span class="built_in">pop_back</span>();</span><br><span class="line">        valToIndex.<span class="built_in">erase</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vals[<span class="built_in">rand</span>() % vals.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedSet* obj = new RandomizedSet();</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;insert(val);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Math</tag>
        <tag>Design</tag>
        <tag>Randomized</tag>
      </tags>
  </entry>
  <entry>
    <title>387. First Unique Character in a String</title>
    <url>/2023/12/19/387-First-Unique-Character-in-a-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/first-unique-character-in-a-string/">387. First Unique Character in a String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/counting//">Counting</a></p>
<p>Given a string <code>s</code>, <em>find the first non-repeating character in it and return its index</em>. If it does not exist, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;leetcode&quot;</span></span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;loveleetcode&quot;</span></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aabb&quot;</span></span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>s</code> consists of only lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>map</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstUniqChar</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            m[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m[s[i]] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Queue</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>388. Longest Absolute File Path</title>
    <url>/2023/12/09/388-Longest-Absolute-File-Path/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-absolute-file-path/">388. Longest Absolute File Path</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a></p>
<p>Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:</p>
<p><img src="https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg"></p>
<p>Here, we have <code>dir</code> as the only directory in the root. <code>dir</code> contains two subdirectories, <code>subdir1</code> and <code>subdir2</code>. <code>subdir1</code> contains a file <code>file1.ext</code> and subdirectory <code>subsubdir1</code>. <code>subdir2</code> contains a subdirectory <code>subsubdir2</code>, which contains a file <code>file2.ext</code>.</p>
<p>In text form, it looks like this (with ⟶ representing the tab character):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span></span><br><span class="line">⟶ subdir1</span><br><span class="line">⟶ ⟶ file1.ext</span><br><span class="line">⟶ ⟶ subsubdir1</span><br><span class="line">⟶ subdir2</span><br><span class="line">⟶ ⟶ subsubdir2</span><br><span class="line">⟶ ⟶ ⟶ file2.ext</span><br></pre></td></tr></table></figure>

<p>If we were to write this representation in code, it will look like this: <code>&quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&quot;</code>. Note that the <code>&#39;\n&#39;</code> and <code>&#39;\t&#39;</code> are the new-line and tab characters.</p>
<p>Every file and directory has a unique <strong>absolute path</strong> in the file system, which is the order of directories that must be opened to reach the file&#x2F;directory itself, all concatenated by <code>&#39;/&#39;s</code>. Using the above example, the <strong>absolute path</strong> to <code>file2.ext</code> is <code>&quot;dir/subdir2/subsubdir2/file2.ext&quot;</code>. Each directory name consists of letters, digits, and&#x2F;or spaces. Each file name is of the form <code>name.extension</code>, where <code>name</code> and <code>extension</code> consist of letters, digits, and&#x2F;or spaces.</p>
<p>Given a string <code>input</code> representing the file system in the explained format, return <em>the length of the <strong>longest absolute path</strong> to a <strong>file</strong> in the abstracted file system</em>. If there is no file in the system, return <code>0</code>.</p>
<p><strong>Note</strong> that the testcases are generated such that the file system is valid and no file or directory name has length 0.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: input = <span class="string">&quot;dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext&quot;</span></span><br><span class="line">Output: 20</span><br><span class="line">Explanation: We have only one file, and the absolute path is <span class="string">&quot;dir/subdir2/file.ext&quot;</span> of length 20.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: input = <span class="string">&quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&quot;</span></span><br><span class="line">Output: 32</span><br><span class="line">Explanation: We have two files:</span><br><span class="line"><span class="string">&quot;dir/subdir1/file1.ext&quot;</span> of length 21</span><br><span class="line"><span class="string">&quot;dir/subdir2/subsubdir2/file2.ext&quot;</span> of length 32.</span><br><span class="line">We <span class="built_in">return</span> 32 since it is the longest absolute path to a file.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: input = <span class="string">&quot;a&quot;</span></span><br><span class="line">Output: 0</span><br><span class="line">Explanation: We <span class="keyword">do</span> not have any files, just a single directory named <span class="string">&quot;a&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; input.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>input</code> may contain lowercase or uppercase English letters, a new line character <code>&#39;\n&#39;</code>, a tab character <code>&#39;\t&#39;</code>, a dot <code>&#39;.&#39;</code>, a space <code>&#39; &#39;</code>, and digits.</li>
<li>All file and directory names have <strong>positive</strong> length.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>stack</li>
<li>‘\n’ and ‘\t’ are char in cpp</li>
<li>try to write with getline next time</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int lengthLongestPath(string input) &#123;</span><br><span class="line">        vector&lt;string&gt; lines;</span><br><span class="line">        vector&lt;string&gt; vec;</span><br><span class="line">        int pos = 0;</span><br><span class="line">        <span class="keyword">while</span> ((pos = input.find(&#x27;\n&#x27;)) != string::npos) &#123;</span><br><span class="line">            string item = input.substr(0, pos);</span><br><span class="line">            lines.push_back(item);</span><br><span class="line">            input.erase(0, pos + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        lines.push_back(input);</span><br><span class="line">        int res = 0;</span><br><span class="line">        <span class="keyword">for</span> (string line: lines) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">line &lt;&lt; endl;</span></span><br><span class="line"><span class="string">            int level = line</span>.find_last_of(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (level != string::npos) &#123;</span><br><span class="line">                line = line.substr(level + 1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                level = -1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (vec.size() &gt; level + 1) &#123;</span><br><span class="line">                vec.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            vec.push_back(line);</span><br><span class="line">            <span class="keyword">if</span> (line.find(<span class="string">&#x27;.&#x27;</span>) != string::npos) &#123;</span><br><span class="line">                int <span class="built_in">sum</span> = 0;</span><br><span class="line">                <span class="keyword">for</span> (string s : vec) &#123;</span><br><span class="line">                    <span class="built_in">sum</span> += s.size();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">sum</span> = <span class="built_in">sum</span> + vec.size() - 1;</span><br><span class="line">                res = max(res, <span class="built_in">sum</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Depth-First Search</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>389. Find the Difference</title>
    <url>/2023/12/26/389-Find-the-Difference/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-difference/">389. Find the Difference</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/bit-manipulation//">Bit Manipulation</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a></p>
<p>You are given two strings <code>s</code> and <code>t</code>.</p>
<p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p>
<p>Return the letter that was added to <code>t</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;abcd&quot;</span>, t = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">Output: <span class="string">&quot;e&quot;</span></span><br><span class="line">Explanation: <span class="string">&#x27;e&#x27;</span> is the letter that was added.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;&quot;</span>, t = <span class="string">&quot;y&quot;</span></span><br><span class="line">Output: <span class="string">&quot;y&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 1000</code></li>
<li><code>t.length == s.length + 1</code></li>
<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use xor operation</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">findTheDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            res ^= c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : t) &#123;</span><br><span class="line">            res ^= c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sorting</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>395. Longest Substring with At Least K Repeating Characters</title>
    <url>/2023/12/07/395-Longest-Substring-with-At-Least-K-Repeating-Characters/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/">395. Longest Substring with At Least K Repeating Characters</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a></p>
<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>such that the frequency of each character in this substring is greater than or equal to</em> <code>k</code>.</p>
<p>if no such substring exists, return 0.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;aaabb&quot;</span>, k = 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The longest substring is <span class="string">&quot;aaa&quot;</span>, as <span class="string">&#x27;a&#x27;</span> is repeated 3 <span class="built_in">times</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;ababbc&quot;</span>, k = 2</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The longest substring is <span class="string">&quot;ababb&quot;</span>, as <span class="string">&#x27;a&#x27;</span> is repeated 2 <span class="built_in">times</span> and <span class="string">&#x27;b&#x27;</span> is repeated 3 <span class="built_in">times</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>s</code> consists of only lowercase English letters.</li>
<li>1 &lt;&#x3D; k &lt;&#x3D; 10<sup>5</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
<li>need to introduce a new parameter distinct count and enumerate on it, without the parameter we don’t know how to shrink the subarray</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestSubstring</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">            maxLen = <span class="built_in">max</span>(maxLen, <span class="built_in">longest</span>(s, k, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longest</span><span class="params">(string &amp;s, <span class="type">int</span> k, <span class="type">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, currCount = <span class="number">0</span>, currValid = <span class="number">0</span>, maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">freq</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (freq[s[right] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                currCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            freq[s[right] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            <span class="keyword">if</span> (freq[s[right] - <span class="string">&#x27;a&#x27;</span>] == k) &#123;</span><br><span class="line">                currValid++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currCount == currValid) &#123;</span><br><span class="line">                maxLen = <span class="built_in">max</span>(maxLen, right - left + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; currCount &gt; count) &#123;</span><br><span class="line">                <span class="keyword">if</span> (freq[s[left] - <span class="string">&#x27;a&#x27;</span>] == k) &#123;</span><br><span class="line">                    currValid--;</span><br><span class="line">                &#125;</span><br><span class="line">                freq[s[left] -<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">                <span class="keyword">if</span> (freq[s[left] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                    currCount--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Divide and Conquer</tag>
        <tag>Sliding Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>402. Remove K Digits</title>
    <url>/2023/12/16/402-Remove-K-Digits/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/remove-k-digits/">402. Remove K Digits</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/greedy//">Greedy</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a></p>
<p>Given string num representing a non-negative integer <code>num</code>, and an integer <code>k</code>, return <em>the smallest possible integer after removing</em> <code>k</code> <em>digits from</em> <code>num</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: num = <span class="string">&quot;1432219&quot;</span>, k = 3</span><br><span class="line">Output: <span class="string">&quot;1219&quot;</span></span><br><span class="line">Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 <span class="built_in">which</span> is the smallest.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: num = <span class="string">&quot;10200&quot;</span>, k = 1</span><br><span class="line">Output: <span class="string">&quot;200&quot;</span></span><br><span class="line">Explanation: Remove the leading 1 and the number is 200\. Note that the output must not contain leading zeroes.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: num = <span class="string">&quot;10&quot;</span>, k = 2</span><br><span class="line">Output: <span class="string">&quot;0&quot;</span></span><br><span class="line">Explanation: Remove all the digits from the number and it is left with nothing <span class="built_in">which</span> is 0.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; k &lt;&#x3D; num.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>num</code> consists of only digits.</li>
<li><code>num</code> does not have any leading zeros except for the zero itself.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>two pass, first make it monotonic, then remove extra tail elements</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeKdigits</span><span class="params">(string num, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num.<span class="built_in">size</span>() &lt;= k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> removed = <span class="number">0</span>;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; (s.<span class="built_in">top</span>() &gt; num[i]) &amp;&amp; removed &lt; k) &#123;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                removed++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>() &amp;&amp; num[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s.<span class="built_in">push</span>(num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; removed &amp;&amp; !s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            removed++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(s.<span class="built_in">top</span>());</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>404. Sum of Left Leaves</title>
    <url>/2024/05/24/404-Sum-of-Left-Leaves/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sum-of-left-leaves/description/">404. Sum of Left Leaves</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the sum of all left leaves.</p>
<p>A <strong>leaf</strong>  is a node with no children. A <strong>left leaf</strong>  is a leaf that is the left child of another node.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg" style="width: 277px; height: 302px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: 24</span><br><span class="line">Explanation: There are two left leaves <span class="keyword">in</span> the binary tree, with values 9 and 15 respectively.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; !root-&gt;left-&gt;right) &#123;</span><br><span class="line">            res += root-&gt;left-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        res += <span class="built_in">sumOfLeftLeaves</span>(root-&gt;left);</span><br><span class="line">        res += <span class="built_in">sumOfLeftLeaves</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>410. Split Array Largest Sum</title>
    <url>/2023/01/30/410-Split-Array-Largest-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/split-array-largest-sum/">410. Split Array Largest Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a>, <a href="https://leetcode.com/tag/greedy/">Greedy</a></p>
<p>Given an integer array <code>nums</code> and an integer <code>k</code>, split <code>nums</code> into <code>k</code> non-empty subarrays such that the largest sum of any subarray is <strong>minimized</strong>.</p>
<p>Return <em>the minimized largest sum of the split</em>.</p>
<p>A <strong>subarray</strong> is a contiguous part of the array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: nums = [7,2,5,10,8], k = 2</span><br><span class="line">Output: 18</span><br><span class="line">Explanation: There are four ways to split nums into two subarrays.</span><br><span class="line">The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5], k = 2</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: There are four ways to split nums into two subarrays.</span><br><span class="line">The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
<li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>6</sup></li>
<li><code>1 &lt;= k &lt;= min(50, nums.length)</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Read the problem: A subarray is a <strong>contiguous</strong> part of the array.</li>
<li>Use binary search and helper function to find the left boundary</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subarrayNum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>();) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (sum &lt;= s &amp;&amp; i &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                sum += nums[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; s) &#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">splitArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &gt; left) &#123;</span><br><span class="line">                left = num;</span><br><span class="line">            &#125;</span><br><span class="line">            right += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> subNum = <span class="built_in">subarrayNum</span>(nums, mid);</span><br><span class="line">            <span class="keyword">if</span> (subNum == k) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (subNum &gt; k) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (subNum &lt; k) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>416. Partition Equal Subset Sum</title>
    <url>/2024/07/26/416-Partition-Equal-Subset-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/partition-equal-subset-sum/description/">416. Partition Equal Subset Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array <code>nums</code>, return <code>true</code> if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or <code>false</code> otherwise.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,5,11,5]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: The array can be partitioned as [1, 5, 5] and [11].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,5]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: The array cannot be partitioned into equal <span class="built_in">sum</span> subsets.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 200</code></li>
<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>0&#x2F;1 knapsack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(sum / <span class="number">2</span> + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="comment">// the dp definition:</span></span><br><span class="line">        <span class="comment">//  dp[i][j] = true: the first i items can form a value of j</span></span><br><span class="line">        <span class="comment">//  dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i]]</span></span><br><span class="line">        <span class="comment">// compress dimension:</span></span><br><span class="line">        <span class="comment">//  dp[i][j] only requires data from dp[i - 1][j] and dp[i - 1][j - nums[i]]</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = sum / <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i]) &#123;</span><br><span class="line">                    dp[j] = dp[j] || dp[j - nums[i]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[sum / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>424. Longest Repeating Character Replacement</title>
    <url>/2023/12/04/424-Longest-Repeating-Character-Replacement/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-repeating-character-replacement/">424. Longest Repeating Character Replacement</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a></p>
<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p>
<p>Return <em>the length of the longest substring containing the same letter you can get after performing the above operations</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;ABAB&quot;</span>, k = 2</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Replace the two <span class="string">&#x27;A&#x27;</span>s with two <span class="string">&#x27;B&#x27;</span>s or vice versa.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;AABABBA&quot;</span>, k = 1</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Replace the one <span class="string">&#x27;A&#x27;</span> <span class="keyword">in</span> the middle with <span class="string">&#x27;B&#x27;</span> and form <span class="string">&quot;AABBBBA&quot;</span>.</span><br><span class="line">The substring <span class="string">&quot;BBBB&quot;</span> has the longest repeating letters, <span class="built_in">which</span> is 4.</span><br><span class="line">There may exists other ways to achieve this answer too.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>s</code> consists of only uppercase English letters.</li>
<li><code>0 &lt;= k &lt;= s.length</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
<li>need to think more about correctness</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">characterReplacement</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, res = <span class="number">0</span>, windowMaxCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            count[s[right] - <span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">            windowMaxCount = <span class="built_in">max</span>(windowMaxCount, count[s[right] - <span class="string">&#x27;A&#x27;</span>]);</span><br><span class="line">            <span class="keyword">if</span> (right - left + <span class="number">1</span> - windowMaxCount &gt; k) &#123;</span><br><span class="line">                count[s[left++] - <span class="string">&#x27;A&#x27;</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">            res = <span class="built_in">max</span>(res, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>426. Convert Binary Search Tree to Sorted Doubly Linked List</title>
    <url>/2024/06/07/426-Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/description/">426. Convert Binary Search Tree to Sorted Doubly Linked List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Convert a <strong>Binary Search Tree</strong>  to a sorted <strong>Circular Doubly-Linked List</strong>  in place.</p>
<p>You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.</p>
<p>We want to do the transformation <strong>in place</strong> . After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.</p>
<p><strong>Example 1:</strong></p>
<img src="https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png" style="width: 100%; max-width: 300px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,5,1,3]</span><br></pre></td></tr></table></figure>

<img src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png" style="width: 100%; max-width: 450px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Output: [1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">Explanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, <span class="keyword">while</span> the dashed line means the predecessor relationship.</span><br></pre></td></tr></table></figure>

<img src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturnbst.png" style="width: 100%; max-width: 450px;">

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,3]</span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
<li>All the values of the tree are <strong>unique</strong> .</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = NULL;</span></span><br><span class="line"><span class="comment">        right = NULL;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* head = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node* <span class="title">treeToDoublyList</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node *leftHead = <span class="literal">nullptr</span>, *rightHead = <span class="literal">nullptr</span>, *leftTail = <span class="literal">nullptr</span>,</span><br><span class="line">             *rightTail = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            leftHead = <span class="built_in">treeToDoublyList</span>(root-&gt;left);</span><br><span class="line">            leftTail = leftHead-&gt;left;</span><br><span class="line">            leftTail-&gt;right = root;</span><br><span class="line">            root-&gt;left = leftTail;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            leftTail = leftHead = root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            rightHead = <span class="built_in">treeToDoublyList</span>(root-&gt;right);</span><br><span class="line">            rightTail = rightHead-&gt;left;</span><br><span class="line">            root-&gt;right = rightHead;</span><br><span class="line">            rightHead-&gt;left = root;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rightTail = rightHead = root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        leftHead-&gt;left = rightTail;</span><br><span class="line">        rightTail-&gt;right = leftHead;</span><br><span class="line">        <span class="keyword">return</span> leftHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
        <tag>Binary Search Tree</tag>
        <tag>Linked List</tag>
        <tag>Doubly-Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>431. Encode N-ary Tree to Binary Tree</title>
    <url>/2024/07/09/431-Encode-N-ary-Tree-to-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree/description/">431. Encode N-ary Tree to Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode&#x2F;decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.</p>
<p>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See following example).</p>
<p>For example, you may encode the following <code>3-ary</code> tree to a binary tree in this way:</p>
<img src="https://assets.leetcode.com/uploads/2018/10/12/narytreebinarytreeexample.png" style="width: 100%; max-width: 640px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,3,2,4,null,5,6]</span><br></pre></td></tr></table></figure>

<p>Note that the above is just an example which might or might not work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,3,2,4,null,5,6]</span><br><span class="line">Output: [1,null,3,2,4,null,5,6]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</span><br><span class="line">Output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 10^4]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 10^4</code></li>
<li>The height of the n-ary tree is less than or equal to <code>1000</code></li>
<li>Do not use class member&#x2F;global&#x2F;static variables to store states. Your encode and decode algorithms should be stateless.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>the N-ary tree to binary tree algorithm</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Encodes an n-ary tree to a binary tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">encode</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* head = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(root-&gt;val);</span><br><span class="line">        TreeNode *left = <span class="literal">nullptr</span>, *prev = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node* node : root-&gt;children) &#123;</span><br><span class="line">            TreeNode* child = <span class="built_in">encode</span>(node);</span><br><span class="line">            <span class="keyword">if</span> (!left) &#123;</span><br><span class="line">                left = child;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">                prev-&gt;right = child;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = child;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;left = left;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your binary tree to an n-ary tree.</span></span><br><span class="line">    <span class="function">Node* <span class="title">decode</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* head = <span class="keyword">new</span> <span class="built_in">Node</span>(root-&gt;val);</span><br><span class="line">        TreeNode* left = root-&gt;left;</span><br><span class="line">        <span class="keyword">while</span> (left) &#123;</span><br><span class="line">            Node* child = <span class="built_in">decode</span>(left);</span><br><span class="line">            head-&gt;children.<span class="built_in">push_back</span>(child);</span><br><span class="line">            left = left-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec codec;</span></span><br><span class="line"><span class="comment">// codec.decode(codec.encode(root));</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>437. Path Sum III</title>
    <url>/2024/06/03/437-Path-Sum-III/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/path-sum-iii/description/">437. Path Sum III</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return the number of paths where the sum of the values along the path equals <code>targetSum</code>.</p>
<p>The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg" style="width: 450px; height: 386px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The paths that <span class="built_in">sum</span> to 8 are shown.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 1000]</code>.</li>
<li><code>-10^9 &lt;= Node.val &lt;= 10^9</code></li>
<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">long</span> res = <span class="number">0</span>, sum = <span class="number">0</span>, targetSum_;</span><br><span class="line">    map&lt;<span class="type">long</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        m[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        targetSum_ = targetSum;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += root-&gt;val;</span><br><span class="line">        res += m[sum - targetSum_];</span><br><span class="line">        m[sum]++;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">        m[sum]--;</span><br><span class="line">        sum -= root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>438. Find All Anagrams in a String</title>
    <url>/2023/01/18/438-Find-All-Anagrams-in-a-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/">438. Find All Anagrams in a String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/sliding-window/">Sliding Window</a></p>
<p>Given two strings <code>s</code> and <code>p</code>, return <em>an array of all the start indices of</em> <code>p</code><em>‘s anagrams in</em> <code>s</code>. You may return the answer in <strong>any order</strong>.</p>
<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;</span><br><span class="line">Output: [0,6]</span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.</span><br><span class="line">The substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;abab&quot;, p = &quot;ab&quot;</span><br><span class="line">Output: [0,1,2]</span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length, p.length &lt;&#x3D; 3 * 10<sup>4</sup></li>
<li><code>s</code> and <code>p</code> consist of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need, window;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : p) need[c]++;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, valid = <span class="number">0</span>, len = p.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">char</span> c = s[right++];</span><br><span class="line">            <span class="keyword">if</span> (need.<span class="built_in">count</span>(c)) &#123;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="keyword">if</span> (window[c] == need[c]) &#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right - left == len) &#123;</span><br><span class="line">                <span class="keyword">if</span> (valid == need.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(left);</span><br><span class="line">                &#125;</span><br><span class="line">                c = s[left++];</span><br><span class="line">                <span class="keyword">if</span> (need.<span class="built_in">count</span>(c)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (window[c] == need[c]) &#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    window[c]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>442. Find All Duplicates in an Array</title>
    <url>/2023/12/26/442-Find-All-Duplicates-in-an-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-all-duplicates-in-an-array/">442. Find All Duplicates in an Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a></p>
<p>Given an integer array <code>nums</code> of length <code>n</code> where all the integers of <code>nums</code> are in the range <code>[1, n]</code> and each integer appears <strong>once</strong> or <strong>twice</strong>, return <em>an array of all the integers that appears <strong>twice</strong></em>.</p>
<p>You must write an algorithm that runs in <code>O(n)</code> time and uses only constant extra space.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,3,2,7,8,2,3,1]</span><br><span class="line">Output: [2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,2]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>5</sup></li>
<li><code>1 &lt;= nums[i] &lt;= n</code></li>
<li>Each element in <code>nums</code> appears <strong>once</strong> or <strong>twice</strong>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>flip the array element(negative) to mark if one element has appeared previously</li>
<li>we can use this solution because each element appears either once or twice</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="built_in">abs</span>(num) - <span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="built_in">abs</span>(num));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[<span class="built_in">abs</span>(num) - <span class="number">1</span>] *= <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>448. Find All Numbers Disappeared in an Array</title>
    <url>/2023/12/26/448-Find-All-Numbers-Disappeared-in-an-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/">448. Find All Numbers Disappeared in an Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a></p>
<p>Given an array <code>nums</code> of <code>n</code> integers where <code>nums[i]</code> is in the range <code>[1, n]</code>, return <em>an array of all the integers in the range</em> <code>[1, n]</code> <em>that do not appear in</em> <code>nums</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,3,2,7,8,2,3,1]</span><br><span class="line">Output: [5,6]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1]</span><br><span class="line">Output: [2]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>5</sup></li>
<li><code>1 &lt;= nums[i] &lt;= n</code></li>
</ul>
<p><strong>Follow up:</strong> Could you do it without extra space and in <code>O(n)</code> runtime? You may assume the returned list does not count as extra space.</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>make element at index negative to mark the element has been traversed</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDisappearedNumbers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="built_in">abs</span>(num) - <span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                nums[<span class="built_in">abs</span>(num) - <span class="number">1</span>] *= <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>449. Serialize and Deserialize BST</title>
    <url>/2024/07/13/449-Serialize-and-Deserialize-BST/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/serialize-and-deserialize-bst/description/">449. Serialize and Deserialize BST</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>
<p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization&#x2F;deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p>
<p><b>The encoded string should be as compact as possible.</b></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,3]</span><br><span class="line">Output: [2,1,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 10^4]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 10^4</code></li>
<li>The input tree is <strong>guaranteed</strong>  to be a binary search tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string res = <span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            res += <span class="string">&quot;,&quot;</span> + <span class="built_in">serialize</span>(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            res += <span class="string">&quot;,&quot;</span> + <span class="built_in">serialize</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((pos = data.<span class="built_in">find</span>(<span class="string">&quot;,&quot;</span>)) != string::npos) &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(<span class="built_in">stoi</span>(data.<span class="built_in">substr</span>(<span class="number">0</span>, pos)));</span><br><span class="line">            data.<span class="built_in">erase</span>(<span class="number">0</span>, pos + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(<span class="built_in">stoi</span>(data));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[start]);</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = start; i &lt;= end &amp;&amp; nums[i] &lt;= root-&gt;val; i++) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(nums, start + <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(nums, i, end);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec* ser = new Codec();</span></span><br><span class="line"><span class="comment">// Codec* deser = new Codec();</span></span><br><span class="line"><span class="comment">// string tree = ser-&gt;serialize(root);</span></span><br><span class="line"><span class="comment">// TreeNode* ans = deser-&gt;deserialize(tree);</span></span><br><span class="line"><span class="comment">// return ans;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>-String -Tree -Depth-First Search -Breadth-First Search -Design -Binary Search Tree -Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>451. Sort Characters By Frequency</title>
    <url>/2023/11/06/451-Sort-Characters-By-Frequency/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sort-characters-by-frequency/">451. Sort Characters By Frequency</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/bucket-sort//">Bucket Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/counting//">Counting</a></p>
<p>Given a string <code>s</code>, sort it in <strong>decreasing order</strong> based on the <strong>frequency</strong> of the characters. The <strong>frequency</strong> of a character is the number of times it appears in the string.</p>
<p>Return <em>the sorted string</em>. If there are multiple answers, return <em>any of them</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;tree&quot;</span></span><br><span class="line">Output: <span class="string">&quot;eert&quot;</span></span><br><span class="line">Explanation: <span class="string">&#x27;e&#x27;</span> appears twice <span class="keyword">while</span> <span class="string">&#x27;r&#x27;</span> and <span class="string">&#x27;t&#x27;</span> both appear once.</span><br><span class="line">So <span class="string">&#x27;e&#x27;</span> must appear before both <span class="string">&#x27;r&#x27;</span> and <span class="string">&#x27;t&#x27;</span>. Therefore <span class="string">&quot;eetr&quot;</span> is also a valid answer.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;cccaaa&quot;</span></span><br><span class="line">Output: <span class="string">&quot;aaaccc&quot;</span></span><br><span class="line">Explanation: Both <span class="string">&#x27;c&#x27;</span> and <span class="string">&#x27;a&#x27;</span> appear three <span class="built_in">times</span>, so both <span class="string">&quot;cccaaa&quot;</span> and <span class="string">&quot;aaaccc&quot;</span> are valid answers.</span><br><span class="line">Note that <span class="string">&quot;cacaca&quot;</span> is incorrect, as the same characters must be together.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;Aabb&quot;</span></span><br><span class="line">Output: <span class="string">&quot;bbAa&quot;</span></span><br><span class="line">Explanation: <span class="string">&quot;bbaA&quot;</span> is also a valid answer, but <span class="string">&quot;Aabb&quot;</span> is incorrect.</span><br><span class="line">Note that <span class="string">&#x27;A&#x27;</span> and <span class="string">&#x27;a&#x27;</span> are treated as two different characters.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 5 * 10<sup>5</sup></li>
<li><code>s</code> consists of uppercase and lowercase English letters and digits.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">frequencySort</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            m[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, less&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">            <span class="type">int</span> c = it.first;</span><br><span class="line">            <span class="type">int</span> f = it.second;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;f, c&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> top = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">char</span> c = top[<span class="number">1</span>] + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> f = top[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; f; i++) &#123;</span><br><span class="line">                res += c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Counting</tag>
        <tag>Bucket Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>46. Permutations</title>
    <url>/2024/05/23/46-Permutations/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/permutations/description/">46. Permutations</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array <code>nums</code> of distinct integers, return all the possible permutations. You can return the answer in <strong>any order</strong> .</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1]</span><br><span class="line">Output: [[0,1],[1,0]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 6</code></li>
<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>
<li>All the integers of <code>nums</code> are <strong>unique</strong> .</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; available;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            available.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; cur;</span><br><span class="line">        <span class="built_in">dfs</span>(nums, cur, available);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; cur, unordered_set&lt;<span class="type">int</span>&gt;&amp; available)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == cur.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(cur);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (available.<span class="built_in">contains</span>(num)) &#123;</span><br><span class="line">                available.<span class="built_in">erase</span>(num);</span><br><span class="line">                cur.<span class="built_in">push_back</span>(num);</span><br><span class="line">                <span class="built_in">dfs</span>(nums, cur, available);</span><br><span class="line">                available.<span class="built_in">insert</span>(num);</span><br><span class="line">                cur.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>460. LFU Cache</title>
    <url>/2023/10/05/460-LFU-Cache/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/lfu-cache/">460. LFU Cache</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/doubly-linked-list//">Doubly-Linked List</a></p>
<p>Design and implement a data structure for a <a href="https://en.wikipedia.org/wiki/Least_frequently_used">Least Frequently Used (LFU)</a> cache.</p>
<p>Implement the <code>LFUCache</code> class:</p>
<ul>
<li><code>LFUCache(int capacity)</code> Initializes the object with the <code>capacity</code> of the data structure.</li>
<li><code>int get(int key)</code> Gets the value of the <code>key</code> if the <code>key</code> exists in the cache. Otherwise, returns <code>-1</code>.</li>
<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if present, or inserts the <code>key</code> if not already present. When the cache reaches its <code>capacity</code>, it should invalidate and remove the <strong>least frequently used</strong> key before inserting a new item. For this problem, when there is a <strong>tie</strong> (i.e., two or more keys with the same frequency), the <strong>least recently used</strong> <code>key</code> would be invalidated.</li>
</ul>
<p>To determine the least frequently used key, a <strong>use counter</strong> is maintained for each key in the cache. The key with the smallest <strong>use counter</strong> is the least frequently used key.</p>
<p>When a key is first inserted into the cache, its <strong>use counter</strong> is set to <code>1</code> (due to the <code>put</code> operation). The <strong>use counter</strong> for a key in the cache is incremented either a <code>get</code> or <code>put</code> operation is called on it.</p>
<p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;LFUCache&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get&quot;</span>]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 1, null, -1, 3, null, -1, 3, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">// cnt(x) = the use counter <span class="keyword">for</span> key x</span><br><span class="line">// cache=[] will show the last used order <span class="keyword">for</span> tiebreakers (leftmost element is  most recent)</span><br><span class="line">LFUCache lfu = new LFUCache(2);</span><br><span class="line">lfu.put(1, 1);   // cache=[1,_], cnt(1)=1</span><br><span class="line">lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1</span><br><span class="line">lfu.get(1);      // <span class="built_in">return</span> 1</span><br><span class="line">                 // cache=[1,2], cnt(2)=1, cnt(1)=2</span><br><span class="line">lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.</span><br><span class="line">                 // cache=[3,1], cnt(3)=1, cnt(1)=2</span><br><span class="line">lfu.get(2);      // <span class="built_in">return</span> -1 (not found)</span><br><span class="line">lfu.get(3);      // <span class="built_in">return</span> 3</span><br><span class="line">                 // cache=[3,1], cnt(3)=2, cnt(1)=2</span><br><span class="line">lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.</span><br><span class="line">                 // cache=[4,3], cnt(4)=1, cnt(3)=2</span><br><span class="line">lfu.get(1);      // <span class="built_in">return</span> -1 (not found)</span><br><span class="line">lfu.get(3);      // <span class="built_in">return</span> 3</span><br><span class="line">                 // cache=[3,4], cnt(4)=1, cnt(3)=3</span><br><span class="line">lfu.get(4);      // <span class="built_in">return</span> 4</span><br><span class="line">                 // cache=[4,3], cnt(4)=2, cnt(3)=3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; capacity &lt;&#x3D; 10<sup>4</sup></li>
<li>0 &lt;&#x3D; key &lt;&#x3D; 10<sup>5</sup></li>
<li>0 &lt;&#x3D; value &lt;&#x3D; 10<sup>9</sup></li>
<li>At most 2 * 10<sup>5</sup> calls will be made to <code>get</code> and <code>put</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>need a map to record all elements with same freq, i.e. a freqToKeys map</li>
<li>need a map to record one element’s position in the above map’s value</li>
<li>need rewrite next time</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LFUCache</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> minFreq = INT_MAX;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; keyToValue;</span><br><span class="line">    map&lt;<span class="type">int</span>, list&lt;<span class="type">int</span>&gt;&gt; freqToKeys;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; keyToFreq;</span><br><span class="line">    map&lt;<span class="type">int</span>, list&lt;<span class="type">int</span>&gt;::iterator&gt; keyListIter;</span><br><span class="line">    <span class="built_in">LFUCache</span>(<span class="type">int</span> capacity) &#123;</span><br><span class="line">        size = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updateFreq</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> freq)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!freqToKeys.<span class="built_in">count</span>(freq)) &#123;</span><br><span class="line">            freqToKeys[freq] = &#123;key&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            freqToKeys[freq].<span class="built_in">push_back</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">        keyListIter[key] = <span class="built_in">prev</span>(freqToKeys[freq].<span class="built_in">end</span>());</span><br><span class="line">        keyToFreq[key] = freq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updateExistingFreq</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> freq = keyToFreq[key];</span><br><span class="line">        freqToKeys[freq].<span class="built_in">erase</span>(keyListIter[key]);</span><br><span class="line">        <span class="type">int</span> newFreq = freq + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (freq == minFreq &amp;&amp; freqToKeys[freq].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            freqToKeys.<span class="built_in">erase</span>(freq);</span><br><span class="line">            minFreq = freq + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">updateFreq</span>(key, newFreq);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; &quot;now handling get for &quot; &lt;&lt; key &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (keyToValue.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line">            <span class="built_in">updateExistingFreq</span>(key);</span><br><span class="line">            <span class="keyword">return</span> keyToValue[key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; &quot;now handling put for &quot; &lt;&lt; key &lt;&lt; &quot; value:&quot; &lt;&lt; value &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (keyToValue.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line">            <span class="built_in">updateExistingFreq</span>(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyToValue.<span class="built_in">size</span>() &lt; size) &#123;</span><br><span class="line">                <span class="type">int</span> freq = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">updateFreq</span>(key, freq);</span><br><span class="line">                minFreq = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> leastFreqKey = freqToKeys[minFreq].<span class="built_in">front</span>();</span><br><span class="line">                freqToKeys[minFreq].<span class="built_in">pop_front</span>();</span><br><span class="line">                <span class="keyword">if</span> (freqToKeys[minFreq].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    freqToKeys.<span class="built_in">erase</span>(minFreq);</span><br><span class="line">                &#125;</span><br><span class="line">                keyToValue.<span class="built_in">erase</span>(leastFreqKey);</span><br><span class="line">                keyToFreq.<span class="built_in">erase</span>(leastFreqKey);</span><br><span class="line">                keyListIter.<span class="built_in">erase</span>(leastFreqKey);</span><br><span class="line">                <span class="type">int</span> freq = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">updateFreq</span>(key, freq);</span><br><span class="line">                minFreq = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        keyToValue[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LFUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LFUCache* obj = new LFUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Linked List</tag>
        <tag>Design</tag>
        <tag>Doubly-Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>48. Rotate Image</title>
    <url>/2023/01/23/48-Rotate-Image/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/rotate-image/">48. Rotate Image</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a></p>
<p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by <strong>90</strong> degrees (clockwise).</p>
<p>You have to rotate the image <a href="https://en.wikipedia.org/wiki/In-place_algorithm"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">Output: [[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]</span><br><span class="line">Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == matrix.length == matrix[i].length</code></li>
<li><code>1 &lt;= n &lt;= 20</code></li>
<li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Do the diagonal flip first, then reverse each row</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="type">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;&amp; vec : matrix) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>486E. LIS of Sequence</title>
    <url>/2024/06/03/486E-LIS-of-Sequence/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/486/E">E. LIS of Sequence</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 n(1≤n≤1e5) 和长为 n 的数组 a(1≤a[i]≤1e5)。</p>
<p>定义 LIS 为 a 的最长严格递增子序列，注意可能有多个 LIS。<br>对于每个 i：<br>如果 a[i] 不在任何 LIS 中，输出 1。<br>如果 a[i] 在至少一个 LIS 中，但不在所有 LIS 中，输出 2。<br>如果 a[i] 在所有 LIS 中，输出 3。<br>输出在同一行，不要加空格。</p>
<p>注意，a&#x3D;[1,2,2,3] 有两个相同的 LIS [1,2,3]，其中 1 和 3 都在这两个 LIS 中，但 2 只在其中一个 LIS 不在另一个 LIS 中，所以输出 3223。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary research to solve LIS</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; LIS, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = LIS.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (LIS[mid] &gt;= target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; LIS;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dp1;</span><br><span class="line">    <span class="type">int</span> longest = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="type">int</span> targetIndex = <span class="built_in">binary_search</span>(LIS, num);</span><br><span class="line">        <span class="keyword">if</span> (targetIndex == LIS.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            LIS.<span class="built_in">push_back</span>(num);</span><br><span class="line">            dp1.<span class="built_in">push_back</span>(LIS.<span class="built_in">size</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp1.<span class="built_in">push_back</span>(targetIndex + <span class="number">1</span>);</span><br><span class="line">            LIS[targetIndex] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        longest = <span class="built_in">max</span>(longest, (<span class="type">int</span>)LIS.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>&amp; num : nums) &#123;</span><br><span class="line">        num = -num;</span><br><span class="line">    &#125;</span><br><span class="line">    LIS.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp2</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> num = nums[i];</span><br><span class="line">        <span class="type">int</span> targetIndex = <span class="built_in">binary_search</span>(LIS, num);</span><br><span class="line">        <span class="keyword">if</span> (targetIndex == LIS.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            LIS.<span class="built_in">push_back</span>(num);</span><br><span class="line">            dp2[i] = LIS.<span class="built_in">size</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp2[i] = targetIndex + <span class="number">1</span>;</span><br><span class="line">            LIS[targetIndex] = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp1[i] + dp2[i] - <span class="number">1</span> != longest) &#123;</span><br><span class="line">            res[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[dp1[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cnt[dp1[i]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            res[i] = <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res[i] = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        out &lt;&lt; res[i];</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    in &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= n; t++) &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        in &gt;&gt; num;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>(nums);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
        <tag>math</tag>
        <tag>data structures</tag>
        <tag>dp</tag>
        <tag>hashing</tag>
      </tags>
  </entry>
  <entry>
    <title>49. Group Anagrams</title>
    <url>/2023/12/19/49-Group-Anagrams/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/group-anagrams/">49. Group Anagrams</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a></p>
<p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p>
<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: strs = [<span class="string">&quot;eat&quot;</span>,<span class="string">&quot;tea&quot;</span>,<span class="string">&quot;tan&quot;</span>,<span class="string">&quot;ate&quot;</span>,<span class="string">&quot;nat&quot;</span>,<span class="string">&quot;bat&quot;</span>]</span><br><span class="line">Output: [[<span class="string">&quot;bat&quot;</span>],[<span class="string">&quot;nat&quot;</span>,<span class="string">&quot;tan&quot;</span>],[<span class="string">&quot;ate&quot;</span>,<span class="string">&quot;eat&quot;</span>,<span class="string">&quot;tea&quot;</span>]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: strs = [<span class="string">&quot;&quot;</span>]</span><br><span class="line">Output: [[<span class="string">&quot;&quot;</span>]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: strs = [<span class="string">&quot;a&quot;</span>]</span><br><span class="line">Output: [[<span class="string">&quot;a&quot;</span>]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; strs.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>
<li><code>strs[i]</code> consists of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>encode the string, use map to record strings with the same encoding</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        map&lt;string, vector&lt;string&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (string str : strs) &#123;</span><br><span class="line">            string encode = <span class="built_in">encodeStr</span>(str);</span><br><span class="line">            m[encode].<span class="built_in">push_back</span>(str);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">encodeStr</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : str) &#123;</span><br><span class="line">            count[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            s += <span class="built_in">to_string</span>(count[i]);</span><br><span class="line">            s.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>493. Reverse Pairs</title>
    <url>/2023/08/25/493-Reverse-Pairs/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/reverse-pairs/">493. Reverse Pairs</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-indexed-tree//">Binary Indexed Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/segment-tree//">Segment Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/merge-sort//">Merge Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/ordered-set//">Ordered Set</a></p>
<p>Given an integer array <code>nums</code>, return <em>the number of <strong>reverse pairs</strong> in the array</em>.</p>
<p>A <strong>reverse pair</strong> is a pair <code>(i, j)</code> where:</p>
<ul>
<li><code>0 &lt;= i &lt; j &lt; nums.length</code> and</li>
<li><code>nums[i] &gt; 2 * nums[j]</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,2,3,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The reverse pairs are:</span><br><span class="line">(1, 4) --&gt; nums[1] = 3, nums[4] = 1, 3 &gt; 2 * 1</span><br><span class="line">(3, 4) --&gt; nums[3] = 3, nums[4] = 1, 3 &gt; 2 * 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,4,3,5,1]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The reverse pairs are:</span><br><span class="line">(1, 4) --&gt; nums[1] = 4, nums[4] = 1, 4 &gt; 2 * 1</span><br><span class="line">(2, 4) --&gt; nums[2] = 3, nums[4] = 1, 3 &gt; 2 * 1</span><br><span class="line">(3, 4) --&gt; nums[3] = 5, nums[4] = 1, 5 &gt; 2 * 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 5 * 10<sup>4</sup></li>
<li>-2<sup>31</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 2<sup>31</sup> - 1</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>merge sort</li>
<li>improve time complexity</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reversePairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        tmp = <span class="built_in">vector</span>(size, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(nums, <span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums, low, mid);</span><br><span class="line">        <span class="built_in">sort</span>(nums, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="built_in">merge</span>(nums, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">            tmp[i] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> end = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= mid; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (end &lt;= high &amp;&amp; ((<span class="type">long</span>)nums[i] &gt; (<span class="type">long</span>)nums[end] * <span class="number">2</span>)) &#123;</span><br><span class="line">                end++;</span><br><span class="line">            &#125;</span><br><span class="line">            count += end - mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> p1 = low, p2 = mid + <span class="number">1</span>, index = low;</span><br><span class="line">        <span class="keyword">while</span> (index &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == mid + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[index++] = tmp[p2++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == high + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[index++] = tmp[p1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp[p1] &gt; tmp[p2]) &#123;</span><br><span class="line">                nums[index++] = tmp[p2++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[index++] = tmp[p1++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Divide and Conquer</tag>
        <tag>Ordered Set</tag>
        <tag>Merge Sort</tag>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>494. Target Sum</title>
    <url>/2024/07/31/494-Target-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/target-sum/description/">494. Target Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> and an integer <code>target</code>.</p>
<p>You want to build an <strong>expression</strong> out of nums by adding one of the symbols <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code> before each integer in nums and then concatenate all the integers.</p>
<ul>
<li>For example, if <code>nums = [2, 1]</code>, you can add a <code>&#39;+&#39;</code> before <code>2</code> and a <code>&#39;-&#39;</code> before <code>1</code> and concatenate them to build the expression <code>&quot;+2-1&quot;</code>.</li>
</ul>
<p>Return the number of different <strong>expressions</strong> that you can build, which evaluates to <code>target</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,1,1,1], target = 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: There are 5 ways to assign symbols to make the <span class="built_in">sum</span> of nums be target 3.</span><br><span class="line">-1 + 1 + 1 + 1 + 1 = 3</span><br><span class="line">+1 - 1 + 1 + 1 + 1 = 3</span><br><span class="line">+1 + 1 - 1 + 1 + 1 = 3</span><br><span class="line">+1 + 1 + 1 - 1 + 1 = 3</span><br><span class="line">+1 + 1 + 1 + 1 - 1 = 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1], target = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 20</code></li>
<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>
<li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li>
<li><code>-1000 &lt;= target &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// the problem can be transformed into subA - subB = target</span></span><br><span class="line">        <span class="comment">// subA = target + subB =&gt; 2subA = target + sum</span></span><br><span class="line">        <span class="comment">// subA = (target + sum) / 2</span></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = (target + sum) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ((target + sum) % <span class="number">2</span> || (target + sum) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(nums.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(res + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// The meaning of dp[i][j]: with the first 0 ~ i items, how many ways we</span></span><br><span class="line">        <span class="comment">// can form j</span></span><br><span class="line">        <span class="comment">// To get to dp[i][j], we need dp[i][j - nums[i]] and dp[i - 1][j]</span></span><br><span class="line">        <span class="comment">// when i = 0, the only way to form j is then nums[0] == j</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= res; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] += dp[i - <span class="number">1</span>][j - nums[i - <span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] += dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.<span class="built_in">size</span>()][res];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>496. Next Greater Element I</title>
    <url>/2023/09/10/496-Next-Greater-Element-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/next-greater-element-i/">496. Next Greater Element I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a></p>
<p>The <strong>next greater element</strong> of some element <code>x</code> in an array is the <strong>first greater</strong> element that is <strong>to the right</strong> of <code>x</code> in the same array.</p>
<p>You are given two <strong>distinct 0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, where <code>nums1</code> is a subset of <code>nums2</code>.</p>
<p>For each <code>0 &lt;= i &lt; nums1.length</code>, find the index <code>j</code> such that <code>nums1[i] == nums2[j]</code> and determine the <strong>next greater element</strong> of <code>nums2[j]</code> in <code>nums2</code>. If there is no next greater element, then the answer for this query is <code>-1</code>.</p>
<p>Return <em>an array</em> <code>ans</code> <em>of length</em> <code>nums1.length</code> <em>such that</em> <code>ans[i]</code> <em>is the <strong>next greater element</strong> as described above.</em></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [4,1,2], nums2 = [1,3,4,2]</span><br><span class="line">Output: [-1,3,-1]</span><br><span class="line">Explanation: The next greater element <span class="keyword">for</span> each value of nums1 is as follows:</span><br><span class="line">- 4 is underlined <span class="keyword">in</span> nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.</span><br><span class="line">- 1 is underlined <span class="keyword">in</span> nums2 = [1,3,4,2]. The next greater element is 3.</span><br><span class="line">- 2 is underlined <span class="keyword">in</span> nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [2,4], nums2 = [1,2,3,4]</span><br><span class="line">Output: [3,-1]</span><br><span class="line">Explanation: The next greater element <span class="keyword">for</span> each value of nums1 is as follows:</span><br><span class="line">- 2 is underlined <span class="keyword">in</span> nums2 = [1,2,3,4]. The next greater element is 3.</span><br><span class="line">- 4 is underlined <span class="keyword">in</span> nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li>
<li>0 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 10<sup>4</sup></li>
<li>All integers in <code>nums1</code> and <code>nums2</code> are <strong>unique</strong>.</li>
<li>All the integers of <code>nums1</code> also appear in <code>nums2</code>.</li>
</ul>
<p><strong>Follow up:</strong> Could you find an <code>O(nums1.length + nums2.length)</code> solution?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Monotonic Stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mapping;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; greater = <span class="built_in">nextGreater</span>(nums2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums2.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            mapping[nums2[i]] = greater[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums1) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(mapping[num]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreater</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; greater;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!greater.<span class="built_in">empty</span>() &amp;&amp; greater.<span class="built_in">top</span>() &lt;= nums[i]) &#123;</span><br><span class="line">                greater.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = greater.<span class="built_in">empty</span>() ? <span class="number">-1</span> : greater.<span class="built_in">top</span>();</span><br><span class="line">            greater.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>503. Next Greater Element II</title>
    <url>/2023/09/10/503-Next-Greater-Element-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/next-greater-element-ii/">503. Next Greater Element II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a></p>
<p>Given a circular integer array <code>nums</code> (i.e., the next element of <code>nums[nums.length - 1]</code> is <code>nums[0]</code>), return <em>the <strong>next greater number</strong> for every element in</em> <code>nums</code>.</p>
<p>The <strong>next greater number</strong> of a number <code>x</code> is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn’t exist, return <code>-1</code> for this number.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,1]</span><br><span class="line">Output: [2,-1,2]</span><br><span class="line">Explanation: The first 1<span class="string">&#x27;s next greater number is 2;</span></span><br><span class="line"><span class="string">The number 2 can&#x27;</span>t find next greater number.</span><br><span class="line">The second 1<span class="string">&#x27;s next greater number needs to search circularly, which is also 2.</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,3]</span><br><span class="line">Output: [2,3,4,-1,4]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>4</sup></li>
<li>-10<sup>9</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Monotonic Stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(size, <span class="number">0</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; greater;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = size * <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!greater.<span class="built_in">empty</span>() &amp;&amp; greater.<span class="built_in">top</span>() &lt;= nums[i % size]) &#123;</span><br><span class="line">                greater.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i % size] = greater.<span class="built_in">empty</span>() ? <span class="number">-1</span> : greater.<span class="built_in">top</span>();</span><br><span class="line">            greater.<span class="built_in">push</span>(nums[i % size]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>5. Longest Palindromic Substring</title>
    <url>/2023/01/19/5-Longest-Palindromic-Substring/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-palindromic-substring/">5. Longest Palindromic Substring</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/dynamic-programming/">Dynamic Programming</a></p>
<p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword="palindromic-string"><em>palindromic</em></span> <span data-keyword="substring-nonempty"><em>substring</em></span> in <code>s</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;babad&quot;</span></span><br><span class="line">Output: <span class="string">&quot;bab&quot;</span></span><br><span class="line">Explanation: <span class="string">&quot;aba&quot;</span> is also a valid answer.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;cbbd&quot;</span></span><br><span class="line">Output: <span class="string">&quot;bb&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> consist of only digits and English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use a helper function to get the longest palindromic string from one index</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            string s1 = <span class="built_in">palindrom</span>(s, i, i);</span><br><span class="line">            string s2 = <span class="built_in">palindrom</span>(s, i, i + <span class="number">1</span>);</span><br><span class="line">            res = res.<span class="built_in">size</span>() &gt; s1.<span class="built_in">size</span>() ? res : s1;</span><br><span class="line">            res = res.<span class="built_in">size</span>() &gt; s2.<span class="built_in">size</span>() ? res : s2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">palindrom</span><span class="params">(string s, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[left] != s[right]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(left + <span class="number">1</span>, right - left - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>508. Most Frequent Subtree Sum</title>
    <url>/2024/07/02/508-Most-Frequent-Subtree-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/most-frequent-subtree-sum/description/">508. Most Frequent Subtree Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the most frequent <strong>subtree sum</strong> . If there is a tie, return all the values with the highest frequency in any order.</p>
<p>The <strong>subtree sum</strong>  of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/04/24/freq1-tree.jpg" style="width: 207px; height: 183px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,2,-3]</span><br><span class="line">Output: [2,-3,4]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/04/24/freq2-tree.jpg" style="width: 207px; height: 183px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,2,-5]</span><br><span class="line">Output: [2]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findFrequentTreeSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="type">int</span> maxCount = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">            maxCount = <span class="built_in">max</span>(maxCount, it.second);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.second == maxCount) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(it.first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> val = root-&gt;val;</span><br><span class="line"></span><br><span class="line">        val += <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        val += <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        m[val]++;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>509. Fibonacci Number</title>
    <url>/2023/11/08/509-Fibonacci-Number/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/fibonacci-number/">509. Fibonacci Number</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/dynamic-programming//">Dynamic Programming</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/recursion//">Recursion</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/memoization//">Memoization</a></p>
<p>The <strong>Fibonacci numbers</strong>, commonly denoted <code>F(n)</code> form a sequence, called the <strong>Fibonacci sequence</strong>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">F(0) = 0, F(1) = 1</span><br><span class="line">F(n) = F(n - 1) + F(n - 2), <span class="keyword">for</span> n &gt; 1.</span><br></pre></td></tr></table></figure>

<p>Given <code>n</code>, calculate <code>F(n)</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= n &lt;= 30</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>simplest dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(nums[i - <span class="number">1</span>] + nums[i - <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Recursion</tag>
        <tag>Math</tag>
        <tag>Memoization</tag>
      </tags>
  </entry>
  <entry>
    <title>510. Inorder Successor in BST II</title>
    <url>/2024/07/13/510-Inorder-Successor-in-BST-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/inorder-successor-in-bst-ii/description/">510. Inorder Successor in BST II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a <code>node</code> in a binary search tree, return the in-order successor of that node in the BST. If that node has no in-order successor, return <code>null</code>.</p>
<p>The successor of a <code>node</code> is the node with the smallest key greater than <code>node.val</code>.</p>
<p>You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for <code>Node</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG" style="width: 122px; height: 117px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tree = [2,1,3], node = 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: 1<span class="string">&#x27;s in-order successor node is 2. Note that both the node and the return value is of Node type.</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG" style="width: 246px; height: 229px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: tree = [5,3,6,2,4,null,null,1], node = 6</span><br><span class="line">Output: null</span><br><span class="line">Explanation: There is no in-order successor of the current node, so the answer is null.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li>
<li>All Nodes will have unique values.</li>
</ul>
<p><strong>Follow up:</strong>  Could you solve it without looking up any of the node’s values?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* parent;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">inorderSuccessor</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right) &#123;</span><br><span class="line">            Node* cur = node-&gt;right;</span><br><span class="line">            <span class="keyword">while</span> (cur-&gt;left) &#123;</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;parent) &#123;</span><br><span class="line">            <span class="keyword">while</span> (node-&gt;parent &amp;&amp; node-&gt;parent-&gt;right == node) &#123;</span><br><span class="line">                node = node-&gt;parent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;parent) &#123;</span><br><span class="line">                <span class="keyword">return</span> node-&gt;parent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>513. Find Bottom Left Tree Value</title>
    <url>/2024/06/03/513-Find-Bottom-Left-Tree-Value/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-bottom-left-tree-value/description/">513. Find Bottom Left Tree Value</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the leftmost value in the last row of the tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg" style="width: 302px; height: 182px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,3]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg" style="width: 432px; height: 421px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,null,5,6,null,null,7]</span><br><span class="line">Output: 7</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>-2^31 &lt;= Node.val &lt;= 2^31 - 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> maxDepth = <span class="number">0</span>, depth = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">        <span class="keyword">if</span> (depth &gt; maxDepth) &#123;</span><br><span class="line">            maxDepth = depth;</span><br><span class="line">            res = root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">        depth--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>514. Freedom Trail</title>
    <url>/2024/10/02/514-Freedom-Trail/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/freedom-trail/description/">514. Freedom Trail</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In the video game Fallout 4, the quest <strong>“Road to Freedom”</strong> requires players to reach a metal dial called the <strong>“Freedom Trail Ring”</strong> and use the dial to spell a specific keyword to open the door.</p>
<p>Given a string <code>ring</code> that represents the code engraved on the outer ring and another string <code>key</code> that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.</p>
<p>Initially, the first character of the ring is aligned at the <code>&quot;12:00&quot;</code> direction. You should spell all the characters in <code>key</code> one by one by rotating <code>ring</code> clockwise or anticlockwise to make each character of the string key aligned at the <code>&quot;12:00&quot;</code> direction and then by pressing the center button.</p>
<p>At the stage of rotating the ring to spell the key character <code>key[i]</code>:</p>
<ul>
<li>You can rotate the ring clockwise or anticlockwise by one place, which counts as <strong>one step</strong> . The final purpose of the rotation is to align one of <code>ring</code>‘s characters at the <code>&quot;12:00&quot;</code> direction, where this character must equal <code>key[i]</code>.</li>
<li>If the character <code>key[i]</code> has been aligned at the <code>&quot;12:00&quot;</code> direction, press the center button to spell, which also counts as <strong>one step</strong> . After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.</li>
</ul>
<p><strong>Example 1:</strong></p>
<img src="https://assets.leetcode.com/uploads/2018/10/22/ring.jpg" style="width: 450px; height: 450px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: ring = <span class="string">&quot;godding&quot;</span>, key = <span class="string">&quot;gd&quot;</span></span><br><span class="line">Output: 4</span><br><span class="line">Explanation:</span><br><span class="line">For the first key character <span class="string">&#x27;g&#x27;</span>, since it is already <span class="keyword">in</span> place, we just need 1 step to spell this character.</span><br><span class="line">For the second key character <span class="string">&#x27;d&#x27;</span>, we need to rotate the ring <span class="string">&quot;godding&quot;</span> anticlockwise by two steps to make it become <span class="string">&quot;ddinggo&quot;</span>.</span><br><span class="line">Also, we need 1 more step <span class="keyword">for</span> spelling.</span><br><span class="line">So the final output is 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: ring = <span class="string">&quot;godding&quot;</span>, key = <span class="string">&quot;godding&quot;</span></span><br><span class="line">Output: 13</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= ring.length, key.length &lt;= 100</code></li>
<li><code>ring</code> and <code>key</code> consist of only lower case English letters.</li>
<li>It is guaranteed that <code>key</code> could always be spelled by rotating <code>ring</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;set&lt;<span class="type">int</span>&gt;&gt; indexes;</span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]: when we are currently at i on the ring,</span></span><br><span class="line">    <span class="comment">// and we are going to match jth character in key, the minimum steps</span></span><br><span class="line">    <span class="comment">// to finish the game</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    string key_;</span><br><span class="line">    string ring_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRotateSteps</span><span class="params">(string ring, string key)</span> </span>&#123;</span><br><span class="line">        indexes.<span class="built_in">resize</span>(<span class="number">26</span>, <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        key_ = key;</span><br><span class="line">        ring_ = ring;</span><br><span class="line">        <span class="type">int</span> n = ring.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> k = key.<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(k, <span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> idx = ring[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            indexes[idx].<span class="built_in">insert</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> ringIdx, <span class="type">int</span> keyIdx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keyIdx == key_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = ring_.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (dp[ringIdx][keyIdx] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[ringIdx][keyIdx];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx = key_[keyIdx] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">auto</span> nextIt = indexes[idx].<span class="built_in">lower_bound</span>(ringIdx);</span><br><span class="line">        <span class="keyword">if</span> (nextIt == indexes[idx].<span class="built_in">end</span>())</span><br><span class="line">            nextIt = indexes[idx].<span class="built_in">begin</span>();</span><br><span class="line">        std::set&lt;<span class="type">int</span>&gt;::iterator prev;</span><br><span class="line">        <span class="keyword">if</span> (nextIt == indexes[idx].<span class="built_in">begin</span>()) &#123;</span><br><span class="line">            prev = std::<span class="built_in">prev</span>(indexes[idx].<span class="built_in">end</span>(), <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev = std::<span class="built_in">prev</span>(nextIt, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res =</span><br><span class="line">            <span class="built_in">min</span>((*nextIt + n - ringIdx) % n + <span class="number">1</span> + <span class="built_in">traverse</span>(*nextIt, keyIdx + <span class="number">1</span>),</span><br><span class="line">                (ringIdx + n - *prev) % n + <span class="number">1</span> + <span class="built_in">traverse</span>(*prev, keyIdx + <span class="number">1</span>));</span><br><span class="line">        dp[ringIdx][keyIdx] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>515. Find Largest Value in Each Tree Row</title>
    <url>/2024/07/08/515-Find-Largest-Value-in-Each-Tree-Row/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-largest-value-in-each-tree-row/description/">515. Find Largest Value in Each Tree Row</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return an array of the largest value in each row of the tree <strong>(0-indexed)</strong> .</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2020/08/21/largest_e1.jpg" style="width: 300px; height: 172px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,2,5,3,null,9]</span><br><span class="line">Output: [1,3,9]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3]</span><br><span class="line">Output: [1,3]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree will be in the range <code>[0, 10^4]</code>.</li>
<li><code>-2^31 &lt;= Node.val &lt;= 2^31 - 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">largestValues</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        <span class="keyword">if</span> (root)</span><br><span class="line">            q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> maxValue = INT_MIN;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                maxValue = <span class="built_in">max</span>(maxValue, cur-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(maxValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>516. Longest Palindromic Subsequence</title>
    <url>/2024/07/23/516-Longest-Palindromic-Subsequence/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-palindromic-subsequence/description/">516. Longest Palindromic Subsequence</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string <code>s</code>, find the longest palindromic <strong>subsequence</strong> ‘s length in <code>s</code>.</p>
<p>A <strong>subsequence</strong>  is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;bbbab&quot;</span></span><br><span class="line">Output: 4</span><br><span class="line">Explanation: One possible longest palindromic subsequence is <span class="string">&quot;bbbb&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;cbbd&quot;</span></span><br><span class="line">Output: 2</span><br><span class="line">Explanation: One possible longest palindromic subsequence is <span class="string">&quot;bb&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> consists only of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>digit dp</li>
<li>note: subsequence not substring</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// because for the state transition</span></span><br><span class="line">        <span class="comment">//  dp[i][j] requires value at i + 1 and/or j - 1</span></span><br><span class="line">        <span class="comment">//  so the i is iterated reversely</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i- -) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                res = <span class="built_in">max</span>(res, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>518. Coin Change II</title>
    <url>/2024/07/31/518-Coin-Change-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/coin-change-ii/description/">518. Coin Change II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p>
<p>Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>0</code>.</p>
<p>You may assume that you have an infinite number of each kind of coin.</p>
<p>The answer is <strong>guaranteed</strong> to fit into a signed <strong>32-bit</strong> integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: amount = 5, coins = [1,2,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: there are four ways to make up the amount:</span><br><span class="line">5=5</span><br><span class="line">5=2+2+1</span><br><span class="line">5=2+1+1+1</span><br><span class="line">5=1+1+1+1+1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: amount = 3, coins = [2]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: the amount of 3 cannot be made up just with coins of 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: amount = 10, coins = [10]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= coins.length &lt;= 300</code></li>
<li><code>1 &lt;= coins[i] &lt;= 5000</code></li>
<li>All the values of <code>coins</code> are <strong>unique</strong> .</li>
<li><code>0 &lt;= amount &lt;= 5000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; coin : coins) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= coin) &#123;</span><br><span class="line">                    dp[i] += dp[i - coin];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>523. Continuous Subarray Sum</title>
    <url>/2023/11/12/523-Continuous-Subarray-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/continuous-subarray-sum/">523. Continuous Subarray Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>Given an integer array nums and an integer k, return <code>true</code> <em>if</em> <code>nums</code> <em>has a <strong>good subarray</strong> or</em> <code>false</code> <em>otherwise</em>.</p>
<p>A <strong>good subarray</strong> is a subarray where:</p>
<ul>
<li>its length is <strong>at least two</strong>, and</li>
<li>the sum of the elements of the subarray is a multiple of <code>k</code>.</li>
</ul>
<p><strong>Note</strong> that:</p>
<ul>
<li>A <strong>subarray</strong> is a contiguous part of the array.</li>
<li>An integer <code>x</code> is a multiple of <code>k</code> if there exists an integer <code>n</code> such that <code>x = n * k</code>. <code>0</code> is <strong>always</strong> a multiple of <code>k</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [23,2,4,6,7], k = 6</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: [2, 4] is a continuous subarray of size 2 whose elements <span class="built_in">sum</span> up to 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [23,2,6,4,7], k = 6</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements <span class="built_in">sum</span> up to 42.</span><br><span class="line">42 is a multiple of 6 because 42 = 7 * 6 and 7 is an <span class="built_in">integer</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [23,2,6,4,7], k = 13</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li>
<li>0 &lt;&#x3D; sum(nums[i]) &lt;&#x3D; 2<sup>31</sup> - 1</li>
<li>1 &lt;&#x3D; k &lt;&#x3D; 2<sup>31</sup> - 1</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum + map</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkSubarraySum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(size + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">count</span>(preSum[i] % k)) &#123;</span><br><span class="line">                <span class="type">int</span> idx = m[preSum[i] % k];</span><br><span class="line">                <span class="keyword">if</span> (i - idx &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                m[preSum[i] % k] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Prefix Sum</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>525. Contiguous Array</title>
    <url>/2023/11/12/525-Contiguous-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/contiguous-array/">525. Contiguous Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>Given a binary array <code>nums</code>, return <em>the maximum length of a contiguous subarray with an equal number of</em> <code>0</code> <em>and</em> <code>1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,0]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>change 0 to -1 and make the range sum to be 0</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(size + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + (nums[i] == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!m.<span class="built_in">count</span>(preSum[i])) &#123;</span><br><span class="line">                m[preSum[i]] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res = <span class="built_in">max</span>(res, i - m[preSum[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>526. Beautiful Arrangement</title>
    <url>/2024/05/24/526-Beautiful-Arrangement/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/beautiful-arrangement/description/">526. Beautiful Arrangement</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Suppose you have <code>n</code> integers labeled <code>1</code> through <code>n</code>. A permutation of those <code>n</code> integers <code>perm</code> (<strong>1-indexed</strong> ) is considered a <strong>beautiful arrangement</strong>  if for every <code>i</code> (<code>1 &lt;= i &lt;= n</code>), <strong>either</strong>  of the following is true:</p>
<ul>
<li><code>perm[i]</code> is divisible by <code>i</code>.</li>
<li><code>i</code> is divisible by <code>perm[i]</code>.</li>
</ul>
<p>Given an integer <code>n</code>, return the <strong>number</strong>  of the <strong>beautiful arrangements</strong>  that you can construct.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<p>The first beautiful arrangement is [1,2]:</p>
<ul>
<li>perm[1] &#x3D; 1 is divisible by i &#x3D; 1</li>
<li>perm[2] &#x3D; 2 is divisible by i &#x3D; 2</li>
</ul>
<p>The second beautiful arrangement is [2,1]:</p>
<ul>
<li>perm[1] &#x3D; 2 is divisible by i &#x3D; 1</li>
<li>i &#x3D; 2 is divisible by perm[2] &#x3D; 1</li>
</ul>
<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 15</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dynamic programming</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; dp;</span><br><span class="line">    <span class="type">int</span> n_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countArrangement</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        n_ = n;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == (<span class="number">1</span> &lt;&lt; n_) - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp.<span class="built_in">contains</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index = __builtin_popcount(i), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n_; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((j + <span class="number">1</span>) % (index + <span class="number">1</span>) == <span class="number">0</span> || (index + <span class="number">1</span>) % (j + <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                ans += <span class="built_in">dfs</span>(i | (<span class="number">1</span> &lt;&lt; j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Backtracking</tag>
        <tag>Bit Manipulation</tag>
        <tag>Bitmask</tag>
      </tags>
  </entry>
  <entry>
    <title>528. Random Pick with Weight</title>
    <url>/2023/01/25/528-Random-Pick-with-Weight/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/random-pick-with-weight/">912. Random Pick with Weight</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a>, <a href="https://leetcode.com/tag/prefix-sum/">Prefix Sum</a>, <a href="https://leetcode.com/tag/randomized/">Randomized</a></p>
<p>You are given a <strong>0-indexed</strong> array of positive integers <code>w</code> where <code>w[i]</code> describes the <strong>weight</strong> of the i<sup>th</sup> index.</p>
<p>You need to implement the function <code>pickIndex()</code>, which <strong>randomly</strong> picks an index in the range <code>[0, w.length - 1]</code> (<strong>inclusive</strong>) and returns it. The <strong>probability</strong> of picking an index <code>i</code> is <code>w[i] / sum(w)</code>.</p>
<ul>
<li>For example, if <code>w = [1, 3]</code>, the probability of picking index <code>0</code> is <code>1 / (1 + 3) = 0.25</code> (i.e., <code>25%</code>), and the probability of picking index <code>1</code> is <code>3 / (1 + 3) = 0.75</code> (i.e., <code>75%</code>).</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;Solution&quot;,&quot;pickIndex&quot;]</span><br><span class="line">[[[1]],[]]</span><br><span class="line">Output</span><br><span class="line">[null,0]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">Solution solution = new Solution([1]);</span><br><span class="line">solution.pickIndex(); // return 0\. The only option is to return 0 since there is only one element in w.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]</span><br><span class="line">[[[1,3]],[],[],[],[],[]]</span><br><span class="line">Output</span><br><span class="line">[null,1,1,1,1,0]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">Solution solution = new Solution([1, 3]);</span><br><span class="line">solution.pickIndex(); // return 1\. It is returning the second element (index = 1) that has a probability of 3/4.</span><br><span class="line">solution.pickIndex(); // return 1</span><br><span class="line">solution.pickIndex(); // return 1</span><br><span class="line">solution.pickIndex(); // return 1</span><br><span class="line">solution.pickIndex(); // return 0\. It is returning the first element (index = 0) that has a probability of 1/4.</span><br><span class="line"></span><br><span class="line">Since this is a randomization problem, multiple answers are allowed.</span><br><span class="line">All of the following outputs can be considered correct:</span><br><span class="line">[null,1,1,1,1,0]</span><br><span class="line">[null,1,1,1,1,1]</span><br><span class="line">[null,1,1,1,0,0]</span><br><span class="line">[null,1,1,1,0,1]</span><br><span class="line">[null,1,0,1,0,0]</span><br><span class="line">......</span><br><span class="line">and so on.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; w.length &lt;&#x3D; 10<sup>4</sup></li>
<li>1 &lt;&#x3D; w[i] &lt;&#x3D; 10<sup>5</sup></li>
<li><code>pickIndex</code> will be called at most 10<sup>4</sup> times.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum</li>
<li>binary search to find the left boundry</li>
<li>if the number doesn’t exist, we can iterpret the return as<ul>
<li>where it ought to be in the array</li>
<li>the index of value &gt; target</li>
</ul>
</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; preSum;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solution</span>(vector&lt;<span class="type">int</span>&gt;&amp; w) &#123;</span><br><span class="line">        preSum.<span class="built_in">push_back</span>(w[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; w.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            preSum.<span class="built_in">push_back</span>(preSum[i - <span class="number">1</span>] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pickIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">rand</span>() % preSum.<span class="built_in">back</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = preSum.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 1, 2, 3, 5, 8</span></span><br><span class="line">        <span class="comment">// r = 4</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 1. left = 2, right = 2</span></span><br><span class="line">        <span class="comment">// preSum[mid] &lt; 4, left = mid + 1 = 3, right = 2</span></span><br><span class="line">        <span class="comment">// 2. left = 3, right = 3</span></span><br><span class="line">        <span class="comment">// preSum[mid] &gt; 4, left = 3, right = 2</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (preSum[mid] == r) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preSum[mid] &lt; r) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preSum[mid] &gt; r) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution* obj = new Solution(w);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;pickIndex();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Prefix Sum</tag>
        <tag>Math</tag>
        <tag>Randomized</tag>
      </tags>
  </entry>
  <entry>
    <title>53. Maximum Subarray</title>
    <url>/2024/07/16/53-Maximum-Subarray/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-subarray/description/">53. Maximum Subarray</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array <code>nums</code>, find the subarray with the largest sum, and return its sum.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The subarray [4,-1,2,1] has the largest <span class="built_in">sum</span> 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The subarray [1] has the largest <span class="built_in">sum</span> 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,4,-1,7,8]</span><br><span class="line">Output: 23</span><br><span class="line">Explanation: The subarray [5,4,-1,7,8] has the largest <span class="built_in">sum</span> 23.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li>
</ul>
<p><strong>Follow up:</strong>  If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong>  approach, which is more subtle.</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = INT_MIN, left = <span class="number">0</span>, right = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            cur += nums[right++];</span><br><span class="line">            res = <span class="built_in">max</span>(res, cur);</span><br><span class="line">            <span class="keyword">while</span> (cur &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                cur -= nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>536. Construct Binary Tree from String</title>
    <url>/2024/07/11/536-Construct-Binary-Tree-from-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/construct-binary-tree-from-string/description/">536. Construct Binary Tree from String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You need to construct a binary tree from a string consisting of parenthesis and integers.</p>
<p>The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root’s value and a pair of parenthesis contains a child binary tree with the same structure.</p>
<p>You always start to construct the <b>left</b> child node of the parent first if it exists.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/02/butree.jpg" style="width: 382px; height: 322px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;4(2(3)(1))(6(5))&quot;</span></span><br><span class="line">Output: [4,2,6,3,1,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;4(2(3)(1))(6(5)(7))&quot;</span></span><br><span class="line">Output: [4,2,6,3,1,5,7]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;-4(2(3)(1))(6(5)(7))&quot;</span></span><br><span class="line">Output: [-4,2,6,3,1,5,7]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 3 * 10^4</code></li>
<li><code>s</code> consists of digits, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39;-&#39;</code> only.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">str2tree</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> start = s.<span class="built_in">find_first_of</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (start == <span class="number">-1</span>)</span><br><span class="line">            start = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> val = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>, start));</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (start == s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> parenthesis = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = start; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                parenthesis++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                parenthesis--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (parenthesis == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// s[start] = &#x27;(&#x27;, s[i] = &#x27;)&#x27;</span></span><br><span class="line">        root-&gt;left = <span class="built_in">str2tree</span>(s.<span class="built_in">substr</span>(start + <span class="number">1</span>, i - (start + <span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">if</span> (i == s.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// i + 2 since we need to skip the &#x27;)&#x27; and &#x27;(&#x27;</span></span><br><span class="line">        root-&gt;right = <span class="built_in">str2tree</span>(s.<span class="built_in">substr</span>(i + <span class="number">2</span>, s.<span class="built_in">size</span>() - <span class="number">1</span> - (i + <span class="number">2</span>)));</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>538. Convert BST to Greater Tree</title>
    <url>/2023/08/26/538-Convert-BST-to-Greater-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/convert-bst-to-greater-tree/">538. Convert BST to Greater Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search-tree//">Binary Search Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p>
<p>As a reminder, a <em>binary search tree</em> is a tree that satisfies these constraints:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/05/02/tree.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]</span><br><span class="line">Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,null,1]</span><br><span class="line">Output: [1,null,1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li>
<li>-10<sup>4</sup> &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>4</sup></li>
<li>All the values in the tree are <strong>unique</strong>.</li>
<li><code>root</code> is guaranteed to be a valid binary search tree.</li>
</ul>
<p><strong>Note:</strong> This question is the same as 1038: <a href="https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/">https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/</a></p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>traverse</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">convertBST</span>(root-&gt;right);</span><br><span class="line">        sum += root-&gt;val;</span><br><span class="line">        root-&gt;val = sum;</span><br><span class="line">        <span class="built_in">convertBST</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>543. Diameter of Binary Tree</title>
    <url>/2023/02/02/543-Diameter-of-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/diameter-of-binary-tree/">543. Diameter of Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/tree/">Tree</a>, <a href="https://leetcode.com/tag/depth-first-search/">Depth-First Search</a>, <a href="https://leetcode.com/tag/binary-tree/">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary tree, return <em>the length of the <strong>diameter</strong> of the tree</em>.</p>
<p>The <strong>diameter</strong> of a binary tree is the <strong>length</strong> of the longest path between any two nodes in a tree. This path may or may not pass through the <code>root</code>.</p>
<p>The <strong>length</strong> of a path between two nodes is represented by the number of edges between them.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [1, 10<sup>4</sup>].</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Draw and imagine the diameter</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">maxDepth</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">maxDepth</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">maxDepth</span>(root-&gt;right);</span><br><span class="line">        res = <span class="built_in">max</span>(left + right, res);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>54. Spiral Matrix</title>
    <url>/2023/01/23/54-Spiral-Matrix/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/spiral-matrix/">54. Spiral Matrix</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a>, <a href="https://leetcode.com/tag/simulation/">Simulation</a></p>
<p>Given an <code>m x n</code> <code>matrix</code>, return <em>all elements of the</em> <code>matrix</code> <em>in spiral order</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">Output: [1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 10</code></li>
<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Traverse all four sides in one iteration</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() == <span class="number">0</span> || matrix[<span class="number">0</span>].<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>, up = <span class="number">0</span>, down = m - <span class="number">1</span>, x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (res.<span class="built_in">size</span>() &lt; m * n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (up &lt;= down) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(matrix[up][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                up++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = up; i &lt;= down; i++) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(matrix[i][right]);</span><br><span class="line">                &#125;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (up &lt;= down) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = right; i &gt;= left; i--) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(matrix[down][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                down--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = down; i &gt;= up; i--) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(matrix[i][left]);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Simulation</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>549. Binary Tree Longest Consecutive Sequence II</title>
    <url>/2024/07/02/549-Binary-Tree-Longest-Consecutive-Sequence-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii/description/">549. Binary Tree Longest Consecutive Sequence II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the length of the longest consecutive path in the tree.</p>
<p>A consecutive path is a path where the values of the consecutive nodes in the path differ by one. This path can be either increasing or decreasing.</p>
<ul>
<li>For example, <code>[1,2,3,4]</code> and <code>[4,3,2,1]</code> are both considered valid, but the path <code>[1,2,4,3]</code> is not valid.</li>
</ul>
<p>On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/consec2-1-tree.jpg" style="width: 207px; height: 183px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The longest consecutive path is [1, 2] or [2, 1].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/consec2-2-tree.jpg" style="width: 207px; height: 183px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,3]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 3 * 10^4]</code>.</li>
<li><code>-3 * 10^4 &lt;= Node.val &lt;= 3 * 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestConsecutive</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the return pair: the length of longest increasing/decreasing sequence at root</span></span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> inc = <span class="number">1</span>, dec = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            <span class="keyword">auto</span> left = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val == root-&gt;left-&gt;val + <span class="number">1</span>) &#123;</span><br><span class="line">                inc += left.first;</span><br><span class="line">                l = <span class="built_in">max</span>(l, <span class="number">1</span> + left.first);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val == root-&gt;left-&gt;val - <span class="number">1</span>) &#123;</span><br><span class="line">                dec += left.second;</span><br><span class="line">                r = <span class="built_in">max</span>(r, <span class="number">1</span> + left.second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">auto</span> right = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;val == root-&gt;right-&gt;val + <span class="number">1</span>) &#123;</span><br><span class="line">                dec += right.first;</span><br><span class="line">                l = <span class="built_in">max</span>(l, <span class="number">1</span> + right.first);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val == root-&gt;right-&gt;val - <span class="number">1</span>) &#123;</span><br><span class="line">                inc += right.second;</span><br><span class="line">                r = <span class="built_in">max</span>(r, <span class="number">1</span> + right.second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="built_in">max</span>(inc, dec));</span><br><span class="line">        <span class="keyword">return</span> &#123;l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>560. Subarray Sum Equals K</title>
    <url>/2023/11/13/560-Subarray-Sum-Equals-K/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/subarray-sum-equals-k/">560. Subarray Sum Equals K</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the total number of subarrays whose sum equals to</em> <code>k</code>.</p>
<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,1], k = 2</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3], k = 3</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 2 * 10<sup>4</sup></li>
<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>
<li>-10<sup>7</sup> &lt;&#x3D; k &lt;&#x3D; 10<sup>7</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum + map</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subarraySum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(size + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            <span class="type">int</span> val = preSum[i];</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">count</span>(val - k)) &#123;</span><br><span class="line">                res += m[val - k];</span><br><span class="line">            &#125;</span><br><span class="line">            m[val]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>563. Binary Tree Tilt</title>
    <url>/2024/07/02/563-Binary-Tree-Tilt/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-tilt/description/">563. Binary Tree Tilt</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the sum of every tree node’s <strong>tilt</strong> .</p>
<p>The <strong>tilt</strong>  of a tree node is the <strong>absolute difference</strong>  between the sum of all left subtree node <strong>values</strong>  and all right subtree node <strong>values</strong> . If a node does not have a left child, then the sum of the left subtree node <strong>values</strong>  is treated as <code>0</code>. The rule is similar if the node does not have a right child.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg" style="width: 712px; height: 182px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:</span><br><span class="line">Tilt of node 2 : |0-0| = 0 (no children)</span><br><span class="line">Tilt of node 3 : |0-0| = 0 (no children)</span><br><span class="line">Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so <span class="built_in">sum</span> is 2; right subtree is just right child, so <span class="built_in">sum</span> is 3)</span><br><span class="line">Sum of every tilt : 0 + 0 + 1 = 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg" style="width: 800px; height: 203px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,9,3,5,null,7]</span><br><span class="line">Output: 15</span><br><span class="line">Explanation:</span><br><span class="line">Tilt of node 3 : |0-0| = 0 (no children)</span><br><span class="line">Tilt of node 5 : |0-0| = 0 (no children)</span><br><span class="line">Tilt of node 7 : |0-0| = 0 (no children)</span><br><span class="line">Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so <span class="built_in">sum</span> is 3; right subtree is just right child, so <span class="built_in">sum</span> is 5)</span><br><span class="line">Tilt of node 9 : |0-7| = 7 (no left child, so <span class="built_in">sum</span> is 0; right subtree is just right child, so <span class="built_in">sum</span> is 7)</span><br><span class="line">Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, <span class="built_in">which</span> sums to 10; right subtree values are 9 and 7, <span class="built_in">which</span> sums to 16)</span><br><span class="line">Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg" style="width: 800px; height: 293px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [21,7,14,1,1,2,2,3,3]</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 10^4]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTilt</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        sum += <span class="built_in">abs</span>(left - right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left + right + root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>567. Permutation in String</title>
    <url>/2023/01/18/567-Permutation-in-String/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/permutation-in-string/">567. Permutation in String</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/sliding-window/">Sliding Window</a></p>
<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>true</code> <em>if</em> <code>s2</code> <em>contains a permutation of</em> <code>s1</code><em>, or</em> <code>false</code> <em>otherwise</em>.</p>
<p>In other words, return <code>true</code> if one of <code>s1</code>‘s permutations is the substring of <code>s2</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s1 = <span class="string">&quot;ab&quot;</span>, s2 = <span class="string">&quot;eidbaooo&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: s2 contains one permutation of s1 (<span class="string">&quot;ba&quot;</span>).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s1 = <span class="string">&quot;ab&quot;</span>, s2 = <span class="string">&quot;eidboaoo&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; s1.length, s2.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Sliding window</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkInclusion</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><ul>
<li>Compile a map to record needing characters first</li>
<li>Sliding window, use a map to record in window characters, use a variable(valid) to record<br>number of characters satisfy the occurance requirement</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkInclusion</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need, window;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s1) &#123;</span><br><span class="line">            need[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, valid = <span class="number">0</span>, len = s1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">char</span> c = s2[right++];</span><br><span class="line">            <span class="keyword">if</span> (need.<span class="built_in">count</span>(c)) &#123;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="keyword">if</span> (window[c] == need[c]) &#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right - left == len) &#123;</span><br><span class="line">                <span class="keyword">if</span> (valid == need.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                c = s2[left++];</span><br><span class="line">                <span class="keyword">if</span> (need.<span class="built_in">count</span>(c)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (window[c] == need[c]) &#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    window[c]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>572. Subtree of Another Tree</title>
    <url>/2024/06/06/572-Subtree-of-Another-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/subtree-of-another-tree/description/">572. Subtree of Another Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the roots of two binary trees <code>root</code> and <code>subRoot</code>, return <code>true</code> if there is a subtree of <code>root</code> with the same structure and node values of <code>subRoot</code> and <code>false</code> otherwise.</p>
<p>A subtree of a binary tree <code>tree</code> is a tree that consists of a node in <code>tree</code> and all of this node’s descendants. The tree <code>tree</code> could also be considered as a subtree of itself.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg" style="width: 532px; height: 400px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,4,5,1,2], subRoot = [4,1,2]</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg" style="width: 502px; height: 458px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the <code>root</code> tree is in the range <code>[1, 2000]</code>.</li>
<li>The number of nodes in the <code>subRoot</code> tree is in the range <code>[1, 1000]</code>.</li>
<li><code>-10^4 &lt;= root.val &lt;= 10^4</code></li>
<li><code>-10^4 &lt;= subRoot.val &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* root, TreeNode* subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root &amp;&amp; !subRoot) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!root || !subRoot) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> ans = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == subRoot-&gt;val) &#123;</span><br><span class="line">            ans = <span class="built_in">validate</span>(root, subRoot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">isSubtree</span>(root-&gt;left, subRoot) ||</span><br><span class="line">                   <span class="built_in">isSubtree</span>(root-&gt;right, subRoot);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validate</span><span class="params">(TreeNode* root, TreeNode* subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root &amp;&amp; !subRoot) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!root || !subRoot) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val != subRoot-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">validate</span>(root-&gt;left, subRoot-&gt;left) &amp;&amp;</span><br><span class="line">               <span class="built_in">validate</span>(root-&gt;right, subRoot-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Hash Function</tag>
        <tag>String Matching</tag>
      </tags>
  </entry>
  <entry>
    <title>583. Delete Operation for Two Strings</title>
    <url>/2024/07/23/583-Delete-Operation-for-Two-Strings/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/delete-operation-for-two-strings/description/">583. Delete Operation for Two Strings</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings <code>word1</code> and <code>word2</code>, return the minimum number of <strong>steps</strong>  required to make <code>word1</code> and <code>word2</code> the same.</p>
<p>In one <strong>step</strong> , you can delete exactly one character in either string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;sea&quot;</span>, word2 = <span class="string">&quot;eat&quot;</span></span><br><span class="line">Output: 2</span><br><span class="line">Explanation: You need one step to make <span class="string">&quot;sea&quot;</span> to <span class="string">&quot;ea&quot;</span> and another step to make <span class="string">&quot;eat&quot;</span> to <span class="string">&quot;ea&quot;</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;leetcode&quot;</span>, word2 = <span class="string">&quot;etco&quot;</span></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li>
<li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string word1_, word2_;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        word1_ = word1;</span><br><span class="line">        word2_ = word2;</span><br><span class="line">        dp.<span class="built_in">resize</span>(word1.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(word2.<span class="built_in">size</span>(), <span class="number">-1</span>));</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> word1.<span class="built_in">size</span>() - l + word2.<span class="built_in">size</span>() - l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == word1_.<span class="built_in">size</span>() || j == word2_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (word1_[i] == word2_[j]) &#123;</span><br><span class="line">            res = <span class="number">1</span> + <span class="built_in">traverse</span>(i + <span class="number">1</span>, j + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(<span class="built_in">traverse</span>(i, j + <span class="number">1</span>), <span class="built_in">traverse</span>(i + <span class="number">1</span>, j));</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][j] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>The other dp approach:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string word1_, word2_;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        word1_ = word1;</span><br><span class="line">        word2_ = word2;</span><br><span class="line">        dp.<span class="built_in">resize</span>(word1.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(word2.<span class="built_in">size</span>(), <span class="number">-1</span>));</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == word1_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> word2_.<span class="built_in">size</span>() - j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == word2_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> word1_.<span class="built_in">size</span>() - i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (word1_[i] == word2_[j]) &#123;</span><br><span class="line">            res = <span class="built_in">traverse</span>(i + <span class="number">1</span>, j + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(<span class="number">1</span> + <span class="built_in">traverse</span>(i, j + <span class="number">1</span>), <span class="number">1</span> + <span class="built_in">traverse</span>(i + <span class="number">1</span>, j));</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][j] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>582. Kill Process</title>
    <url>/2024/07/11/582-Kill-Process/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/kill-process/description/">582. Kill Process</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have <code>n</code> processes forming a rooted tree structure. You are given two integer arrays <code>pid</code> and <code>ppid</code>, where <code>pid[i]</code> is the ID of the <code>i^th</code> process and <code>ppid[i]</code> is the ID of the <code>i^th</code> process’s parent process.</p>
<p>Each process has only <strong>one parent process</strong> but may have multiple children processes. Only one process has <code>ppid[i] = 0</code>, which means this process has <strong>no parent process</strong> (the root of the tree).</p>
<p>When a process is <strong>killed</strong>, all of its children processes will also be killed.</p>
<p>Given an integer <code>kill</code> representing the ID of a process you want to kill, return a list of the IDs of the processes that will be killed. You may return the answer in <strong>any order</strong>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/24/ptree.jpg" style="width: 207px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: pid = [1,3,10,5], ppid = [3,0,5,3], <span class="built_in">kill</span> = 5</span><br><span class="line">Output: [5,10]</span><br><span class="line">Explanation:The processes colored <span class="keyword">in</span> red are the processes that should be killed.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: pid = [1], ppid = [0], <span class="built_in">kill</span> = 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == pid.length</code></li>
<li><code>n == ppid.length</code></li>
<li><code>1 &lt;= n &lt;= 5 * 10^4</code></li>
<li><code>1 &lt;= pid[i] &lt;= 5 * 10^4</code></li>
<li><code>0 &lt;= ppid[i] &lt;= 5 * 10^4</code></li>
<li>Only one process has no parent.</li>
<li>All the values of <code>pid</code> are <strong>unique</strong> .</li>
<li><code>kill</code> is <strong>guaranteed</strong>  to be in <code>pid</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">killProcess</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; pid, vector&lt;<span class="type">int</span>&gt;&amp; ppid, <span class="type">int</span> kill)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = pid.<span class="built_in">size</span>(), root = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> p = pid[i];</span><br><span class="line">            <span class="type">int</span> pp = ppid[i];</span><br><span class="line">            <span class="keyword">if</span> (pp == <span class="number">0</span>) &#123;</span><br><span class="line">                root = p;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                m[pp].<span class="built_in">push_back</span>(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(kill);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(root);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> child : m[root]) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>59. Spiral Matrix II</title>
    <url>/2023/01/23/59-Spiral-Matrix-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/spiral-matrix-ii/">59. Spiral Matrix II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/matrix/">Matrix</a>, <a href="https://leetcode.com/tag/simulation/">Simulation</a></p>
<p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to n<sup>2</sup> in spiral order.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: [[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 20</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Traverse the four sides in one iteration</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">res</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>, up = <span class="number">0</span>, down = n - <span class="number">1</span>, val = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (val &lt;= n * n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (up &lt;= down) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">                    res[up][i] = val++;</span><br><span class="line">                &#125;</span><br><span class="line">                up++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = up; i &lt;= down; i++) &#123;</span><br><span class="line">                    res[i][right] = val++;</span><br><span class="line">                &#125;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (up &lt;= down) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = right; i &gt;= left; i--) &#123;</span><br><span class="line">                    res[down][i] = val++;</span><br><span class="line">                &#125;</span><br><span class="line">                down--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = down; i &gt;= up; i--) &#123;</span><br><span class="line">                    res[i][left] = val++;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Simulation</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>608B. Hamming Distance Sum</title>
    <url>/2024/05/30/608B-Hamming-Distance-Sum/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/608/B">B. Hamming Distance Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入长度均 ≤2e5 的字符串 s 和 t，只包含 ‘0’ 和 ‘1’。并且 t 的长度大于等于 s 的长度。</p>
<p>定义 D(a,b) &#x3D; |a[0]-b[0]| + |a[1]-b[1]| + … + |a[n-1]-b[n-1]|。<br>例如 D(“0011”, “0110”) &#x3D; |0-0| + |0-1| + |1-1| + |1-0| &#x3D; 0 + 1 + 0 + 1 &#x3D; 2。</p>
<p>设 s 的长度为 n，对于 t 的所有长为 n 的连续子串 t’，计算 D(s,t’)。<br>输出所有 D(s,t’) 的和。</p>
<p>进阶：额外输入 k，计算 s 所有长为 k 的子串与 t 的所有长为 k 的子串的 D 之和。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>think how each element contribute to the final result</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = a.<span class="built_in">size</span>(), n = b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n - m + i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            res += <span class="built_in">abs</span>(a[i] - b[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    in &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="built_in">solve</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>617. Merge Two Binary Trees</title>
    <url>/2024/06/19/617-Merge-Two-Binary-Trees/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/merge-two-binary-trees/description/">617. Merge Two Binary Trees</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two binary trees <code>root1</code> and <code>root2</code>.</p>
<p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p>
<p>Return the merged tree.</p>
<p><strong>Note:</strong>  The merging process must start from the root nodes of both trees.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/02/05/merge.jpg" style="width: 600px; height: 163px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]</span><br><span class="line">Output: [3,4,5,5,4,null,7]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root1 = [1], root2 = [1,2]</span><br><span class="line">Output: [2,2]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in both trees is in the range <code>[0, 2000]</code>.</li>
<li><code>-10^4 &lt;= Node.val &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root1 &amp;&amp; !root2) &#123;</span><br><span class="line">            <span class="keyword">return</span> root1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!root1 || !root2) &#123;</span><br><span class="line">            <span class="keyword">return</span> root1 ? root1 : root2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root1-&gt;val += root2-&gt;val;</span><br><span class="line"></span><br><span class="line">        root1-&gt;left = <span class="built_in">mergeTrees</span>(root1-&gt;left, root2-&gt;left);</span><br><span class="line">        root1-&gt;right = <span class="built_in">mergeTrees</span>(root1-&gt;right, root2-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>622. Design Circular Queue</title>
    <url>/2023/12/15/622-Design-Circular-Queue/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/design-circular-queue/">622. Design Circular Queue</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a></p>
<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called “Ring Buffer”.</p>
<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>
<p>Implement the <code>MyCircularQueue</code> class:</p>
<ul>
<li><code>MyCircularQueue(k)</code> Initializes the object with the size of the queue to be <code>k</code>.</li>
<li><code>int Front()</code> Gets the front item from the queue. If the queue is empty, return <code>-1</code>.</li>
<li><code>int Rear()</code> Gets the last item from the queue. If the queue is empty, return <code>-1</code>.</li>
<li><code>boolean enQueue(int value)</code> Inserts an element into the circular queue. Return <code>true</code> if the operation is successful.</li>
<li><code>boolean deQueue()</code> Deletes an element from the circular queue. Return <code>true</code> if the operation is successful.</li>
<li><code>boolean isEmpty()</code> Checks whether the circular queue is empty or not.</li>
<li><code>boolean isFull()</code> Checks whether the circular queue is full or not.</li>
</ul>
<p>You must solve the problem without using the built-in queue data structure in your programming language.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;MyCircularQueue&quot;</span>, <span class="string">&quot;enQueue&quot;</span>, <span class="string">&quot;enQueue&quot;</span>, <span class="string">&quot;enQueue&quot;</span>, <span class="string">&quot;enQueue&quot;</span>, <span class="string">&quot;Rear&quot;</span>, <span class="string">&quot;isFull&quot;</span>, <span class="string">&quot;deQueue&quot;</span>, <span class="string">&quot;enQueue&quot;</span>, <span class="string">&quot;Rear&quot;</span>]</span><br><span class="line">[[3], [1], [2], [3], [4], [], [], [], [4], []]</span><br><span class="line">Output</span><br><span class="line">[null, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, 3, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MyCircularQueue myCircularQueue = new MyCircularQueue(3);</span><br><span class="line">myCircularQueue.enQueue(1); // <span class="built_in">return</span> True</span><br><span class="line">myCircularQueue.enQueue(2); // <span class="built_in">return</span> True</span><br><span class="line">myCircularQueue.enQueue(3); // <span class="built_in">return</span> True</span><br><span class="line">myCircularQueue.enQueue(4); // <span class="built_in">return</span> False</span><br><span class="line">myCircularQueue.Rear();     // <span class="built_in">return</span> 3</span><br><span class="line">myCircularQueue.isFull();   // <span class="built_in">return</span> True</span><br><span class="line">myCircularQueue.deQueue();  // <span class="built_in">return</span> True</span><br><span class="line">myCircularQueue.enQueue(4); // <span class="built_in">return</span> True</span><br><span class="line">myCircularQueue.Rear();     // <span class="built_in">return</span> 4</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= 1000</code></li>
<li><code>0 &lt;= value &lt;= 1000</code></li>
<li>At most <code>3000</code> calls will be made to <code>enQueue</code>, <code>deQueue</code>, <code>Front</code>, <code>Rear</code>, <code>isEmpty</code>, and <code>isFull</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use pointer or queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class MyCircularQueue &#123;</span><br><span class="line">public:</span><br><span class="line">    struct Node &#123;</span><br><span class="line">        Node* next;</span><br><span class="line">        int val;</span><br><span class="line">        Node(int val) : val(val), next(nullptr) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Node *<span class="built_in">head</span>, *<span class="built_in">tail</span>;</span><br><span class="line">    int size_;</span><br><span class="line">    int count_;</span><br><span class="line"></span><br><span class="line">    MyCircularQueue(int k) &#123;</span><br><span class="line">        <span class="built_in">head</span> = nullptr;</span><br><span class="line">        <span class="built_in">tail</span> = nullptr;</span><br><span class="line">        size_ = k;</span><br><span class="line">        count_ = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool enQueue(int value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count_ &gt;= size_) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count_++;</span><br><span class="line">        Node* node = new Node(value);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">head</span>) &#123;</span><br><span class="line">            <span class="built_in">head</span> = node;</span><br><span class="line">            <span class="built_in">tail</span> = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">tail</span>-&gt;next = node;</span><br><span class="line">            <span class="built_in">tail</span> = <span class="built_in">tail</span>-&gt;next;</span><br><span class="line">            <span class="built_in">tail</span>-&gt;next = <span class="built_in">head</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool <span class="function"><span class="title">deQueue</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">head</span>) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count_--;</span><br><span class="line">        Node* tmp = <span class="built_in">head</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">head</span> == <span class="built_in">tail</span>) &#123;</span><br><span class="line">            <span class="built_in">head</span> = nullptr;</span><br><span class="line">            <span class="built_in">tail</span> = nullptr;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">head</span> = <span class="built_in">head</span>-&gt;next;</span><br><span class="line">            <span class="built_in">tail</span>-&gt;next = <span class="built_in">head</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        delete(tmp);</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int <span class="function"><span class="title">Front</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">head</span> ? <span class="built_in">head</span>-&gt;val : -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int <span class="function"><span class="title">Rear</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">tail</span> ? <span class="built_in">tail</span>-&gt;val : -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool <span class="function"><span class="title">isEmpty</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> count_ == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool <span class="function"><span class="title">isFull</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> count_ == size_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyCircularQueue object will be instantiated and called as such:</span><br><span class="line"> * MyCircularQueue* obj = new MyCircularQueue(k);</span><br><span class="line"> * bool param_1 = obj-&gt;enQueue(value);</span><br><span class="line"> * bool param_2 = obj-&gt;deQueue();</span><br><span class="line"> * int param_3 = obj-&gt;Front();</span><br><span class="line"> * int param_4 = obj-&gt;Rear();</span><br><span class="line"> * bool param_5 = obj-&gt;isEmpty();</span><br><span class="line"> * bool param_6 = obj-&gt;isFull();</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Linked List</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>623. Add One Row to Tree</title>
    <url>/2024/05/24/623-Add-One-Row-to-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/add-one-row-to-tree/description/">623. Add One Row to Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree and two integers <code>val</code> and <code>depth</code>, add a row of nodes with value <code>val</code> at the given depth <code>depth</code>.</p>
<p>Note that the <code>root</code> node is at depth <code>1</code>.</p>
<p>The adding rule is:</p>
<ul>
<li>Given the integer <code>depth</code>, for each not null tree node <code>cur</code> at the depth <code>depth - 1</code>, create two tree nodes with value <code>val</code> as <code>cur</code>‘s left subtree root and right subtree root.</li>
<li><code>cur</code>‘s original left subtree should be the left subtree of the new left subtree root.</li>
<li><code>cur</code>‘s original right subtree should be the right subtree of the new right subtree root.</li>
<li>If <code>depth == 1</code> that means there is no depth <code>depth - 1</code> at all, then create a tree node with value <code>val</code> as the new root of the whole original tree, and the original tree is the new root’s left subtree.</li>
</ul>
<p><strong>Example 1:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/03/15/addrow-tree.jpg" style="width: 500px; height: 231px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,6,3,1,5], val = 1, depth = 2</span><br><span class="line">Output: [4,1,1,2,null,null,6,3,1,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong><br><img alt="" src="https://assets.leetcode.com/uploads/2021/03/11/add2-tree.jpg" style="width: 500px; height: 277px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,null,3,1], val = 1, depth = 3</span><br><span class="line">Output: [4,2,null,1,1,3,null,null,1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li>The depth of the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>-10^5 &lt;= val &lt;= 10^5</code></li>
<li><code>1 &lt;= depth &lt;= the depth of tree + 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> curDepth = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">addOneRow</span><span class="params">(TreeNode* root, <span class="type">int</span> val, <span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">1</span>) &#123;</span><br><span class="line">            TreeNode* newHead = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">            newHead-&gt;left = root;</span><br><span class="line">            <span class="keyword">return</span> newHead;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(root, val, depth);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> val, <span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        curDepth++;</span><br><span class="line">        <span class="keyword">if</span> (curDepth == depth) &#123;</span><br><span class="line">            TreeNode* left = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">            TreeNode* right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">            TreeNode* prevLeft= root-&gt;left;</span><br><span class="line">            TreeNode* prevRight = root-&gt;right;</span><br><span class="line">            root-&gt;left = left;</span><br><span class="line">            root-&gt;right = right;</span><br><span class="line">            left-&gt;left = prevLeft;</span><br><span class="line">            right-&gt;right = prevRight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, val, depth);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, val, depth);</span><br><span class="line">        curDepth--;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>637. Average of Levels in Binary Tree</title>
    <url>/2024/07/08/637-Average-of-Levels-in-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/average-of-levels-in-binary-tree/description/">637. Average of Levels in Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within <code>10^-5</code> of the actual answer will be accepted.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/09/avg1-tree.jpg" style="width: 277px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: [3.00000,14.50000,11.00000]</span><br><span class="line">Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.</span><br><span class="line">Hence <span class="built_in">return</span> [3, 14.5, 11].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/03/09/avg2-tree.jpg" style="width: 292px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,9,20,15,7]</span><br><span class="line">Output: [3.00000,14.50000,11.00000]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>-2^31 &lt;= Node.val &lt;= 2^31 - 1</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; res;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        <span class="keyword">if</span> (root)</span><br><span class="line">            q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                sum += cur-&gt;val;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right)</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(sum / n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>64. Minimum Path Sum</title>
    <url>/2024/07/31/64-Minimum-Path-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-path-sum/description/">64. Minimum Path Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p>
<p><strong>Note:</strong>  You can only move either down or right at any point in time.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" style="width: 242px; height: 242px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the <span class="built_in">sum</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,2,3],[4,5,6]]</span><br><span class="line">Output: 12</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 200</code></li>
<li><code>0 &lt;= grid[i][j] &lt;= 200</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!i &amp;&amp; !j) &#123;</span><br><span class="line">                    dp[i][j] = grid[i][j];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> top = i ? dp[i - <span class="number">1</span>][j] : INT_MAX;</span><br><span class="line">                <span class="type">int</span> left = j ? dp[i][j - <span class="number">1</span>] : INT_MAX;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(top, left) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>643. Maximum Average Subarray I</title>
    <url>/2024/10/21/643-Maximum-Average-Subarray-I/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-average-subarray-i/description/">643. Maximum Average Subarray I</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array <code>nums</code> consisting of <code>n</code> elements, and an integer <code>k</code>.</p>
<p>Find a contiguous subarray whose <strong>length is equal to</strong>  <code>k</code> that has the maximum average value and return this value. Any answer with a calculation error less than <code>10^-5</code> will be accepted.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,12,-5,-6,50,3], k = 4</span><br><span class="line">Output: 12.75000</span><br><span class="line">Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5], k = 1</span><br><span class="line">Output: 5.00000</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li><code>1 &lt;= k &lt;= n &lt;= 10^5</code></li>
<li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMaxAverage</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> res = INT_MIN, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">if</span> (right &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                res = <span class="built_in">max</span>(res, sum / k);</span><br><span class="line">                sum -= nums[right - k + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>641. Design Circular Deque</title>
    <url>/2023/12/15/641-Design-Circular-Deque/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/design-circular-deque/">641. Design Circular Deque</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a></p>
<p>Design your implementation of the circular double-ended queue (deque).</p>
<p>Implement the <code>MyCircularDeque</code> class:</p>
<ul>
<li><code>MyCircularDeque(int k)</code> Initializes the deque with a maximum size of <code>k</code>.</li>
<li><code>boolean insertFront()</code> Adds an item at the front of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>
<li><code>boolean insertLast()</code> Adds an item at the rear of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>
<li><code>boolean deleteFront()</code> Deletes an item from the front of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>
<li><code>boolean deleteLast()</code> Deletes an item from the rear of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>
<li><code>int getFront()</code> Returns the front item from the Deque. Returns <code>-1</code> if the deque is empty.</li>
<li><code>int getRear()</code> Returns the last item from Deque. Returns <code>-1</code> if the deque is empty.</li>
<li><code>boolean isEmpty()</code> Returns <code>true</code> if the deque is empty, or <code>false</code> otherwise.</li>
<li><code>boolean isFull()</code> Returns <code>true</code> if the deque is full, or <code>false</code> otherwise.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;MyCircularDeque&quot;</span>, <span class="string">&quot;insertLast&quot;</span>, <span class="string">&quot;insertLast&quot;</span>, <span class="string">&quot;insertFront&quot;</span>, <span class="string">&quot;insertFront&quot;</span>, <span class="string">&quot;getRear&quot;</span>, <span class="string">&quot;isFull&quot;</span>, <span class="string">&quot;deleteLast&quot;</span>, <span class="string">&quot;insertFront&quot;</span>, <span class="string">&quot;getFront&quot;</span>]</span><br><span class="line">[[3], [1], [2], [3], [4], [], [], [], [4], []]</span><br><span class="line">Output</span><br><span class="line">[null, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, 2, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MyCircularDeque myCircularDeque = new MyCircularDeque(3);</span><br><span class="line">myCircularDeque.insertLast(1);  // <span class="built_in">return</span> True</span><br><span class="line">myCircularDeque.insertLast(2);  // <span class="built_in">return</span> True</span><br><span class="line">myCircularDeque.insertFront(3); // <span class="built_in">return</span> True</span><br><span class="line">myCircularDeque.insertFront(4); // <span class="built_in">return</span> False, the queue is full.</span><br><span class="line">myCircularDeque.getRear();      // <span class="built_in">return</span> 2</span><br><span class="line">myCircularDeque.isFull();       // <span class="built_in">return</span> True</span><br><span class="line">myCircularDeque.deleteLast();   // <span class="built_in">return</span> True</span><br><span class="line">myCircularDeque.insertFront(4); // <span class="built_in">return</span> True</span><br><span class="line">myCircularDeque.getFront();     // <span class="built_in">return</span> 4</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= 1000</code></li>
<li><code>0 &lt;= value &lt;= 1000</code></li>
<li>At most <code>2000</code> calls will be made to <code>insertFront</code>, <code>insertLast</code>, <code>deleteFront</code>, <code>deleteLast</code>, <code>getFront</code>, <code>getRear</code>, <code>isEmpty</code>, <code>isFull</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use pointer or queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularDeque</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Node* prev;</span><br><span class="line">        Node* next;</span><br><span class="line">        <span class="built_in">Node</span>(<span class="type">int</span> val) : <span class="built_in">val</span>(val), <span class="built_in">prev</span>(<span class="literal">nullptr</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    Node* head;</span><br><span class="line">    Node* tail;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyCircularDeque</span>(<span class="type">int</span> k) &#123;</span><br><span class="line">        size = k;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        head = <span class="literal">nullptr</span>;</span><br><span class="line">        tail = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insertFront</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        Node* node = <span class="keyword">new</span> <span class="built_in">Node</span>(value);</span><br><span class="line">        <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head-&gt;prev = node;</span><br><span class="line">            node-&gt;next = head;</span><br><span class="line">            head = head-&gt;prev;</span><br><span class="line">            tail-&gt;next = head;</span><br><span class="line">            head-&gt;prev = tail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insertLast</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        Node* node = <span class="keyword">new</span> <span class="built_in">Node</span>(value);</span><br><span class="line">        <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail-&gt;next = node;</span><br><span class="line">            node-&gt;prev = tail;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            tail-&gt;next = head;</span><br><span class="line">            head-&gt;prev = tail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deleteFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">            head = <span class="literal">nullptr</span>;</span><br><span class="line">            tail = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node* tmp = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            head-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="built_in">delete</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deleteLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tail) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">            head = <span class="literal">nullptr</span>;</span><br><span class="line">            tail = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node* tmp = tail;</span><br><span class="line">            tail = tail-&gt;prev;</span><br><span class="line">            tail-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="built_in">delete</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head ? head-&gt;val : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tail ? tail-&gt;val : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularDeque object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCircularDeque* obj = new MyCircularDeque(k);</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;insertFront(value);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;insertLast(value);</span></span><br><span class="line"><span class="comment"> * bool param_3 = obj-&gt;deleteFront();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;deleteLast();</span></span><br><span class="line"><span class="comment"> * int param_5 = obj-&gt;getFront();</span></span><br><span class="line"><span class="comment"> * int param_6 = obj-&gt;getRear();</span></span><br><span class="line"><span class="comment"> * bool param_7 = obj-&gt;isEmpty();</span></span><br><span class="line"><span class="comment"> * bool param_8 = obj-&gt;isFull();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Linked List</tag>
        <tag>Design</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>648. Replace Words</title>
    <url>/2023/10/08/648-Replace-Words/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/replace-words/">648. Replace Words</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/trie//">Trie</a></p>
<p>In English, we have a concept called <strong>root</strong>, which can be followed by some other word to form another longer word - let’s call this word <strong>successor</strong>. For example, when the <strong>root</strong> <code>&quot;an&quot;</code> is followed by the <strong>successor</strong> word <code>&quot;other&quot;</code>, we can form a new word <code>&quot;another&quot;</code>.</p>
<p>Given a <code>dictionary</code> consisting of many <strong>roots</strong> and a <code>sentence</code> consisting of words separated by spaces, replace all the <strong>successors</strong> in the sentence with the <strong>root</strong> forming it. If a <strong>successor</strong> can be replaced by more than one <strong>root</strong>, replace it with the <strong>root</strong> that has <strong>the shortest length</strong>.</p>
<p>Return <em>the <code>sentence</code></em> after the replacement.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: dictionary = [<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;bat&quot;</span>,<span class="string">&quot;rat&quot;</span>], sentence = <span class="string">&quot;the cattle was rattled by the battery&quot;</span></span><br><span class="line">Output: <span class="string">&quot;the cat was rat by the bat&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: dictionary = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>], sentence = <span class="string">&quot;aadsfasf absbs bbab cadsfafs&quot;</span></span><br><span class="line">Output: <span class="string">&quot;a a b c&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= dictionary.length &lt;= 1000</code></li>
<li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li>
<li><code>dictionary[i]</code> consists of only lower-case letters.</li>
<li>1 &lt;&#x3D; sentence.length &lt;&#x3D; 10<sup>6</sup></li>
<li><code>sentence</code> consists of only lower-case letters and spaces.</li>
<li>The number of words in <code>sentence</code> is in the range <code>[1, 1000]</code></li>
<li>The length of each word in <code>sentence</code> is in the range <code>[1, 1000]</code></li>
<li>Every two consecutive words in <code>sentence</code> will be separated by exactly one space.</li>
<li><code>sentence</code> does not have leading or trailing spaces.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Trie</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line">        <span class="type">bool</span> end;</span><br><span class="line">        vector&lt;TrieNode*&gt; children;</span><br><span class="line">        <span class="built_in">TrieNode</span>() &#123;</span><br><span class="line">            end = <span class="literal">false</span>;</span><br><span class="line">            children = <span class="built_in">vector</span>&lt;TrieNode*&gt;(<span class="number">26</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">replaceWords</span><span class="params">(vector&lt;string&gt;&amp; dictionary, string sentence)</span> </span>&#123;</span><br><span class="line">        TrieNode* root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">        <span class="keyword">for</span> (string word : dictionary) &#123;</span><br><span class="line">            TrieNode* head = root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                    head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            head-&gt;end = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">size_t</span> pos = <span class="number">0</span>;</span><br><span class="line">        string word;</span><br><span class="line">        <span class="function">istringstream <span class="title">iss</span><span class="params">(sentence)</span></span>;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            string word;</span><br><span class="line">            iss &gt;&gt; word;</span><br><span class="line">            <span class="keyword">if</span> (word == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode* head = root;</span><br><span class="line">            string newWord;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : word) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">                    newWord = word;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (head-&gt;end) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                        newWord += c;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res == <span class="string">&quot;&quot;</span> ? newWord : res + <span class="string">&quot; &quot;</span> + newWord;</span><br><span class="line">        &#125; <span class="keyword">while</span> (iss);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>652. Find Duplicate Subtrees</title>
    <url>/2023/08/22/652-Find-Duplicate-Subtrees/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-duplicate-subtrees/">652. Find Duplicate Subtrees</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary tree, return all <strong>duplicate subtrees</strong>.</p>
<p>For each kind of duplicate subtrees, you only need to return the root node of any <strong>one</strong> of them.</p>
<p>Two trees are <strong>duplicate</strong> if they have the <strong>same structure</strong> with the <strong>same node values</strong>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/08/16/e1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,null,2,4,null,null,4]</span><br><span class="line">Output: [[2,4],[4]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/08/16/e2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,1]</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/08/16/e33.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,2,2,3,null,3,null]</span><br><span class="line">Output: [[2,3],[3]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of the nodes in the tree will be in the range <code>[1, 5000]</code></li>
<li><code>-200 &lt;= Node.val &lt;= 200</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Serialize the (sub)tree to check if there’s duplicate</li>
<li>Use map the avoid the duplicate in return, only push to res when freq[seri] &#x3D;&#x3D; 1</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;TreeNode*&gt; res;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; freq;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">findDuplicateSubtrees</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">serialize</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string seri = <span class="built_in">serialize</span>(root-&gt;left)</span><br><span class="line">              + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">serialize</span>(root-&gt;right)</span><br><span class="line">              + <span class="string">&quot;,&quot;</span> + <span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (freq[seri] == <span class="number">1</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line">        freq[seri]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> seri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>650D. Zip-line</title>
    <url>/2024/06/14/650D-Zip-line/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/650/D">D. Zip-line</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 n(1≤n≤4e5) m(1≤m≤4e5) 和长为 n 的数组 a(1≤a[i]≤1e9)，数组下标从 1 开始。<br>然后输入 m 个询问，每个询问输入两个数 i(1≤i≤n) 和 b(1≤b≤1e9)。</p>
<p>对于每个询问，输出把 a[i] 替换成 b 后，a 的最长严格递增子序列（LIS）的长度。<br>注意每个询问之间彼此独立，比如第一个询问把 a[1] 替换成 6，那么对于第二个询问，a[1] 还是原来的值。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>LIS</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; heights, map&lt;<span class="type">int</span>, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; queries, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; pre;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; LIS;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(m, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// do a pre and post order LIS search, in each case,</span></span><br><span class="line">    <span class="comment">// add the order of the queried index to res array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; heights.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (queries.<span class="built_in">contains</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> indexHeightPair : queries[i]) &#123;</span><br><span class="line">                <span class="type">int</span> idx = indexHeightPair.first;</span><br><span class="line">                <span class="type">int</span> h = indexHeightPair.second;</span><br><span class="line">                <span class="type">int</span> index = <span class="built_in">find</span>(LIS, h);</span><br><span class="line">                res[idx] += index + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> height = heights[i];</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">find</span>(LIS, height);</span><br><span class="line">        <span class="keyword">if</span> (index == LIS.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            LIS.<span class="built_in">push_back</span>(height);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LIS[index] = height;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.<span class="built_in">push_back</span>(index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> longest = LIS.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>&amp; height : heights) &#123;</span><br><span class="line">        height = -height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">post</span><span class="params">(heights.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    LIS.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = heights.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (queries.<span class="built_in">contains</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> indexHeightPair : queries[i]) &#123;</span><br><span class="line">                <span class="type">int</span> idx = indexHeightPair.first;</span><br><span class="line">                <span class="type">int</span> h = -indexHeightPair.second;</span><br><span class="line">                <span class="type">int</span> index = <span class="built_in">find</span>(LIS, h);</span><br><span class="line">                res[idx] += index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> height = heights[i];</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">find</span>(LIS, height);</span><br><span class="line">        <span class="keyword">if</span> (index == LIS.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            LIS.<span class="built_in">push_back</span>(height);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LIS[index] = height;</span><br><span class="line">        &#125;</span><br><span class="line">        post[i] = index + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; numOfPre;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; indexOfLongest;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; heights.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// if i is in the longest LIS array</span></span><br><span class="line">        <span class="keyword">if</span> (pre[i] + post[i] - <span class="number">1</span> == longest) &#123;</span><br><span class="line">            numOfPre[pre[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">            indexOfLongest.<span class="built_in">insert</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; heights.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!queries.<span class="built_in">contains</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> indexHeightPair : queries[i]) &#123;</span><br><span class="line">            <span class="type">int</span> idx = indexHeightPair.first;</span><br><span class="line">            <span class="keyword">if</span> (!indexOfLongest.<span class="built_in">contains</span>(i)) &#123;</span><br><span class="line">                res[idx] = <span class="built_in">max</span>(res[idx], longest);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// if the height[i] is in all LIS</span></span><br><span class="line">                <span class="keyword">if</span> (numOfPre[pre[i]].<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    res[idx] = <span class="built_in">max</span>(res[idx], longest);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res[idx] = <span class="built_in">max</span>(res[idx], longest - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        out &lt;&lt; res[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    in &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; heights;</span><br><span class="line">    map&lt;<span class="type">int</span>, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; queries;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> height;</span><br><span class="line">        in &gt;&gt; height;</span><br><span class="line">        heights.<span class="built_in">push_back</span>(height);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> index, height;</span><br><span class="line">        in &gt;&gt; index &gt;&gt; height;</span><br><span class="line">        index--;</span><br><span class="line">        queries[index].<span class="built_in">push_back</span>(&#123;i, height&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>(heights, queries, m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>binary search</tag>
        <tag>data structures</tag>
        <tag>dp</tag>
        <tag>hashing</tag>
      </tags>
  </entry>
  <entry>
    <title>654. Maximum Binary Tree</title>
    <url>/2023/07/31/654-Maximum-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-binary-tree/">654. Maximum Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>You are given an integer array <code>nums</code> with no duplicates. A <strong>maximum binary tree</strong> can be built recursively from <code>nums</code> using the following algorithm:</p>
<ol>
<li>Create a root node whose value is the maximum value in <code>nums</code>.</li>
<li>Recursively build the left subtree on the <strong>subarray prefix</strong> to the <strong>left</strong> of the maximum value.</li>
<li>Recursively build the right subtree on the <strong>subarray suffix</strong> to the <strong>right</strong> of the maximum value.</li>
</ol>
<p>Return <em>the <strong>maximum binary tree</strong> built from</em> <code>nums</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,1,6,0,5]</span><br><span class="line">Output: [6,3,5,null,2,0,null,null,1]</span><br><span class="line">Explanation: The recursive calls are as follow:</span><br><span class="line">- The largest value <span class="keyword">in</span> [3,2,1,6,0,5] is 6\. Left prefix is [3,2,1] and right suffix is [0,5].</span><br><span class="line">    - The largest value <span class="keyword">in</span> [3,2,1] is 3\. Left prefix is [] and right suffix is [2,1].</span><br><span class="line">        - Empty array, so no child.</span><br><span class="line">        - The largest value <span class="keyword">in</span> [2,1] is 2\. Left prefix is [] and right suffix is [1].</span><br><span class="line">            - Empty array, so no child.</span><br><span class="line">            - Only one element, so child is a node with value 1.</span><br><span class="line">    - The largest value <span class="keyword">in</span> [0,5] is 5\. Left prefix is [0] and right suffix is [].</span><br><span class="line">        - Only one element, so child is a node with value 0.</span><br><span class="line">        - Empty array, so no child.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,1]</span><br><span class="line">Output: [3,null,2,null,1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>
<li>All integers in <code>nums</code> are <strong>unique</strong>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Draw the picture to get ideas</li>
<li>It’s like recursive</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> max = INT_MIN, idx = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; max) &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(max);</span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(nums, start, idx);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(nums, idx + <span class="number">1</span>, end);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>658. Find K Closest Elements</title>
    <url>/2023/12/01/658-Find-K-Closest-Elements/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-k-closest-elements/">658. Find K Closest Elements</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a></p>
<p>Given a <strong>sorted</strong> integer array <code>arr</code>, two integers <code>k</code> and <code>x</code>, return the <code>k</code> closest integers to <code>x</code> in the array. The result should also be sorted in ascending order.</p>
<p>An integer <code>a</code> is closer to <code>x</code> than an integer <code>b</code> if:</p>
<ul>
<li><code>|a - x| &lt; |b - x|</code>, or</li>
<li><code>|a - x| == |b - x|</code> and <code>a &lt; b</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: arr = [1,2,3,4,5], k = 4, x = 3</span><br><span class="line">Output: [1,2,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: arr = [1,2,3,4,5], k = 4, x = -1</span><br><span class="line">Output: [1,2,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= arr.length</code></li>
<li>1 &lt;&#x3D; arr.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>arr</code> is sorted in <strong>ascending</strong> order.</li>
<li>-10<sup>4</sup> &lt;&#x3D; arr[i], x &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>since we need the smaller index, find the left boundary</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findClosestElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">findLeft</span>(arr, x);</span><br><span class="line">        <span class="type">int</span> left = index - <span class="number">1</span>, right = index;</span><br><span class="line">        list&lt;<span class="type">int</span>&gt; l;</span><br><span class="line">        <span class="keyword">while</span> (l.<span class="built_in">size</span>() &lt; k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                l.<span class="built_in">push_back</span>(arr[right++]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt;= arr.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                l.<span class="built_in">push_front</span>(arr[left--]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> ldelta = <span class="built_in">abs</span>(arr[left] - x);</span><br><span class="line">                <span class="type">int</span> rdelta = <span class="built_in">abs</span>(arr[right] - x);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ldelta == rdelta) &#123;</span><br><span class="line">                    l.<span class="built_in">push_front</span>(arr[left--]);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ldelta &lt; rdelta) &#123;</span><br><span class="line">                    l.<span class="built_in">push_front</span>(arr[left--]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l.<span class="built_in">push_back</span>(arr[right++]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(l.begin(), l.end())</span></span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLeft</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;arr, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] == x) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; x) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Sliding Window</tag>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>662. Maximum Width of Binary Tree</title>
    <url>/2024/07/08/662-Maximum-Width-of-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-width-of-binary-tree/description/">662. Maximum Width of Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the <strong>maximum width</strong> of the given tree.</p>
<p>The <strong>maximum width</strong> of a tree is the maximum <strong>width</strong> among all levels.</p>
<p>The <strong>width</strong> of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.</p>
<p>It is <strong>guaranteed</strong> that the answer will in the range of a <strong>32-bit</strong> signed integer.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg" style="width: 359px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,2,5,3,null,9]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The maximum width exists <span class="keyword">in</span> the third level with length 4 (5,3,null,9).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg" style="width: 442px; height: 422px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,2,5,null,null,9,6,null,7]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: The maximum width exists <span class="keyword">in</span> the fourth level with length 7 (6,null,null,null,null,null,7).</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg" style="width: 289px; height: 299px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,2,5]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The maximum width exists <span class="keyword">in</span> the second level with length 2 (3,2).</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">long</span>&gt; left;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">widthOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> depth, <span class="type">long</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (depth + <span class="number">1</span> &gt; left.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            left.<span class="built_in">push_back</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, val - left[depth] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;left, depth + <span class="number">1</span>, (val - left[depth]) * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;right, depth + <span class="number">1</span>, (val - left[depth]) * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>663. Equal Tree Partition</title>
    <url>/2024/07/02/663-Equal-Tree-Partition/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/equal-tree-partition/description/">663. Equal Tree Partition</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return <code>true</code> if you can partition the tree into two trees with equal sums of values after removing exactly one edge on the original tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/split1-tree.jpg" style="width: 500px; height: 204px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,10,10,null,null,2,3]</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/split2-tree.jpg" style="width: 277px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,10,null,null,2,20]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: You cannot <span class="built_in">split</span> the tree into two trees with equal sums after removing exactly one edge on the tree.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkEqualTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> treeSum = root-&gt;val + <span class="built_in">traverse</span>(root-&gt;left) + <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (treeSum % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">contains</span>(treeSum / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> val = root-&gt;val;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        val += left + right;</span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">insert</span>(val);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>669. Trim a Binary Search Tree</title>
    <url>/2024/07/13/669-Trim-a-Binary-Search-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/trim-a-binary-search-tree/description/">669. Trim a Binary Search Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary search tree and the lowest and highest boundaries as <code>low</code> and <code>high</code>, trim the tree so that all its elements lies in <code>[low, high]</code>. Trimming the tree should <strong>not</strong>  change the relative structure of the elements that will remain in the tree (i.e., any node’s descendant should remain a descendant). It can be proven that there is a <strong>unique answer</strong> .</p>
<p>Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg" style="width: 450px; height: 126px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,0,2], low = 1, high = 2</span><br><span class="line">Output: [1,null,2]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg" style="width: 450px; height: 277px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3</span><br><span class="line">Output: [3,2,null,1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 10^4]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 10^4</code></li>
<li>The value of each node in the tree is <strong>unique</strong> .</li>
<li><code>root</code> is guaranteed to be a valid binary search tree.</li>
<li><code>0 &lt;= low &lt;= high &lt;= 10^4</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">trimBST</span><span class="params">(TreeNode* root, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &lt; low) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">trimBST</span>(root-&gt;right, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; high) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">trimBST</span>(root-&gt;left, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = <span class="built_in">trimBST</span>(root-&gt;left, low, high);</span><br><span class="line">        root-&gt;right = <span class="built_in">trimBST</span>(root-&gt;right, low, high);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>666. Path Sum IV</title>
    <url>/2024/06/03/666-Path-Sum-IV/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/path-sum-iv/description/">666. Path Sum IV</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>If the depth of a tree is smaller than <code>5</code>, then this tree can be represented by an array of three-digit integers. For each integer in this array:</p>
<ul>
<li>The hundreds digit represents the depth <code>d</code> of this node where <code>1 &lt;= d &lt;= 4</code>.</li>
<li>The tens digit represents the position <code>p</code> of this node in the level it belongs to where <code>1 &lt;= p &lt;= 8</code>. The position is the same as that in a full binary tree.</li>
<li>The units digit represents the value <code>v</code> of this node where <code>0 &lt;= v &lt;= 9</code>.</li>
</ul>
<p>Given an array of <strong>ascending</strong>  three-digit integers <code>nums</code> representing a binary tree with a depth smaller than <code>5</code>, return the sum of all paths from the root towards the leaves.</p>
<p>It is <strong>guaranteed</strong>  that the given array represents a valid connected binary tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/04/30/pathsum4-1-tree.jpg" style="width: 212px; height: 183px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [113,215,221]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: The tree that the list represents is shown.</span><br><span class="line">The path <span class="built_in">sum</span> is (3 + 5) + (3 + 1) = 12.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/04/30/pathsum4-2-tree.jpg" style="width: 132px; height: 183px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [113,221]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The tree that the list represents is shown.</span><br><span class="line">The path <span class="built_in">sum</span> is (3 + 1) = 4.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 15</code></li>
<li><code>110 &lt;= nums[i] &lt;= 489</code></li>
<li><code>nums</code> represents a valid binary tree with depth less than <code>5</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pathSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> curDepth = <span class="number">1</span>, index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> key = num / <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> val = num % <span class="number">10</span>;</span><br><span class="line">            m[key] = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> curDepth, <span class="type">int</span> curIndex, <span class="type">int</span> curVal)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> key = curDepth * <span class="number">10</span> + curIndex;</span><br><span class="line">        <span class="keyword">if</span> (!m.<span class="built_in">contains</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curVal = curVal + m[key];</span><br><span class="line">        <span class="type">int</span> leftKey = (curDepth + <span class="number">1</span>) * <span class="number">10</span> + <span class="number">2</span> * curIndex - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> rightKey = (curDepth + <span class="number">1</span>) * <span class="number">10</span> + <span class="number">2</span> * curIndex;</span><br><span class="line">        <span class="keyword">if</span> (!m.<span class="built_in">contains</span>(leftKey) &amp;&amp; !m.<span class="built_in">contains</span>(rightKey)) &#123;</span><br><span class="line">            res += curVal;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(curDepth + <span class="number">1</span>, <span class="number">2</span> * curIndex - <span class="number">1</span>, curVal);</span><br><span class="line">        <span class="built_in">traverse</span>(curDepth + <span class="number">1</span>, <span class="number">2</span> * curIndex, curVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>671. Second Minimum Node In a Binary Tree</title>
    <url>/2024/07/13/671-Second-Minimum-Node-In-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/description/">671. Second Minimum Node In a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly <code>two</code> or <code>zero</code> sub-node. If the node has two sub-nodes, then this node’s value is the smaller value among its two sub-nodes. More formally, the property<code>root.val = min(root.left.val, root.right.val)</code>always holds.</p>
<p>Given such a binary tree, you need to output the <b>second minimum</b> value in the set made of all the nodes’ value in the whole tree.</p>
<p>If no such second minimum value exists, output -1 instead.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg" style="width: 431px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,2,5,null,null,5,7]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The smallest value is 2, the second smallest value is 5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg" style="width: 321px; height: 182px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,2,2]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: The smallest value is 2, but there isn<span class="string">&#x27;t any second smallest value.</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 25]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 2^31 - 1</code></li>
<li><code>root.val == min(root.left.val, root.right.val)</code>for each internal node of the tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = root-&gt;left-&gt;val, right = root-&gt;right-&gt;val;</span><br><span class="line">        <span class="comment">// the child&#x27;s val is the minimum of the child tree</span></span><br><span class="line">        <span class="comment">// 1. if the child-&gt;val == root-&gt;val, then no need to dig further</span></span><br><span class="line">        <span class="comment">// 2. if the child-&gt;val != root-&gt;val, it indicates that there can be</span></span><br><span class="line">        <span class="comment">//    value larger than child-&gt;val</span></span><br><span class="line">        <span class="comment">// if the return value is -1:</span></span><br><span class="line">        <span class="comment">//     1. either the node doesn&#x27;t have children</span></span><br><span class="line">        <span class="comment">//     2. all its children have the same value</span></span><br><span class="line">        <span class="keyword">if</span> (left == root-&gt;val) &#123;</span><br><span class="line">            left = <span class="built_in">findSecondMinimumValue</span>(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (right == root-&gt;val) &#123;</span><br><span class="line">            right = <span class="built_in">findSecondMinimumValue</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (right == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>677. Map Sum Pairs</title>
    <url>/2023/10/10/677-Map-Sum-Pairs/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/map-sum-pairs/">677. Map Sum Pairs</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/trie//">Trie</a></p>
<p>Design a map that allows you to do the following:</p>
<ul>
<li>Maps a string key to a given value.</li>
<li>Returns the sum of the values that have a key with a prefix equal to a given string.</li>
</ul>
<p>Implement the <code>MapSum</code> class:</p>
<ul>
<li><code>MapSum()</code> Initializes the <code>MapSum</code> object.</li>
<li><code>void insert(String key, int val)</code> Inserts the <code>key-val</code> pair into the map. If the <code>key</code> already existed, the original <code>key-value</code> pair will be overridden to the new one.</li>
<li><code>int sum(string prefix)</code> Returns the sum of all the pairs’ value whose <code>key</code> starts with the <code>prefix</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;MapSum&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;sum&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;sum&quot;</span>]</span><br><span class="line">[[], [<span class="string">&quot;apple&quot;</span>, 3], [<span class="string">&quot;ap&quot;</span>], [<span class="string">&quot;app&quot;</span>, 2], [<span class="string">&quot;ap&quot;</span>]]</span><br><span class="line">Output</span><br><span class="line">[null, null, 3, null, 5]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MapSum mapSum = new MapSum();</span><br><span class="line">mapSum.insert(<span class="string">&quot;apple&quot;</span>, 3);</span><br><span class="line">mapSum.<span class="built_in">sum</span>(<span class="string">&quot;ap&quot;</span>);           // <span class="built_in">return</span> 3 (apple = 3)</span><br><span class="line">mapSum.insert(<span class="string">&quot;app&quot;</span>, 2);</span><br><span class="line">mapSum.<span class="built_in">sum</span>(<span class="string">&quot;ap&quot;</span>);           // <span class="built_in">return</span> 5 (apple + app = 3 + 2 = 5)</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= key.length, prefix.length &lt;= 50</code></li>
<li><code>key</code> and <code>prefix</code> consist of only lowercase English letters.</li>
<li><code>1 &lt;= val &lt;= 1000</code></li>
<li>At most <code>50</code> calls will be made to <code>insert</code> and <code>sum</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Trie</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MapSum</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        vector&lt;TrieNode*&gt; children;</span><br><span class="line">        <span class="built_in">TrieNode</span>() &#123;</span><br><span class="line">            value = <span class="number">0</span>;</span><br><span class="line">            children = <span class="built_in">vector</span>&lt;TrieNode*&gt;(<span class="number">26</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TrieNode* root;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MapSum</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string key, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : key) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;value = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode* head = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : prefix) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TrieNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (TrieNode* child : head-&gt;children) &#123;</span><br><span class="line">            sum += <span class="built_in">traverse</span>(child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum + head-&gt;value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MapSum object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MapSum* obj = new MapSum();</span></span><br><span class="line"><span class="comment"> * obj-&gt;insert(key,val);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;sum(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Design</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>687. Longest Univalue Path</title>
    <url>/2024/07/02/687-Longest-Univalue-Path/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/longest-univalue-path/description/">687. Longest Univalue Path</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.</p>
<p><strong>The length of the path</strong>  between two nodes is represented by the number of edges between them.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/13/ex1.jpg" style="width: 450px; height: 238px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,4,5,1,1,null,5]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The shown image shows that the longest path of the same value (i.e. 5).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/13/ex2.jpg" style="width: 450px; height: 238px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,4,5,4,4,null,5]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The shown image shows that the longest path of the same value (i.e. 4).</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 10^4]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
<li>The depth of the tree will not exceed <code>1000</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root, root-&gt;val);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">traverse</span>(root-&gt;left, root-&gt;val);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">traverse</span>(root-&gt;right, root-&gt;val);</span><br><span class="line"></span><br><span class="line">        res = <span class="built_in">max</span>(res, left + right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val != val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>692. Top K Frequent Words</title>
    <url>/2023/11/06/692-Top-K-Frequent-Words/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/top-k-frequent-words/">692. Top K Frequent Words</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/trie//">Trie</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/bucket-sort//">Bucket Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/counting//">Counting</a></p>
<p>Given an array of strings <code>words</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent strings</em>.</p>
<p>Return the answer <strong>sorted</strong> by <strong>the frequency</strong> from highest to lowest. Sort the words with the same frequency by their <strong>lexicographical order</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;i&quot;</span>,<span class="string">&quot;love&quot;</span>,<span class="string">&quot;leetcode&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;love&quot;</span>,<span class="string">&quot;coding&quot;</span>], k = 2</span><br><span class="line">Output: [<span class="string">&quot;i&quot;</span>,<span class="string">&quot;love&quot;</span>]</span><br><span class="line">Explanation: <span class="string">&quot;i&quot;</span> and <span class="string">&quot;love&quot;</span> are the two most frequent words.</span><br><span class="line">Note that <span class="string">&quot;i&quot;</span> comes before <span class="string">&quot;love&quot;</span> due to a lower alphabetical order.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;the&quot;</span>,<span class="string">&quot;day&quot;</span>,<span class="string">&quot;is&quot;</span>,<span class="string">&quot;sunny&quot;</span>,<span class="string">&quot;the&quot;</span>,<span class="string">&quot;the&quot;</span>,<span class="string">&quot;the&quot;</span>,<span class="string">&quot;sunny&quot;</span>,<span class="string">&quot;is&quot;</span>,<span class="string">&quot;is&quot;</span>], k = 4</span><br><span class="line">Output: [<span class="string">&quot;the&quot;</span>,<span class="string">&quot;is&quot;</span>,<span class="string">&quot;sunny&quot;</span>,<span class="string">&quot;day&quot;</span>]</span><br><span class="line">Explanation: <span class="string">&quot;the&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;sunny&quot;</span> and <span class="string">&quot;day&quot;</span> are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= words.length &lt;= 500</code></li>
<li><code>1 &lt;= words[i].length &lt;= 10</code></li>
<li><code>words[i]</code> consists of lowercase English letters.</li>
<li><code>k</code> is in the range <code>[1, The number of **unique** words[i]]</code></li>
</ul>
<p><strong>Follow-up:</strong> Could you solve it in <code>O(n log(k))</code> time and <code>O(n)</code> extra space?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;string&gt;&amp; words, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (string word : words) &#123;</span><br><span class="line">            m[word]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](pair&lt;<span class="type">int</span>, string&gt; lhs, pair&lt;<span class="type">int</span>, string&gt; rhs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lhs.first != rhs.first) &#123;</span><br><span class="line">                <span class="keyword">return</span> lhs.first &lt; rhs.first;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> lhs.second &gt; rhs.second;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, string&gt;, vector&lt;pair&lt;<span class="type">int</span>, string&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">            string word = it.first;</span><br><span class="line">            <span class="type">int</span> freq = it.second;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;freq, word&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; !pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> pair = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(pair.second);</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Trie</tag>
        <tag>Counting</tag>
        <tag>Bucket Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>700. Search in a Binary Search Tree</title>
    <url>/2023/08/27/700-Search-in-a-Binary-Search-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/search-in-a-binary-search-tree/">700. Search in a Binary Search Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search-tree//">Binary Search Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>You are given the <code>root</code> of a binary search tree (BST) and an integer <code>val</code>.</p>
<p>Find the node in the BST that the node’s value equals <code>val</code> and return the subtree rooted with that node. If such a node does not exist, return <code>null</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,7,1,3], val = 2</span><br><span class="line">Output: [2,1,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,7,1,3], val = 5</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 5000]</code>.</li>
<li>1 &lt;&#x3D; Node.val &lt;&#x3D; 10<sup>7</sup></li>
<li><code>root</code> is a binary search tree.</li>
<li>1 &lt;&#x3D; val &lt;&#x3D; 10<sup>7</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use the property of BST</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">searchBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &lt; val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">searchBST</span>(root-&gt;right, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">searchBST</span>(root-&gt;left, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>703. Kth Largest Element in a Stream</title>
    <url>/2023/11/06/703-Kth-Largest-Element-in-a-Stream/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/kth-largest-element-in-a-stream/">703. Kth Largest Element in a Stream</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search-tree//">Binary Search Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/data-stream//">Data Stream</a></p>
<p>Design a class to find the k<sup>th</sup> largest element in a stream. Note that it is the k<sup>th</sup> largest element in the sorted order, not the k<sup>th</sup> distinct element.</p>
<p>Implement <code>KthLargest</code> class:</p>
<ul>
<li><code>KthLargest(int k, int[] nums)</code> Initializes the object with the integer <code>k</code> and the stream of integers <code>nums</code>.</li>
<li><code>int add(int val)</code> Appends the integer <code>val</code> to the stream and returns the element representing the k<sup>th</sup> largest element in the stream.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;KthLargest&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="string">&quot;add&quot;</span>]</span><br><span class="line">[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]</span><br><span class="line">Output</span><br><span class="line">[null, 4, 5, 5, 8, 8]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);</span><br><span class="line">kthLargest.add(3);   // <span class="built_in">return</span> 4</span><br><span class="line">kthLargest.add(5);   // <span class="built_in">return</span> 5</span><br><span class="line">kthLargest.add(10);  // <span class="built_in">return</span> 5</span><br><span class="line">kthLargest.add(9);   // <span class="built_in">return</span> 8</span><br><span class="line">kthLargest.add(4);   // <span class="built_in">return</span> 8</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; k &lt;&#x3D; 10<sup>4</sup></li>
<li>0 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>4</sup></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li>-10<sup>4</sup> &lt;&#x3D; val &lt;&#x3D; 10<sup>4</sup></li>
<li>At most 10<sup>4</sup> calls will be made to <code>add</code>.</li>
<li>It is guaranteed that there will be at least <code>k</code> elements in the array when you search for the k<sup>th</sup> element.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KthLargest</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">KthLargest</span>(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        size = k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="built_in">addItem</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addItem</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        pq.<span class="built_in">push</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (pq.<span class="built_in">size</span>() &gt; size) &#123;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">addItem</span>(val);</span><br><span class="line">        <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your KthLargest object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * KthLargest* obj = new KthLargest(k, nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;add(val);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Design</tag>
        <tag>Data Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>704. Binary Search</title>
    <url>/2023/01/17/704-Binary-Search/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-search/">792. Binary Search</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a></p>
<p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p>
<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: 2 does not exist in nums so return -1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>4</sup></li>
<li>-10<sup>4</sup> &lt; nums[i], target &lt; 10<sup>4</sup></li>
<li>All the integers in <code>nums</code> are <strong>unique</strong>.</li>
<li><code>nums</code> is sorted in ascending order.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>712. Minimum ASCII Delete Sum for Two Strings</title>
    <url>/2024/07/23/712-Minimum-ASCII-Delete-Sum-for-Two-Strings/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/description/">712. Minimum ASCII Delete Sum for Two Strings</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings <code>s1</code> and<code>s2</code>, return the lowest <strong>ASCII</strong>  sum of deleted characters to make two strings equal.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s1 = <span class="string">&quot;sea&quot;</span>, s2 = <span class="string">&quot;eat&quot;</span></span><br><span class="line">Output: 231</span><br><span class="line">Explanation: Deleting <span class="string">&quot;s&quot;</span> from <span class="string">&quot;sea&quot;</span> adds the ASCII value of <span class="string">&quot;s&quot;</span> (115) to the <span class="built_in">sum</span>.</span><br><span class="line">Deleting <span class="string">&quot;t&quot;</span> from <span class="string">&quot;eat&quot;</span> adds 116 to the <span class="built_in">sum</span>.</span><br><span class="line">At the end, both strings are equal, and 115 + 116 = 231 is the minimum <span class="built_in">sum</span> possible to achieve this.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s1 = <span class="string">&quot;delete&quot;</span>, s2 = <span class="string">&quot;leet&quot;</span></span><br><span class="line">Output: 403</span><br><span class="line">Explanation: Deleting <span class="string">&quot;dee&quot;</span> from <span class="string">&quot;delete&quot;</span> to turn the string into <span class="string">&quot;let&quot;</span>,</span><br><span class="line">adds 100[d] + 101[e] + 101[e] to the <span class="built_in">sum</span>.</span><br><span class="line">Deleting <span class="string">&quot;e&quot;</span> from <span class="string">&quot;leet&quot;</span> adds 101[e] to the <span class="built_in">sum</span>.</span><br><span class="line">At the end, both strings are equal to <span class="string">&quot;let&quot;</span>, and the answer is 100+101+101+101 = 403.</span><br><span class="line">If instead we turned both strings into <span class="string">&quot;lee&quot;</span> or <span class="string">&quot;eet&quot;</span>, we would get answers of 433 or 417, <span class="built_in">which</span> are higher.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li>
<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumDeleteSum</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        dp.<span class="built_in">resize</span>(s1.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(s2.<span class="built_in">size</span>(), INT_MAX));</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(s1, s2, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(string&amp; s1, string&amp; s2, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == s1.<span class="built_in">size</span>() || j == s2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; s1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                res += s1[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (; j &lt; s2.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                res += s2[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] != INT_MAX) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == s2[j]) &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="built_in">traverse</span>(s1, s2, i + <span class="number">1</span>, j + <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(res, s1[i] + <span class="built_in">traverse</span>(s1, s2, i + <span class="number">1</span>, j));</span><br><span class="line">            res = <span class="built_in">min</span>(res, s2[j] + <span class="built_in">traverse</span>(s1, s2, i, j + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][j] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>710. Random Pick with Blacklist</title>
    <url>/2023/02/01/710-Random-Pick-with-Blacklist/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/random-pick-with-blacklist/">710. Random Pick with Blacklist</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/math/">Math</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a>, <a href="https://leetcode.com/tag/sorting/">Sorting</a>, <a href="https://leetcode.com/tag/randomized/">Randomized</a></p>
<p>You are given an integer <code>n</code> and an array of <strong>unique</strong> integers <code>blacklist</code>. Design an algorithm to pick a random integer in the range <code>[0, n - 1]</code> that is <strong>not</strong> in <code>blacklist</code>. Any integer that is in the mentioned range and not in <code>blacklist</code> should be <strong>equally likely</strong> to be returned.</p>
<p>Optimize your algorithm such that it minimizes the number of calls to the <strong>built-in</strong> random function of your language.</p>
<p>Implement the <code>Solution</code> class:</p>
<ul>
<li><code>Solution(int n, int[] blacklist)</code> Initializes the object with the integer <code>n</code> and the blacklisted integers <code>blacklist</code>.</li>
<li><code>int pick()</code> Returns a random integer in the range <code>[0, n - 1]</code> and not in <code>blacklist</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;]</span><br><span class="line">[[7, [2, 3, 5]], [], [], [], [], [], [], []]</span><br><span class="line">Output</span><br><span class="line">[null, 0, 4, 1, 6, 1, 0, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">Solution solution = new Solution(7, [2, 3, 5]);</span><br><span class="line">solution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,</span><br><span class="line">                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).</span><br><span class="line">solution.pick(); // return 4</span><br><span class="line">solution.pick(); // return 1</span><br><span class="line">solution.pick(); // return 6</span><br><span class="line">solution.pick(); // return 1</span><br><span class="line">solution.pick(); // return 0</span><br><span class="line">solution.pick(); // return 4</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>9</sup></li>
<li>0 &lt;&#x3D; blacklist.length &lt;&#x3D; min(10<sup>5</sup>, n - 1)</li>
<li><code>0 &lt;= blacklist[i] &lt; n</code></li>
<li>All the values of <code>blacklist</code> are <strong>unique</strong>.</li>
<li>At most 2 * 10<sup>4</sup> calls will be made to <code>pick</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use map</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solution</span>(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt;&amp; blacklist) &#123;</span><br><span class="line">        size = n - blacklist.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// [0, 1, 2, 3, 4, 5, 6]</span></span><br><span class="line">        <span class="comment">// nums.count(2 || 3 || 5) == true</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> blackNum : blacklist) &#123;</span><br><span class="line">            nums[blackNum] = blackNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> last = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> blackNum : blacklist) &#123;</span><br><span class="line">            <span class="keyword">if</span> (blackNum &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (nums.<span class="built_in">count</span>(last)) &#123;</span><br><span class="line">                last--;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[blackNum] = last--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// nums[2] = 6, nums[3] = 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">rand</span>() % size;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">count</span>(num)) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[num];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution* obj = new Solution(n, blacklist);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;pick();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Binary Search</tag>
        <tag>Math</tag>
        <tag>Sorting</tag>
        <tag>Randomized</tag>
      </tags>
  </entry>
  <entry>
    <title>713. Subarray Product Less Than K</title>
    <url>/2023/12/04/713-Subarray-Product-Less-Than-K/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/subarray-product-less-than-k/">713. Subarray Product Less Than K</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a></p>
<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than</em> <code>k</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [10,5,2,6], k = 100</span><br><span class="line">Output: 8</span><br><span class="line">Explanation: The 8 subarrays that have product less than 100 are:</span><br><span class="line">[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]</span><br><span class="line">Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3], k = 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10<sup>4</sup></li>
<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>
<li>0 &lt;&#x3D; k &lt;&#x3D; 10<sup>6</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Sliding window</li>
<li>How to calculate the subArray</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> prod = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            prod *= nums[right];</span><br><span class="line">            <span class="keyword">if</span> (prod &gt;= k) &#123;</span><br><span class="line">                <span class="keyword">while</span> (left &lt;= right &amp;&amp; prod &gt;= k) &#123;</span><br><span class="line">                    prod /= nums[left++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res += right - left + <span class="number">1</span>;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>72. Edit Distance</title>
    <url>/2024/07/16/72-Edit-Distance/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/edit-distance/description/">72. Edit Distance</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings <code>word1</code> and <code>word2</code>, return the minimum number of operations required to convert <code>word1</code> to <code>word2</code>.</p>
<p>You have the following three operations permitted on a word:</p>
<ul>
<li>Insert a character</li>
<li>Delete a character</li>
<li>Replace a character</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;horse&quot;</span>, word2 = <span class="string">&quot;ros&quot;</span></span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">horse -&gt; rorse (replace <span class="string">&#x27;h&#x27;</span> with <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rorse -&gt; rose (remove <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rose -&gt; ros (remove <span class="string">&#x27;e&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: word1 = <span class="string">&quot;intention&quot;</span>, word2 = <span class="string">&quot;execution&quot;</span></span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">intention -&gt; inention (remove <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">inention -&gt; enention (replace <span class="string">&#x27;i&#x27;</span> with <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">enention -&gt; exention (replace <span class="string">&#x27;n&#x27;</span> with <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">exention -&gt; exection (replace <span class="string">&#x27;n&#x27;</span> with <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">exection -&gt; execution (insert <span class="string">&#x27;u&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li>
<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string word1_, word2_;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = word1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = word2.<span class="built_in">size</span>();</span><br><span class="line">        word1_ = word1;</span><br><span class="line">        word2_ = word2;</span><br><span class="line">        dp.<span class="built_in">resize</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">-1</span>));</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> idx1, <span class="type">int</span> idx2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx2 == word2_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> word1_.<span class="built_in">size</span>() - idx1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx1 == word1_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> word2_.<span class="built_in">size</span>() - idx2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[idx1][idx2] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[idx1][idx2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (word1_[idx1] == word2_[idx2]) &#123;</span><br><span class="line">            ans = <span class="built_in">traverse</span>(idx1 + <span class="number">1</span>, idx2 + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(<span class="built_in">traverse</span>(idx1 + <span class="number">1</span>, idx2 + <span class="number">1</span>),         <span class="comment">// replacement</span></span><br><span class="line">                      <span class="built_in">min</span>(<span class="built_in">traverse</span>(idx1, idx2 + <span class="number">1</span>),         <span class="comment">// insert</span></span><br><span class="line">                          <span class="built_in">traverse</span>(idx1 + <span class="number">1</span>, idx2))) + <span class="number">1</span>;   <span class="comment">// delete</span></span><br><span class="line">        &#125;</span><br><span class="line">        dp[idx1][idx2] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>724. Find Pivot Index</title>
    <url>/2023/11/12/724-Find-Pivot-Index/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-pivot-index/">724. Find Pivot Index</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a></p>
<p>Given an array of integers <code>nums</code>, calculate the <strong>pivot index</strong> of this array.</p>
<p>The <strong>pivot index</strong> is the index where the sum of all the numbers <strong>strictly</strong> to the left of the index is equal to the sum of all the numbers <strong>strictly</strong> to the index’s right.</p>
<p>If the index is on the left edge of the array, then the left sum is <code>0</code> because there are no elements to the left. This also applies to the right edge of the array.</p>
<p>Return <em>the <strong>leftmost pivot index</strong></em>. If no such index exists, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,7,3,6,5,6]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">The pivot index is 3.</span><br><span class="line">Left <span class="built_in">sum</span> = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11</span><br><span class="line">Right <span class="built_in">sum</span> = nums[4] + nums[5] = 5 + 6 = 11</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation:</span><br><span class="line">There is no index that satisfies the conditions <span class="keyword">in</span> the problem statement.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,1,-1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation:</span><br><span class="line">The pivot index is 0.</span><br><span class="line">Left <span class="built_in">sum</span> = 0 (no elements to the left of index 0)</span><br><span class="line">Right <span class="built_in">sum</span> = nums[1] + nums[2] = 1 + -1 = 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>
</ul>
<p><strong>Note:</strong> This question is the same as 1991: <a href="https://leetcode.com/problems/find-the-middle-index-in-array/">https://leetcode.com/problems/find-the-middle-index-in-array/</a></p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pivotIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(size + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preSum[i] == preSum[size] - preSum[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>734. Sentence Similarity</title>
    <url>/2023/07/31/734-Sentence-Similarity/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sentence-similarity/">734. Sentence Similarity</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We can represent a sentence as an array of words, for example, the sentence <code>&quot;I am happy with leetcode&quot;</code> can be represented as <code>arr = [&quot;I&quot;,&quot;am&quot;,happy&quot;,&quot;with&quot;,&quot;leetcode&quot;]</code>.</p>
<p>Given two sentences <code>sentence1</code> and <code>sentence2</code> each represented as a string array and given an array of string pairs <code>similarPairs</code> where similarPairs[i] &#x3D; [x<sub>i</sub>, y<sub>i</sub>] indicates that the two words x<sub>i</sub> and y<sub>i</sub> are similar.</p>
<p>Return <code>true</code> if <code>sentence1</code> and <code>sentence2</code> are similar, or <code>false</code> if they are not similar.</p>
<p>Two sentences are similar if:</p>
<ul>
<li>They have <strong>the same length</strong>  (i.e., the same number of words)</li>
<li><code>sentence1[i]</code> and <code>sentence2[i]</code> are similar.</li>
</ul>
<p>Notice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words <code>a</code> and <code>b</code> are similar, and the words <code>b</code> and <code>c</code> are similar, <code>a</code> and <code>c</code> are <strong>not necessarily similar</strong> .</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: sentence1 = [&quot;great&quot;,&quot;acting&quot;,&quot;skills&quot;], sentence2 = [&quot;fine&quot;,&quot;drama&quot;,&quot;talent&quot;], similarPairs = [[&quot;great&quot;,&quot;fine&quot;],[&quot;drama&quot;,&quot;acting&quot;],[&quot;skills&quot;,&quot;talent&quot;]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: sentence1 = [&quot;great&quot;], sentence2 = [&quot;great&quot;], similarPairs = []</span><br><span class="line">Output: true</span><br><span class="line">Explanation: A word is similar to itself.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: sentence1 = [&quot;great&quot;], sentence2 = [&quot;doubleplus&quot;,&quot;good&quot;], similarPairs = [[&quot;great&quot;,&quot;doubleplus&quot;]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: As they don&#x27;t have the same length, we return false.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= sentence1.length, sentence2.length &lt;= 1000</code></li>
<li><code>1 &lt;= sentence1[i].length, sentence2[i].length &lt;= 20</code></li>
<li><code>sentence1[i]</code> and <code>sentence2[i]</code> consist of English letters.</li>
<li><code>0 &lt;= similarPairs.length &lt;= 1000</code></li>
<li><code>similarPairs[i].length == 2</code></li>
<li><code>1 &lt;= x&lt;sub&gt;i&lt;/sub&gt;.length, y&lt;sub&gt;i&lt;/sub&gt;.length &lt;= 20</code></li>
<li><code>x&lt;sub&gt;i&lt;/sub&gt;</code> and <code>y&lt;sub&gt;i&lt;/sub&gt;</code> consist of lower-case and upper-case English letters.</li>
<li>All the pairs <code>(x&lt;sub&gt;i&lt;/sub&gt;,&lt;sub&gt; &lt;/sub&gt;y&lt;sub&gt;i&lt;/sub&gt;)</code> are <strong>distinct</strong> .</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>record the mapping and compare each word</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">areSentencesSimilar</span><span class="params">(vector&lt;string&gt;&amp; sentence1, vector&lt;string&gt;&amp; sentence2, vector&lt;vector&lt;string&gt;&gt;&amp; similarPairs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sentence1.<span class="built_in">size</span>() != sentence2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map&lt;string, set&lt;string&gt;&gt; mapping;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> pair : similarPairs) &#123;</span><br><span class="line">            mapping[pair[<span class="number">0</span>]].<span class="built_in">insert</span>(pair[<span class="number">1</span>]);</span><br><span class="line">            mapping[pair[<span class="number">1</span>]].<span class="built_in">insert</span>(pair[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sentence1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sentence1[i] == sentence2[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            string w1 = sentence1[i];</span><br><span class="line">            string w2 = sentence2[i];</span><br><span class="line">            <span class="keyword">if</span> (!mapping[w1].<span class="built_in">count</span>(w2)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>739. Daily Temperatures</title>
    <url>/2023/09/10/739-Daily-Temperatures/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/daily-temperatures/">739. Daily Temperatures</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a></p>
<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> i<sup>th</sup> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: temperatures = [73,74,75,71,69,72,76,73]</span><br><span class="line">Output: [1,1,4,2,1,1,0,0]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: temperatures = [30,40,50,60]</span><br><span class="line">Output: [1,1,1,0]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: temperatures = [30,60,90]</span><br><span class="line">Output: [1,1,0]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; temperatures.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>30 &lt;= temperatures[i] &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Monotonic Stack</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">        stack&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; warmer;</span><br><span class="line">        <span class="type">int</span> size = temperatures.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(size, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!warmer.<span class="built_in">empty</span>() &amp;&amp; warmer.<span class="built_in">top</span>().first &lt;= temperatures[i]) &#123;</span><br><span class="line">                warmer.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = warmer.<span class="built_in">empty</span>() ? <span class="number">0</span> : warmer.<span class="built_in">top</span>().second - i;</span><br><span class="line">            warmer.<span class="built_in">push</span>(&#123;temperatures[i], i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>74. Search a 2D Matrix</title>
    <url>/2023/11/30/74-Search-a-2D-Matrix/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/search-a-2d-matrix/">74. Search a 2D Matrix</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/matrix//">Matrix</a></p>
<p>You are given an <code>m x n</code> integer matrix <code>matrix</code> with the following two properties:</p>
<ul>
<li>Each row is sorted in non-decreasing order.</li>
<li>The first integer of each row is greater than the last integer of the previous row.</li>
</ul>
<p>Given an integer <code>target</code>, return <code>true</code> <em>if</em> <code>target</code> <em>is in</em> <code>matrix</code> <em>or</em> <code>false</code> <em>otherwise</em>.</p>
<p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/05/mat.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
<li>-10<sup>4</sup> &lt;&#x3D; <code>matrix[i][j]</code>, target &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary search</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = m;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] &lt;= target &amp;&amp; matrix[mid][n - <span class="number">1</span>] &gt;= target) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[mid][<span class="number">0</span>] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = left;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        left = <span class="number">0</span>; right = n;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matrix[i][left] == target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>742. Closest Leaf in a Binary Tree</title>
    <url>/2024/07/11/742-Closest-Leaf-in-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/closest-leaf-in-a-binary-tree/description/">742. Closest Leaf in a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree where every node has <strong>a unique value</strong> and a target integer <code>k</code>, return the value of the <strong>nearest leaf node</strong> to the target <code>k</code> in the tree.</p>
<p><strong>Nearest to a leaf</strong> means the least number of edges traveled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/06/13/closest1-tree.jpg" style="width: 224px; height: 145px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,2], k = 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/06/13/closest2-tree.jpg" style="width: 64px; height: 65px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1], k = 1</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The nearest leaf node is the root node itself.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/06/13/closest3-tree.jpg" style="width: 464px; height: 384px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,null,null,null,5,null,6], k = 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 1000</code></li>
<li>All the values of the tree are <strong>unique</strong> .</li>
<li>There exist some node in the tree where <code>Node.val == k</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* target;</span><br><span class="line">    <span class="type">int</span> k_;</span><br><span class="line">    map&lt;TreeNode*, TreeNode*&gt; parent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findClosestLeaf</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        k_ = k;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">        q.<span class="built_in">push</span>(target);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                visited.<span class="built_in">insert</span>(cur-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (!cur-&gt;left &amp;&amp; !cur-&gt;right) &#123;</span><br><span class="line">                    <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left &amp;&amp; !visited.<span class="built_in">contains</span>(cur-&gt;left-&gt;val)) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right &amp;&amp; !visited.<span class="built_in">contains</span>(cur-&gt;right-&gt;val)) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (parent.<span class="built_in">contains</span>(cur) &amp;&amp;</span><br><span class="line">                    !visited.<span class="built_in">contains</span>(parent[cur]-&gt;val)) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(parent[cur]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == k_) &#123;</span><br><span class="line">            target = root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            parent[root-&gt;left] = root;</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            parent[root-&gt;right] = root;</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>743. Network Delay Time</title>
    <url>/2023/09/05/743-Network-Delay-Time/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/network-delay-time/">743. Network Delay Time</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/shortest-path//">Shortest Path</a></p>
<p>You are given a network of <code>n</code> nodes, labeled from <code>1</code> to <code>n</code>. You are also given <code>times</code>, a list of travel times as directed edges times[i] &#x3D; (u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>), where u<sub>i</sub> is the source node, v<sub>i</sub> is the target node, and w<sub>i</sub> is the time it takes for a signal to travel from source to target.</p>
<p>We will send a signal from a given node <code>k</code>. Return <em>the <strong>minimum</strong> time it takes for all the</em> <code>n</code> <em>nodes to receive the signal</em>. If it is impossible for all the <code>n</code> nodes to receive the signal, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">times</span> = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">times</span> = [[1,2,1]], n = 2, k = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">times</span> = [[1,2,1]], n = 2, k = 2</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= n &lt;= 100</code></li>
<li><code>1 &lt;= times.length &lt;= 6000</code></li>
<li><code>times[i].length == 3</code></li>
<li>1 &lt;&#x3D; u<sub>i</sub>, v<sub>i</sub> &lt;&#x3D; n</li>
<li>u<sub>i</sub> !&#x3D; v<sub>i</sub></li>
<li>0 &lt;&#x3D; w<sub>i</sub> &lt;&#x3D; 100</li>
<li>All the pairs (u<sub>i</sub>, v<sub>i</sub>) are <strong>unique</strong>. (i.e., no multiple edges.)</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Dijkstra algorithm</li>
<li>The dijkstra algorithm always try to find the shortest route from the root</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; distances;</span><br><span class="line">    priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">networkDelayTime</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; times, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        graph = vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;(n + <span class="number">1</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;());</span><br><span class="line">        distances = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, INT_MAX);</span><br><span class="line">        <span class="built_in">buildGraph</span>(times);</span><br><span class="line">        pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>, k&#125;);</span><br><span class="line">        distances[k] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; point = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> distance = point[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> to = point[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// it&#x27;s possible that one route with more time is pushed before</span></span><br><span class="line">            <span class="comment">// a better route, so the following condition would shortcut that</span></span><br><span class="line">            <span class="keyword">if</span> (distance &gt; distances[to]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> edge : graph[to]) &#123;</span><br><span class="line">                <span class="type">int</span> dis_next = edge[<span class="number">1</span>] + distance;</span><br><span class="line">                <span class="comment">// we only add new path if there&#x27;s better route</span></span><br><span class="line">                <span class="keyword">if</span> (distances[edge[<span class="number">0</span>]] &gt; dis_next) &#123;</span><br><span class="line">                    distances[edge[<span class="number">0</span>]] = dis_next;</span><br><span class="line">                    pq.<span class="built_in">push</span>(&#123;dis_next, edge[<span class="number">0</span>]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (distances[i] == INT_MAX) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">max</span>(res, distances[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildGraph</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; times)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> time : times) &#123;</span><br><span class="line">            <span class="type">int</span> from = time[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> to = time[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> dis = time[<span class="number">2</span>];</span><br><span class="line">            graph[from].<span class="built_in">push_back</span>(&#123;to, dis&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Graph</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>76. Minimum Window Substring</title>
    <url>/2023/01/18/76-Minimum-Window-Substring/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-window-substring/">76. Minimum Window Substring</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/string/">String</a>, <a href="https://leetcode.com/tag/sliding-window/">Sliding Window</a></p>
<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window</strong></em> <span data-keyword="substring-nonempty"><strong><em>substring</em></strong></span> <em>of</em> <code>s</code> <em>such that every character in</em> <code>t</code> <em>(<strong>including duplicates</strong>) is included in the window</em>. If there is no such substring, return <em>the empty string</em> <code>&quot;&quot;</code>.</p>
<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;ADOBECODEBANC&quot;</span>, t = <span class="string">&quot;ABC&quot;</span></span><br><span class="line">Output: <span class="string">&quot;BANC&quot;</span></span><br><span class="line">Explanation: The minimum window substring <span class="string">&quot;BANC&quot;</span> includes <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, and <span class="string">&#x27;C&#x27;</span> from string t.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;a&quot;</span>, t = <span class="string">&quot;a&quot;</span></span><br><span class="line">Output: <span class="string">&quot;a&quot;</span></span><br><span class="line">Explanation: The entire string s is the minimum window.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: s = <span class="string">&quot;a&quot;</span>, t = <span class="string">&quot;aa&quot;</span></span><br><span class="line">Output: <span class="string">&quot;&quot;</span></span><br><span class="line">Explanation: Both <span class="string">&#x27;a&#x27;</span>s from t must be included <span class="keyword">in</span> the window.</span><br><span class="line">Since the largest window of s only has one <span class="string">&#x27;a&#x27;</span>, <span class="built_in">return</span> empty string.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == s.length</code></li>
<li><code>n == t.length</code></li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 10<sup>5</sup></li>
<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>
</ul>
<p><strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Sliding window, keep taking new elements while trying to shrink the left boundry</li>
<li>Use map to record if all required letters are included</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need, window;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: t) &#123;</span><br><span class="line">            need[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> valid = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>, start = <span class="number">0</span>, len = INT_MAX;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">char</span> c = s[right++];</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">if</span> (need.<span class="built_in">count</span>(c)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (need[c] == window[c]) &#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (valid == need.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (right - left &lt; len) &#123;</span><br><span class="line">                    start = left;</span><br><span class="line">                    len = right - left;</span><br><span class="line">                &#125;</span><br><span class="line">                c = s[left];</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">if</span> (need.<span class="built_in">count</span>(c)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (need[c] == window[c]) &#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    window[c]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len == INT_MAX ? <span class="string">&quot;&quot;</span>: s.<span class="built_in">substr</span>(start, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>776. Split BST</title>
    <url>/2024/07/13/776-Split-BST/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/split-bst/description/">776. Split BST</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary search tree (BST) and an integer <code>target</code>, split the tree into two subtrees where the first subtree has nodes that are all smaller or equal to the target value, while the second subtree has all nodes that are greater than the target value. It is not necessarily the case that the tree contains a node with the value <code>target</code>.</p>
<p>Additionally, most of the structure of the original tree should remain. Formally, for any child <code>c</code> with parent <code>p</code> in the original tree, if they are both in the same subtree after the split, then node <code>c</code> should still have the parent <code>p</code>.</p>
<p>Return an array of the two roots of the two subtrees in order.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/06/13/split-tree.jpg" style="width: 600px; height: 193px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,6,1,3,5,7], target = 2</span><br><span class="line">Output: [[2,1],[4,3,6,null,null,5,7]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1], target = 1</span><br><span class="line">Output: [[1],[]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 50]</code>.</li>
<li><code>0 &lt;= Node.val, target &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">splitBST</span><span class="params">(TreeNode* root, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="literal">nullptr</span>, <span class="literal">nullptr</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;TreeNode*&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; target) &#123;</span><br><span class="line">            <span class="keyword">auto</span> l = <span class="built_in">splitBST</span>(root-&gt;left, target);</span><br><span class="line">            root-&gt;left = l[<span class="number">1</span>];</span><br><span class="line">            res.<span class="built_in">push_back</span>(l[<span class="number">0</span>]);</span><br><span class="line">            res.<span class="built_in">push_back</span>(root);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> r = <span class="built_in">splitBST</span>(root-&gt;right, target);</span><br><span class="line">            root-&gt;right = r[<span class="number">0</span>];</span><br><span class="line">            res.<span class="built_in">push_back</span>(root);</span><br><span class="line">            res.<span class="built_in">push_back</span>(r[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>785. Is Graph Bipartite?</title>
    <url>/2023/09/01/785-Is-Graph-Bipartite/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/is-graph-bipartite/">785. Is Graph Bipartite?</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/union-find//">Union Find</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a></p>
<p>There is an <strong>undirected</strong> graph with <code>n</code> nodes, where each node is numbered between <code>0</code> and <code>n - 1</code>. You are given a 2D array <code>graph</code>, where <code>graph[u]</code> is an array of nodes that node <code>u</code> is adjacent to. More formally, for each <code>v</code> in <code>graph[u]</code>, there is an undirected edge between node <code>u</code> and node <code>v</code>. The graph has the following properties:</p>
<ul>
<li>There are no self-edges (<code>graph[u]</code> does not contain <code>u</code>).</li>
<li>There are no parallel edges (<code>graph[u]</code> does not contain duplicate values).</li>
<li>If <code>v</code> is in <code>graph[u]</code>, then <code>u</code> is in <code>graph[v]</code> (the graph is undirected).</li>
<li>The graph may not be connected, meaning there may be two nodes <code>u</code> and <code>v</code> such that there is no path between them.</li>
</ul>
<p>A graph is <strong>bipartite</strong> if the nodes can be partitioned into two independent sets <code>A</code> and <code>B</code> such that <strong>every</strong> edge in the graph connects a node in set <code>A</code> and a node in set <code>B</code>.</p>
<p>Return <code>true</code> <em>if and only if it is <strong>bipartite</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node <span class="keyword">in</span> one and a node <span class="keyword">in</span> the other.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: graph = [[1,3],[0,2],[1,3],[0,2]]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: We can partition the nodes into two sets: &#123;0, 2&#125; and &#123;1, 3&#125;.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>graph.length == n</code></li>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>0 &lt;= graph[u].length &lt; n</code></li>
<li><code>0 &lt;= graph[u][i] &lt;= n - 1</code></li>
<li><code>graph[u]</code> does not contain <code>u</code>.</li>
<li>All the values of <code>graph[u]</code> are <strong>unique</strong>.</li>
<li>If <code>graph[u]</code> contains <code>v</code>, then <code>graph[v]</code> contains <code>u</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Traverse the graph, color the next node if not visited, or check if the color match</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; color;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBipartite</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> numNodes = graph.<span class="built_in">size</span>();</span><br><span class="line">        color = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(numNodes, <span class="literal">false</span>);</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(numNodes, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numNodes; i++) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(i, graph);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> node, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">        visited[node] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> w : graph[node]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[w]) &#123;</span><br><span class="line">                <span class="comment">// visited, should check the color</span></span><br><span class="line">                <span class="keyword">if</span> (color[w] == color[node]) &#123;</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                color[w] = !color[node];</span><br><span class="line">                <span class="built_in">traverse</span>(w, graph);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>787. Cheapest Flights Within K Stops</title>
    <url>/2024/10/03/787-Cheapest-Flights-Within-K-Stops/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/cheapest-flights-within-k-stops/description/">787. Cheapest Flights Within K Stops</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are <code>n</code> cities connected by some number of flights. You are given an array <code>flights</code> where flights[i] &#x3D; [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>] indicates that there is a flight from city from<sub>i</sub> to city to<sub>i</sub> with cost price<sub>i</sub>.</p>
<p>You are also given three integers <code>src</code>, <code>dst</code>, and <code>k</code>, return <strong>the cheapest price</strong>  from <code>src</code> to <code>dst</code> with at most <code>k</code> stops. If there is no such route, return <code>-1</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png" style="width: 332px; height: 392px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1</span><br><span class="line">Output: 700</span><br><span class="line">Explanation:</span><br><span class="line">The graph is shown above.</span><br><span class="line">The optimal path with at most 1 stop from city 0 to 3 is marked <span class="keyword">in</span> red and has cost 100 + 600 = 700.</span><br><span class="line">Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png" style="width: 332px; height: 242px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1</span><br><span class="line">Output: 200</span><br><span class="line">Explanation:</span><br><span class="line">The graph is shown above.</span><br><span class="line">The optimal path with at most 1 stop from city 0 to 2 is marked <span class="keyword">in</span> red and has cost 100 + 100 = 200.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png" style="width: 332px; height: 242px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0</span><br><span class="line">Output: 500</span><br><span class="line">Explanation:</span><br><span class="line">The graph is shown above.</span><br><span class="line">The optimal path with no stops from city 0 to 2 is marked <span class="keyword">in</span> red and has cost 500.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code></li>
<li><code>flights[i].length == 3</code></li>
<li>0 &lt;&#x3D; from<sub>i</sub>, to<sub>i</sub> &lt; n</li>
<li>from<sub>i</sub> !&#x3D; to<sub>i</sub></li>
<li>1 &lt;&#x3D; price<sub>i</sub> &lt;&#x3D; 10^4</li>
<li>There will not be any multiple flights between two cities.</li>
<li><code>0 &lt;= src, dst, k &lt; n</code></li>
<li><code>src != dst</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>dp</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; graph;</span><br><span class="line">    <span class="type">int</span> dst_;</span><br><span class="line">    <span class="comment">// the meaning of dp[i][j]: when we are at i, and there are j stops left,</span></span><br><span class="line">    <span class="comment">// the minium cost to get to dst_</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCheapestPrice</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; flights, <span class="type">int</span> src, <span class="type">int</span> dst,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        graph.<span class="built_in">resize</span>(n, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;());</span><br><span class="line">        dp.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(k + <span class="number">2</span>, <span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">buildGraph</span>(flights);</span><br><span class="line">        dst_ = dst;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">traverse</span>(src, k + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res == INT_MAX ? <span class="number">-1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> src, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (src == dst_) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[src][k] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[src][k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : graph[src]) &#123;</span><br><span class="line">            <span class="type">int</span> v = p.first;</span><br><span class="line">            <span class="type">int</span> price = p.second;</span><br><span class="line">            res = <span class="built_in">min</span>(res, (<span class="type">long</span>)price + <span class="built_in">traverse</span>(v, k - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        dp[src][k] = res;</span><br><span class="line">        <span class="keyword">return</span> dp[src][k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildGraph</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; flights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> flight : flights) &#123;</span><br><span class="line">            <span class="type">int</span> from = flight[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> to = flight[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> price = flight[<span class="number">2</span>];</span><br><span class="line">            graph[from].<span class="built_in">push_back</span>(&#123;to, price&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Another approach(BFS):</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; costs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCheapestPrice</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; flights, <span class="type">int</span> src, <span class="type">int</span> dst,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        graph.<span class="built_in">resize</span>(n, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;());</span><br><span class="line">        costs.<span class="built_in">resize</span>(n, INT_MAX);</span><br><span class="line">        <span class="built_in">buildGraph</span>(flights);</span><br><span class="line">        queue&lt;vector&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;src, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; k &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">                <span class="keyword">auto</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> p : graph[u[<span class="number">0</span>]]) &#123;</span><br><span class="line">                    <span class="type">int</span> v = p.first, price = p.second;;</span><br><span class="line">                    <span class="keyword">if</span> (price + u[<span class="number">1</span>] &lt; costs[v]) &#123;</span><br><span class="line">                        costs[v] = price + u[<span class="number">1</span>];</span><br><span class="line">                        q.<span class="built_in">push</span>(&#123;v, costs[v]&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> costs[dst] == INT_MAX ? <span class="number">-1</span> : costs[dst];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildGraph</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; flights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> flight : flights) &#123;</span><br><span class="line">            <span class="type">int</span> from = flight[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> to = flight[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> price = flight[<span class="number">2</span>];</span><br><span class="line">            graph[from].<span class="built_in">push_back</span>(&#123;to, price&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Graph</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>797. All Paths From Source to Target</title>
    <url>/2023/08/31/797-All-Paths-From-Source-to-Target/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/all-paths-from-source-to-target/">797. All Paths From Source to Target</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/backtracking//">Backtracking</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a></p>
<p>Given a directed acyclic graph (<strong>DAG</strong>) of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, find all possible paths from node <code>0</code> to node <code>n - 1</code> and return them in <strong>any order</strong>.</p>
<p>The graph is given as follows: <code>graph[i]</code> is a list of all nodes you can visit from node <code>i</code> (i.e., there is a directed edge from node <code>i</code> to node <code>graph[i][j]</code>).</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: graph = [[1,2],[3],[3],[]]</span><br><span class="line">Output: [[0,1,3],[0,2,3]]</span><br><span class="line">Explanation: There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]</span><br><span class="line">Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == graph.length</code></li>
<li><code>2 &lt;= n &lt;= 15</code></li>
<li><code>0 &lt;= graph[i][j] &lt; n</code></li>
<li><code>graph[i][j] != i</code> (i.e., there will be no self-loops).</li>
<li>All the elements of <code>graph[i]</code> are <strong>unique</strong>.</li>
<li>The input graph is <strong>guaranteed</strong> to be a <strong>DAG</strong>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Traverse the graph, add node to the path when entering and remove the node from the path when exiting</li>
<li>DAG, i.e. directed acyclic graph, so there’s no cycle</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">allPathsSourceTarget</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(graph, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph, <span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt;&amp; path)</span> </span>&#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(n);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (n == graph.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : graph[n]) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(graph, num, path);</span><br><span class="line">        &#125;    </span><br><span class="line"></span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Graph</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>81. Search in Rotated Sorted Array II</title>
    <url>/2023/12/02/81-Search-in-Rotated-Sorted-Array-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/">81. Search in Rotated Sorted Array II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a></p>
<p>There is an integer array <code>nums</code> sorted in non-decreasing order (not necessarily with <strong>distinct</strong> values).</p>
<p>Before being passed to your function, <code>nums</code> is <strong>rotated</strong> at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,4,4,5,6,6,7]</code> might be rotated at pivot index <code>5</code> and become <code>[4,5,6,6,7,0,1,2,4,4]</code>.</p>
<p>Given the array <code>nums</code> <strong>after</strong> the rotation and an integer <code>target</code>, return <code>true</code> <em>if</em> <code>target</code> <em>is in</em> <code>nums</code><em>, or</em> <code>false</code> <em>if it is not in</em> <code>nums</code><em>.</em></p>
<p>You must decrease the overall operation steps as much as possible.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,5,6,0,0,1,2], target = 0</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,5,6,0,0,1,2], target = 3</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 5000</code></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li><code>nums</code> is guaranteed to be rotated at some pivot.</li>
<li>-10<sup>4</sup> &lt;&#x3D; target &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<p><strong>Follow up:</strong> This problem is similar to <a href="/problems/search-in-rotated-sorted-array/description/">Search in Rotated Sorted Array</a>, but <code>nums</code> may contain <strong>duplicates</strong>. Would this affect the runtime complexity? How and why?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Shrink the left and right boundary before binary search</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>814. Binary Tree Pruning</title>
    <url>/2024/07/13/814-Binary-Tree-Pruning/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-pruning/description/">814. Binary Tree Pruning</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, return the same tree where every subtree (of the given tree) not containing a <code>1</code> has been removed.</p>
<p>A subtree of a node <code>node</code> is <code>node</code> plus every node that is a descendant of <code>node</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png" style="width: 500px; height: 140px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,0,0,1]</span><br><span class="line">Output: [1,null,0,null,1]</span><br><span class="line">Explanation:</span><br><span class="line">Only the red nodes satisfy the property <span class="string">&quot;every subtree not containing a 1&quot;</span>.</span><br><span class="line">The diagram on the right represents the answer.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png" style="width: 500px; height: 115px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,0,1,0,0,0,1]</span><br><span class="line">Output: [1,null,1,null,1]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong><br><img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png" style="width: 500px; height: 134px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,1,0,1,1,0,1,0]</span><br><span class="line">Output: [1,1,0,1,1,null,1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 200]</code>.</li>
<li><code>Node.val</code> is either <code>0</code> or <code>1</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">pruneTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = <span class="built_in">pruneTree</span>(root-&gt;left);</span><br><span class="line">        root-&gt;right = <span class="built_in">pruneTree</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; root-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>82. Remove Duplicates from Sorted List II</title>
    <url>/2023/11/11/82-Remove-Duplicates-from-Sorted-List-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/">82. Remove Duplicates from Sorted List II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/linked-list//">Linked List</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a></p>
<p>Given the <code>head</code> of a sorted linked list, <em>delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,3,4,4,5]</span><br><span class="line">Output: [1,2,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,1,1,2,3]</span><br><span class="line">Output: [2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>two pointers</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="function">ListNode <span class="title">dummy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        ListNode *p = &amp;dummy, *q = head;</span><br><span class="line">        <span class="keyword">while</span> (q) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q-&gt;next &amp;&amp; q-&gt;val == q-&gt;next-&gt;val) &#123;</span><br><span class="line">                <span class="keyword">while</span> (q-&gt;next &amp;&amp; q-&gt;val == q-&gt;next-&gt;val) &#123;</span><br><span class="line">                    q = q-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!q-&gt;next) &#123;</span><br><span class="line">                    p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p-&gt;next = q;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>83. Remove Duplicates from Sorted List</title>
    <url>/2023/01/17/83-Remove-Duplicates-from-Sorted-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">83. Remove Duplicates from Sorted List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a></p>
<p>Given the <code>head</code> of a sorted linked list, <em>delete all duplicates such that each element appears only once</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,1,2]</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,1,2,3,3]</span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Fast&#x2F;slow pointers</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast) &#123;</span><br><span class="line">            <span class="keyword">while</span> (fast &amp;&amp; fast-&gt;val == slow-&gt;val) &#123;</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            slow-&gt;next = fast;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>852. Peak Index in a Mountain Array</title>
    <url>/2023/12/02/852-Peak-Index-in-a-Mountain-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/peak-index-in-a-mountain-array/">852. Peak Index in a Mountain Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a></p>
<p>An array <code>arr</code> is a <strong>mountain</strong> if the following properties hold:</p>
<ul>
<li><code>arr.length &gt;= 3</code></li>
<li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:<ul>
<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li>
<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>
</ul>
</li>
</ul>
<p>Given a mountain array <code>arr</code>, return the index <code>i</code> such that <code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code>.</p>
<p>You must solve it in <code>O(log(arr.length))</code> time complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: arr = [0,1,0]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: arr = [0,2,1,0]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: arr = [0,10,5,2]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>3 &lt;&#x3D; arr.length &lt;&#x3D; 10<sup>5</sup></li>
<li>0 &lt;&#x3D; arr[i] &lt;&#x3D; 10<sup>6</sup></li>
<li><code>arr</code> is <strong>guaranteed</strong> to be a mountain array.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Variant binary search</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peakIndexInMountainArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = arr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; arr[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>86. Partition List</title>
    <url>/2023/01/03/86-Partition-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/partition-list/">86. Partition List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p>
<p>Given the <code>head</code> of a linked list and a value <code>x</code>, partition it such that all nodes <strong>less than</strong> <code>x</code> come before nodes <strong>greater than or equal</strong> to <code>x</code>.</p>
<p>You should <strong>preserve</strong> the original relative order of the nodes in each of the two partitions.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/partition.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,4,3,2,5,2], x = 3</span><br><span class="line">Output: [1,2,2,4,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [2,1], x = 2</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is in the range <code>[0, 200]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>-200 &lt;= x &lt;= 200</code></li>
</ul>
<hr>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use two lists</li>
<li>Break the link after the node is added to a new list</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        ListNode* dummy2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        ListNode *p1 = dummy1, *p2 = dummy2, *p = head;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;val &gt;= x) &#123;</span><br><span class="line">                p2-&gt;next = p;</span><br><span class="line">                p2 = p2-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p1-&gt;next = p;</span><br><span class="line">                p1 = p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// break the next link, otherwise the p2 may link to previous</span></span><br><span class="line">            <span class="comment">// content(resulting in circle)</span></span><br><span class="line">            ListNode* tmp = p-&gt;next;</span><br><span class="line">            p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            p = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        p1-&gt;next = dummy2-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>862. Shortest Subarray with Sum at Least K</title>
    <url>/2023/12/17/862-Shortest-Subarray-with-Sum-at-Least-K/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/">862. Shortest Subarray with Sum at Least K</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Hard</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search//">Binary Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sliding-window//">Sliding Window</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/prefix-sum//">Prefix Sum</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-queue//">Monotonic Queue</a></p>
<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the length of the shortest non-empty <strong>subarray</strong> of</em> <code>nums</code> <em>with a sum of at least</em> <code>k</code>. If there is no such <strong>subarray</strong>, return <code>-1</code>.</p>
<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1], k = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2], k = 4</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,-1,2], k = 3</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>-10<sup>5</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>5</sup></li>
<li>1 &lt;&#x3D; k &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum + monotonic queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span>&gt; <span class="title">preSum</span><span class="params">(nums.size() + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, res = INT_MAX;</span><br><span class="line">        deque&lt;<span class="type">long</span>&gt; minQ;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!minQ.<span class="built_in">empty</span>() &amp;&amp; preSum[right] &lt; minQ.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                minQ.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            minQ.<span class="built_in">push_back</span>(preSum[right]);</span><br><span class="line">            <span class="keyword">while</span> ((preSum[right] - minQ.<span class="built_in">front</span>() &gt;= k) &amp;&amp; left &lt; right) &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, right - left);</span><br><span class="line">                <span class="keyword">if</span> (preSum[left] == minQ.<span class="built_in">front</span>()) &#123;</span><br><span class="line">                    minQ.<span class="built_in">pop_front</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == INT_MAX ? <span class="number">-1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>Sliding Window</tag>
        <tag>Prefix Sum</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Queue</tag>
        <tag>Monotonic Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>863. All Nodes Distance K in Binary Tree</title>
    <url>/2024/07/09/863-All-Nodes-Distance-K-in-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/">863. All Nodes Distance K in Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, the value of a target node <code>target</code>, and an integer <code>k</code>, return an array of the values of all nodes that have a distance <code>k</code> from the target node.</p>
<p>You can return the answer in <strong>any order</strong>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png" style="width: 500px; height: 429px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2</span><br><span class="line">Output: [7,4,1]</span><br><span class="line">Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1], target = 1, k = 3</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 500]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 500</code></li>
<li>All the values <code>Node.val</code> are <strong>unique</strong> .</li>
<li><code>target</code> is the value of one of the nodes in the tree.</li>
<li><code>0 &lt;= k &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;TreeNode*, TreeNode*&gt; parent;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">distanceK</span><span class="params">(TreeNode* root, TreeNode* target, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="type">int</span> distance = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(target);</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (distance == k) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                &#125;</span><br><span class="line">                s.<span class="built_in">insert</span>(cur-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;left &amp;&amp; !s.<span class="built_in">contains</span>(cur-&gt;left-&gt;val)) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;right &amp;&amp; !s.<span class="built_in">contains</span>(cur-&gt;right-&gt;val)) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (parent[cur] &amp;&amp; !s.<span class="built_in">contains</span>(parent[cur]-&gt;val)) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(parent[cur]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            distance++;</span><br><span class="line">            <span class="keyword">if</span> (distance &gt; k) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            parent[root-&gt;left] = root;</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            parent[root-&gt;right] = root;</span><br><span class="line">            <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>865. Smallest Subtree with all the Deepest Nodes</title>
    <url>/2024/07/03/865-Smallest-Subtree-with-all-the-Deepest-Nodes/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/description/">865. Smallest Subtree with all the Deepest Nodes</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, the depth of each node is <strong>the shortest distance to the root</strong>.</p>
<p>Return the smallest subtree such that it contains <strong>all the deepest nodes</strong> in the original tree.</p>
<p>A node is called <strong>the deepest</strong> if it has the largest depth possible among any node in the entire tree.</p>
<p>The <strong>subtree</strong> of a node is a tree consisting of that node, plus the set of all descendants of that node.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png" style="width: 600px; height: 510px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4]</span><br><span class="line">Output: [2,7,4]</span><br><span class="line">Explanation: We <span class="built_in">return</span> the node with value 2, colored <span class="keyword">in</span> yellow <span class="keyword">in</span> the diagram.</span><br><span class="line">The nodes coloured <span class="keyword">in</span> blue are the deepest nodes of the tree.</span><br><span class="line">Notice that nodes 5, 3 and 2 contain the deepest nodes <span class="keyword">in</span> the tree but node 2 is the smallest subtree among them, so we <span class="built_in">return</span> it.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The root is the deepest node <span class="keyword">in</span> the tree.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,1,3,null,2]</span><br><span class="line">Output: [2]</span><br><span class="line">Explanation: The deepest node <span class="keyword">in</span> the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree will be in the range <code>[1, 500]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 500</code></li>
<li>The values of the nodes in the tree are <strong>unique</strong> .</li>
</ul>
<p><strong>Note:</strong>  This question is the same as 1123: <a href="https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/" target="_blank">https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/</a></p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>binary tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* res;</span><br><span class="line">    <span class="type">int</span> maxDepth = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">subtreeWithAllDeepest</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> depth - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (depth &gt; maxDepth) &#123;</span><br><span class="line">            maxDepth = depth;</span><br><span class="line">            res = root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">traverse</span>(root-&gt;left, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">traverse</span>(root-&gt;right, depth + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left == right &amp;&amp; left == maxDepth) &#123;</span><br><span class="line">            res = root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left &gt; right ? left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>870. Advantage Shuffle</title>
    <url>/2023/01/31/870-Advantage-Shuffle/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/advantage-shuffle/">870. Advantage Shuffle</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a>, <a href="https://leetcode.com/tag/greedy/">Greedy</a>, <a href="https://leetcode.com/tag/sorting/">Sorting</a></p>
<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> both of the same length. The <strong>advantage</strong> of <code>nums1</code> with respect to <code>nums2</code> is the number of indices <code>i</code> for which <code>nums1[i] &gt; nums2[i]</code>.</p>
<p>Return <em>any permutation of</em> <code>nums1</code> <em>that maximizes its <strong>advantage</strong> with respect to</em> <code>nums2</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]</span><br><span class="line">Output: [2,11,7,15]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]</span><br><span class="line">Output: [24,32,8,12]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums1.length &lt;&#x3D; 10<sup>5</sup></li>
<li><code>nums2.length == nums1.length</code></li>
<li>0 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Use priority queue for nums2, also we need to record the index for each value</li>
<li>Need to allocate a new res vector for return, nums1 records sorted array</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">advantageCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">advantageCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; lhs, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; rhs) &#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.second &lt; rhs.second;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums2.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(&#123;i, nums2[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums1.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums1.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; top = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (top.second &gt;= nums1[right]) &#123;</span><br><span class="line">                res[top.first] = nums1[left++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[top.first] = nums1[right--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Two Pointers</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>875. Koko Eating Bananas</title>
    <url>/2023/01/30/875-Koko-Eating-Bananas/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/koko-eating-bananas/">875. Koko Eating Bananas</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/binary-search/">Binary Search</a></p>
<p>Koko loves to eat bananas. There are <code>n</code> piles of bananas, the i<sup>th</sup> pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>h</code> hours.</p>
<p>Koko can decide her bananas-per-hour eating speed of <code>k</code>. Each hour, she chooses some pile of bananas and eats <code>k</code> bananas from that pile. If the pile has less than <code>k</code> bananas, she eats all of them instead and will not eat any more bananas during this hour.</p>
<p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p>
<p>Return <em>the minimum integer</em> <code>k</code> <em>such that she can eat all the bananas within</em> <code>h</code> <em>hours</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: piles = [3,6,7,11], h = 8</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: piles = [30,11,23,4,20], h = 5</span><br><span class="line">Output: 30</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: piles = [30,11,23,4,20], h = 6</span><br><span class="line">Output: 23</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; piles.length &lt;&#x3D; 10<sup>4</sup></li>
<li>piles.length &lt;&#x3D; h &lt;&#x3D; 10<sup>9</sup></li>
<li>1 &lt;&#x3D; piles[i] &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Helper function: eating hour, if eat k bananas per hour, how many hours in total would be needed?</li>
<li>Make it a binary search for left boundry</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eatingHour</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; piles, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hour = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> pile : piles) &#123;</span><br><span class="line">            hour += pile / s;</span><br><span class="line">            <span class="keyword">if</span> (pile % s != <span class="number">0</span>) &#123;</span><br><span class="line">                hour++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minEatingSpeed</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; piles, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> pile : piles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; pile) &#123;</span><br><span class="line">                right = pile;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> hour = <span class="built_in">eatingHour</span>(piles, mid);</span><br><span class="line">            <span class="keyword">if</span> (hour == h) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hour &gt; h) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hour &lt; h) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for the worst case left = right = max(piles)</span></span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>876. Middle of the Linked List</title>
    <url>/2023/01/04/876-Middle-of-the-Linked-List/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/middle-of-the-linked-list/">876. Middle of the Linked List</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a>, <a href="https://leetcode.com/tag/two-pointers/">Two Pointers</a></p>
<p>Given the <code>head</code> of a singly linked list, return <em>the middle node of the linked list</em>.</p>
<p>If there are two middle nodes, return <strong>the second middle</strong> node.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,4,5]</span><br><span class="line">Output: [3,4,5]</span><br><span class="line">Explanation: The middle node of the list is node 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,4,5,6]</span><br><span class="line">Output: [4,5,6]</span><br><span class="line">Explanation: Since the list has two middle nodes with values 3 and 4, we <span class="built_in">return</span> the second one.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 100</code></li>
</ul>
<hr>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Fast and slow pointers</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>88. Merge Sorted Array</title>
    <url>/2023/11/11/88-Merge-Sorted-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/merge-sorted-array/">88. Merge Sorted Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a></p>
<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>
<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>
<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array</em> <code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">Output: [1,2,2,3,5,6]</span><br><span class="line">Explanation: The arrays we are merging are [1,2,3] and [2,5,6].</span><br><span class="line">The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The arrays we are merging are [1] and [].</span><br><span class="line">The result of the merge is [1].</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The arrays we are merging are [] and [1].</span><br><span class="line">The result of the merge is [1].</span><br><span class="line">Note that because m = 0, there are no elements <span class="keyword">in</span> nums1\. The 0 is only there to ensure the merge result can fit <span class="keyword">in</span> nums1.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>nums1.length == m + n</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m, n &lt;= 200</code></li>
<li><code>1 &lt;= m + n &lt;= 200</code></li>
<li>-10<sup>9</sup> &lt;&#x3D; nums1[i], nums2[j] &lt;&#x3D; 10<sup>9</sup></li>
</ul>
<p><strong>Follow up:</strong> Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Two pointers</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> idx1 = m - <span class="number">1</span>, idx2 = n - <span class="number">1</span>, idx = m + n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx1 &gt;= <span class="number">0</span> || idx2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                nums1[idx--] = nums2[idx2--];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idx2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                nums1[idx--] = nums1[idx1--];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[idx1] &gt; nums2[idx2]) &#123;</span><br><span class="line">                nums1[idx--] = nums1[idx1--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[idx--] = nums2[idx2--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>886. Possible Bipartition</title>
    <url>/2023/09/02/886-Possible-Bipartition/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/possible-bipartition/">886. Possible Bipartition</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/breadth-first-search//">Breadth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/union-find//">Union Find</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a></p>
<p>We want to split a group of <code>n</code> people (labeled from <code>1</code> to <code>n</code>) into two groups of <strong>any size</strong>. Each person may dislike some other people, and they should not go into the same group.</p>
<p>Given the integer <code>n</code> and the array <code>dislikes</code> where dislikes[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] indicates that the person labeled a<sub>i</sub> does not like the person labeled b<sub>i</sub>, return <code>true</code> <em>if it is possible to split everyone into two groups in this way</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: The first group has [1,4], and the second group has [2,3].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: We need at least 3 <span class="built_in">groups</span> to divide them. We cannot put them <span class="keyword">in</span> two <span class="built_in">groups</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 2000</code></li>
<li>0 &lt;&#x3D; dislikes.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>dislikes[i].length == 2</code></li>
<li>1 &lt;&#x3D; a<sub>i</sub> &lt; b<sub>i</sub> &lt;&#x3D; n</li>
<li>All the pairs of <code>dislikes</code> are <strong>unique</strong>.</li>
</ul>
<h2 id="Hints-Nodes"><a href="#Hints-Nodes" class="headerlink" title="Hints&#x2F;Nodes"></a>Hints&#x2F;Nodes</h2><ul>
<li>Build the map, then it’s find bipartition of the graph</li>
<li>Use two vectors: visited and color</li>
<li>Use a global boolean ok for fast return</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; color;</span><br><span class="line">    <span class="type">int</span> ok = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">possibleBipartition</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dislikes)</span> </span>&#123;</span><br><span class="line">        graph = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">        color = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">buildGraph</span>(dislikes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">traverse</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildGraph</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dislikes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> pair : dislikes) &#123;</span><br><span class="line">            <span class="type">int</span> n1 = pair[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> n2 = pair[<span class="number">1</span>];</span><br><span class="line">            graph[n1].<span class="built_in">push_back</span>(n2);</span><br><span class="line">            graph[n2].<span class="built_in">push_back</span>(n1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ok) <span class="keyword">return</span>;</span><br><span class="line">        visited[node] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> to : graph[node]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[to]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (color[to] == color[node]) &#123;</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                color[to] = !color[node];</span><br><span class="line">                <span class="built_in">traverse</span>(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>889. Construct Binary Tree from Preorder and Postorder Traversal</title>
    <url>/2023/08/22/889-Construct-Binary-Tree-from-Preorder-and-Postorder-Traversal/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">889. Construct Binary Tree from Preorder and Postorder Traversal</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/hash-table//">Hash Table</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given two integer arrays, <code>preorder</code> and <code>postorder</code> where <code>preorder</code> is the preorder traversal of a binary tree of <strong>distinct</strong> values and <code>postorder</code> is the postorder traversal of the same tree, reconstruct and return <em>the binary tree</em>.</p>
<p>If there exist multiple answers, you can <strong>return any</strong> of them.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/07/24/lc-prepost.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]</span><br><span class="line">Output: [1,2,3,4,5,6,7]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: preorder = [1], postorder = [1]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= preorder.length &lt;= 30</code></li>
<li><code>1 &lt;= preorder[i] &lt;= preorder.length</code></li>
<li>All the values of <code>preorder</code> are <strong>unique</strong>.</li>
<li><code>postorder.length == preorder.length</code></li>
<li><code>1 &lt;= postorder[i] &lt;= postorder.length</code></li>
<li>All the values of <code>postorder</code> are <strong>unique</strong>.</li>
<li>It is guaranteed that <code>preorder</code> and <code>postorder</code> are the preorder traversal and postorder traversal of the same binary tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>It’s possible to have multiple solution from preorder + postorder</li>
<li>Draw the tree to find the pattern of root’s left child</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; valToIndex;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructFromPrePost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = preorder.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            valToIndex[postorder[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(preorder, <span class="number">0</span>, size - <span class="number">1</span>, postorder, <span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, <span class="type">int</span> preStart, <span class="type">int</span> preEnd,</span></span></span><br><span class="line"><span class="params"><span class="function">                    vector&lt;<span class="type">int</span>&gt;&amp; postorder, <span class="type">int</span> postStart, <span class="type">int</span> postEnd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preStart &gt; preEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rootVal = preorder[preStart];</span><br><span class="line"></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootVal);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preStart == preEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> leftVal = preorder[preStart + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> leftIndex = valToIndex[leftVal];</span><br><span class="line">        <span class="type">int</span> leftSize = leftIndex - postStart + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(preorder, preStart + <span class="number">1</span>, preStart + leftSize,</span><br><span class="line">                           postorder, postStart, leftIndex);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(preorder, preStart + leftSize + <span class="number">1</span>, preEnd,</span><br><span class="line">                            postorder, leftIndex + <span class="number">1</span>, postEnd);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>894. All Possible Full Binary Trees</title>
    <url>/2024/06/07/894-All-Possible-Full-Binary-Trees/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/all-possible-full-binary-trees/description/">894. All Possible Full Binary Trees</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer <code>n</code>, return a list of all possible <strong>full binary trees</strong>  with <code>n</code> nodes. Each node of each tree in the answer must have <code>Node.val == 0</code>.</p>
<p>Each element of the answer is the root node of one possible tree. You may return the final list of trees in <strong>any order</strong> .</p>
<p>A <strong>full binary tree</strong>  is a binary tree where each node has exactly <code>0</code> or <code>2</code> children.</p>
<p><strong>Example 1:</strong><br><img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png" style="width: 700px; height: 400px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 7</span><br><span class="line">Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: [[0,0,0]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 20</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">int</span>, vector&lt;TreeNode*&gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">allPossibleFBT</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;TreeNode*&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">build</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">contains</span>(n)) &#123;</span><br><span class="line">            <span class="keyword">return</span> m[n];</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;TreeNode*&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>));</span><br><span class="line">            m[n] = res;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span> j = n - i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">auto</span> left = <span class="built_in">build</span>(i);</span><br><span class="line">            <span class="keyword">auto</span> right = <span class="built_in">build</span>(j);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> l : left) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> r : right) &#123;</span><br><span class="line">                    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">                    root-&gt;left = l;</span><br><span class="line">                    root-&gt;right = r;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m[n] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Recursion</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Memoization</tag>
      </tags>
  </entry>
  <entry>
    <title>897. Increasing Order Search Tree</title>
    <url>/2024/07/01/897-Increasing-Order-Search-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/increasing-order-search-tree/description/">897. Increasing Order Search Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary search tree, rearrange the tree in <strong>in-order</strong>  so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg" style="width: 600px; height: 350px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]</span><br><span class="line">Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg" style="width: 300px; height: 114px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,1,7]</span><br><span class="line">Output: [1,null,5,null,7]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the given tree will be in the range <code>[1, 100]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* tail = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">increasingBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        TreeNode* newHead = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            newHead = <span class="built_in">increasingBST</span>(root-&gt;left);</span><br><span class="line">            root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tail)</span><br><span class="line">            tail-&gt;right = root;</span><br><span class="line">        tail = root;</span><br><span class="line">        <span class="built_in">increasingBST</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Stack</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>898D. Alarm Clock</title>
    <url>/2024/06/06/898D-Alarm-Clock/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/898/D">898D. Alarm Clock</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 n(1≤n≤2e5) m(1≤m≤1e6) k(1≤k≤n) 和长为 n 的数组 a(1≤a[i]≤1e6)。</p>
<p>数轴上有 n 个点，要求任意长为 m-1 的闭区间不能包含 &gt;&#x3D; k 个点。<br>问：至少要去掉多少个点？</p>
<p>注：闭区间 [L,R] 的长度为 R-L。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sliding window</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; alarms)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(alarms.<span class="built_in">begin</span>(), alarms.<span class="built_in">end</span>());</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="type">int</span> right = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; (alarms[right] - q.<span class="built_in">front</span>() &gt;= m)) &#123;</span><br><span class="line">            q.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">size</span>() &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">            alarms[right] = <span class="number">0</span>;</span><br><span class="line">            res++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            q.<span class="built_in">push_back</span>(alarms[right]);</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    in &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; alarms;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= n; t++) &#123;</span><br><span class="line">        <span class="type">int</span> alarm;</span><br><span class="line">        in &gt;&gt; alarm;</span><br><span class="line">        alarms.<span class="built_in">push_back</span>(alarm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>(n, m, k, alarms);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>901. Online Stock Span</title>
    <url>/2023/12/16/901-Online-Stock-Span/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/online-stock-span/">901. Online Stock Span</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/stack//">Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-stack//">Monotonic Stack</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/data-stream//">Data Stream</a></p>
<p>Design an algorithm that collects daily price quotes for some stock and returns <strong>the span</strong> of that stock’s price for the current day.</p>
<p>The <strong>span</strong> of the stock’s price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.</p>
<ul>
<li>For example, if the prices of the stock in the last four days is <code>[7,2,1,2]</code> and the price of the stock today is <code>2</code>, then the span of today is <code>4</code> because starting from today, the price of the stock was less than or equal <code>2</code> for <code>4</code> consecutive days.</li>
<li>Also, if the prices of the stock in the last four days is <code>[7,34,1,2]</code> and the price of the stock today is <code>8</code>, then the span of today is <code>3</code> because starting from today, the price of the stock was less than or equal <code>8</code> for <code>3</code> consecutive days.</li>
</ul>
<p>Implement the <code>StockSpanner</code> class:</p>
<ul>
<li><code>StockSpanner()</code> Initializes the object of the class.</li>
<li><code>int next(int price)</code> Returns the <strong>span</strong> of the stock’s price given that today’s price is <code>price</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;StockSpanner&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>, <span class="string">&quot;next&quot;</span>]</span><br><span class="line">[[], [100], [80], [60], [70], [60], [75], [85]]</span><br><span class="line">Output</span><br><span class="line">[null, 1, 1, 1, 2, 1, 4, 6]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">StockSpanner stockSpanner = new StockSpanner();</span><br><span class="line">stockSpanner.next(100); // <span class="built_in">return</span> 1</span><br><span class="line">stockSpanner.next(80);  // <span class="built_in">return</span> 1</span><br><span class="line">stockSpanner.next(60);  // <span class="built_in">return</span> 1</span><br><span class="line">stockSpanner.next(70);  // <span class="built_in">return</span> 2</span><br><span class="line">stockSpanner.next(60);  // <span class="built_in">return</span> 1</span><br><span class="line">stockSpanner.next(75);  // <span class="built_in">return</span> 4, because the last 4 prices (including today<span class="string">&#x27;s price of 75) were less than or equal to today&#x27;</span>s price.</span><br><span class="line">stockSpanner.next(85);  // <span class="built_in">return</span> 6</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; price &lt;&#x3D; 10<sup>5</sup></li>
<li>At most 10<sup>4</sup> calls will be made to <code>next</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>monotonic stack</li>
<li>use a pair with count to record number of eliminated entries</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StockSpanner</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stack&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StockSpanner</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; s.<span class="built_in">top</span>().first &lt;= price) &#123;</span><br><span class="line">            count += s.<span class="built_in">top</span>().second;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">push</span>(&#123;price, count&#125;);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your StockSpanner object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * StockSpanner* obj = new StockSpanner();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;next(price);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Monotonic Stack</tag>
        <tag>Design</tag>
        <tag>Data Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>912. Sort an Array</title>
    <url>/2023/08/22/912-Sort-an-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/sort-an-array/">912. Sort an Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/heap-priority-queue//">Heap (Priority Queue)</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/merge-sort//">Merge Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/bucket-sort//">Bucket Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/radix-sort//">Radix Sort</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/counting-sort//">Counting Sort</a></p>
<p>Given an array of integers <code>nums</code>, sort the array in ascending order and return it.</p>
<p>You must solve the problem <strong>without using any built-in</strong> functions in <code>O(nlog(n))</code> time complexity and with the smallest space complexity possible.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,2,3,1]</span><br><span class="line">Output: [1,2,3,5]</span><br><span class="line">Explanation: After sorting the array, the positions of some numbers are not changed (<span class="keyword">for</span> example, 2 and 3), <span class="keyword">while</span> the positions of other numbers are changed (<span class="keyword">for</span> example, 1 and 5).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,1,1,2,0,0]</span><br><span class="line">Output: [0,0,1,1,2,5]</span><br><span class="line">Explanation: Note that the values of nums are not necessairly unique.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 5 * 10<sup>4</sup></li>
<li>-5 * 10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 5 * 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>merge sort</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        tmp = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (high &lt;= low)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums, low, mid);</span><br><span class="line">        <span class="built_in">sort</span>(nums, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="built_in">merge</span>(nums, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">            tmp[i] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = low, j = mid + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> index = low; index &lt;= high; index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == mid + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[index] = tmp[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == high + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[index] = tmp[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp[i] &lt; tmp[j]) &#123;</span><br><span class="line">                nums[index] = tmp[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[index] = tmp[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Divide and Conquer</tag>
        <tag>Sorting</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Bucket Sort</tag>
        <tag>Merge Sort</tag>
        <tag>Radix Sort</tag>
        <tag>Counting Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>918. Maximum Sum Circular Subarray</title>
    <url>/2023/12/17/918-Maximum-Sum-Circular-Subarray/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-sum-circular-subarray/">918. Maximum Sum Circular Subarray</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/divide-and-conquer//">Divide and Conquer</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/dynamic-programming//">Dynamic Programming</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/monotonic-queue//">Monotonic Queue</a></p>
<p>Given a <strong>circular integer array</strong> <code>nums</code> of length <code>n</code>, return <em>the maximum possible sum of a non-empty <strong>subarray</strong> of</em> <code>nums</code>.</p>
<p>A <strong>circular array</strong> means the end of the array connects to the beginning of the array. Formally, the next element of <code>nums[i]</code> is <code>nums[(i + 1) % n]</code> and the previous element of <code>nums[i]</code> is <code>nums[(i - 1 + n) % n]</code>.</p>
<p>A <strong>subarray</strong> may only include each element of the fixed buffer <code>nums</code> at most once. Formally, for a subarray <code>nums[i], nums[i + 1], ..., nums[j]</code>, there does not exist <code>i &lt;= k1</code>, <code>k2 &lt;= j</code> with <code>k1 % n == k2 % n</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,-2,3,-2]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Subarray [3] has maximum <span class="built_in">sum</span> 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,-3,5]</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: Subarray [5,5] has maximum <span class="built_in">sum</span> 5 + 5 = 10.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-3,-2,-3]</span><br><span class="line">Output: -2</span><br><span class="line">Explanation: Subarray [-2] has maximum <span class="built_in">sum</span> -2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 3 * 10<sup>4</sup></li>
<li>-3 * 10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 3 * 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum + monotonic queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubarraySumCircular</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(nums.size() * <span class="number">2</span> + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; preSum.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            preSum[i] = preSum[i - <span class="number">1</span>] + nums[i % nums.<span class="built_in">size</span>()];</span><br><span class="line">        &#125;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; minQ;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>, right = <span class="number">1</span>, res = INT_MIN;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; preSum.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, preSum[right] - (minQ.<span class="built_in">empty</span>() ? <span class="number">0</span> : minQ.<span class="built_in">front</span>()));</span><br><span class="line">            <span class="keyword">if</span> (right - left == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (minQ.<span class="built_in">front</span>() == preSum[left]) &#123;</span><br><span class="line">                    minQ.<span class="built_in">pop_front</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!minQ.<span class="built_in">empty</span>() &amp;&amp; minQ.<span class="built_in">back</span>() &gt; preSum[right]) &#123;</span><br><span class="line">                minQ.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            minQ.<span class="built_in">push_back</span>(preSum[right]);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Divide and Conquer</tag>
        <tag>Queue</tag>
        <tag>Monotonic Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>919. Complete Binary Tree Inserter</title>
    <url>/2024/07/09/919-Complete-Binary-Tree-Inserter/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/complete-binary-tree-inserter/description/">919. Complete Binary Tree Inserter</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A <strong>complete binary tree</strong> is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</p>
<p>Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.</p>
<p>Implement the <code>CBTInserter</code> class:</p>
<ul>
<li><code>CBTInserter(TreeNode root)</code> Initializes the data structure with the <code>root</code> of the complete binary tree.</li>
<li><code>int insert(int v)</code> Inserts a <code>TreeNode</code> into the tree with value <code>Node.val == val</code> so that the tree remains complete, and returns the value of the parent of the inserted <code>TreeNode</code>.</li>
<li><code>TreeNode get_root()</code> Returns the root node of the tree.</li>
</ul>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/08/03/lc-treeinsert.jpg" style="width: 500px; height: 143px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line"></span><br><span class="line">[<span class="string">&quot;CBTInserter&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;get_root&quot;</span>]</span><br><span class="line">[[[1, 2]], [3], [4], []]</span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line">[null, 1, 2, [1, 2, 3, 4]]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line"></span><br><span class="line">CBTInserter cBTInserter = new CBTInserter([1, 2]);</span><br><span class="line">cBTInserter.insert(3);  // <span class="built_in">return</span> 1</span><br><span class="line">cBTInserter.insert(4);  // <span class="built_in">return</span> 2</span><br><span class="line">cBTInserter.get_root(); // <span class="built_in">return</span> [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree will be in the range <code>[1, 1000]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 5000</code></li>
<li><code>root</code> is a complete binary tree.</li>
<li><code>0 &lt;= val &lt;= 5000</code></li>
<li>At most <code>10^4</code> calls will be made to <code>insert</code> and <code>get_root</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CBTInserter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* root_;</span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CBTInserter</span>(TreeNode* root) &#123;</span><br><span class="line">        root_ = root;</span><br><span class="line">        q.<span class="built_in">push</span>(root_);</span><br><span class="line">        <span class="built_in">findParent</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">        TreeNode* node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (!cur-&gt;left) &#123;</span><br><span class="line">            cur-&gt;left = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cur-&gt;right) &#123;</span><br><span class="line">            cur-&gt;right = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">findParent</span>();</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">get_root</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> root_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">findParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;left &amp;&amp; cur-&gt;right) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            cur = q.<span class="built_in">front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CBTInserter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CBTInserter* obj = new CBTInserter(root);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;insert(val);</span></span><br><span class="line"><span class="comment"> * TreeNode* param_2 = obj-&gt;get_root();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>92. Reverse Linked List II</title>
    <url>/2023/01/04/92-Reverse-Linked-List-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/reverse-linked-list-ii/">92. Reverse Linked List II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/linked-list/">Linked List</a></p>
<p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return <em>the reversed list</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [1,2,3,4,5], left = 2, right = 4</span><br><span class="line">Output: [1,4,3,2,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: <span class="built_in">head</span> = [5], left = 1, right = 1</span><br><span class="line">Output: [5]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is <code>n</code>.</li>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>-500 &lt;= Node.val &lt;= 500</code></li>
<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>
</ul>
<p><strong>Follow up:</strong> Could you do it in one pass?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Implement reverseN(reverse the fist N elements of one list) first,<br>i.e. reverseN(3) &#x3D; 3-&gt;2-&gt;1-&gt;4-&gt;5</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">reverseN</span>(head, right);</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;next = <span class="built_in">reverseBetween</span>(head-&gt;next, left - <span class="number">1</span>, right - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseN</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            succesor = head-&gt;next;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tmpHead = <span class="built_in">reverseN</span>(head-&gt;next, n - <span class="number">1</span>);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        <span class="comment">// in fact, this step is only useful for the first node</span></span><br><span class="line">        head-&gt;next = succesor;</span><br><span class="line">        <span class="keyword">return</span> tmpHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode* succesor = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>933. Number of Recent Calls</title>
    <url>/2023/12/14/933-Number-of-Recent-Calls/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/number-of-recent-calls/">933. Number of Recent Calls</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/design//">Design</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/queue//">Queue</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/data-stream//">Data Stream</a></p>
<p>You have a <code>RecentCounter</code> class which counts the number of recent requests within a certain time frame.</p>
<p>Implement the <code>RecentCounter</code> class:</p>
<ul>
<li><code>RecentCounter()</code> Initializes the counter with zero recent requests.</li>
<li><code>int ping(int t)</code> Adds a new request at time <code>t</code>, where <code>t</code> represents some time in milliseconds, and returns the number of requests that has happened in the past <code>3000</code> milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range <code>[t - 3000, t]</code>.</li>
</ul>
<p>It is <strong>guaranteed</strong> that every call to <code>ping</code> uses a strictly larger value of <code>t</code> than the previous call.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[<span class="string">&quot;RecentCounter&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;ping&quot;</span>]</span><br><span class="line">[[], [1], [100], [3001], [3002]]</span><br><span class="line">Output</span><br><span class="line">[null, 1, 2, 3, 3]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">RecentCounter recentCounter = new RecentCounter();</span><br><span class="line">recentCounter.ping(1);     // requests = [1], range is [-2999,1], <span class="built_in">return</span> 1</span><br><span class="line">recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], <span class="built_in">return</span> 2</span><br><span class="line">recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], <span class="built_in">return</span> 3</span><br><span class="line">recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], <span class="built_in">return</span> 3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; t &lt;&#x3D; 10<sup>9</sup></li>
<li>Each test case will call <code>ping</code> with <strong>strictly increasing</strong> values of <code>t</code>.</li>
<li>At most 10<sup>4</sup> calls will be made to <code>ping</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecentCounter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RecentCounter</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ping</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">front</span>() &lt; t - <span class="number">3000</span>) &#123;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push</span>(t);</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RecentCounter* obj = new RecentCounter();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;ping(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Queue</tag>
        <tag>Data Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>931. Minimum Falling Path Sum</title>
    <url>/2024/07/16/931-Minimum-Falling-Path-Sum/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/minimum-falling-path-sum/description/">931. Minimum Falling Path Sum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an <code>n x n</code> array of integers <code>matrix</code>, return the <strong>minimum sum</strong>  of any <strong>falling path</strong>  through <code>matrix</code>.</p>
<p>A <strong>falling path</strong>  starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left&#x2F;right. Specifically, the next element from position <code>(row, col)</code> will be <code>(row + 1, col - 1)</code>, <code>(row + 1, col)</code>, or <code>(row + 1, col + 1)</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/11/03/failing1-grid.jpg" style="width: 499px; height: 500px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]</span><br><span class="line">Output: 13</span><br><span class="line">Explanation: There are two falling paths with a minimum <span class="built_in">sum</span> as shown.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/11/03/failing2-grid.jpg" style="width: 164px; height: 365px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[-19,57],[-40,-5]]</span><br><span class="line">Output: -59</span><br><span class="line">Explanation: The falling path with a minimum <span class="built_in">sum</span> is shown.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == matrix.length == matrix[i].length</code></li>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minFallingPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MAX));</span><br><span class="line">        <span class="type">int</span> minVal = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = matrix[<span class="number">0</span>][i];</span><br><span class="line">            minVal = <span class="built_in">min</span>(minVal, dp[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            minVal = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> v1 = j ? dp[i - <span class="number">1</span>][j - <span class="number">1</span>] : INT_MAX;</span><br><span class="line">                <span class="type">int</span> v2 = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="type">int</span> v3 = j == n - <span class="number">1</span> ? INT_MAX : dp[i - <span class="number">1</span>][j + <span class="number">1</span>];</span><br><span class="line">                dp[i][j] = matrix[i][j] + <span class="built_in">min</span>(v1, <span class="built_in">min</span>(v2, v3));</span><br><span class="line">                minVal = <span class="built_in">min</span>(minVal, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>938. Range Sum of BST</title>
    <url>/2024/07/01/938-Range-Sum-of-BST/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/range-sum-of-bst/description/">938. Range Sum of BST</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> node of a binary search tree and two integers <code>low</code> and <code>high</code>, return the sum of values of all nodes with a value in the <strong>inclusive</strong>  range <code>[low, high]</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg" style="width: 400px; height: 222px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [10,5,15,3,7,null,18], low = 7, high = 15</span><br><span class="line">Output: 32</span><br><span class="line">Explanation: Nodes 7, 10, and 15 are <span class="keyword">in</span> the range [7, 15]. 7 + 10 + 15 = 32.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg" style="width: 400px; height: 335px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10</span><br><span class="line">Output: 23</span><br><span class="line">Explanation: Nodes 6, 7, and 10 are <span class="keyword">in</span> the range [6, 10]. 6 + 7 + 10 = 23.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 2 * 10^4]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 10^5</code></li>
<li><code>1 &lt;= low &lt;= high &lt;= 10^5</code></li>
<li>All <code>Node.val</code> are <strong>unique</strong> .</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rangeSumBST</span><span class="params">(TreeNode* root, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt;= low &amp;&amp; root-&gt;val &lt;= high) &#123;</span><br><span class="line">            res += root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; low) &#123;</span><br><span class="line">            <span class="built_in">rangeSumBST</span>(root-&gt;left, low, high);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &lt; high) &#123;</span><br><span class="line">            <span class="built_in">rangeSumBST</span>(root-&gt;right, low, high);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>95. Unique Binary Search Trees II</title>
    <url>/2023/08/27/95-Unique-Binary-Search-Trees-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/">95. Unique Binary Search Trees II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/dynamic-programming//">Dynamic Programming</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/backtracking//">Backtracking</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search-tree//">Binary Search Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given an integer <code>n</code>, return <em>all the structurally unique **BST’**s (binary search trees), which has exactly</em> <code>n</code> <em>nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>. Return the answer in <strong>any order</strong>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 8</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Draw the tree</li>
<li>Dynamic programming</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">generateTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;TreeNode*&gt;();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">generate</span>(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">generate</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        vector&lt;TreeNode*&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="literal">nullptr</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (low == high) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">TreeNode</span>(low));</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">            vector&lt;TreeNode*&gt; leftTrees = <span class="built_in">generate</span>(low, i - <span class="number">1</span>);</span><br><span class="line">            vector&lt;TreeNode*&gt; rightTrees = <span class="built_in">generate</span>(i + <span class="number">1</span>, high);</span><br><span class="line">            <span class="keyword">for</span> (TreeNode* leftTree : leftTrees) &#123;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode* rightTree : rightTrees) &#123;</span><br><span class="line">                    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(i);</span><br><span class="line">                    root-&gt;left = leftTree;</span><br><span class="line">                    root-&gt;right = rightTree;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>951. Flip Equivalent Binary Trees</title>
    <url>/2024/06/19/951-Flip-Equivalent-Binary-Trees/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/flip-equivalent-binary-trees/description/">951. Flip Equivalent Binary Trees</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>For a binary tree <strong>T</strong> , we can define a <strong>flip operation</strong>  as follows: choose any node, and swap the left and right child subtrees.</p>
<p>A binary tree <strong>X</strong> is flip equivalent to a binary tree <strong>Y</strong>  if and only if we can make <strong>X</strong>  equal to <strong>Y</strong>  after some number of flip operations.</p>
<p>Given the roots of two binary trees <code>root1</code> and <code>root2</code>, return <code>true</code> if the two trees are flip equivalent or <code>false</code> otherwise.</p>
<p><strong>Example 1:</strong><br><img alt="Flipped Trees Diagram" src="https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png" style="width: 500px; height: 220px;"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: We flipped at nodes with values 1, 3, and 5.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root1 = [], root2 = []</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root1 = [], root2 = [1]</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in each tree is in the range <code>[0, 100]</code>.</li>
<li>Each tree will have <strong>unique node values</strong>  in the range <code>[0, 99]</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">flipEquiv</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root1 || !root2) &#123;</span><br><span class="line">            <span class="keyword">return</span> root1 == root2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root1-&gt;val != root2-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">flipEquiv</span>(root1-&gt;left, root2-&gt;left) &amp;&amp;</span><br><span class="line">                <span class="built_in">flipEquiv</span>(root1-&gt;right, root2-&gt;right)) ||</span><br><span class="line">               (<span class="built_in">flipEquiv</span>(root1-&gt;left, root2-&gt;right) &amp;&amp;</span><br><span class="line">                <span class="built_in">flipEquiv</span>(root1-&gt;right, root2-&gt;left));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>953. Verifying an Alien Dictionary</title>
    <url>/2023/02/03/953-Verifying-an-Alien-Dictionary/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/verifying-an-alien-dictionary/">953. Verifying an Alien Dictionary</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/string/">String</a></p>
<p>In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different <code>order</code>. The <code>order</code> of the alphabet is some permutation of lowercase letters.</p>
<p>Given a sequence of <code>words</code> written in the alien language, and the <code>order</code> of the alphabet, return <code>true</code> if and only if the given <code>words</code> are sorted lexicographically in this alien language.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;leetcode&quot;</span>], order = <span class="string">&quot;hlabcdefgijkmnopqrstuvwxyz&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: As <span class="string">&#x27;h&#x27;</span> comes before <span class="string">&#x27;l&#x27;</span> <span class="keyword">in</span> this language, <span class="keyword">then</span> the sequence is sorted.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;word&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;row&quot;</span>], order = <span class="string">&quot;worldabcefghijkmnpqstuvxyz&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: As <span class="string">&#x27;d&#x27;</span> comes after <span class="string">&#x27;l&#x27;</span> <span class="keyword">in</span> this language, <span class="keyword">then</span> words[0] &gt; words[1], hence the sequence is unsorted.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: words = [<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;app&quot;</span>], order = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: The first three characters <span class="string">&quot;app&quot;</span> match, and the second string is shorter (<span class="keyword">in</span> size.) According to lexicographical rules <span class="string">&quot;apple&quot;</span> &gt; <span class="string">&quot;app&quot;</span>, because <span class="string">&#x27;l&#x27;</span> &gt; <span class="string">&#x27;∅&#x27;</span>, <span class="built_in">where</span> <span class="string">&#x27;∅&#x27;</span> is defined as the blank character <span class="built_in">which</span> is less than any other character (More info).</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= words.length &lt;= 100</code></li>
<li><code>1 &lt;= words[i].length &lt;= 20</code></li>
<li><code>order.length == 26</code></li>
<li>All characters in <code>words[i]</code> and <code>order</code> are English lowercase letters.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>use map to record the order</li>
<li>the best time complexity is O(n*m)</li>
<li>we don’t need to compare one word with all following words, just with the next word, since the order is transtive</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAlienSorted</span><span class="params">(vector&lt;string&gt;&amp; words, string order)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mapping;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; order.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c = order[i];</span><br><span class="line">            mapping[c - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; words.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; words[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= words[i + <span class="number">1</span>].<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (words[i][j] != words[i + <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    <span class="type">int</span> w1 = mapping[words[i][j] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                    <span class="type">int</span> w2 = mapping[words[i + <span class="number">1</span>][j] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span> (w1 &gt; w2) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>958. Check Completeness of a Binary Tree</title>
    <url>/2024/07/08/958-Check-Completeness-of-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/check-completeness-of-a-binary-tree/description/">958. Check Completeness of a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, determine if it is a complete binary tree.</p>
<p>In a <strong><a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank">complete binary tree</a></strong> , every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between <code>1</code> and <code>2^h</code> nodes inclusive at the last level <code>h</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-1.png" style="width: 180px; height: 145px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: Every level before the last is full (ie. levels with node-values &#123;1&#125; and &#123;2, 3&#125;), and all nodes <span class="keyword">in</span> the last level (&#123;4, 5, 6&#125;) are as far left as possible.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-2.png" style="width: 200px; height: 145px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,null,7]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: The node with value 7 isn<span class="string">&#x27;t as far left as possible.</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCompleteTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        <span class="keyword">if</span> (root)</span><br><span class="line">            q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">bool</span> end = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (!cur) &#123;</span><br><span class="line">                    end = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (end) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>96. Unique Binary Search Trees</title>
    <url>/2023/08/27/96-Unique-Binary-Search-Trees/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/unique-binary-search-trees/">96. Unique Binary Search Trees</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/math//">Math</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/dynamic-programming//">Dynamic Programming</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search-tree//">Binary Search Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given an integer <code>n</code>, return <em>the number of structurally unique **BST’**s (binary search trees) which has exactly</em> <code>n</code> <em>nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 19</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Draw the tree</li>
<li>Dynamic programming</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; memo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        memo = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (memo[low][high] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[low][high];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="built_in">count</span>(low, i - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> right = <span class="built_in">count</span>(i + <span class="number">1</span>, high);</span><br><span class="line">            sum += left * right;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[low][high] = sum;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>968. Binary Tree Cameras</title>
    <url>/2024/07/05/968-Binary-Tree-Cameras/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/binary-tree-cameras/description/">968. Binary Tree Cameras</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given the <code>root</code> of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.</p>
<p>Return the minimum number of cameras needed to monitor all nodes of the tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_01.png" style="width: 138px; height: 163px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,0,null,0,0]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: One camera is enough to monitor all nodes <span class="keyword">if</span> placed as shown.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_02.png" style="width: 139px; height: 312px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,0,null,0,null,0,null,null,0]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>
<li><code>Node.val == 0</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCameraCover</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">setCamera</span>(root, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the meaning of the return value:</span></span><br><span class="line">    <span class="comment">// 1. -1: the node doesn&#x27;t exist, i.e. nullptr</span></span><br><span class="line">    <span class="comment">// 2. 0: the node is leaf</span></span><br><span class="line">    <span class="comment">// 3. 1: the node has one camera</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">setCamera</span><span class="params">(TreeNode* root, <span class="type">bool</span> hasParent, <span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">setCamera</span>(root-&gt;left, <span class="literal">true</span>, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">setCamera</span>(root-&gt;right, <span class="literal">true</span>, depth + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">-1</span> &amp;&amp; r == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasParent) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">0</span> || r == <span class="number">0</span>) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the above conditions have ensured that there&#x27;s</span></span><br><span class="line">        <span class="comment">// at least one 1 in l and r</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// if (l == 1 || r == 1) &#123;</span></span><br><span class="line">        <span class="comment">//     return -1;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>971. Flip Binary Tree To Match Preorder Traversal</title>
    <url>/2024/05/24/971-Flip-Binary-Tree-To-Match-Preorder-Traversal/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal/description/">971. Flip Binary Tree To Match Preorder Traversal</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes, where each node is uniquely assigned a value from <code>1</code> to <code>n</code>. You are also given a sequence of <code>n</code> values <code>voyage</code>, which is the <strong>desired</strong>  <a href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order" target="_blank"><strong>pre-order traversal</strong> </a> of the binary tree.</p>
<p>Any node in the binary tree can be <strong>flipped</strong>  by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:</p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/02/15/fliptree.jpg" style="width: 400px; height: 187px;">

<p>Flip the <strong>smallest</strong>  number of nodes so that the <strong>pre-order traversal</strong>  of the tree <strong>matches</strong>  <code>voyage</code>.</p>
<p>Return a list of the values of all <strong>flipped</strong>  nodes. You may return the answer in <strong>any order</strong> . If it is <strong>impossible</strong>  to flip the nodes in the tree to make the pre-order traversal match <code>voyage</code>, return the list <code>[-1]</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/02/1219-01.png" style="width: 150px; height: 205px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2], voyage = [2,1]</span><br><span class="line">Output: [-1]</span><br><span class="line">Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/02/1219-02.png" style="width: 150px; height: 142px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3], voyage = [1,3,2]</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/02/1219-02.png" style="width: 150px; height: 142px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3], voyage = [1,2,3]</span><br><span class="line">Output: []</span><br><span class="line">Explanation: The tree<span class="string">&#x27;s pre-order traversal already matches voyage, so no nodes need to be flipped.</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is <code>n</code>.</li>
<li><code>n == voyage.length</code></li>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>1 &lt;= Node.val, voyage[i] &lt;= n</code></li>
<li>All the values in the tree are <strong>unique</strong> .</li>
<li>All the values in <code>voyage</code> are <strong>unique</strong> .</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="type">bool</span> possible = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">flipMatchVoyage</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; voyage)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">flip</span>(root, voyage);</span><br><span class="line">        <span class="keyword">if</span> (!possible) &#123;</span><br><span class="line">            res = &#123;<span class="number">-1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">flip</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; voyage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root || index == voyage.<span class="built_in">size</span>() || !possible) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val != voyage[index]) &#123;</span><br><span class="line">            possible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left &amp;&amp; voyage[index] != root-&gt;left-&gt;val) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">            TreeNode* tmp = root-&gt;left;</span><br><span class="line">            root-&gt;left = root-&gt;right;</span><br><span class="line">            root-&gt;right = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">flip</span>(root-&gt;left, voyage);</span><br><span class="line">        <span class="built_in">flip</span>(root-&gt;right, voyage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>974. Subarray Sums Divisible by K</title>
    <url>/2023/01/19/974-Subarray-Sums-Divisible-by-K/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/subarray-sums-divisible-by-k/">974. Subarray Sums Divisible by K</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/prefix-sum/">Prefix Sum</a></p>
<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the number of non-empty <strong>subarrays</strong> that have a sum divisible by</em> <code>k</code>.</p>
<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,5,0,-2,-3,1], k = 5</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: There are 7 subarrays with a <span class="built_in">sum</span> divisible by k = 5:</span><br><span class="line">[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [5], k = 9</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10<sup>4</sup></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li>2 &lt;&#x3D; k &lt;&#x3D; 10<sup>4</sup></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>preSum and mod</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subarraysDivByK</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSumMod</span><span class="params">(k, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, preSum = <span class="number">0</span>;</span><br><span class="line">        preSumMod[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            preSum = (num % k + k + preSum) % k;</span><br><span class="line">            res += preSumMod[preSum];</span><br><span class="line">            preSumMod[preSum]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>976C. Nested Segments</title>
    <url>/2024/06/19/976C-Nested-Segments/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/976/C">C. Nested Segments</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 n(1≤n≤3e5) 和 n 个闭区间，区间的左右端点在 [1,1e9] 内。</p>
<p>从这 n 个区间中，选出两个区间 [L[i], R[i]] 和 [L[j], R[j]]，<br>满足 i ≠ j 且 L[j] &lt;&#x3D; L[i] &lt;&#x3D; R[i] &lt;&#x3D; R[j]，也就是区间 j 包含区间 i。</p>
<p>输出 i 和 j（按照输入的顺序，下标从 1 开始）。<br>如果不存在这样的区间，输出两个 -1。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>sorting</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; pairs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> cmp = [](vector&lt;<span class="type">int</span>&gt;&amp; lhs, vector&lt;<span class="type">int</span>&gt;&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lhs[<span class="number">0</span>] == rhs[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> lhs[<span class="number">1</span>] &gt; rhs[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lhs[<span class="number">0</span>] &lt; rhs[<span class="number">0</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">sort</span>(pairs.<span class="built_in">begin</span>(), pairs.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="type">int</span> pre = <span class="number">-1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pairs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> p = pairs[i];</span><br><span class="line">        <span class="keyword">if</span> (p[<span class="number">1</span>] &lt;= r) &#123;</span><br><span class="line">            out &lt;&lt; p[<span class="number">2</span>] + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;  pre + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre = p[<span class="number">2</span>];</span><br><span class="line">            r = p[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    in &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; pairs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        in &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        pairs.<span class="built_in">push_back</span>(&#123;l, r, i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>(pairs);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
        <tag>implementation</tag>
        <tag>sortings</tag>
      </tags>
  </entry>
  <entry>
    <title>977. Squares of a Sorted Array</title>
    <url>/2023/11/11/977-Squares-of-a-Sorted-Array/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">977. Squares of a Sorted Array</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/two-pointers//">Two Pointers</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/sorting//">Sorting</a></p>
<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing</strong> order, return <em>an array of <strong>the squares of each number</strong> sorted in non-decreasing order</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-4,-1,0,3,10]</span><br><span class="line">Output: [0,1,9,16,100]</span><br><span class="line">Explanation: After squaring, the array becomes [16,1,0,9,100].</span><br><span class="line">After sorting, it becomes [0,1,9,16,100].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: nums = [-7,-3,2,3,11]</span><br><span class="line">Output: [4,9,9,49,121]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><span>1 &lt;&#x3D; nums.length &lt;&#x3D;</span> 10<sup>4</sup></li>
<li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>
</ul>
<p><strong>Follow up:</strong> Squaring each element and sorting the new array is very trivial, could you find an <code>O(n)</code> solution using a different approach?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>two pointers, start and end of the array</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = nums.<span class="built_in">size</span>() - <span class="number">1</span>, idx = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(nums[i]) &lt; <span class="built_in">abs</span>(nums[j])) &#123;</span><br><span class="line">                res[idx--] = nums[j] * nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[idx--] = nums[i] * nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>979. Distribute Coins in Binary Tree</title>
    <url>/2024/07/05/979-Distribute-Coins-in-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/distribute-coins-in-binary-tree/description/">979. Distribute Coins in Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes where each <code>node</code> in the tree has <code>node.val</code> coins. There are <code>n</code> coins in total throughout the whole tree.</p>
<p>In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.</p>
<p>Return the <strong>minimum</strong> number of moves required to make every node have <strong>exactly</strong> one coin.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/18/tree1.png" style="width: 250px; height: 236px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,0,0]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/18/tree2.png" style="width: 250px; height: 236px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,3,0]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is <code>n</code>.</li>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>0 &lt;= Node.val &lt;= n</code></li>
<li>The sum of all <code>Node.val</code> is <code>n</code>.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">distributeCoins</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rem = l + r + root-&gt;val - <span class="number">1</span>;</span><br><span class="line">        ans += <span class="built_in">abs</span>(rem);</span><br><span class="line">        <span class="keyword">return</span> rem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>98. Validate Binary Search Tree</title>
    <url>/2023/08/26/98-Validate-Binary-Search-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/validate-binary-search-tree/">98. Validate Binary Search Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/tree//">Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/depth-first-search//">Depth-First Search</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-search-tree//">Binary Search Tree</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/binary-tree//">Binary Tree</a></p>
<p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p>
<p>A <strong>valid BST</strong> is defined as follows:</p>
<ul>
<li>The left<span data-keyword="subtree" datakeyword="subtree" class=" cursor-pointer relative text-dark-blue-s text-sm"> subtree </span>of a node contains only nodes with keys <strong>less than</strong> the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,3]</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,1,4,null,null,3,6]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: The root node<span class="string">&#x27;s value is 5 but its right child&#x27;</span>s value is 4.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [1, 10<sup>4</sup>].</li>
<li>-2<sup>31</sup> &lt;&#x3D; Node.val &lt;&#x3D; 2<sup>31</sup> - 1</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>We need max&#x2F;min node to decide if one node is valid</li>
<li>Because the val is between MIN_INT and MAX_INT, so use a nullptr node is better</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root, TreeNode* min, TreeNode* max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (min &amp;&amp; root-&gt;val &lt;= min-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (max &amp;&amp; root-&gt;val &gt;= max-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root-&gt;left, min, root)</span><br><span class="line">            &amp;&amp; <span class="built_in">isValidBST</span>(root-&gt;right, root, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>985C. Liebig&#39;s Barrels</title>
    <url>/2024/06/06/985C-Liebig-s-Barrels/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/985/C">C. Liebig’s Barrels</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入 n k(1≤n,k≤1e5 且 1≤n<em>k≤1e5) L(0≤L≤1e9) 和长为 n</em>k 的数组 a(1≤a[i]≤1e9)，表示 n*k 条木板的长度。</p>
<p>你要制作 n 个木桶，每个木桶需要 k 条木板。<br>你可以使用任意 k 条木板来组装一个木桶，每条木板必须恰好属于一个木桶。<br>一个木桶的体积，等于其最短木板的长度。</p>
<p>要求：任意一对木桶的体积差都不能超过 L。<br>输出所有木桶体积和的最大值。<br>如果无法满足，输出 0。</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Math</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> l, vector&lt;<span class="type">int</span>&gt;&amp; lengths)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(lengths.<span class="built_in">begin</span>(), lengths.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> minLength = lengths[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> target = minLength + l;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = n * k;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (lengths[mid] == target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lengths[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; n) &#123;</span><br><span class="line">        out &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        x = (left - n + k - <span class="number">2</span>) / (k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; x * k; i += k) &#123;</span><br><span class="line">        res += lengths[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = left - n + x; i &lt; left; i++) &#123;</span><br><span class="line">        res += lengths[i];</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k, l;</span><br><span class="line">    in &gt;&gt; n &gt;&gt; k &gt;&gt; l;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; lengths;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= n * k; t++) &#123;</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        in &gt;&gt; length;</span><br><span class="line">        lengths.<span class="built_in">push_back</span>(length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>(n, k, l, lengths);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>987. Vertical Order Traversal of a Binary Tree</title>
    <url>/2024/05/24/987-Vertical-Order-Traversal-of-a-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/description/">987. Vertical Order Traversal of a Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree, calculate the <strong>vertical order traversal</strong>  of the binary tree.</p>
<p>For each node at position <code>(row, col)</code>, its left and right children will be at positions <code>(row + 1, col - 1)</code> and <code>(row + 1, col + 1)</code> respectively. The root of the tree is at <code>(0, 0)</code>.</p>
<p>The <strong>vertical order traversal</strong>  of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.</p>
<p>Return the <strong>vertical order traversal</strong>  of the binary tree.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg" style="width: 431px; height: 304px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: [[9],[3,15],[20],[7]]</span><br><span class="line">Explanation:</span><br><span class="line">Column -1: Only node 9 is <span class="keyword">in</span> this column.</span><br><span class="line">Column 0: Nodes 3 and 15 are <span class="keyword">in</span> this column <span class="keyword">in</span> that order from top to bottom.</span><br><span class="line">Column 1: Only node 20 is <span class="keyword">in</span> this column.</span><br><span class="line">Column 2: Only node 7 is <span class="keyword">in</span> this column.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg" style="width: 512px; height: 304px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6,7]</span><br><span class="line">Output: [[4],[2],[1,5,6],[3],[7]]</span><br><span class="line">Explanation:</span><br><span class="line">Column -2: Only node 4 is <span class="keyword">in</span> this column.</span><br><span class="line">Column -1: Only node 2 is <span class="keyword">in</span> this column.</span><br><span class="line">Column 0: Nodes 1, 5, and 6 are <span class="keyword">in</span> this column.</span><br><span class="line">          1 is at the top, so it comes first.</span><br><span class="line">          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.</span><br><span class="line">Column 1: Only node 3 is <span class="keyword">in</span> this column.</span><br><span class="line">Column 2: Only node 7 is <span class="keyword">in</span> this column.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg" style="width: 512px; height: 304px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,6,5,7]</span><br><span class="line">Output: [[4],[2],[1,5,6],[3],[7]]</span><br><span class="line">Explanation:</span><br><span class="line">This <span class="keyword">case</span> is the exact same as example 2, but with nodes 5 and 6 swapped.</span><br><span class="line">Note that the solution remains the same since 5 and 6 are <span class="keyword">in</span> the same location and should be ordered by their values.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>priority queue</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">verticalTraversal</span>(TreeNode* root) &#123;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;</span><br><span class="line">            pq;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="number">0</span>, <span class="number">0</span>, pq);</span><br><span class="line">        <span class="type">int</span> prev = INT_MIN;</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> tri = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> index = tri[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> level = tri[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> val = tri[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (prev != index) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;val&#125;);</span><br><span class="line">                prev = index;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[res.<span class="built_in">size</span>() - <span class="number">1</span>].<span class="built_in">push_back</span>(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, <span class="type">int</span> index, <span class="type">int</span> level,</span></span></span><br><span class="line"><span class="params"><span class="function">                  priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 greater&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt;&amp; pq)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pq.<span class="built_in">push</span>(&#123;index, level, root-&gt;val&#125;);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, index - <span class="number">1</span>, level + <span class="number">1</span>, pq);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, index + <span class="number">1</span>, level + <span class="number">1</span>, pq);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>988. Smallest String Starting From Leaf</title>
    <url>/2024/04/03/988-Smallest-String-Starting-From-Leaf/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/smallest-string-starting-from-leaf/description/">988. Smallest String Starting From Leaf</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given the <code>root</code> of a binary tree where each node has a value in the range <code>[0, 25]</code> representing the letters <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>.</p>
<p>Return the <strong>lexicographically smallest</strong>  string that starts at a leaf of this tree and ends at the root.</p>
<p>As a reminder, any shorter prefix of a string is <strong>lexicographically smaller</strong> .</p>
<ul>
<li>For example, <code>&quot;ab&quot;</code> is lexicographically smaller than <code>&quot;aba&quot;</code>.</li>
</ul>
<p>A leaf of a node is a node that has no children.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/30/tree1.png" style="width: 534px; height: 358px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [0,1,2,3,4,3,4]</span><br><span class="line">Output: <span class="string">&quot;dba&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/30/tree2.png" style="width: 534px; height: 358px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [25,1,3,1,3,0,2]</span><br><span class="line">Output: <span class="string">&quot;adz&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/02/01/tree3.png" style="height: 490px; width: 468px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [2,2,1,null,1,0,null,0]</span><br><span class="line">Output: <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 8500]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 25</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>traverse the tree</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string res;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">smallestFromLeaf</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root, string cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = <span class="built_in">char</span>(root-&gt;val + <span class="string">&#x27;a&#x27;</span>) + cur;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="string">&quot;&quot;</span> || res &gt; cur) &#123;</span><br><span class="line">                res = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) <span class="built_in">traverse</span>(root-&gt;left, cur);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) <span class="built_in">traverse</span>(root-&gt;right, cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>99. Recover Binary Search Tree</title>
    <url>/2024/07/13/99-Recover-Binary-Search-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/recover-binary-search-tree/description/">99. Recover Binary Search Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given the <code>root</code> of a binary search tree (BST), where the values of <strong>exactly</strong> two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg" style="width: 422px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,null,null,2]</span><br><span class="line">Output: [3,1,null,null,2]</span><br><span class="line">Explanation: 3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg" style="width: 581px; height: 302px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [3,1,4,null,null,2]</span><br><span class="line">Output: [2,1,4,null,null,3]</span><br><span class="line">Explanation: 2 cannot be <span class="keyword">in</span> the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[2, 1000]</code>.</li>
<li><code>-2^31 &lt;= Node.val &lt;= 2^31 - 1</code></li>
</ul>
<p><strong>Follow up:</strong>  A solution using <code>O(n)</code> space is pretty straight-forward. Could you devise a constant <code>O(1)</code> space solution?</p>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>first offending value and last offending value</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* first = <span class="literal">nullptr</span>;</span><br><span class="line">    TreeNode* second = <span class="literal">nullptr</span>;</span><br><span class="line">    TreeNode* prev;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="type">int</span> tmp = first-&gt;val;</span><br><span class="line">        first-&gt;val = second-&gt;val;</span><br><span class="line">        second-&gt;val = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prev-&gt;val &gt; root-&gt;val) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">                    first = prev;</span><br><span class="line">                &#125;</span><br><span class="line">                second = root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = root;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>990. Satisfiability of Equality Equations</title>
    <url>/2023/09/03/990-Satisfiability-of-Equality-Equations/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/satisfiability-of-equality-equations/">990. Satisfiability of Equality Equations</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Medium</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/https://leetcode.com/tag/array//">Array</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/string//">String</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/union-find//">Union Find</a>, <a href="https://leetcode.com/tag/https://leetcode.com/tag/graph//">Graph</a></p>
<p>You are given an array of strings <code>equations</code> that represent relationships between variables where each string <code>equations[i]</code> is of length <code>4</code> and takes one of two different forms: “x<sub>i</sub>&#x3D;&#x3D;y<sub>i</sub>“ or “x<sub>i</sub>!&#x3D;y<sub>i</sub>“.Here, x<sub>i</sub> and y<sub>i</sub> are lowercase letters (not necessarily different) that represent one-letter variable names.</p>
<p>Return <code>true</code> <em>if it is possible to assign integers to variable names so as to satisfy all the given equations, or</em> <code>false</code> <em>otherwise</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: equations = [<span class="string">&quot;a==b&quot;</span>,<span class="string">&quot;b!=a&quot;</span>]</span><br><span class="line">Output: <span class="literal">false</span></span><br><span class="line">Explanation: If we assign say, a = 1 and b = 1, <span class="keyword">then</span> the first equation is satisfied, but not the second.</span><br><span class="line">There is no way to assign the variables to satisfy both equations.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: equations = [<span class="string">&quot;b==a&quot;</span>,<span class="string">&quot;a==b&quot;</span>]</span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Explanation: We could assign a = 1 and b = 1 to satisfy both equations.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= equations.length &lt;= 500</code></li>
<li><code>equations[i].length == 4</code></li>
<li><code>equations[i][0]</code> is a lowercase letter.</li>
<li><code>equations[i][1]</code> is either <code>&#39;=&#39;</code> or <code>&#39;!&#39;</code>.</li>
<li><code>equations[i][2]</code> is <code>&#39;=&#39;</code>.</li>
<li><code>equations[i][3]</code> is a lowercase letter.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>Union find</li>
<li>Handle the equation first, make the letters connected(have the same root)</li>
<li>Check the inequality next</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">equationsPossible</span><span class="params">(vector&lt;string&gt;&amp; equations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            parent.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (string equation : equations) &#123;</span><br><span class="line">            <span class="keyword">if</span> (equation[<span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> left = equation[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> right = equation[<span class="number">3</span>] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> rootLeft = <span class="built_in">find</span>(left);</span><br><span class="line">                <span class="type">int</span> rootRight = <span class="built_in">find</span>(right);</span><br><span class="line">                <span class="keyword">if</span> (rootLeft != rootRight) &#123;</span><br><span class="line">                    parent[rootLeft] = rootRight;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (string equation : equations) &#123;</span><br><span class="line">            <span class="keyword">if</span> (equation[<span class="number">1</span>] == <span class="string">&#x27;!&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> left = equation[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> right = equation[<span class="number">3</span>] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="type">int</span> rootLeft = <span class="built_in">find</span>(left);</span><br><span class="line">                <span class="type">int</span> rootRight = <span class="built_in">find</span>(right);</span><br><span class="line">                <span class="keyword">if</span> (rootLeft == rootRight) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[node] != node) &#123;</span><br><span class="line">            parent[node] = <span class="built_in">find</span>(parent[node]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[node];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>String</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>993. Cousins in Binary Tree</title>
    <url>/2024/05/24/993-Cousins-in-Binary-Tree/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/cousins-in-binary-tree/description/">993. Cousins in Binary Tree</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the <code>root</code> of a binary tree with unique values and the values of two different nodes of the tree <code>x</code> and <code>y</code>, return <code>true</code> if the nodes corresponding to the values <code>x</code> and <code>y</code> in the tree are <strong>cousins</strong> , or <code>false</code> otherwise.</p>
<p>Two nodes of a binary tree are <strong>cousins</strong>  if they have the same depth with different parents.</p>
<p>Note that in a binary tree, the root node is at the depth <code>0</code>, and children of each depth <code>k</code> node are at the depth <code>k + 1</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/02/12/q1248-01.png" style="width: 304px; height: 270px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4], x = 4, y = 3</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/02/12/q1248-02.png" style="width: 334px; height: 266px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,null,4,null,5], x = 5, y = 4</span><br><span class="line">Output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2019/02/13/q1248-03.png" style="width: 267px; height: 258px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,null,4], x = 2, y = 3</span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[2, 100]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 100</code></li>
<li>Each node has a <strong>unique</strong>  value.</li>
<li><code>x != y</code></li>
<li><code>x</code> and <code>y</code> are exist in the tree.</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x_;</span><br><span class="line">    <span class="type">int</span> y_;</span><br><span class="line">    <span class="type">int</span> depthX = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> depthY = <span class="number">-1</span>;</span><br><span class="line">    TreeNode* parentX;</span><br><span class="line">    TreeNode* parentY;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCousins</span><span class="params">(TreeNode* root, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x_ = x;</span><br><span class="line">        y_ = y;</span><br><span class="line">        <span class="built_in">dfs</span>(root, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">return</span> depthX == depthY &amp;&amp; parentX != parentY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="type">int</span> depth, TreeNode* parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (depthX != <span class="number">-1</span> &amp;&amp; depthY != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == x_) &#123;</span><br><span class="line">            depthX = depth;</span><br><span class="line">            parentX = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == y_) &#123;</span><br><span class="line">            depthY = depth;</span><br><span class="line">            parentY = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;left, depth + <span class="number">1</span>, root);</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;right, depth + <span class="number">1</span>, root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>997. Find the Town Judge</title>
    <url>/2023/01/23/997-Find-the-Town-Judge/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/find-the-town-judge/">1039. Find the Town Judge</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Difficulty: <strong>Easy</strong></p>
<p>Related Topics: <a href="https://leetcode.com/tag/array/">Array</a>, <a href="https://leetcode.com/tag/hash-table/">Hash Table</a>, <a href="https://leetcode.com/tag/graph/">Graph</a></p>
<p>In a town, there are <code>n</code> people labeled from <code>1</code> to <code>n</code>. There is a rumor that one of these people is secretly the town judge.</p>
<p>If the town judge exists, then:</p>
<ol>
<li>The town judge trusts nobody.</li>
<li>Everybody (except for the town judge) trusts the town judge.</li>
<li>There is exactly one person that satisfies properties <strong>1</strong> and <strong>2</strong>.</li>
</ol>
<p>You are given an array <code>trust</code> where trust[i] &#x3D; [a<sub>i</sub>, b<sub>i</sub>] representing that the person labeled a<sub>i</sub> trusts the person labeled b<sub>i</sub>.</p>
<p>Return <em>the label of the town judge if the town judge exists and can be identified, or return</em> <code>-1</code> <em>otherwise</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: n = 2, trust = [[1,2]]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: n = 3, trust = [[1,3],[2,3]]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Input: n = 3, trust = [[1,3],[2,3],[3,1]]</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 1000</code></li>
<li>0 &lt;&#x3D; trust.length &lt;&#x3D; 10<sup>4</sup></li>
<li><code>trust[i].length == 2</code></li>
<li>All the pairs of <code>trust</code> are <strong>unique</strong>.</li>
<li>a<sub>i</sub> !&#x3D; b<sub>i</sub></li>
<li>1 &lt;&#x3D; a<sub>i</sub>, b<sub>i</sub> &lt;&#x3D; n</li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>if the number of pairs is less than n - 1, then we cannot identify the judge</li>
<li>use in&#x2F;out vector to mark the trust relationship</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findJudge</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; trusts)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (trusts.<span class="built_in">size</span>() &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">in_trust</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">out_trust</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt; t : trusts) &#123;</span><br><span class="line">            in_trust[t[<span class="number">1</span>]]++;</span><br><span class="line">            out_trust[t[<span class="number">0</span>]] = t[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_trust[i] == n - <span class="number">1</span> &amp;&amp; out_trust[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>998. Maximum Binary Tree II</title>
    <url>/2024/06/07/998-Maximum-Binary-Tree-II/</url>
    <content><![CDATA[<p><a href="https://leetcode.com/problems/maximum-binary-tree-ii/description/">998. Maximum Binary Tree II</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A <strong>maximum tree</strong>  is a tree where every node has a value greater than any other value in its subtree.</p>
<p>You are given the <code>root</code> of a maximum binary tree and an integer <code>val</code>.</p>
<p>Just as in the <a href="https://leetcode.com/problems/maximum-binary-tree/" target="_blank">previous problem</a>, the given tree was constructed from a list <code>a</code> (<code>root = Construct(a)</code>) recursively with the following <code>Construct(a)</code> routine:</p>
<ul>
<li>If <code>a</code> is empty, return <code>null</code>.</li>
<li>Otherwise, let <code>a[i]</code> be the largest element of <code>a</code>. Create a <code>root</code> node with the value <code>a[i]</code>.</li>
<li>The left child of <code>root</code> will be <code>Construct([a[0], a[1], ..., a[i - 1]])</code>.</li>
<li>The right child of <code>root</code> will be <code>Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])</code>.</li>
<li>Return <code>root</code>.</li>
</ul>
<p>Note that we were not given <code>a</code> directly, only a root node <code>root = Construct(a)</code>.</p>
<p>Suppose <code>b</code> is a copy of <code>a</code> with the value <code>val</code> appended to it. It is guaranteed that <code>b</code> has unique values.</p>
<p>Return <code>Construct(b)</code>.</p>
<p><strong>Example 1:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/08/09/maxtree1.JPG" style="width: 376px; height: 235px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [4,1,3,null,null,2], val = 5</span><br><span class="line">Output: [5,4,null,1,3,null,null,2]</span><br><span class="line">Explanation: a = [1,4,2,3], b = [1,4,2,3,5]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/08/09/maxtree21.JPG" style="width: 358px; height: 156px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,2,4,null,1], val = 3</span><br><span class="line">Output: [5,2,4,null,1,null,3]</span><br><span class="line">Explanation: a = [2,1,5,4], b = [2,1,5,4,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<img alt="" src="https://assets.leetcode.com/uploads/2021/08/09/maxtree3.JPG" style="width: 404px; height: 180px;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Input: root = [5,2,3,null,1], val = 4</span><br><span class="line">Output: [5,2,4,null,1,3]</span><br><span class="line">Explanation: a = [2,1,5,3], b = [2,1,5,3,4]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 100</code></li>
<li>All the values of the tree are <strong>unique</strong> .</li>
<li><code>1 &lt;= val &lt;= 100</code></li>
</ul>
<h2 id="Hints-Notes"><a href="#Hints-Notes" class="headerlink" title="Hints&#x2F;Notes"></a>Hints&#x2F;Notes</h2><ul>
<li>N&#x2F;A</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>C++</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),</span></span><br><span class="line"><span class="comment"> * right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">insertIntoMaxTree</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &lt; val) &#123;</span><br><span class="line">            TreeNode* newRoot = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">            newRoot-&gt;left = root;</span><br><span class="line">            <span class="keyword">return</span> newRoot;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root-&gt;right = <span class="built_in">insertIntoMaxTree</span>(root-&gt;right, val);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Budget &amp; Expense</title>
    <url>/2022/11/20/Budget&amp;Expense/</url>
    <content><![CDATA[<h2 id="The-accounting-process"><a href="#The-accounting-process" class="headerlink" title="The accounting process"></a>The accounting process</h2><h3 id="When"><a href="#When" class="headerlink" title="When"></a>When</h3><p>Use the first and second week to submit reimbursements, do the bookkeeping on the second week’s Thursday afternoon, next time: 2023&#x2F;08&#x2F;10</p>
<h3 id="The-steps-to-make-monthly-record"><a href="#The-steps-to-make-monthly-record" class="headerlink" title="The steps to make monthly record"></a>The steps to make monthly record</h3><h4 id="Excel-processing"><a href="#Excel-processing" class="headerlink" title="Excel processing"></a>Excel processing</h4><ol>
<li>Dump the record from Mint to nyuzyt&#x2F;Personal file&#x2F;Transactions cvs file</li>
<li>Insert a line in overall sheet prior to the previous record, then <code>insert the copied cells</code></li>
<li>Copy the cvs tables content, without the header</li>
<li>Create a new sheet for this month alone</li>
<li>Copy from one previous month’s sheet(all the way to comments), paste the column width</li>
<li>Copy the records to this month’s sheet</li>
<li>Remove the Credit Card Payments</li>
<li>Remove the Loan accounts</li>
<li>Filter the records by account first</li>
<li>Check each account, modify the category and mark the transactions as verified</li>
<li>Copy the reverse ~ Balance columns from one previous month’s table</li>
<li>List single item takes more than $10,000</li>
</ol>
<h4 id="Web-update"><a href="#Web-update" class="headerlink" title="Web update"></a>Web update</h4><ol>
<li><p>Generate the new hexo post with <code>hexo new post &quot;Bookkeeping - XXXX/XX&quot;</code></p>
</li>
<li><p>Copy all content from the post for previous month, git add now(so we know what changed)</p>
</li>
<li><p>Commit the change with title <code>Add bookkeeping for YYYY/MM</code></p>
</li>
<li><p>Go to the <a href="https://tabletomarkdown.com/convert-spreadsheet-to-markdown/">Table to Markdown</a> website to transform excel tables to markdown tables</p>
</li>
<li><p>Remove the zeroes from sum column</p>
</li>
<li><p>Open the same file to the right window, make it narrow</p>
</li>
<li><p>Add new value to and remove old value from the multi layer pie chart for spending and income</p>
</li>
<li><p>Ask chatgpt to generate the detailed category data</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">对</span><br><span class="line">spending table</span><br><span class="line">取每一行第一个值和第二个值，生成类似</span><br><span class="line">&#123;value:251.69, name:<span class="string">&#x27;Restaurants&#x27;</span>&#125;,</span><br><span class="line">&#123;value:73.15, name:<span class="string">&#x27;Cake &amp; Bread&#x27;</span>&#125;,</span><br><span class="line">的数据</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add new value to and remove old value from the trend</p>
</li>
</ol>
<h3 id="Transaction-catagories"><a href="#Transaction-catagories" class="headerlink" title="Transaction catagories"></a>Transaction catagories</h3><table>
<thead>
<tr>
<th>Category</th>
<th>Section</th>
</tr>
</thead>
<tbody><tr>
<td>Restaurants</td>
<td>Food</td>
</tr>
<tr>
<td>Cake &amp; Bread</td>
<td>Food</td>
</tr>
<tr>
<td>Bubble Tea</td>
<td>Food</td>
</tr>
<tr>
<td>Groceries</td>
<td>Food</td>
</tr>
<tr>
<td>Medical</td>
<td>Health</td>
</tr>
<tr>
<td>Dental</td>
<td>Health</td>
</tr>
<tr>
<td>Eyecare</td>
<td>Health</td>
</tr>
<tr>
<td>Pharmacy</td>
<td>Health</td>
</tr>
<tr>
<td>Clothing</td>
<td>Shopping</td>
</tr>
<tr>
<td>Hair &amp; Skin</td>
<td>Shopping</td>
</tr>
<tr>
<td>Home Improvement</td>
<td>Shopping</td>
</tr>
<tr>
<td>China Ecommerce</td>
<td>Shopping</td>
</tr>
<tr>
<td>Electronics</td>
<td>Shopping</td>
</tr>
<tr>
<td>Office</td>
<td>Shopping</td>
</tr>
<tr>
<td>Luxury</td>
<td>Shopping</td>
</tr>
<tr>
<td>Entertainment</td>
<td>Shopping</td>
</tr>
<tr>
<td>Electricity</td>
<td>Utilities</td>
</tr>
<tr>
<td>Gas</td>
<td>Utilities</td>
</tr>
<tr>
<td>Phone Bill</td>
<td>Utilities</td>
</tr>
<tr>
<td>VPN</td>
<td>Utilities</td>
</tr>
<tr>
<td>Legal</td>
<td>Utilities</td>
</tr>
<tr>
<td>Network</td>
<td>Utilities</td>
</tr>
<tr>
<td>Supply</td>
<td>Utilities</td>
</tr>
<tr>
<td>Television</td>
<td>Utilities</td>
</tr>
<tr>
<td>Auto</td>
<td>Utilities</td>
</tr>
<tr>
<td>Mortgage</td>
<td>Mortgage &amp; Rent</td>
</tr>
<tr>
<td>HOA</td>
<td>Mortgage &amp; Rent</td>
</tr>
<tr>
<td>Air</td>
<td>Travel</td>
</tr>
<tr>
<td>Ride Share&#x2F;Car Rental</td>
<td>Travel</td>
</tr>
<tr>
<td>Hotel</td>
<td>Travel</td>
</tr>
<tr>
<td>Ticket</td>
<td>Travel</td>
</tr>
<tr>
<td>Souvenir</td>
<td>Travel</td>
</tr>
<tr>
<td>Travel Misc</td>
<td>Travel</td>
</tr>
<tr>
<td>IRA</td>
<td>Investment</td>
</tr>
<tr>
<td>Stock</td>
<td>Investment</td>
</tr>
<tr>
<td>Cash &amp; ATM</td>
<td>Misc</td>
</tr>
<tr>
<td>Transfer</td>
<td>Income&#x2F;Misc</td>
</tr>
<tr>
<td>Shipping</td>
<td>Misc</td>
</tr>
<tr>
<td>Annual</td>
<td>Misc</td>
</tr>
<tr>
<td>Visa</td>
<td>Misc</td>
</tr>
<tr>
<td>Bank Fee</td>
<td>Misc</td>
</tr>
<tr>
<td>Paycheck</td>
<td>Income</td>
</tr>
<tr>
<td>Federal Tax</td>
<td>Income&#x2F;Misc</td>
</tr>
<tr>
<td>State Tax</td>
<td>Income&#x2F;Misc</td>
</tr>
<tr>
<td>Deposit</td>
<td>Income</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Finance</tag>
      </tags>
  </entry>
  <entry>
    <title>Career development</title>
    <url>/2022/12/23/Career-development/</url>
    <content><![CDATA[<h3 id="3-Career-Killers-for-Software-Engineers"><a href="#3-Career-Killers-for-Software-Engineers" class="headerlink" title="3 Career Killers for Software Engineers"></a>3 Career Killers for Software Engineers</h3><ol>
<li><p>Not thinking clearly about staying or leaving</p>
<ul>
<li>Considerations: 1. Manager 2. Pay</li>
<li>Sure, that hop could increase your compensation but you could be leaving a good team and moving to something worse.</li>
<li>If you’re in a bad environment, don’t believe promises but watch the management’s actions to see if they’re actually dealing with the root problem.</li>
<li>Ultimately, if you’re in a good spot, don’t throw it all away. You’ll only recognize your golden ages from hindsight.</li>
</ul>
</li>
<li><p>Preferring Output Over Impact</p>
<ul>
<li>Finding task that differentiate yourself.</li>
<li>Finding a meaningful refactor that prevents future bugs is better than routinely integrating package updates.<br> Great to have a nose for outsized impact.</li>
</ul>
</li>
<li><p>Get Your Money Right</p>
<p> Time in the market is better than timing in the market.</p>
</li>
</ol>
<p><a href="https://www.youtube.com/watch?v=uX719LQBLXw">LINK</a></p>
<h3 id="Three-Things-Preventing-Your-Promotion-to-Senior-Engineer"><a href="#Three-Things-Preventing-Your-Promotion-to-Senior-Engineer" class="headerlink" title="Three Things Preventing Your Promotion to Senior Engineer"></a>Three Things Preventing Your Promotion to Senior Engineer</h3><h4 id="Universal-Trait"><a href="#Universal-Trait" class="headerlink" title="Universal Trait"></a>Universal Trait</h4><ol>
<li><p>Technically deep and delivers</p>
</li>
<li><p>Rejects hyperbolic discounting</p>
</li>
<li><p>Expert time manager</p>
</li>
<li><p>By growing others nearby</p>
</li>
</ol>
<h4 id="Pitfall"><a href="#Pitfall" class="headerlink" title="Pitfall"></a>Pitfall</h4><ol>
<li><p>Over-indexes on delivery and tech depth</p>
</li>
<li><p>conflates leadership with management</p>
</li>
<li><p>Unsustainable time management</p>
</li>
</ol>
<p><a href="https://www.youtube.com/watch?v=4i5iFlP01mQ">LINK</a></p>
]]></content>
      <categories>
        <category>Excerpt</category>
      </categories>
      <tags>
        <tag>Career</tag>
      </tags>
  </entry>
  <entry>
    <title>How to become a SDM</title>
    <url>/2022/12/02/How-to-become-a-SDM/</url>
    <content><![CDATA[<h3 id="SDM-and-time-management"><a href="#SDM-and-time-management" class="headerlink" title="SDM and time management"></a>SDM and time management</h3><p>工作的本质是时间管理，任务优先级管理和目标管理。我们可以将具体工程实现抽象成上面一般概念，从而形成方法论：一件事到底怎么做就可以做成？能够做好manager，自己的生活也不会过得差，也大概率能管理好自己一生。其实对于技术出身尤其是很多 STEM 的PhD，都有非常好潜质去做一个好的manager，就是因为PhD不仅仅是学术技能的训练，关键也是怎么把事情做好的训练。</p>
<p>如果说Team Leader 不仅仅需要关注自己实际工作对于项目的推进，还需要指导和帮助下属设定和完成目标，那么好的manager就是后者工作方向上更进一步：在已经洞察工作方法论的基础上设定一个能够摸得着，但需要一定努力的，同时又能尽可能地体现出团队整体工作价值的目标。</p>
<p>在资源能够合理支持的情况，manager对于工作的态度永远都是“多多益善”。这也就是我们通常说的赋能（empower)。这些支持工作包括识别手下的人物性格特征（比方说充满才华，桀骜不驯），创造安定的工作环境（人事变动平稳可预期），工作目标分配得当（下面case A 就适合independent contributor先进行攻略），有效的监督和辅导（反馈的技巧）。</p>
<p><a href="https://www.zhihu.com/question/509427117/answer/2689826912">https://www.zhihu.com/question/509427117/answer/2689826912</a></p>
<h3 id="How-to-become-a-SDM"><a href="#How-to-become-a-SDM" class="headerlink" title="How to become a SDM"></a>How to become a SDM</h3><h4 id="首先确定自己为什么要当M。"><a href="#首先确定自己为什么要当M。" class="headerlink" title="首先确定自己为什么要当M。"></a>首先确定自己为什么要当M。</h4><p>这是非常重要的一步。M和IC是两种完全不同的工作。对于IC而言，每天的工作是比较清晰的：遇到问题解决问题，需要些code写code。基本上技术之外的事情可以不太管。</p>
<p>但对于M而言，你可能打交道最多的是“人”。具体的工作内容差不多是这样的：每个Q的工作计划和资源调配、工作产出的跟踪、跨部门沟通解决冲突矛盾、绩效评估、reorg等等</p>
<p>那么既然拿着一样的薪水，为什么要从IC到M呢？我自己的原因是这样的。我是比较Impact driven的。现在的软件工业是团队作战，那么如果要取得更大的成就，就需要团队的力量。我更喜欢的是带领一个团队去完成更大的事情，而不是自己一个人来解决小而精美的问题。所以其实理由还是比较简单直接的。</p>
<p>每个人的理由可能不同，但一定要明确理由。（后面FAQ我可以多说两句）</p>
<h4 id="找坑"><a href="#找坑" class="headerlink" title="找坑"></a>找坑</h4><p>每个公司的汇报线都是金字塔形的，也就是说M的位置比IC的数量肯定是要少一个数量级左右的。如果你想走这条路，肯定是要找到需要manager的地方。要么是这个地方快速发展，短期内需要招很多人，要么是这个地方正好有一个manager走了。</p>
<p>你以为这种情况下你就有机会了？其实不尽然，我们马上就能看到这个事儿的“二十二条军规”了：</p>
<ul>
<li>大部分公开招聘manager的场合，都要求候选人已经有management经验。</li>
<li>即使你有management能力，别人也不会轻易信任你，把团队交给你。</li>
</ul>
<p>简单的说就是，一个不靠谱的manager对团队的负面影响过大。大家都会谨慎谨慎再谨慎。所以这条路是很难走的</p>
<p>那怎么办？其实最好的方式就是：在一个你已经熟悉的团队里面，培养周围人对你的信任，并主动要求成为manager。（我也是走的这条路，会比较顺）</p>
<h4 id="坐稳"><a href="#坐稳" class="headerlink" title="坐稳"></a>坐稳</h4><p>前面说了如何变成一个manager，但实际情况是很多M在成为M后又后悔，返回到了IC的序列中。简单的说就是好的IC未必是好的M。我这里提几点吧：</p>
<ul>
<li>克制自己上手写代码的冲动。M通常会议较多，你下手通常只会拖累团队，不会带来啥正面的效果。</li>
<li>多花时间和人交流，而不是机器。M对付的是人，不仅仅是上+下，还有横向的合作。纵横交错的关系网才能让你的工作变得更顺畅。</li>
<li>遇事果断，该做就做，不管是reorg还是招人开人。犹豫是manager最需要避免的东西。</li>
</ul>
<p><a href="https://www.zhihu.com/question/509427117/answer/2692601966">https://www.zhihu.com/question/509427117/answer/2692601966</a></p>
]]></content>
      <categories>
        <category>Excerpt</category>
      </categories>
      <tags>
        <tag>Career</tag>
      </tags>
  </entry>
  <entry>
    <title>Designing Data-Intensive Applications</title>
    <url>/2023/01/05/Designing-Data-Intensive-Applications/</url>
    <content><![CDATA[<p><a href="https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications">Designing Data-Intensive Applications</a></p>
<ul>
<li><a href="#reliable-scalable-and-maintainable-applications">Reliable, scalable, and maintainable applications</a><ul>
<li><a href="#reliability">Reliability</a></li>
<li><a href="#scalability">Scalability</a></li>
<li><a href="#maintainability">Maintainability</a></li>
</ul>
</li>
<li><a href="#data-models-and-query-language">Data models and query language</a><ul>
<li><a href="#relational-model-vs-document-model">Relational model vs document model</a></li>
<li><a href="#query-languages-for-data">Query languages for data</a></li>
<li><a href="#graph-like-data-models">Graph-like data models</a></li>
</ul>
</li>
<li><a href="#storage-and-retrieval">Storage and retrieval</a><ul>
<li><a href="#data-structures-that-power-up-your-database">Data structures that power up your database</a></li>
<li><a href="#transaction-processing-or-analytics">Transaction processing or analytics?</a></li>
<li><a href="#column-oriented-storage">Column-oriented storage</a></li>
</ul>
</li>
<li><a href="#encoding-and-evolution">Encoding and evolution</a><ul>
<li><a href="#formats-for-encoding-data">Formats for encoding data</a></li>
<li><a href="#modes-of-dataflow">Modes of dataflow</a></li>
</ul>
</li>
<li><a href="#replication">Replication</a><ul>
<li><a href="#leaders-and-followers">Leaders and followers</a></li>
<li><a href="#problems-with-replication-lag">Problems with replication lag</a></li>
<li><a href="#multi-leader-replication">Multi-leader replication</a></li>
<li><a href="#leaderless-replication">Leaderless replication</a></li>
</ul>
</li>
<li><a href="#partitioning">Partitioning</a><ul>
<li><a href="#partitioning-and-replication">Partitioning and replication</a></li>
<li><a href="#partition-of-key-value-data">Partition of key-value data</a></li>
<li><a href="#partitioning-and-secondary-indexes">Partitioning and secondary indexes</a></li>
<li><a href="#rebalancing-partitions">Rebalancing partitions</a></li>
<li><a href="#request-routing">Request routing</a></li>
</ul>
</li>
<li><a href="#transactions">Transactions</a><ul>
<li><a href="#the-slippery-concept-of-a-transaction">The slippery concept of a transaction</a></li>
<li><a href="#weak-isolation-levels">Weak isolation levels</a></li>
<li><a href="#serializability">Serializability</a></li>
</ul>
</li>
<li><a href="#the-trouble-with-distributed-systems">The trouble with distributed systems</a><ul>
<li><a href="#faults-and-partial-failures">Faults and partial failures</a></li>
<li><a href="#unreliable-networks">Unreliable networks</a></li>
<li><a href="#unreliable-clocks">Unreliable clocks</a></li>
<li><a href="#knowledge-truth-and-lies">Knowledge, truth and lies</a></li>
</ul>
</li>
<li><a href="#consistency-and-consensus">Consistency and consensus</a><ul>
<li><a href="#consistency-guarantees">Consistency guarantees</a></li>
<li><a href="#linearizability">Linearizability</a></li>
<li><a href="#ordering-guarantees">Ordering guarantees</a></li>
<li><a href="#distributed-transactions-and-consensus">Distributed transactions and consensus</a></li>
</ul>
</li>
<li><a href="#batch-processing">Batch processing</a><ul>
<li><a href="#batch-processing-with-unix-tools">Batch processing with Unix tools</a></li>
<li><a href="#map-reduce-and-distributed-filesystems">Map reduce and distributed filesystems</a></li>
<li><a href="#beyond-mapreduce">Beyond MapReduce</a></li>
</ul>
</li>
<li><a href="#stream-processing">Stream processing</a><ul>
<li><a href="#transmitting-event-streams">Transmitting event streams</a></li>
<li><a href="#databases-and-streams">Databases and streams</a></li>
<li><a href="#processing-streams">Processing Streams</a></li>
</ul>
</li>
<li><a href="#the-future-of-data-systems">The future of data systems</a><ul>
<li><a href="#data-integration">Data integration</a></li>
<li><a href="#unbundling-databases">Unbundling databases</a></li>
<li><a href="#aiming-for-correctness">Aiming for correctness</a></li>
<li><a href="#doing-the-right-thing">Doing the right thing</a></li>
</ul>
</li>
</ul>
<h2 id="Reliable-scalable-and-maintainable-applications"><a href="#Reliable-scalable-and-maintainable-applications" class="headerlink" title="Reliable, scalable, and maintainable applications"></a>Reliable, scalable, and maintainable applications</h2><p>A data-intensive application is typically built from standard building blocks. They usually need to:</p>
<ul>
<li>Store data (<em>databases</em>)</li>
<li>Speed up reads (<em>caches</em>)</li>
<li>Search data (<em>search indexes</em>)</li>
<li>Send a message to another process asynchronously (<em>stream processing</em>)</li>
<li>Periodically crunch data (<em>batch processing</em>)</li>
</ul>
<p>3 concenrs that are important in most software systems:</p>
<ul>
<li><strong>Reliability</strong>. To work <em>correctly</em> even in the face of <em>adversity</em>.</li>
<li><strong>Scalability</strong>. Reasonable ways of dealing with growth.</li>
<li><strong>Maintainability</strong>. Be able to work on it <em>productively</em>.</li>
</ul>
<h3 id="Reliability"><a href="#Reliability" class="headerlink" title="Reliability"></a>Reliability</h3><p>Typical expectations:</p>
<ul>
<li>Application performs the function the user expected</li>
<li>Tolerate the user making mistakes</li>
<li>Its performance is good</li>
<li>The system prevents abuse</li>
</ul>
<p>Systems that anticipate faults and can cope with them are called <em>fault-tolerant</em> or <em>resilient</em>.</p>
<p><strong>A fault is usually defined as one component of the system deviating from its spec</strong>, whereas <em>failure</em> is when the system as a whole stops providing the required service to the user.</p>
<p>You should generally <strong>prefer tolerating faults over preventing faults</strong>.</p>
<ul>
<li><strong>Hardware faults</strong>. Until recently redundancy of hardware components was sufficient for most applications. As data volumes increase, more applications use a larger number of machines, proportionally increasing the rate of hardware faults. <strong>There is a move towards systems that tolerate the loss of entire machines</strong>. A system that tolerates machine failure can be patched one node at a time, without downtime of the entire system (<em>rolling upgrade</em>).</li>
<li><strong>Software errors</strong>. It is unlikely that a large number of hardware components will fail at the same time. Software errors are a systematic error within the system, they tend to cause many more system failures than uncorrelated hardware faults.</li>
<li><strong>Human errors</strong>. Humans are known to be unreliable. Configuration errors by operators are a leading cause of outages. You can make systems more reliable:<ul>
<li>Minimising the opportunities for error, peg: with admin interfaces that make easy to do the “right thing” and discourage the “wrong thing”.</li>
<li>Provide fully featured non-production <em>sandbox</em> environments where people can explore and experiment safely.</li>
<li>Automated testing.</li>
<li>Quick and easy recovery from human error, fast to rollback configuration changes, roll out new code gradually and tools to recompute data.</li>
<li>Set up detailed and clear monitoring, such as performance metrics and error rates (<em>telemetry</em>).</li>
<li>Implement good management practices and training.</li>
</ul>
</li>
</ul>
<h3 id="Scalability"><a href="#Scalability" class="headerlink" title="Scalability"></a>Scalability</h3><p>This is how do we cope with increased load. We need to succinctly describe the current load on the system; only then we can discuss growth questions.</p>
<h4 id="Twitter-example"><a href="#Twitter-example" class="headerlink" title="Twitter example"></a>Twitter example</h4><p>Twitter main operations</p>
<ul>
<li>Post tweet: a user can publish a new message to their followers (4.6k req&#x2F;sec, over 12k req&#x2F;sec peak)</li>
<li>Home timeline: a user can view tweets posted by the people they follow (300k req&#x2F;sec)</li>
</ul>
<p>Two ways of implementing those operations:</p>
<ol>
<li>Posting a tweet simply inserts the new tweet into a global collection of tweets. When a user requests their home timeline, look up all the people they follow, find all the tweets for those users, and merge them (sorted by time). This could be done with a SQL <code>JOIN</code>.</li>
<li>Maintain a cache for each user’s home timeline. When a user <em>posts a tweet</em>, look up all the people who follow that user, and insert the new tweet into each of their home timeline caches.</li>
</ol>
<p>Approach 1, systems struggle to keep up with the load of home timeline queries. So the company switched to approach 2. The average rate of published tweets is almost two orders of magnitude lower than the rate of home timeline reads.</p>
<p>Downside of approach 2 is that posting a tweet now requires a lot of extra work. Some users have over 30 million followers. A single tweet may result in over 30 million writes to home timelines.</p>
<p>Twitter moved to an hybrid of both approaches. Tweets continue to be fanned out to home timelines but a small number of users with a very large number of followers are fetched separately and merged with that user’s home timeline when it is read, like in approach 1.</p>
<h4 id="Describing-performance"><a href="#Describing-performance" class="headerlink" title="Describing performance"></a>Describing performance</h4><p>What happens when the load increases:</p>
<ul>
<li>How is the performance affected?</li>
<li>How much do you need to increase your resources?</li>
</ul>
<p>In a batch processing system such as Hadoop, we usually care about <em>throughput</em>, or the number of records we can process per second.</p>
<blockquote>
<h5 id="Latency-and-response-time"><a href="#Latency-and-response-time" class="headerlink" title="Latency and response time"></a>Latency and response time</h5><p>The response time is what the client sees. Latency is the duration that a request is waiting to be handled.</p>
</blockquote>
<p>It’s common to see the <em>average</em> response time of a service reported. However, the mean is not very good metric if you want to know your “typical” response time, it does not tell you how many users actually experienced that delay.</p>
<p><strong>Better to use percentiles.</strong></p>
<ul>
<li><em>Median</em> (<em>50th percentile</em> or <em>p50</em>). Half of user requests are served in less than the median response time, and the other half take longer than the median</li>
<li>Percentiles <em>95th</em>, <em>99th</em> and <em>99.9th</em> (<em>p95</em>, <em>p99</em> and <em>p999</em>) are good to figure out how bad your outliners are.</li>
</ul>
<p>Amazon describes response time requirements for internal services in terms of the 99.9th percentile because the customers with the slowest requests are often those who have the most data. The most valuable customers.</p>
<p>On the other hand, optimising for the 99.99th percentile would be too expensive.</p>
<p><em>Service level objectives</em> (SLOs) and <em>service level agreements</em> (SLAs) are contracts that define the expected performance and availability of a service.<br>An SLA may state the median response time to be less than 200ms and a 99th percentile under 1s. <strong>These metrics set expectations for clients of the service and allow customers to demand a refund if the SLA is not met.</strong></p>
<p>Queueing delays often account for large part of the response times at high percentiles. <strong>It is important to measure times on the client side.</strong></p>
<p>When generating load artificially, the client needs to keep sending requests independently of the response time.</p>
<blockquote>
<h5 id="Percentiles-in-practice"><a href="#Percentiles-in-practice" class="headerlink" title="Percentiles in practice"></a>Percentiles in practice</h5><p>Calls in parallel, the end-user request still needs to wait for the slowest of the parallel calls to complete.<br>The chance of getting a slow call increases if an end-user request requires multiple backend calls.</p>
</blockquote>
<h4 id="Approaches-for-coping-with-load"><a href="#Approaches-for-coping-with-load" class="headerlink" title="Approaches for coping with load"></a>Approaches for coping with load</h4><ul>
<li><em>Scaling up</em> or <em>vertical scaling</em>: Moving to a more powerful machine</li>
<li><em>Scaling out</em> or <em>horizontal scaling</em>: Distributing the load across multiple smaller machines.</li>
<li><em>Elastic</em> systems: Automatically add computing resources when detected load increase. Quite useful if load is unpredictable.</li>
</ul>
<p>Distributing stateless services across multiple machines is fairly straightforward. Taking stateful data systems from a single node to a distributed setup can introduce a lot of complexity. Until recently it was common wisdom to keep your database on a single node.</p>
<h3 id="Maintainability"><a href="#Maintainability" class="headerlink" title="Maintainability"></a>Maintainability</h3><p>The majority of the cost of software is in its ongoing maintenance. There are three design principles for software systems:</p>
<ul>
<li><strong>Operability</strong>. Make it easy for operation teams to keep the system running.</li>
<li><strong>Simplicity</strong>. Easy for new engineers to understand the system by removing as much complexity as possible.</li>
<li><strong>Evolvability</strong>. Make it easy for engineers to make changes to the system in the future.</li>
</ul>
<h4 id="Operability-making-life-easy-for-operations"><a href="#Operability-making-life-easy-for-operations" class="headerlink" title="Operability: making life easy for operations"></a>Operability: making life easy for operations</h4><p>A good operations team is responsible for</p>
<ul>
<li>Monitoring and quickly restoring service if it goes into bad state</li>
<li>Tracking down the cause of problems</li>
<li>Keeping software and platforms up to date</li>
<li>Keeping tabs on how different systems affect each other</li>
<li>Anticipating future problems</li>
<li>Establishing good practices and tools for development</li>
<li>Perform complex maintenance tasks, like platform migration</li>
<li>Maintaining the security of the system</li>
<li>Defining processes that make operations predictable</li>
<li>Preserving the organisation’s knowledge about the system</li>
</ul>
<p><strong>Good operability means making routine tasks easy.</strong></p>
<h4 id="Simplicity-managing-complexity"><a href="#Simplicity-managing-complexity" class="headerlink" title="Simplicity: managing complexity"></a>Simplicity: managing complexity</h4><p>When complexity makes maintenance hard, budget and schedules are often overrun. There is a greater risk of introducing bugs.</p>
<p>Making a system simpler means removing <em>accidental</em> complexity, as non inherent in the problem that the software solves (as seen by users).</p>
<p>One of the best tools we have for removing accidental complexity is <em>abstraction</em> that hides the implementation details behind clean and simple to understand APIs and facades.</p>
<h4 id="Evolvability-making-change-easy"><a href="#Evolvability-making-change-easy" class="headerlink" title="Evolvability: making change easy"></a>Evolvability: making change easy</h4><p><em>Agile</em> working patterns provide a framework for adapting to change.</p>
<ul>
<li><em>Functional requirements</em>: what the application should do</li>
<li><em>Nonfunctional requirements</em>: general properties like security, reliability, compliance, scalability, compatibility and maintainability.</li>
</ul>
<h2 id="Data-models-and-query-language"><a href="#Data-models-and-query-language" class="headerlink" title="Data models and query language"></a>Data models and query language</h2><p>Most applications are built by layering one data model on top of another. Each layer hides the complexity of the layers below by providing a clean data model. These abstractions allow different groups of people to work effectively.</p>
<h3 id="Relational-model-vs-document-model"><a href="#Relational-model-vs-document-model" class="headerlink" title="Relational model vs document model"></a>Relational model vs document model</h3><p>The roots of relational databases lie in <em>business data processing</em>, <em>transaction processing</em> and <em>batch processing</em>.</p>
<p>The goal was to hide the implementation details behind a cleaner interface.</p>
<p><em>Not Only SQL(NOSQL)</em> has a few driving forces:</p>
<ul>
<li>Greater scalability</li>
<li>preference for free and open source software</li>
<li>Specialized query optimizations</li>
<li>Desire for a more dynamic and expressive data model</li>
</ul>
<p><strong>With a SQL model, if data is stored in a relational tables, an awkward translation layer is translated, this is called <em>impedance mismatch</em>.</strong></p>
<p>JSON model reduces the impedance mismatch and the lack of schema is often cited as an advantage.</p>
<p>JSON representation has better <em>locality</em> than the multi-table SQL schema. All the relevant information is in one place, and one query is sufficient.</p>
<p>In relational databases, it’s normal to refer to rows in other tables by ID, because joins are easy. In document databases, joins are not needed for one-to-many tree structures, and support for joins is often weak.</p>
<p>If the database itself does not support joins, you have to emulate a join in application code by making multiple queries.</p>
<p>The most popular database for business data processing in the 1970s was the IBM’s <em>Information Management System</em> (IMS).</p>
<p>IMS used a <em>hierarchical model</em> and like document databases worked well for one-to-many relationships, but it made many-to-,any relationships difficult, and it didn’t support joins.</p>
<h4 id="The-network-model"><a href="#The-network-model" class="headerlink" title="The network model"></a>The network model</h4><p>Standardized by a committee called the Conference on Data Systems Languages (CODASYL) model was a generalization of the hierarchical model. In the tree structure of the hierarchical model, every record has exactly one parent, while in the network model, a record could have multiple parents.</p>
<p>The links between records are like pointers in a programming language. The only way of accessing a record was to follow a path from a root record called <em>access path</em>.</p>
<p>A query in CODASYL was performed by moving a cursor through the database by iterating over a list of records. If you didn’t have a path to the data you wanted, you were in a difficult situation as it was difficult to make changes to an application’s data model.</p>
<h4 id="The-relational-model"><a href="#The-relational-model" class="headerlink" title="The relational model"></a>The relational model</h4><p>By contrast, the relational model was a way to lay out all the data in the open” a relation (table) is simply a collection of tuples (rows), and that’s it.</p>
<p>The query optimizer automatically decides which parts of the query to execute in which order, and which indexes to use (the access path).</p>
<p>The relational model thus made it much easier to add new features to applications.</p>
<p><strong>The main arguments in favour of the document data model are schema flexibility, better performance due to locality, and sometimes closer data structures to the ones used by the applications. The relation model counters by providing better support for joins, and many-to-one and many-to-many relationships.</strong></p>
<p>If the data in your application has a document-like structure, then it’s probably a good idea to use a document model. The relational technique of <em>shredding</em> can lead unnecessary complicated application code.</p>
<p>The poor support for joins in document databases may or may not be a problem.</p>
<p>If you application does use many-to-many relationships, the document model becomes less appealing. Joins can be emulated in application code by making multiple requests. Using the document model can lead to significantly more complex application code and worse performance.</p>
<h4 id="Schema-flexibility"><a href="#Schema-flexibility" class="headerlink" title="Schema flexibility"></a>Schema flexibility</h4><p>Most document databases do not enforce any schema on the data in documents. Arbitrary keys and values can be added to a document, when reading, <strong>clients have no guarantees as to what fields the documents may contain.</strong></p>
<p>Document databases are sometimes called <em>schemaless</em>, but maybe a more appropriate term is <em>schema-on-read</em>, in contrast to <em>schema-on-write</em>.</p>
<p>Schema-on-read is similar to dynamic (runtime) type checking, whereas schema-on-write is similar to static (compile-time) type checking.</p>
<p>The schema-on-read approach is advantageous if the items on the collection don’t have all the same structure (heterogeneous)</p>
<ul>
<li>Many different types of objects</li>
<li>Data determined by external systems</li>
</ul>
<h4 id="Data-locality-for-queries"><a href="#Data-locality-for-queries" class="headerlink" title="Data locality for queries"></a>Data locality for queries</h4><p>If your application often needs to access the entire document, there is a performance advantage to this <em>storage locality</em>.</p>
<p>The database typically needs to load the entire document, even if you access only a small portion of it. On updates, the entire document usually needs to be rewritten, it is recommended that you keep documents fairly small.</p>
<h4 id="Convergence-of-document-and-relational-databases"><a href="#Convergence-of-document-and-relational-databases" class="headerlink" title="Convergence of document and relational databases"></a>Convergence of document and relational databases</h4><p>PostgreSQL does support JSON documents. RethinkDB supports relational-like joins in its query language and some MongoDB drivers automatically resolve database references. Relational and document databases are becoming more similar over time.</p>
<h3 id="Query-languages-for-data"><a href="#Query-languages-for-data" class="headerlink" title="Query languages for data"></a>Query languages for data</h3><p>SQL is a <em>declarative</em> query language. In an <em>imperative language</em>, you tell the computer to perform certain operations in order.</p>
<p>In a declarative query language you just specify the pattern of the data you want, but not <em>how</em> to achieve that goal.</p>
<p>A declarative query language hides implementation details of the database engine, making it possible for the database system to introduce performance improvements without requiring any changes to queries.</p>
<p>Declarative languages often lend themselves to parallel execution while imperative code is very hard to parallelise across multiple cores because it specifies instructions that must be performed in a particular order. Declarative languages specify only the pattern of the results, not the algorithm that is used to determine results.</p>
<h4 id="Declarative-queries-on-the-web"><a href="#Declarative-queries-on-the-web" class="headerlink" title="Declarative queries on the web"></a>Declarative queries on the web</h4><p>In a web browser, using declarative CSS styling is much better than manipulating styles imperatively in JavaScript. Declarative languages like SQL turned out to be much better than imperative query APIs.</p>
<h4 id="MapReduce-querying"><a href="#MapReduce-querying" class="headerlink" title="MapReduce querying"></a>MapReduce querying</h4><p><em>MapReduce</em> is a programming model for processing large amounts of data in bulk across many machines, popularised by Google.</p>
<p>Mongo offers a MapReduce solution.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">observations</span>.<span class="title function_">mapReduce</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">map</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> year  = <span class="variable language_">this</span>.<span class="property">observationTimestamp</span>.<span class="title function_">getFullYear</span>();</span><br><span class="line">        <span class="keyword">var</span> month = <span class="variable language_">this</span>.<span class="property">observationTimestamp</span>.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="title function_">emit</span>(year + <span class="string">&quot;-&quot;</span> + month, <span class="variable language_">this</span>.<span class="property">numAnimals</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reduce</span>(<span class="params">key, values</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">sum</span>(values);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">query</span>: &#123; <span class="attr">family</span>: <span class="string">&quot;Sharks&quot;</span> &#125;,</span><br><span class="line">        <span class="attr">out</span>: <span class="string">&quot;monthlySharkReport&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>The <code>map</code> and <code>reduce</code> functions must be <em>pure</em> functions, they cannot perform additional database queries and they must not have any side effects. These restrictions allow the database to run the functions anywhere, in any order, and rerun them on failure.</p>
<p>A usability problem with MapReduce is that you have to write two carefully coordinated functions. A declarative language offers more opportunities for a query optimiser to improve the performance of a query. For there reasons, MongoDB 2.2 added support for a declarative query language called <em>aggregation pipeline</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">observations</span>.<span class="title function_">aggregate</span>([</span><br><span class="line">    &#123; <span class="attr">$match</span>: &#123; <span class="attr">family</span>: <span class="string">&quot;Sharks&quot;</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: &#123;</span><br><span class="line">            <span class="attr">year</span>:  &#123; <span class="attr">$year</span>:  <span class="string">&quot;$observationTimestamp&quot;</span> &#125;,</span><br><span class="line">            <span class="attr">month</span>: &#123; <span class="attr">$month</span>: <span class="string">&quot;$observationTimestamp&quot;</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">totalAnimals</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$numAnimals&quot;</span> &#125;</span><br><span class="line">    &#125; &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h3 id="Graph-like-data-models"><a href="#Graph-like-data-models" class="headerlink" title="Graph-like data models"></a>Graph-like data models</h3><p>If many-to-many relationships are very common in your application, it becomes more natural to start modelling your data as a graph.</p>
<p>A graph consists of <em>vertices</em> (<em>nodes</em> or <em>entities</em>) and <em>edges</em> (<em>relationships</em> or <em>arcs</em>).</p>
<p>Well-known algorithms can operate on these graphs, like the shortest path between two points, or popularity of a web page.</p>
<p>There are several ways of structuring and querying the data. The <em>property graph</em> model (implemented by Neo4j, Titan, and Infinite Graph) and the <em>triple-store</em> model (implemented by Datomic, AllegroGraph, and others). There are also three declarative query languages for graphs: Cypher, SPARQL, and Datalog.</p>
<h4 id="Property-graphs"><a href="#Property-graphs" class="headerlink" title="Property graphs"></a>Property graphs</h4><p>Each vertex consists of:</p>
<ul>
<li>Unique identifier</li>
<li>Outgoing edges</li>
<li>Incoming edges</li>
<li>Collection of properties (key-value pairs)</li>
</ul>
<p>Each edge consists of:</p>
<ul>
<li>Unique identifier</li>
<li>Vertex at which the edge starts (<em>tail vertex</em>)</li>
<li>Vertex at which the edge ends (<em>head vertex</em>)</li>
<li>Label to describe the kind of relationship between the two vertices</li>
<li>A collection of properties (key-value pairs)</li>
</ul>
<p>Graphs provide a great deal of flexibility for data modelling. Graphs are good for evolvability.</p>
<ul>
<li><em>Cypher</em> is a declarative language for property graphs created by Neo4j</li>
<li>Graph queries in SQL. In a relational database, you usually know in advance which joins you need in your query. In a graph query, the number if joins is not fixed in advance. In Cypher <code>:WITHIN*0...</code> expresses “follow a <code>WITHIN</code> edge, zero or more times” (like the <code>*</code> operator in a regular expression). This idea of variable-length traversal paths in a query can be expressed using something called <em>recursive common table expressions</em> (the <code>WITH RECURSIVE</code> syntax).</li>
</ul>
<h4 id="Triple-stores-and-SPARQL"><a href="#Triple-stores-and-SPARQL" class="headerlink" title="Triple-stores and SPARQL"></a>Triple-stores and SPARQL</h4><p>In a triple-store, all information is stored in the form of very simple three-part statements: <em>subject</em>, <em>predicate</em>, <em>object</em> (peg: <em>Jim</em>, <em>likes</em>, <em>bananas</em>). A triple is equivalent to a vertex in graph.</p>
<h4 id="The-SPARQL-query-language"><a href="#The-SPARQL-query-language" class="headerlink" title="The SPARQL query language"></a>The SPARQL query language</h4><p><em>SPARQL</em> is a query language for triple-stores using the RDF data model.</p>
<h4 id="The-foundation-Datalog"><a href="#The-foundation-Datalog" class="headerlink" title="The foundation: Datalog"></a>The foundation: Datalog</h4><p><em>Datalog</em> provides the foundation that later query languages build upon. Its model is similar to the triple-store model, generalised a bit. Instead of writing a triple (<em>subject</em>, <em>predicate</em>, <em>object</em>), we write as <em>predicate(subject, object)</em>.</p>
<p>We define <em>rules</em> that tell the database about new predicates and rules can refer to other rules, just like functions can call other functions or recursively call themselves.</p>
<p>Rules can be combined and reused in different queries. It’s less convenient for simple one-off queries, but it can cope better if your data is complex.</p>
<h2 id="Storage-and-retrieval"><a href="#Storage-and-retrieval" class="headerlink" title="Storage and retrieval"></a>Storage and retrieval</h2><p>Databases need to do two things: store the data and give the data back to you.</p>
<h3 id="Data-structures-that-power-up-your-database"><a href="#Data-structures-that-power-up-your-database" class="headerlink" title="Data structures that power up your database"></a>Data structures that power up your database</h3><p>Many databases use a <em>log</em>, which is append-only data file. Real databases have more issues to deal with tho (concurrency control, reclaiming disk space so the log doesn’t grow forever and handling errors and partially written records).</p>
<blockquote>
<p>A <em>log</em> is an append-only sequence of records</p>
</blockquote>
<p>In order to efficiently find the value for a particular key, we need a different data structure: an <em>index</em>. An index is an <em>additional</em> structure that is derived from the primary data.</p>
<p>Well-chosen indexes speed up read queries but every index slows down writes. That’s why databases don’t index everything by default, but require you to choose indexes manually using your knowledge on typical query patterns.</p>
<h4 id="Hash-indexes"><a href="#Hash-indexes" class="headerlink" title="Hash indexes"></a>Hash indexes</h4><p>Key-value stores are quite similar to the <em>dictionary</em> type (hash map or hash table).</p>
<p>Let’s say our storage consists only of appending to a file. The simplest indexing strategy is to keep an in-memory hash map where every key is mapped to a byte offset in the data file. Whenever you append a new key-value pair to the file, you also update the hash map to reflect the offset of the data you just wrote.</p>
<p>Bitcask (the default storage engine in Riak) does it like that. The only requirement it has is that all the keys fit in the available RAM. Values can use more space than there is available in memory, since they can be loaded from disk.</p>
<p>A storage engine like Bitcask is well suited to situations where the value for each key is updated frequently. There are a lot of writes, but there are not too many distinct keys, you have a large number of writes per key, but it’s feasible to keep all keys in memory.</p>
<p>As we only ever append to a file, so how do we avoid eventually running out of disk space? <strong>A good solution is to break the log into segments of certain size by closing the segment file when it reaches a certain size, and making subsequent writes to a new segment file. We can then perform <em>compaction</em> on these segments.</strong> Compaction means throwing away duplicate keys in the log, and keeping only the most recent update for each key.</p>
<p>We can also merge several segments together at the same time as performing the compaction. Segments are never modified after they have been written, so the merged segment is written to a new file. Merging and compaction of frozen segments can be done in a background thread. After the merging process is complete, we switch read requests to use the new merged segment instead of the old segments, and the old segment files can simply be deleted.</p>
<p>Each segment now has its own in-memory hash table, mapping keys to file offsets. In order to find a value for a key, we first check the most recent segment hash map; if the key is not present we check the second-most recent segment and so on. The merging process keeps the number of segments small, so lookups don’t need to check many hash maps.</p>
<p>Some issues that are important in a real implementation:</p>
<ul>
<li>File format. It is simpler to use binary format.</li>
<li>Deleting records. Append special deletion record to the data file (<em>tombstone</em>) that tells the merging process to discard previous values.</li>
<li>Crash recovery. If restarted, the in-memory hash maps are lost. You can recover from reading each segment but that would take long time. Bitcask speeds up recovery by storing a snapshot of each segment hash map on disk.</li>
<li>Partially written records. The database may crash at any time. Bitcask includes checksums allowing corrupted parts of the log to be detected and ignored.</li>
<li>Concurrency control. As writes are appended to the log in a strictly sequential order, a common implementation is to have a single writer thread. Segments are immutable, so they can be read concurrently by multiple threads.</li>
</ul>
<p>Append-only design turns out to be good for several reasons:</p>
<ul>
<li>Appending and segment merging are sequential write operations, much faster than random writes, especially on magnetic spinning-disks.</li>
<li>Concurrency and crash recovery are much simpler.</li>
<li>Merging old segments avoids files getting fragmented over time.</li>
</ul>
<p>Hash table has its limitations too:</p>
<ul>
<li>The hash table must fit in memory. It is difficult to make an on-disk hash map perform well.</li>
<li>Range queries are not efficient.</li>
</ul>
<h4 id="SSTables-and-LSM-Trees"><a href="#SSTables-and-LSM-Trees" class="headerlink" title="SSTables and LSM-Trees"></a>SSTables and LSM-Trees</h4><p>We introduce a new requirement to segment files: we require that the sequence of key-value pairs is <em>sorted by key</em>.</p>
<p>We call this <em>Sorted String Table</em>, or <em>SSTable</em>. We require that each key only appears once within each merged segment file (compaction already ensures that). SSTables have few big advantages over log segments with hash indexes</p>
<ol>
<li><strong>Merging segments is simple and efficient</strong> (we can use algorithms like <em>mergesort</em>). When multiple segments contain the same key, we can keep the value from the most recent segment and discard the values in older segments.</li>
<li><strong>You no longer need to keep an index of all the keys in memory.</strong> For a key like <code>handiwork</code>, when you know the offsets for the keys <code>handback</code> and <code>handsome</code>, you know <code>handiwork</code> must appear between those two. You can jump to the offset for <code>handback</code> and scan from there until you find <code>handiwork</code>, if not, the key is not present. You still need an in-memory index to tell you the offsets for some of the keys. One key for every few kilobytes of segment file is sufficient.</li>
<li>Since read requests need to scan over several key-value pairs in the requested range anyway, <strong>it is possible to group those records into a block and compress it</strong> before writing it to disk.</li>
</ol>
<p>How do we get the data sorted in the first place? With red-black trees or AVL trees, you can insert keys in any order and read them back in sorted order.</p>
<ul>
<li>When a write comes in, add it to an in-memory balanced tree structure (<em>memtable</em>).</li>
<li>When the memtable gets bigger than some threshold (megabytes), write it out to disk as an SSTable file. Writes can continue to a new memtable instance.</li>
<li>On a read request, try to find the key in the memtable, then in the most recent on-disk segment, then in the next-older segment, etc.</li>
<li>From time to time, run merging and compaction in the background to discard overwritten and deleted values.</li>
</ul>
<p>If the database crashes, the most recent writes are lost. We can keep a separate log on disk to which every write is immediately appended. That log is not in sorted order, but that doesn’t matter, because its only purpose is to restore the memtable after crash. Every time the memtable is written out to an SSTable, the log can be discarded.</p>
<p><strong>Storage engines that are based on this principle of merging and compacting sorted files are often called LSM structure engines (Log Structure Merge-Tree).</strong></p>
<p>Lucene, an indexing engine for full-text search used by Elasticsearch and Solr, uses a similar method for storing its <em>term dictionary</em>.</p>
<p>LSM-tree algorithm can be slow when looking up keys that don’t exist in the database. To optimise this, storage engines often use additional <em>Bloom filters</em> (a memory-efficient data structure for approximating the contents of a set).</p>
<p>There are also different strategies to determine the order and timing of how SSTables are compacted and merged. Mainly two <em>size-tiered</em> and <em>leveled</em> compaction. LevelDB and RocksDB use leveled compaction, HBase use size-tiered, and Cassandra supports both. In size-tiered compaction, newer and smaller SSTables are successively merged into older and larger SSTables. In leveled compaction, the key range is split up into smaller SSTables and older data is moved into separate “levels”, which allows the compaction to use less disk space.</p>
<h4 id="B-trees"><a href="#B-trees" class="headerlink" title="B-trees"></a>B-trees</h4><p>This is the most widely used indexing structure. B-tress keep key-value pairs sorted by key, which allows efficient key-value lookups and range queries.</p>
<p>The log-structured indexes break the database down into variable-size <em>segments</em> typically several megabytes or more. B-trees break the database down into fixed-size <em>blocks</em> or <em>pages</em>, traditionally 4KB.</p>
<p>One page is designated as the <em>root</em> and you start from there. The page contains several keys and references to child pages.</p>
<p>If you want to update the value for an existing key in a B-tree, you search for the leaf page containing that key, change the value in that page, and write the page back to disk. If you want to add new key, find the page and add it to the page. If there isn’t enough free space in the page to accommodate the new key, it is split in two half-full pages, and the parent page is updated to account for the new subdivision of key ranges.</p>
<p>Trees remain <em>balanced</em>. A B-tree with <em>n</em> keys always has a depth of <em>O</em>(log <em>n</em>).</p>
<p>The basic underlying write operation of a B-tree is to overwrite a page on disk with new data. It is assumed that the overwrite does not change the location of the page, all references to that page remain intact. This is a big contrast to log-structured indexes such as LSM-trees, which only append to files.</p>
<p>Some operations require several different pages to be overwritten. When you split a page, you need to write the two pages that were split, and also overwrite their parent. If the database crashes after only some of the pages have been written, you end up with a corrupted index.</p>
<p>It is common to include an additional data structure on disk: a <em>write-ahead log</em> (WAL, also know as the <em>redo log</em>).</p>
<p>Careful concurrency control is required if multiple threads are going to access, typically done protecting the tree internal data structures with <em>latches</em> (lightweight locks).</p>
<h4 id="B-trees-and-LSM-trees"><a href="#B-trees-and-LSM-trees" class="headerlink" title="B-trees and LSM-trees"></a>B-trees and LSM-trees</h4><p>LSM-trees are typically faster for writes, whereas B-trees are thought to be faster for reads. Reads are typically slower on LSM-tress as they have to check several different data structures and SSTables at different stages of compaction.</p>
<p>Advantages of LSM-trees:</p>
<ul>
<li>LSM-trees are typically able to sustain higher write throughput than B-trees, party because they sometimes have lower write amplification: a write to the database results in multiple writes to disk. The more a storage engine writes to disk, the fewer writes per second it can handle.</li>
<li>LSM-trees can be compressed better, and thus often produce smaller files on disk than B-trees. B-trees tend to leave disk space unused due to fragmentation.</li>
</ul>
<p>Downsides of LSM-trees:</p>
<ul>
<li>Compaction process can sometimes interfere with the performance of ongoing reads and writes. B-trees can be more predictable. The bigger the database, the the more disk bandwidth is required for compaction. Compaction cannot keep up with the rate of incoming writes, if not configured properly you can run out of disk space.</li>
<li>On B-trees, each key exists in exactly one place in the index. This offers strong transactional semantics. Transaction isolation is implemented using locks on ranges of keys, and in a B-tree index, those locks can be directly attached to the tree.</li>
</ul>
<h4 id="Other-indexing-structures"><a href="#Other-indexing-structures" class="headerlink" title="Other indexing structures"></a>Other indexing structures</h4><p>We’ve only discussed key-value indexes, which are like <em>primary key</em> index. There are also <em>secondary indexes</em>.</p>
<p>A secondary index can be easily constructed from a key-value index. The main difference is that in a secondary index, the indexed values are not necessarily unique. There are two ways of doing this: making each value in the index a list of matching row identifiers or by making a each entry unique by appending a row identifier to it.</p>
<h4 id="Full-text-search-and-fuzzy-indexes"><a href="#Full-text-search-and-fuzzy-indexes" class="headerlink" title="Full-text search and fuzzy indexes"></a>Full-text search and fuzzy indexes</h4><p>Indexes don’t allow you to search for <em>similar</em> keys, such as misspelled words. Such <em>fuzzy</em> querying requires different techniques.</p>
<p>Full-text search engines allow synonyms, grammatical variations, occurrences of words near each other.</p>
<p>Lucene uses SSTable-like structure for its term dictionary. Lucene, the in-memory index is a finite state automaton, similar to a <em>trie</em>.</p>
<h4 id="Keeping-everything-in-memory"><a href="#Keeping-everything-in-memory" class="headerlink" title="Keeping everything in memory"></a>Keeping everything in memory</h4><p>Disks have two significant advantages: they are durable, and they have lower cost per gigabyte than RAM.</p>
<p>It’s quite feasible to keep them entirely in memory, this has lead to <em>in-memory</em> databases.</p>
<p>Key-value stores, such as Memcached are intended for cache only, it’s acceptable for data to be lost if the machine is restarted. Other in-memory databases aim for durability, with special hardware, writing a log of changes to disk, writing periodic snapshots to disk or by replicating in-memory sate to other machines.</p>
<p>When an in-memory database is restarted, it needs to reload its state, either from disk or over the network from a replica. The disk is merely used as an append-only log for durability, and reads are served entirely from memory.</p>
<p>Products such as VoltDB, MemSQL, and Oracle TimesTime are in-memory databases. Redis and Couchbase provide weak durability.</p>
<p>In-memory databases can be faster because they can avoid the overheads of encoding in-memory data structures in a form that can be written to disk.</p>
<p>Another interesting area is that in-memory databases may provide data models that are difficult to implement with disk-based indexes.</p>
<h3 id="Transaction-processing-or-analytics"><a href="#Transaction-processing-or-analytics" class="headerlink" title="Transaction processing or analytics?"></a>Transaction processing or analytics?</h3><p>A <em>transaction</em> is a group of reads and writes that form a logical unit, this pattern became known as <em>online transaction processing</em> (OLTP).</p>
<p><em>Data analytics</em> has very different access patterns. A query would need to scan over a huge number of records, only reading a few columns per record, and calculates aggregate statistics.</p>
<p>These queries are often written by business analysts, and fed into reports. This pattern became known for <em>online analytics processing</em> (OLAP).</p>
<h4 id="Data-warehousing"><a href="#Data-warehousing" class="headerlink" title="Data warehousing"></a>Data warehousing</h4><p>A <em>data warehouse</em> is a separate database that analysts can query to their heart’s content without affecting OLTP operations. It contains read-only copy of the dat in all various OLTP systems in the company. Data is extracted out of OLTP databases (through periodic data dump or a continuous stream of update), transformed into an analysis-friendly schema, cleaned up, and then loaded into the data warehouse (process <em>Extract-Transform-Load</em> or ETL).</p>
<p>A data warehouse is most commonly relational, but the internals of the systems can look quite different.</p>
<p>Amazon RedShift is hosted version of ParAccel. Apache Hive, Spark SQL, Cloudera Impala, Facebook Presto, Apache Tajo, and Apache Drill. Some of them are based on ideas from Google’s Dremel.</p>
<p>Data warehouses are used in fairly formulaic style known as a <em>star schema</em>.</p>
<p>Facts are captured as individual events, because this allows maximum flexibility of analysis later. The fact table can become extremely large.</p>
<p>Dimensions represent the <em>who</em>, <em>what</em>, <em>where</em>, <em>when</em>, <em>how</em> and <em>why</em> of the event.</p>
<p>The name “star schema” comes from the fact than when the table relationships are visualised, the fact table is in the middle, surrounded by its dimension tables, like the rays of a star.</p>
<p>Fact tables often have over 100 columns, sometimes several hundred. Dimension tables can also be very wide.</p>
<h3 id="Column-oriented-storage"><a href="#Column-oriented-storage" class="headerlink" title="Column-oriented storage"></a>Column-oriented storage</h3><p>In a row-oriented storage engine, when you do a query that filters on a specific field, the engine will load all those rows with all their fields into memory, parse them and filter out the ones that don’t meet the requirement. This can take a long time.</p>
<p><em>Column-oriented storage</em> is simple: don’t store all the values from one row together, but store all values from each <em>column</em> together instead. If each column is stored in a separate file, a query only needs to read and parse those columns that are used in a query, which can save a lot of work.</p>
<p>Column-oriented storage often lends itself very well to compression as the sequences of values for each column look quite repetitive, which is a good sign for compression. A technique that is particularly effective in data warehouses is <em>bitmap encoding</em>.</p>
<p>Bitmap indexes are well suited for all kinds of queries that are common in a data warehouse.</p>
<blockquote>
<p>Cassandra and HBase have a concept of <em>column families</em>, which they inherited from Bigtable.</p>
</blockquote>
<p>Besides reducing the volume of data that needs to be loaded from disk, column-oriented storage layouts are also good for making efficient use of CPU cycles (<em>vectorised processing</em>).</p>
<p><strong>Column-oriented storage, compression, and sorting helps to make read queries faster and make sense in data warehouses, where most of the load consist on large read-only queries run by analysts. The downside is that writes are more difficult.</strong></p>
<p>An update-in-place approach, like B-tree use, is not possible with compressed columns. If you insert a row in the middle of a sorted table, you would most likely have to rewrite all column files.</p>
<p>It’s worth mentioning <em>materialised aggregates</em> as some cache of the counts and the sums that queries use most often. A way of creating such a cache is with a <em>materialised view</em>, on a relational model this is usually called a <em>virtual view</em>: a table-like object whose contents are the results of some query. A materialised view is an actual copy of the query results, written in disk, whereas a virtual view is just a shortcut for writing queries.</p>
<p>When the underlying data changes, a materialised view needs to be updated, because it is denormalised copy of the data. Database can do it automatically, but writes would become more expensive.</p>
<p>A common special case of a materialised view is know as a <em>data cube</em> or <em>OLAP cube</em>, a grid of aggregates grouped by different dimensions.</p>
<h2 id="Encoding-and-evolution"><a href="#Encoding-and-evolution" class="headerlink" title="Encoding and evolution"></a>Encoding and evolution</h2><p>Change to an application’s features also requires a change to data it stores.</p>
<p>Relational databases conforms to one schema although that schema can be changed, there is one schema in force at any point in time. <strong>Schema-on-read (or schemaless) contain a mixture of older and newer data formats.</strong></p>
<p>In large applications changes don’t happen instantaneously. You want to perform a <em>rolling upgrade</em> and deploy a new version to a few nodes at a time, gradually working your way through all the nodes without service downtime.</p>
<p>Old and new versions of the code, and old and new data formats, may potentially all coexist. We need to maintain compatibility in both directions</p>
<ul>
<li>Backward compatibility, newer code can read data that was written by older code.</li>
<li>Forward compatibility, older code can read data that was written by newer code.</li>
</ul>
<h3 id="Formats-for-encoding-data"><a href="#Formats-for-encoding-data" class="headerlink" title="Formats for encoding data"></a>Formats for encoding data</h3><p>Two different representations:</p>
<ul>
<li>In memory</li>
<li>When you want to write data to a file or send it over the network, you have to encode it</li>
</ul>
<p>Thus, you need a translation between the two representations. In-memory representation to byte sequence is called <em>encoding</em> (<em>serialisation</em> or <em>marshalling</em>), and the reverse is called <em>decoding</em> (<em>parsing</em>, <em>deserialisation</em> or <em>unmarshalling</em>).</p>
<p>Programming languages come with built-in support for encoding in-memory objects into byte sequences, but is usually a bad idea to use them. Precisely because of a few problems.</p>
<ul>
<li>Often tied to a particular programming language.</li>
<li>The decoding process needs to be able to instantiate arbitrary classes and this is frequently a security hole.</li>
<li>Versioning</li>
<li>Efficiency</li>
</ul>
<p>Standardised encodings can be written and read by many programming languages.</p>
<p>JSON, XML, and CSV are human-readable and popular specially as data interchange formats, but they have some subtle problems:</p>
<ul>
<li>Ambiguity around the encoding of numbers and dealing with large numbers</li>
<li>Support of Unicode character strings, but no support for binary strings. People get around this by encoding binary data as Base64, which increases the data size by 33%.</li>
<li>There is optional schema support for both XML and JSON</li>
<li>CSV does not have any schema</li>
</ul>
<h4 id="Binary-encoding"><a href="#Binary-encoding" class="headerlink" title="Binary encoding"></a>Binary encoding</h4><p>JSON is less verbose than XML, but both still use a lot of space compared to binary formats. There are binary encodings for JSON (MesagePack, BSON, BJSON, UBJSON, BISON and Smile), similar thing for XML (WBXML and Fast Infoset).</p>
<p><strong>Apache Thrift and Protocol Buffers (protobuf) are binary encoding libraries.</strong></p>
<p>Thrift offers two different protocols:</p>
<ul>
<li><strong>BinaryProtocol</strong>, there are no field names like <code>userName</code>, <code>favouriteNumber</code>. Instead the data contains <em>field tags</em>, which are numbers (<code>1</code>, <code>2</code>)</li>
<li><strong>CompactProtocol</strong>, which is equivalent to BinaryProtocol but it packs the same information in less space. It packs the field type and the tag number into the same byte.</li>
</ul>
<p>Protocol Buffers are very similar to Thrift’s CompactProtocol, bit packing is a bit different and that might allow smaller compression.</p>
<p>Schemas inevitable need to change over time (<em>schema evolution</em>), how do Thrift and Protocol Buffers handle schema changes while keeping backward and forward compatibility changes?</p>
<ul>
<li><strong>Forward compatible support</strong>. As with new fields you add new tag numbers, old code trying to read new code, it can simply ignore not recognised tags.</li>
<li><strong>Backwards compatible support</strong>. As long as each field has a unique tag number, new code can always read old data. Every field you add after initial deployment of schema must be optional or have a default value.</li>
</ul>
<p>Removing fields is just like adding a field with backward and forward concerns reversed. You can only remove a field that is optional, and you can never use the same tag again.</p>
<p>What about changing the data type of a field? There is a risk that values will lose precision or get truncated.</p>
<h5 id="Avro"><a href="#Avro" class="headerlink" title="Avro"></a>Avro</h5><p>Apache Avro is another binary format that has two schema languages, one intended for human editing (Avro IDL), and one (based on JSON) that is more easily machine-readable.</p>
<p>You go go through the fields in the order they appear in the schema and use the schema to tell you the datatype of each field. Any mismatch in the schema between the reader and the writer would mean incorrectly decoded data.</p>
<p>What about schema evolution? When an application wants to encode some data, it encodes the data using whatever version of the schema it knows (<em>writer’s schema</em>).</p>
<p>When an application wants to decode some data, it is expecting the data to be in some schema (<em>reader’s schema</em>).</p>
<p>In Avro the writer’s schema and the reader’s schema <em>don’t have to be the same</em>. The Avro library resolves the differences by looking at the writer’s schema and the reader’s schema.</p>
<p>Forward compatibility means you can have a new version of the schema as writer and an old version of the schema as reader. Conversely, backward compatibility means that you can have a new version of the schema as reader and an old version as writer.</p>
<p>To maintain compatibility, you may only add or remove a field that has a default value.</p>
<p>If you were to add a field that has no default value, new readers wouldn’t be able to read data written by old writers.</p>
<p>Changing the datatype of a field is possible, provided that Avro can convert the type. Changing the name of a filed is tricky (backward compatible but not forward compatible).</p>
<p>The schema is identified encoded in the data. In a large file with lots of records, the writer of the file can just include the schema at the beginning of the file. On a database with individually written records, you cannot assume all the records will have the same schema, so you have to include a version number at the beginning of every encoded record. While sending records over the network, you can negotiate the schema version on connection setup.</p>
<p>Avro is friendlier to <em>dynamically generated schemas</em> (dumping into a file the database). You can fairly easily generate an Avro schema in JSON.</p>
<p>If the database schema changes, you can just generate a new Avro schema for the updated database schema and export data in the new Avro schema.</p>
<p>By contrast with Thrift and Protocol Buffers, every time the database schema changes, you would have to manually update the mappings from database column names to field tags.</p>
<p>Although textual formats such as JSON, XML and CSV are widespread, binary encodings based on schemas are also a viable option. As they have nice properties:</p>
<ul>
<li>Can be much more compact, since they can omit field names from the encoded data.</li>
<li>Schema is a valuable form of documentation, required for decoding, you can be sure it is up to date.</li>
<li>Database of schemas allows you to check forward and backward compatibility changes.</li>
<li>Generate code from the schema is useful, since it enables type checking at compile time.</li>
</ul>
<h3 id="Modes-of-dataflow"><a href="#Modes-of-dataflow" class="headerlink" title="Modes of dataflow"></a>Modes of dataflow</h3><p>Different process on how data flows between processes</p>
<h4 id="Via-databases"><a href="#Via-databases" class="headerlink" title="Via databases"></a>Via databases</h4><p>The process that writes to the database encodes the data, and the process that reads from the database decodes it.</p>
<p>A value in the database may be written by a <em>newer</em> version of the code, and subsequently read by an <em>older</em> version of the code that is still running.</p>
<p>When a new version of your application is deployed, you may entirely replace the old version with the new version within a few minutes. The same is not true in databases, the five-year-old data will still be there, in the original encoding, unless you have explicitly rewritten it. <em>Data outlives code</em>.</p>
<p>Rewriting (<em>migrating</em>) is expensive, most relational databases allow simple schema changes, such as adding a new column with a <code>null</code> default value without rewriting existing data. When an old row is read, the database fills in <code>null</code>s for any columns that are missing.</p>
<h4 id="Via-service-calls"><a href="#Via-service-calls" class="headerlink" title="Via service calls"></a>Via service calls</h4><p>You have processes that need to communicate over a network of <em>clients</em> and <em>servers</em>.</p>
<p>Services are similar to databases, each service should be owned by one team. and that team should be able to release versions of the service frequently, without having to coordinate with other teams. We should expect old and new versions of servers and clients to be running at the same time.</p>
<p><em>Remote procedure calls</em> (RPC) tries to make a request to a remote network service look the same as calling a function or method in your programming language, it seems convenient at first but the approach is flawed:</p>
<ul>
<li>A network request is unpredictable</li>
<li>A network request it may return without a result, due a <em>timeout</em></li>
<li>Retrying will cause the action to be performed multiple times, unless you build a mechanism for deduplication (<em>idempotence</em>).</li>
<li>A network request is much slower than a function call, and its latency is wildly variable.</li>
<li>Parameters need to be encoded into a sequence of bytes that can be sent over the network and becomes problematic with larger objects.</li>
<li>The RPC framework must translate datatypes from one language to another, not all languages have the same types.</li>
</ul>
<p><strong>There is no point trying to make a remote service look too much like a local object in your programming language, because it’s a fundamentally different thing.</strong></p>
<p>New generation of RPC frameworks are more explicit about the fact that a remote request is different from a local function call. Fiangle and Rest.li use <em>features</em> (<em>promises</em>) to encapsulate asyncrhonous actions.</p>
<p>RESTful API has some significant advantages like being good for experimentation and debugging.</p>
<p>REST seems to be the predominant style for public APIs. The main focus of RPC frameworks is on requests between services owned by the same organisation, typically within the same datacenter.</p>
<h4 id="Via-asynchronous-message-passing"><a href="#Via-asynchronous-message-passing" class="headerlink" title="Via asynchronous message passing"></a>Via asynchronous message passing</h4><p>In an <em>asynchronous message-passing</em> systems, a client’s request (usually called a <em>message</em>) is delivered to another process with low latency. The message goes via an intermediary called a <em>message broker</em> (<em>message queue</em> or <em>message-oriented middleware</em>) which stores the message temporarily. This has several advantages compared to direct RPC:</p>
<ul>
<li>It can act as a buffer if the recipient is unavailable or overloaded</li>
<li>It can automatically redeliver messages to a process that has crashed and prevent messages from being lost</li>
<li>It avoids the sender needing to know the IP address and port number of the recipient (useful in a cloud environment)</li>
<li>It allows one message to be sent to several recipients</li>
<li><strong>Decouples the sender from the recipient</strong></li>
</ul>
<p>The communication happens only in one direction. The sender doesn’t wait for the message to be delivered, but simply sends it and then forgets about it (<em>asynchronous</em>).</p>
<p>Open source implementations for message brokers are RabbitMQ, ActiveMQ, HornetQ, NATS, and Apache Kafka.</p>
<p>One process sends a message to a named <em>queue</em> or <em>topic</em> and the broker ensures that the message is delivered to one or more <em>consumers</em> or <em>subscribers</em> to that queue or topic.</p>
<p>Message brokers typically don’t enforce a particular data model, you can use any encoding format.</p>
<p>An <em>actor model</em> is a programming model for concurrency in a single process. Rather than dealing with threads (and their complications), logic is encapsulated in <em>actors</em>. Each actor typically represent one client or entity, it may have some local state, and it communicates with other actors by sending and receiving asynchronous messages. Message deliver is not guaranteed. Since each actor processes only one message at a time, it doesn’t need to worry about threads.</p>
<p>In <em>distributed actor frameworks</em>, this programming model is used to scale an application across multiple nodes. It basically integrates a message broker and the actor model into a single framework.</p>
<ul>
<li><em>Akka</em> uses Java’s built-in serialisation by default, which does not provide forward or backward compatibility. You can replace it with something like Protocol Buffers and the ability to do rolling upgrades.</li>
<li><em>Orleans</em> by default uses custom data encoding format that does not support rolling upgrade deployments.</li>
<li>In <em>Erlang OTP</em> it is surprisingly hard to make changes to record schemas.</li>
</ul>
<p>What happens if multiple machines are involved in storage and retrieval of data?</p>
<p>Reasons for distribute a database across multiple machines:</p>
<ul>
<li>Scalability</li>
<li>Fault tolerance&#x2F;high availability</li>
<li>Latency, having servers at various locations worldwide</li>
</ul>
<h2 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h2><p>Reasons why you might want to replicate data:</p>
<ul>
<li>To keep data geographically close to your users</li>
<li>Increase availability</li>
<li>Increase read throughput</li>
</ul>
<p>The difficulty in replication lies in handling <em>changes</em> to replicated data. Popular algorithms for replicating changes between nodes: <em>single-leader</em>, <em>multi-leader</em>, and <em>leaderless</em> replication.</p>
<h3 id="Leaders-and-followers"><a href="#Leaders-and-followers" class="headerlink" title="Leaders and followers"></a>Leaders and followers</h3><p>Each node that stores a copy of the database is called a <em>replica</em>.</p>
<p>Every write to the database needs to be processed by every replica. The most common solution for this is called <em>leader-based replication</em> (<em>active&#x2F;passive</em> or <em>master-slave replication</em>).</p>
<ol>
<li>One of the replicas is designated the <em>leader</em> (<em>master</em> or <em>primary</em>). Writes to the database must send requests to the leader.</li>
<li>Other replicas are known as <em>followers</em> (<em>read replicas</em>, <em>slaves</em>, <em>secondaries</em> or <em>hot stanbys</em>). The leader sends the data change to all of its followers as part of a <em>replication log</em> or <em>change stream</em>.</li>
<li>Reads can be query the leader or any of the followers, while writes are only accepted on the leader.</li>
</ol>
<p>MySQL, Oracle Data Guard, SQL Server’s AlwaysOn Availability Groups, MongoDB, RethinkDB, Espresso, Kafka and RabbitMQ are examples of these kind of databases.</p>
<h4 id="Synchronous-vs-asynchronous"><a href="#Synchronous-vs-asynchronous" class="headerlink" title="Synchronous vs asynchronous"></a>Synchronous vs asynchronous</h4><p><strong>The advantage of synchronous replication is that the follower is guaranteed to have an up-to-date copy of the data that is consistent with the leader. The disadvantage is that it the synchronous follower doesn’t respond, the write cannot be processed.</strong></p>
<p>It’s impractical for all followers to be synchronous. If you enable synchronous replication on a database, it usually means that <em>one</em> of the followers is synchronous, and the others are asynchronous. This guarantees up-to-date copy of the data on at least two nodes (this is sometimes called <em>semi-synchronous</em>).</p>
<p>Often, leader-based replication is asynchronous. Writes are not guaranteed to be durable, the main advantage of this approach is that the leader can continue processing writes.</p>
<h4 id="Setting-up-new-followers"><a href="#Setting-up-new-followers" class="headerlink" title="Setting up new followers"></a>Setting up new followers</h4><p>Copying data files from one node to another is typically not sufficient.</p>
<p>Setting up a follower can usually be done without downtime. The process looks like:</p>
<ol>
<li>Take a snapshot of the leader’s database</li>
<li>Copy the snapshot to the follower node</li>
<li>Follower requests data changes that have happened since the snapshot was taken</li>
<li>Once follower processed the backlog of data changes since snapshot, it has <em>caught up</em>.</li>
</ol>
<h4 id="Handling-node-outages"><a href="#Handling-node-outages" class="headerlink" title="Handling node outages"></a>Handling node outages</h4><p>How does high availability works with leader-based replication?</p>
<h4 id="Follower-failure-catchup-recovery"><a href="#Follower-failure-catchup-recovery" class="headerlink" title="Follower failure: catchup recovery"></a>Follower failure: catchup recovery</h4><p>Follower can connect to the leader and request all the data changes that occurred during the time when the follower was disconnected.</p>
<h4 id="Leader-failure-failover"><a href="#Leader-failure-failover" class="headerlink" title="Leader failure: failover"></a>Leader failure: failover</h4><p>One of the followers needs to be promoted to be the new leader, clients need to be reconfigured to send their writes to the new leader and followers need to start consuming data changes from the new leader.</p>
<p>Automatic failover consists:</p>
<ol>
<li>Determining that the leader has failed. If a node does not respond in a period of time it’s considered dead.</li>
<li>Choosing a new leader. The best candidate for leadership is usually the replica with the most up-to-date changes from the old leader.</li>
<li>Reconfiguring the system to use the new leader. The system needs to ensure that the old leader becomes a follower and recognises the new leader.</li>
</ol>
<p>Things that could go wrong:</p>
<ul>
<li>If asynchronous replication is used, the new leader may have received conflicting writes in the meantime.</li>
<li>Discarding writes is especially dangerous if other storage systems outside of the database need to be coordinated with the database contents.</li>
<li>It could happen that two nodes both believe that they are the leader (<em>split brain</em>). Data is likely to be lost or corrupted.</li>
<li>What is the right time before the leader is declared dead?</li>
</ul>
<p>For these reasons, some operation teams prefer to perform failovers manually, even if the software supports automatic failover.</p>
<h4 id="Implementation-of-replication-logs"><a href="#Implementation-of-replication-logs" class="headerlink" title="Implementation of replication logs"></a>Implementation of replication logs</h4><h5 id="Statement-based-replication"><a href="#Statement-based-replication" class="headerlink" title="Statement-based replication"></a>Statement-based replication</h5><p>The leader logs every <em>statement</em> and sends it to its followers (every <code>INSERT</code>, <code>UPDATE</code> or <code>DELETE</code>).</p>
<p>This type of replication has some problems:</p>
<ul>
<li>Non-deterministic functions such as <code>NOW()</code> or <code>RAND()</code> will generate different values on replicas.</li>
<li>Statements that depend on existing data, like auto-increments, must be executed in the same order in each replica.</li>
<li>Statements with side effects may result on different results on each replica.</li>
</ul>
<p>A solution to this is to replace any nondeterministic function with a fixed return value in the leader.</p>
<h5 id="Write-ahead-log-WAL-shipping"><a href="#Write-ahead-log-WAL-shipping" class="headerlink" title="Write-ahead log (WAL) shipping"></a>Write-ahead log (WAL) shipping</h5><p>The log is an append-only sequence of bytes containing all writes to the database. The leader can send it to its followers. This way of replication is used in PostgresSQL and Oracle.</p>
<p>The main disadvantage is that the log describes the data at a very low level (like which bytes were changed in which disk blocks), coupling it to the storage engine.</p>
<p>Usually is not possible to run different versions of the database in leaders and followers. This can have a big operational impact, like making it impossible to have a zero-downtime upgrade of the database.</p>
<h5 id="Logical-row-based-log-replication"><a href="#Logical-row-based-log-replication" class="headerlink" title="Logical (row-based) log replication"></a>Logical (row-based) log replication</h5><p>Basically a sequence of records describing writes to database tables at the granularity of a row:</p>
<ul>
<li>For an inserted row, the new values of all columns.</li>
<li>For a deleted row, the information that uniquely identifies that column.</li>
<li>For an updated row, the information to uniquely identify that row and all the new values of the columns.</li>
</ul>
<p>A transaction that modifies several rows, generates several of such logs, followed by a record indicating that the transaction was committed. MySQL binlog uses this approach.</p>
<p>Since logical log is decoupled from the storage engine internals, it’s easier to make it backwards compatible.</p>
<p>Logical logs are also easier for external applications to parse, useful for data warehouses, custom indexes and caches (<em>change data capture</em>).</p>
<h5 id="Trigger-based-replication"><a href="#Trigger-based-replication" class="headerlink" title="Trigger-based replication"></a>Trigger-based replication</h5><p>There are some situations were you may need to move replication up to the application layer.</p>
<p>A trigger lets you register custom application code that is automatically executed when a data change occurs. This is a good opportunity to log this change into a separate table, from which it can be read by an external process.</p>
<p>Main disadvantages is that this approach has greater overheads, is more prone to bugs but it may be useful due to its flexibility.</p>
<h3 id="Problems-with-replication-lag"><a href="#Problems-with-replication-lag" class="headerlink" title="Problems with replication lag"></a>Problems with replication lag</h3><p>Node failures is just one reason for wanting replication. Other reasons are scalability and latency.</p>
<p>In a <em>read-scaling</em> architecture, you can increase the capacity for serving read-only requests simply by adding more followers. However, this only realistically works on asynchronous replication. The more nodes you have, the likelier is that one will be down, so a fully synchronous configuration would be unreliable.</p>
<p>With an asynchronous approach, a follower may fall behind, leading to inconsistencies in the database (<em>eventual consistency</em>).</p>
<p>The <em>replication lag</em> could be a fraction of a second or several seconds or even minutes.</p>
<p>The problems that may arise and how to solve them.</p>
<h4 id="Reading-your-own-writes"><a href="#Reading-your-own-writes" class="headerlink" title="Reading your own writes"></a>Reading your own writes</h4><p><em>Read-after-write consistency</em>, also known as <em>read-your-writes consistency</em> is a guarantee that if the user reloads the page, they will always see any updates they submitted themselves.</p>
<p>How to implement it:</p>
<ul>
<li><strong>When reading something that the user may have modified, read it from the leader.</strong> For example, user profile information on a social network is normally only editable by the owner. A simple rule is always read the user’s own profile from the leader.</li>
<li>You could track the time of the latest update and, for one minute after the last update, make all reads from the leader.</li>
<li>The client can remember the timestamp of the most recent write, then the system can ensure that the replica serving any reads for that user reflects updates at least until that timestamp.</li>
<li>If your replicas are distributed across multiple datacenters, then any request needs to be routed to the datacenter that contains the leader.</li>
</ul>
<p>Another complication is that the same user is accessing your service from multiple devices, you may want to provide <em>cross-device</em> read-after-write consistency.</p>
<p>Some additional issues to consider:</p>
<ul>
<li>Remembering the timestamp of the user’s last update becomes more difficult. The metadata will need to be centralised.</li>
<li>If replicas are distributed across datacenters, there is no guarantee that connections from different devices will be routed to the same datacenter. You may need to route requests from all of a user’s devices to the same datacenter.</li>
</ul>
<h4 id="Monotonic-reads"><a href="#Monotonic-reads" class="headerlink" title="Monotonic reads"></a>Monotonic reads</h4><p>Because of followers falling behind, it’s possible for a user to see things <em>moving backward in time</em>.</p>
<p>When you read data, you may see an old value; monotonic reads only means that if one user makes several reads in sequence, they will not see time go backward.</p>
<p>Make sure that each user always makes their reads from the same replica. The replica can be chosen based on a hash of the user ID. If the replica fails, the user’s queries will need to be rerouted to another replica.</p>
<h4 id="Consistent-prefix-reads"><a href="#Consistent-prefix-reads" class="headerlink" title="Consistent prefix reads"></a>Consistent prefix reads</h4><p>If a sequence of writes happens in a certain order, then anyone reading those writes will see them appear in the same order.</p>
<p>This is a particular problem in partitioned (sharded) databases as there is no global ordering of writes.</p>
<p>A solution is to make sure any writes casually related to each other are written to the same partition.</p>
<h4 id="Solutions-for-replication-lag"><a href="#Solutions-for-replication-lag" class="headerlink" title="Solutions for replication lag"></a>Solutions for replication lag</h4><p><em>Transactions</em> exist so there is a way for a database to provide stronger guarantees so that the application can be simpler.</p>
<h3 id="Multi-leader-replication"><a href="#Multi-leader-replication" class="headerlink" title="Multi-leader replication"></a>Multi-leader replication</h3><p>Leader-based replication has one major downside: there is only one leader, and all writes must go through it.</p>
<p>A natural extension is to allow more than one node to accept writes (<em>multi-leader</em>, <em>master-master</em> or <em>active&#x2F;active</em> replication) where each leader simultaneously acts as a follower to the other leaders.</p>
<h4 id="Use-cases-for-multi-leader-replication"><a href="#Use-cases-for-multi-leader-replication" class="headerlink" title="Use cases for multi-leader replication"></a>Use cases for multi-leader replication</h4><p>It rarely makes sense to use multi-leader setup within a single datacenter.</p>
<h5 id="Multi-datacenter-operation"><a href="#Multi-datacenter-operation" class="headerlink" title="Multi-datacenter operation"></a>Multi-datacenter operation</h5><p>You can have a leader in <em>each</em> datacenter. Within each datacenter, regular leader-follower replication is used. Between datacenters, each datacenter leader replicates its changes to the leaders in other datacenters.</p>
<p>Compared to a single-leader replication model deployed in multi-datacenters</p>
<ul>
<li><strong>Performance.</strong> With single-leader, every write must go across the internet to wherever the leader is, adding significant latency. In multi-leader every write is processed in the local datacenter and replicated asynchronously to other datacenters. The network delay is hidden from users and perceived performance may be better.</li>
<li><strong>Tolerance of datacenter outages.</strong> In single-leader if the datacenter with the leader fails, failover can promote a follower in another datacenter. In multi-leader, each datacenter can continue operating independently from others.</li>
<li><strong>Tolerance of network problems.</strong> Single-leader is very sensitive to problems in this inter-datacenter link as writes are made synchronously over this link. Multi-leader with asynchronous replication can tolerate network problems better.</li>
</ul>
<p>Multi-leader replication is implemented with Tungsten Replicator for MySQL, BDR for PostgreSQL or GoldenGate for Oracle.</p>
<p>It’s common to fall on subtle configuration pitfalls. Autoincrementing keys, triggers and integrity constraints can be problematic. Multi-leader replication is often considered dangerous territory and avoided if possible.</p>
<h5 id="Clients-with-offline-operation"><a href="#Clients-with-offline-operation" class="headerlink" title="Clients with offline operation"></a>Clients with offline operation</h5><p>If you have an application that needs to continue to work while it is disconnected from the internet, every device that has a local database can act as a leader, and there will be some asynchronous multi-leader replication process (imagine, a Calendar application).</p>
<p>CouchDB is designed for this mode of operation.</p>
<h4 id="Collaborative-editing"><a href="#Collaborative-editing" class="headerlink" title="Collaborative editing"></a>Collaborative editing</h4><p><em>Real-time collaborative editing</em> applications allow several people to edit a document simultaneously. Like Etherpad or Google Docs.</p>
<p>The user edits a document, the changes are instantly applied to their local replica and asynchronously replicated to the server and any other user.</p>
<p>If you want to avoid editing conflicts, you must the lock the document before a user can edit it.</p>
<p>For faster collaboration, you may want to make the unit of change very small (like a keystroke) and avoid locking.</p>
<h4 id="Handling-write-conflicts"><a href="#Handling-write-conflicts" class="headerlink" title="Handling write conflicts"></a>Handling write conflicts</h4><p>The biggest problem with multi-leader replication is when conflict resolution is required. This problem does not happen in a single-leader database.</p>
<h5 id="Synchronous-vs-asynchronous-conflict-detection"><a href="#Synchronous-vs-asynchronous-conflict-detection" class="headerlink" title="Synchronous vs asynchronous conflict detection"></a>Synchronous vs asynchronous conflict detection</h5><p>In single-leader the second writer can be blocked and wait the first one to complete, forcing the user to retry the write. On multi-leader if both writes are successful, the conflict is only detected asynchronously later in time.</p>
<p>If you want synchronous conflict detection, you might as well use single-leader replication.</p>
<h5 id="Conflict-avoidance"><a href="#Conflict-avoidance" class="headerlink" title="Conflict avoidance"></a>Conflict avoidance</h5><p>The simplest strategy for dealing with conflicts is to avoid them. If all writes for a particular record go through the same leader, then conflicts cannot occur.</p>
<p>On an application where a user can edit their own data, you can ensure that requests from a particular user are always routed to the same datacenter and use the leader in that datacenter for reading and writing.</p>
<h5 id="Converging-toward-a-consistent-state"><a href="#Converging-toward-a-consistent-state" class="headerlink" title="Converging toward a consistent state"></a>Converging toward a consistent state</h5><p>On single-leader, the last write determines the final value of the field.</p>
<p>In multi-leader, it’s not clear what the final value should be.</p>
<p>The database must resolve the conflict in a <em>convergent</em> way, all replicas must arrive a the same final value when all changes have been replicated.</p>
<p>Different ways of achieving convergent conflict resolution.</p>
<ul>
<li>Give each write a unique ID (timestamp, long random number, UUID, or a has of the key and value), pick the write with the highest ID as the <em>winner</em> and throw away the other writes. This is known as <em>last write wins</em> (LWW) and it is dangerously prone to data loss.</li>
<li>Give each replica a unique ID, writes that originated at a higher-numbered replica always take precedence. This approach also implies data loss.</li>
<li>Somehow merge the values together.</li>
<li>Record the conflict and write application code that resolves it a to some later time (perhaps prompting the user).</li>
</ul>
<h5 id="Custom-conflict-resolution"><a href="#Custom-conflict-resolution" class="headerlink" title="Custom conflict resolution"></a>Custom conflict resolution</h5><p>Multi-leader replication tools let you write conflict resolution logic using application code.</p>
<ul>
<li><strong>On write.</strong> As soon as the database system detects a conflict in the log of replicated changes, it calls the conflict handler.</li>
<li><strong>On read.</strong> All the conflicting writes are stored. On read, multiple versions of the data are returned to the application. The application may prompt the user or automatically resolve the conflict. CouchDB works this way.</li>
</ul>
<h4 id="Multi-leader-replication-topologies"><a href="#Multi-leader-replication-topologies" class="headerlink" title="Multi-leader replication topologies"></a>Multi-leader replication topologies</h4><p>A <em>replication topology</em> describes the communication paths along which writes are propagated from one node to another.</p>
<p>The most general topology is <em>all-to-all</em> in which every leader sends its writes to every other leader. MySQL uses <em>circular topology</em>, where each nodes receives writes from one node and forwards those writes to another node. Another popular topology has the shape of a <em>star</em>, one designated node forwards writes to all of the other nodes.</p>
<p>In circular and star topologies a write might need to pass through multiple nodes before they reach all replicas. To prevent infinite replication loops each node is given a unique identifier and the replication log tags each write with the identifiers of the nodes it has passed through. When a node fails it can interrupt the flow of replication messages.</p>
<p>In all-to-all topology fault tolerance is better as messages can travel along different paths avoiding a single point of failure. It has some issues too, some network links may be faster than others and some replication messages may “overtake” others. To order events correctly. there is a technique called <em>version vectors</em>. PostgresSQL BDR does not provide casual ordering of writes, and Tungsten Replicator for MySQL doesn’t even try to detect conflicts.</p>
<h3 id="Leaderless-replication"><a href="#Leaderless-replication" class="headerlink" title="Leaderless replication"></a>Leaderless replication</h3><p>Simply put, any replica can directly accept writes from clients. Databases like look like Amazon’s in-house <em>Dynamo</em> datastore. <em>Riak</em>, <em>Cassandra</em> and <em>Voldemort</em> follow the <em>Dynamo style</em>.</p>
<p>In a leaderless configuration, failover does not exist. Clients send the write to all replicas in parallel.</p>
<p><em>Read requests are also sent to several nodes in parallel</em>. The client may get different responses. Version numbers are used to determine which value is newer.</p>
<p>Eventually, all the data is copied to every replica. After a unavailable node come back online, it has two different mechanisms to catch up:</p>
<ul>
<li><strong>Read repair.</strong> When a client detect any stale responses, write the newer value back to that replica.</li>
<li><strong>Anti-entropy process.</strong> There is a background process that constantly looks for differences in data between replicas and copies any missing data from one replica to he other. It does not copy writes in any particular order.</li>
</ul>
<h4 id="Quorums-for-reading-and-writing"><a href="#Quorums-for-reading-and-writing" class="headerlink" title="Quorums for reading and writing"></a>Quorums for reading and writing</h4><p>If there are <em>n</em> replicas, every write must be confirmed by <em>w</em> nodes to be considered successful, and we must query at least <em>r</em> nodes for each read. As long as <em>w</em> + <em>r</em> &gt; <em>n</em>, we expect to get an up-to-date value when reading. <em>r</em> and <em>w</em> values are called <em>quorum</em> reads and writes. Are the minimum number of votes required for the read or write to be valid.</p>
<p>A common choice is to make <em>n</em> and odd number (typically 3 or 5) and to set <em>w</em> &#x3D; <em>r</em> &#x3D; (<em>n</em> + 1)&#x2F;2 (rounded up).</p>
<p>Limitations:</p>
<ul>
<li>Sloppy quorum, the <em>w</em> writes may end up on different nodes than the <em>r</em> reads, so there is no longer a guaranteed overlap.</li>
<li>If two writes occur concurrently, and is not clear which one happened first, the only safe solution is to merge them. Writes can be lost due to clock skew.</li>
<li>If a write happens concurrently with a read, the write may be reflected on only some of the replicas.</li>
<li>If a write succeeded on some replicas but failed on others, it is not rolled back on the replicas where it succeeded. Reads may or may not return the value from that write.</li>
<li>If a node carrying a new value fails, and its data is restored from a replica carrying an old value, the number of replicas storing the new value may break the quorum condition.</li>
</ul>
<p><strong>Dynamo-style databases are generally optimised for use cases that can tolerate eventual consistency.</strong></p>
<h4 id="Sloppy-quorums-and-hinted-handoff"><a href="#Sloppy-quorums-and-hinted-handoff" class="headerlink" title="Sloppy quorums and hinted handoff"></a>Sloppy quorums and hinted handoff</h4><p>Leaderless replication may be appealing for use cases that require high availability and low latency, and that can tolerate occasional stale reads.</p>
<p>It’s likely that the client won’t be able to connect to <em>some</em> database nodes during a network interruption.</p>
<ul>
<li>Is it better to return errors to all requests for which we cannot reach quorum of <em>w</em> or <em>r</em> nodes?</li>
<li>Or should we accept writes anyway, and write them to some nodes that are reachable but aren’t among the <em>n</em> nodes on which the value usually lives?</li>
</ul>
<p>The latter is known as <em>sloppy quorum</em>: writes and reads still require <em>w</em> and <em>r</em> successful responses, but those may include nodes that are not among the designated <em>n</em> “home” nodes for a value.</p>
<p>Once the network interruption is fixed, any writes are sent to the appropriate “home” nodes (<em>hinted handoff</em>).</p>
<p>Sloppy quorums are useful for increasing write availability: as long as any <em>w</em> nodes are available, the database can accept writes. This also means that you cannot be sure to read the latest value for a key, because it may have been temporarily written to some nodes outside of <em>n</em>.</p>
<h5 id="Multi-datacenter-operation-1"><a href="#Multi-datacenter-operation-1" class="headerlink" title="Multi-datacenter operation"></a>Multi-datacenter operation</h5><p>Each write from a client is sent to all replicas, regardless of datacenter, but the client usually only waits for acknowledgement from a quorum of nodes within its local datacenter so that it is unaffected by delays and interruptions on cross-datacenter link.</p>
<h4 id="Detecting-concurrent-writes"><a href="#Detecting-concurrent-writes" class="headerlink" title="Detecting concurrent writes"></a>Detecting concurrent writes</h4><p>In order to become eventually consistent, the replicas should converge toward the same value. If you want to avoid losing data, you application developer, need to know a lot about the internals of your database’s conflict handling.</p>
<ul>
<li><strong>Last write wins (discarding concurrent writes).</strong> Even though the writes don’ have a natural ordering, we can force an arbitrary order on them. We can attach a timestamp to each write and pick the most recent. There are some situations, such as caching, on which lost writes are acceptable. If losing data is not acceptable, LWW is a poor choice for conflict resolution.</li>
<li><strong>The “happens-before” relationship and concurrency.</strong> Whether one operation happens before another operation is the key to defining what concurrency means. <strong>We can simply say that to operations are <em>concurrent</em> if neither happens before the other.</strong> Either A happened before B, or B happened before A, or A and B are concurrent.</li>
</ul>
<h5 id="Capturing-the-happens-before-relationship"><a href="#Capturing-the-happens-before-relationship" class="headerlink" title="Capturing the happens-before relationship"></a>Capturing the happens-before relationship</h5><p>The server can determine whether two operations are concurrent by looking at the version numbers.</p>
<ul>
<li>The server maintains a version number for every key, increments the version number every time that key is written, and stores the new version number along the value written.</li>
<li>Client reads a key, the server returns all values that have not been overwrite, as well as the latest version number. A client must read a key before writing.</li>
<li>Client writes a key, it must include the version number from the prior read, and it must merge together all values that it received in the prior read.</li>
<li>Server receives a write with a particular version number, it can overwrite all values with that version number or below, but it must keep all values with a higher version number.</li>
</ul>
<h5 id="Merging-concurrently-written-values"><a href="#Merging-concurrently-written-values" class="headerlink" title="Merging concurrently written values"></a>Merging concurrently written values</h5><p>No data is silently dropped. It requires clients do some extra work, they have to clean up afterward by merging the concurrently written values. Riak calls these concurrent values <em>siblings</em>.</p>
<p>Merging sibling values is the same problem as conflict resolution in multi-leader replication. A simple approach is to just pick one of the values on a version number or timestamp (last write wins). You may need to do something more intelligent in application code to avoid losing data.</p>
<p>If you want to allow people to <em>remove</em> things, union of siblings may not yield the right result. An item cannot simply be deleted from the database when it is removed, the system must leave a marker with an appropriate version number to indicate that the item has been removed when merging siblings (<em>tombstone</em>).</p>
<p>Merging siblings in application code is complex and error-prone, there are efforts to design data structures that can perform this merging automatically (CRDTs).</p>
<h4 id="Version-vectors"><a href="#Version-vectors" class="headerlink" title="Version vectors"></a>Version vectors</h4><p>We need a version number <em>per replica</em> as well as per key. Each replica increments its own version number when processing a write, and also keeps track of the version numbers it has seen from each of the other replicas.</p>
<p>The collection of version numbers from all the replicas is called a <em>version vector</em>.</p>
<p>Version vector are sent from the database replicas to clients when values are read, and need to be sent back to the database when a value is subsequently written. Riak calls this <em>casual context</em>. Version vectors allow the database to distinguish between overwrites and concurrent writes.</p>
<h2 id="Partitioning"><a href="#Partitioning" class="headerlink" title="Partitioning"></a>Partitioning</h2><p>Replication, for very large datasets or very high query throughput is not sufficient, we need to break the data up into <em>partitions</em> (<em>sharding</em>).</p>
<p>Basically, each partition is a small database of its own.</p>
<p>The main reason for wanting to partition data is <em>scalability</em>, query load can be load cabe distributed across many processors. Throughput can be scaled by adding more nodes.</p>
<h3 id="Partitioning-and-replication"><a href="#Partitioning-and-replication" class="headerlink" title="Partitioning and replication"></a>Partitioning and replication</h3><p>Each record belongs to exactly one partition, it may still be stored on several nodes for fault tolerance.</p>
<p>A node may store more than one partition.</p>
<h3 id="Partition-of-key-value-data"><a href="#Partition-of-key-value-data" class="headerlink" title="Partition of key-value data"></a>Partition of key-value data</h3><p>Our goal with partitioning is to spread the data and the query load evenly across nodes.</p>
<p>If partition is unfair, we call it <em>skewed</em>. It makes partitioning much less effective. A partition with disproportionately high load is called a <em>hot spot</em>.</p>
<p>The simplest approach is to assign records to nodes randomly. The main disadvantage is that if you are trying to read a particular item, you have no way of knowing which node it is on, so you have to query all nodes in parallel.</p>
<h4 id="Partition-by-key-range"><a href="#Partition-by-key-range" class="headerlink" title="Partition by key range"></a>Partition by key range</h4><p>Assign a continuous range of keys, like the volumes of a paper encyclopaedia. Boundaries might be chose manually by an administrator, or the database can choose them automatically. On each partition, keys are in sorted order so scans are easy.</p>
<p>The downside is that certain access patterns can lead to hot spots.</p>
<h4 id="Partitioning-by-hash-of-key"><a href="#Partitioning-by-hash-of-key" class="headerlink" title="Partitioning by hash of key"></a>Partitioning by hash of key</h4><p>A good hash function takes skewed data and makes it uniformly distributed. There is no need to be cryptographically strong (MongoDB uses MD5 and Cassandra uses Murmur3). You can assign each partition a range of hashes. The boundaries can be evenly spaced or they can be chosen pseudorandomly (<em>consistent hashing</em>).</p>
<p>Unfortunately we lose the ability to do efficient range queries. Keys that were once adjacent are now scattered across all the partitions. Any range query has to be sent to all partitions.</p>
<h4 id="Skewed-workloads-and-relieving-hot-spots"><a href="#Skewed-workloads-and-relieving-hot-spots" class="headerlink" title="Skewed workloads and relieving hot spots"></a>Skewed workloads and relieving hot spots</h4><p>You can’t avoid hot spots entirely. For example, you may end up with large volume of writes to the same key.</p>
<p>It’s the responsibility of the application to reduce the skew. A simple technique is to add a random number to the beginning or end of the key.</p>
<p>Splitting writes across different keys, makes reads now to do some extra work and combine them.</p>
<h3 id="Partitioning-and-secondary-indexes"><a href="#Partitioning-and-secondary-indexes" class="headerlink" title="Partitioning and secondary indexes"></a>Partitioning and secondary indexes</h3><p>The situation gets more complicated if secondary indexes are involved. A secondary index usually doesn’t identify the record uniquely. They don’t map neatly to partitions.</p>
<h4 id="Partitioning-secondary-indexes-by-document"><a href="#Partitioning-secondary-indexes-by-document" class="headerlink" title="Partitioning secondary indexes by document"></a>Partitioning secondary indexes by document</h4><p>Each partition maintains its secondary indexes, covering only the documents in that partition (<em>local index</em>).</p>
<p>You need to send the query to <em>all</em> partitions, and combine all the results you get back (<em>scatter&#x2F;gather</em>). This is prone to tail latency amplification and is widely used in MongoDB, Riak, Cassandra, Elasticsearch, SolrCloud and VoltDB.</p>
<h4 id="Partitioning-secondary-indexes-by-term"><a href="#Partitioning-secondary-indexes-by-term" class="headerlink" title="Partitioning secondary indexes by term"></a>Partitioning secondary indexes by term</h4><p>We construct a <em>global index</em> that covers data in all partitions. The global index must also be partitioned so it doesn’t become the bottleneck.</p>
<p>It is called the <em>term-partitioned</em> because the term we’re looking for determines the partition of the index.</p>
<p>Partitioning by term can be useful for range scans, whereas partitioning on a hash of the term gives a more even distribution load.</p>
<p>The advantage is that it can make reads more efficient: rather than doing scatter&#x2F;gather over all partitions, a client only needs to make a request to the partition containing the term that it wants. The downside of a global index is that writes are slower and complicated.</p>
<h3 id="Rebalancing-partitions"><a href="#Rebalancing-partitions" class="headerlink" title="Rebalancing partitions"></a>Rebalancing partitions</h3><p>The process of moving load from one node in the cluster to another.</p>
<p>Strategies for rebalancing:</p>
<ul>
<li><strong>How not to do it: Hash mod n.</strong> The problem with <em>mod N</em> is that if the number of nodes <em>N</em> changes, most of the keys will need to be moved from one node to another.</li>
<li><strong>Fixed number of partitions.</strong> Create many more partitions than there are nodes and assign several partitions to each node. If a node is added to the cluster, we can <em>steal</em> a few partitions from every existing node until partitions are fairly distributed once again. The number of partitions does not change, nor does the assignment of keys to partitions. The only thing that change is the assignment of partitions to nodes. This is used in Riak, Elasticsearch, Couchbase, and Voldemport. <strong>You need to choose a high enough number of partitions to accomodate future growth.</strong> Neither too big or too small.</li>
<li><strong>Dynamic partitioning.</strong> The number of partitions adapts to the total data volume. An empty database starts with an empty partition. While the dataset is small, all writes have to processed by a single node while the others nodes sit idle. HBase and MongoDB allow an initial set of partitions to be configured (<em>pre-splitting</em>).</li>
<li><strong>Partitioning proportionally to nodes.</strong> Cassandra and Ketama make the number of partitions proportional to the number of nodes. Have a fixed number of partitions <em>per node</em>. This approach also keeps the size of each partition fairly stable.</li>
</ul>
<h4 id="Automatic-versus-manual-rebalancing"><a href="#Automatic-versus-manual-rebalancing" class="headerlink" title="Automatic versus manual rebalancing"></a>Automatic versus manual rebalancing</h4><p>Fully automated rebalancing may seem convenient but the process can overload the network or the nodes and harm the performance of other requests while the rebalancing is in progress.</p>
<p>It can be good to have a human in the loop for rebalancing. You may avoid operational surprises.</p>
<h3 id="Request-routing"><a href="#Request-routing" class="headerlink" title="Request routing"></a>Request routing</h3><p>This problem is also called <em>service discovery</em>. There are different approaches:</p>
<ul>
<li>Allow clients to contact any node and make them handle the request directly, or forward the request to the appropriate node.</li>
<li>Send all requests from clients to a routing tier first that acts as a partition-aware load balancer.</li>
<li>Make clients aware of the partitioning and the assignment of partitions to nodes.</li>
</ul>
<p>In many cases the problem is: how does the component making the routing decision learn about changes in the assignment of partitions to nodes?</p>
<p>Many distributed data systems rely on a separate coordination service such as ZooKeeper to keep track of this cluster metadata. Each node registers itself in ZooKeeper, and ZooKeeper maintains the authoritative mapping of partitions to nodes. The routing tier or the partitioning-aware client, can subscribe to this information in ZooKeeper. HBase, SolrCloud and Kafka use ZooKeeper to track partition assignment. MongoDB relies on its own <em>config server</em>. Cassandra and Riak take a different approach: they use a <em>gossip protocol</em>.</p>
<h4 id="Parallel-query-execution"><a href="#Parallel-query-execution" class="headerlink" title="Parallel query execution"></a>Parallel query execution</h4><p><em>Massively parallel processing</em> (MPP) relational database products are much more sophisticated in the types of queries they support.</p>
<h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><p>Implementing fault-tolerant mechanisms is a lot of work.</p>
<h3 id="The-slippery-concept-of-a-transaction"><a href="#The-slippery-concept-of-a-transaction" class="headerlink" title="The slippery concept of a transaction"></a>The slippery concept of a transaction</h3><p><em>Transactions</em> have been the mechanism of choice for simplifying these issues. Conceptually, all the reads and writes in a transaction are executed as one operation: either the entire transaction succeeds (<em>commit</em>) or it fails (<em>abort</em>, <em>rollback</em>).</p>
<p>The application is free to ignore certain potential error scenarios and concurrency issues (<em>safety guarantees</em>).</p>
<h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><ul>
<li><strong>Atomicity.</strong> Is <em>not</em> about concurrency. It is what happens if a client wants to make several writes, but a fault occurs after some of the writes have been processed. <em>Abortability</em> would have been a better term than <em>atomicity</em>.</li>
<li><strong>Consistency.</strong> <em>Invariants</em> on your data must always be true. The idea of consistency depends on the application’s notion of invariants. Atomicity, isolation, and durability are properties of the database, whereas consistency (in an ACID sense) is a property of the application.</li>
<li><strong>Isolation.</strong> Concurrently executing transactions are isolated from each other. It’s also called <em>serializability</em>, each transaction can pretend that it is the only transaction running on the entire database, and the result is the same as if they had run <em>serially</em> (one after the other).</li>
<li><strong>Durability.</strong> Once a transaction has committed successfully, any data it has written will not be forgotten, even if there is a hardware fault or the database crashes. In a single-node database this means the data has been written to nonvolatile storage. In a replicated database it means the data has been successfully copied to some number of nodes.</li>
</ul>
<p>Atomicity can be implemented using a log for crash recovery, and isolation can be implemented using a lock on each object, allowing only one thread to access an object at any one time.</p>
<p><strong>A transaction is a mechanism for grouping multiple operations on multiple objects into one unit of execution.</strong></p>
<h4 id="Handling-errors-and-aborts"><a href="#Handling-errors-and-aborts" class="headerlink" title="Handling errors and aborts"></a>Handling errors and aborts</h4><p>A key feature of a transaction is that it can be aborted and safely retried if an error occurred.</p>
<p>In datastores with leaderless replication is the application’s responsibility to recover from errors.</p>
<p>The whole point of aborts is to enable safe retries.</p>
<h3 id="Weak-isolation-levels"><a href="#Weak-isolation-levels" class="headerlink" title="Weak isolation levels"></a>Weak isolation levels</h3><p>Concurrency issues (race conditions) come into play when one transaction reads data that is concurrently modified by another transaction, or when two transactions try to simultaneously modify the same data.</p>
<p>Databases have long tried to hide concurrency issues by providing <em>transaction isolation</em>.</p>
<p>In practice, is not that simple. Serializable isolation has a performance cost. It’s common for systems to use weaker levels of isolation, which protect against <em>some</em> concurrency issues, but not all.</p>
<p>Weak isolation levels used in practice:</p>
<h4 id="Read-committed"><a href="#Read-committed" class="headerlink" title="Read committed"></a>Read committed</h4><p>It makes two guarantees:</p>
<ol>
<li>When reading from the database, you will only see data that has been committed (no <em>dirty reads</em>). Writes by a transaction only become visible to others when that transaction commits.</li>
<li>When writing to the database, you will only overwrite data that has been committed (no <em>dirty writes</em>). Dirty writes are prevented usually by delaying the second write until the first write’s transaction has committed or aborted.</li>
</ol>
<p>Most databases prevent dirty writes by using row-level locks that hold the lock until the transaction is committed or aborted. Only one transaction can hold the lock for any given object.</p>
<p>On dirty reads, requiring read locks does not work well in practice as one long-running write transaction can force many read-only transactions to wait. For every object that is written, the database remembers both the old committed value and the new value set by the transaction that currently holds the write lock. While the transaction is ongoing, any other transactions that read the object are simply given the old value.</p>
<h4 id="Snapshot-isolation-and-repeatable-read"><a href="#Snapshot-isolation-and-repeatable-read" class="headerlink" title="Snapshot isolation and repeatable read"></a>Snapshot isolation and repeatable read</h4><p>There are still plenty of ways in which you can have concurrency bugs when using this isolation level.</p>
<p><em>Nonrepeatable read</em> or <em>read skew</em>, when you read at the same time you committed a change you may see temporal and inconsistent results.</p>
<p>There are some situations that cannot tolerate such temporal inconsistencies:</p>
<ul>
<li><strong>Backups.</strong> During the time that the backup process is running, writes will continue to be made to the database. If you need to restore from such a backup, inconsistencies can become permanent.</li>
<li><strong>Analytic queries and integrity checks.</strong> You may get nonsensical results if they observe parts of the database at different points in time.</li>
</ul>
<p><em>Snapshot isolation</em> is the most common solution. Each transaction reads from a <em>consistent snapshot</em> of the database.</p>
<p>The implementation of snapshots typically use write locks to prevent dirty writes.</p>
<p>The database must potentially keep several different committed versions of an object (<em>multi-version concurrency control</em> or MVCC).</p>
<p>Read committed uses a separate snapshot for each query, while snapshot isolation uses the same snapshot for an entire transaction.</p>
<p>How do indexes work in a multi-version database? One option is to have the index simply point to all versions of an object and require an index query to filter out any object versions that are not visible to the current transaction.</p>
<p>Snapshot isolation is called <em>serializable</em> in Oracle, and <em>repeatable read</em> in PostgreSQL and MySQL.</p>
<h4 id="Preventing-lost-updates"><a href="#Preventing-lost-updates" class="headerlink" title="Preventing lost updates"></a>Preventing lost updates</h4><p>This might happen if an application reads some value from the database, modifies it, and writes it back. If two transactions do this concurrently, one of the modifications can be lost (later write <em>clobbers</em> the earlier write).</p>
<h5 id="Atomic-write-operations"><a href="#Atomic-write-operations" class="headerlink" title="Atomic write operations"></a>Atomic write operations</h5><p>A solution for this it to avoid the need to implement read-modify-write cycles and provide atomic operations such us</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> counters <span class="keyword">SET</span> <span class="keyword">value</span> <span class="operator">=</span> <span class="keyword">value</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">WHERE</span> key <span class="operator">=</span> <span class="string">&#x27;foo&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>MongoDB provides atomic operations for making local modifications, and Redis provides atomic operations for modifying data structures.</p>
<h5 id="Explicit-locking"><a href="#Explicit-locking" class="headerlink" title="Explicit locking"></a>Explicit locking</h5><p>The application explicitly lock objects that are going to be updated.</p>
<h5 id="Automatically-detecting-lost-updates"><a href="#Automatically-detecting-lost-updates" class="headerlink" title="Automatically detecting lost updates"></a>Automatically detecting lost updates</h5><p>Allow them to execute in parallel, if the transaction manager detects a lost update, abort the transaction and force it to retry its read-modify-write cycle.</p>
<p>MySQL&#x2F;InnoDB’s repeatable read does not detect lost updates.</p>
<h5 id="Compare-and-set"><a href="#Compare-and-set" class="headerlink" title="Compare-and-set"></a>Compare-and-set</h5><p>If the current value does not match with what you previously read, the update has no effect.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> wiki_pages <span class="keyword">SET</span> content <span class="operator">=</span> <span class="string">&#x27;new content&#x27;</span></span><br><span class="line">  <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1234</span> <span class="keyword">AND</span> content <span class="operator">=</span> <span class="string">&#x27;old content&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="Conflict-resolution-and-replication"><a href="#Conflict-resolution-and-replication" class="headerlink" title="Conflict resolution and replication"></a>Conflict resolution and replication</h5><p>With multi-leader or leaderless replication, compare-and-set do not apply.</p>
<p>A common approach in replicated databases is to allow concurrent writes to create several conflicting versions of a value (also know as <em>siblings</em>), and to use application code or special data structures to resolve and merge these versions after the fact.</p>
<h4 id="Write-skew-and-phantoms"><a href="#Write-skew-and-phantoms" class="headerlink" title="Write skew and phantoms"></a>Write skew and phantoms</h4><p>Imagine Alice and Bob are two on-call doctors for a particular shift. Imagine both request to leave because they are feeling unwell. Unfortunately they happen to click the button to go off call at approximately the same time.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALICE                                   BOB</span><br><span class="line"></span><br><span class="line">┌─ BEGIN TRANSACTION                    ┌─ BEGIN TRANSACTION</span><br><span class="line">│                                       │</span><br><span class="line">├─ currently_on_call = (                ├─ currently_on_call = (</span><br><span class="line">│   <span class="keyword">select</span> count(*) from doctors        │    <span class="keyword">select</span> count(*) from doctors</span><br><span class="line">│   <span class="built_in">where</span> on_call = <span class="literal">true</span>                │    <span class="built_in">where</span> on_call = <span class="literal">true</span></span><br><span class="line">│   and shift_id = 1234                 │    and shift_id = 1234</span><br><span class="line">│  )                                    │  )</span><br><span class="line">│  // now currently_on_call = 2         │  // now currently_on_call = 2</span><br><span class="line">│                                       │</span><br><span class="line">├─ <span class="keyword">if</span> (currently_on_call &gt;= 2) &#123;        │</span><br><span class="line">│    update doctors                     │</span><br><span class="line">│    <span class="built_in">set</span> on_call = <span class="literal">false</span>                │</span><br><span class="line">│    <span class="built_in">where</span> name = <span class="string">&#x27;Alice&#x27;</span>               │</span><br><span class="line">│    and shift_id = 1234                ├─ <span class="keyword">if</span> (currently_on_call &gt;= 2) &#123;</span><br><span class="line">│  &#125;                                    │    update doctors</span><br><span class="line">│                                       │    <span class="built_in">set</span> on_call = <span class="literal">false</span></span><br><span class="line">└─ COMMIT TRANSACTION                   │    <span class="built_in">where</span> name = <span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">                                        │    and shift_id = 1234</span><br><span class="line">                                        │  &#125;</span><br><span class="line">                                        │</span><br><span class="line">                                        └─ COMMIT TRANSACTION</span><br></pre></td></tr></table></figure>

<p>Since database is using snapshot isolation, both checks return 2. Both transactions commit, and now no doctor is on call. The requirement of having at least one doctor has been violated.</p>
<p>Write skew can occur if two transactions read the same objects, and then update some of those objects. You get a dirty write or lost update anomaly.</p>
<p>Ways to prevent write skew are a bit more restricted:</p>
<ul>
<li>Atomic operations don’t help as things involve more objects.</li>
<li>Automatically prevent write skew requires true serializable isolation.</li>
<li>The second-best option in this case is probably to explicitly lock the rows that the transaction depends on.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> doctors</span><br><span class="line"><span class="keyword">WHERE</span> on_call <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">AND</span> shift_id <span class="operator">=</span> <span class="number">1234</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> doctors</span><br><span class="line"><span class="keyword">SET</span> on_call <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> shift_id <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Serializability"><a href="#Serializability" class="headerlink" title="Serializability"></a>Serializability</h3><p>This is the strongest isolation level. It guarantees that even though transactions may execute in parallel, the end result is the same as if they had executed one at a time, <em>serially</em>, without concurrency. Basically, the database prevents <em>all</em> possible race conditions.</p>
<p>There are three techniques for achieving this:</p>
<ul>
<li>Executing transactions in serial order</li>
<li>Two-phase locking</li>
<li>Serializable snapshot isolation.</li>
</ul>
<h4 id="Actual-serial-execution"><a href="#Actual-serial-execution" class="headerlink" title="Actual serial execution"></a>Actual serial execution</h4><p>The simplest way of removing concurrency problems is to remove concurrency entirely and execute only one transaction at a time, in serial order, on a single thread. This approach is implemented by VoltDB&#x2F;H-Store, Redis and Datomic.</p>
<h5 id="Encapsulating-transactions-in-stored-procedures"><a href="#Encapsulating-transactions-in-stored-procedures" class="headerlink" title="Encapsulating transactions in stored procedures"></a>Encapsulating transactions in stored procedures</h5><p>With interactive style of transaction, a lot of time is spent in network communication between the application and the database.</p>
<p>For this reason, systems with single-threaded serial transaction processing don’t allow interactive multi-statement transactions. The application must submit the entire transaction code to the database ahead of time, as a <em>stored procedure</em>, so all the data required by the transaction is in memory and the procedure can execute very fast.</p>
<p>There are a few pros and cons for stored procedures:</p>
<ul>
<li>Each database vendor has its own language for stored procedures. They usually look quite ugly and archaic from today’s point of view, and they lack the ecosystem of libraries.</li>
<li>It’s harder to debug, more awkward to keep in version control and deploy, trickier to test, and difficult to integrate with monitoring.</li>
</ul>
<p>Modern implementations of stored procedures include general-purpose programming languages instead: VoltDB uses Java or Groovy, Datomic uses Java or Clojure, and Redis uses Lua.</p>
<h5 id="Partitioning-1"><a href="#Partitioning-1" class="headerlink" title="Partitioning"></a>Partitioning</h5><p>Executing all transactions serially limits the transaction throughput to the speed of a single CPU.</p>
<p>In order to scale to multiple CPU cores you can potentially partition your data and each partition can have its own transaction processing thread. You can give each CPU core its own partition.</p>
<p>For any transaction that needs to access multiple partitions, the database must coordinate the transaction across all the partitions. They will be vastly slower than single-partition transactions.</p>
<h4 id="Two-phase-locking-2PL"><a href="#Two-phase-locking-2PL" class="headerlink" title="Two-phase locking (2PL)"></a>Two-phase locking (2PL)</h4><blockquote>
<p>Two-phase locking (2PL) sounds similar to two-phase <em>commit</em> (2PC) but be aware that they are completely different things.</p>
</blockquote>
<p>Several transactions are allowed to concurrently read the same object as long as nobody is writing it. When somebody wants to write (modify or delete) an object, exclusive access is required.</p>
<p>Writers don’t just block other writers; they also block readers and vice versa. It protects against all the race conditions discussed earlier.</p>
<p>Blocking readers and writers is implemented by a having lock on each object in the database. The lock is used as follows:</p>
<ul>
<li>if a transaction wants to read an object, it must first acquire a lock in shared mode.</li>
<li>If a transaction wants to write to an object, it must first acquire the lock in exclusive mode.</li>
<li>If a transaction first reads and then writes an object, it may upgrade its shared lock to an exclusive lock.</li>
<li>After a transaction has acquired the lock, it must continue to hold the lock until the end of the transaction (commit or abort). <strong>First phase is when the locks are acquired, second phase is when all the locks are released.</strong></li>
</ul>
<p>It can happen that transaction A is stuck waiting for transaction B to release its lock, and vice versa (<em>deadlock</em>).</p>
<p><strong>The performance for transaction throughput and response time of queries are significantly worse under two-phase locking than under weak isolation.</strong></p>
<p>A transaction may have to wait for several others to complete before it can do anything.</p>
<p>Databases running 2PL can have unstable latencies, and they can be very slow at high percentiles. One slow transaction, or one transaction that accesses a lot of data and acquires many locks can cause the rest of the system to halt.</p>
<h5 id="Predicate-locks"><a href="#Predicate-locks" class="headerlink" title="Predicate locks"></a>Predicate locks</h5><p>With <em>phantoms</em>, one transaction may change the results of another transaction’s search query.</p>
<p>In order to prevent phantoms, we need a <em>predicate lock</em>. Rather than a lock belonging to a particular object, it belongs to all objects that match some search condition.</p>
<p>Predicate locks applies even to objects that do not yet exist in the database, but which might be added in the future (phantoms).</p>
<h5 id="Index-range-locks"><a href="#Index-range-locks" class="headerlink" title="Index-range locks"></a>Index-range locks</h5><p>Predicate locks do not perform well. Checking for matching locks becomes time-consuming and for that reason most databases implement <em>index-range locking</em>.</p>
<p>It’s safe to simplify a predicate by making it match a greater set of objects.</p>
<p>These locks are not as precise as predicate locks would be, but since they have much lower overheads, they are a good compromise.</p>
<h4 id="Serializable-snapshot-isolation-SSI"><a href="#Serializable-snapshot-isolation-SSI" class="headerlink" title="Serializable snapshot isolation (SSI)"></a>Serializable snapshot isolation (SSI)</h4><p>It provides full serializability and has a small performance penalty compared to snapshot isolation. SSI is fairly new and might become the new default in the future.</p>
<h5 id="Pesimistic-versus-optimistic-concurrency-control"><a href="#Pesimistic-versus-optimistic-concurrency-control" class="headerlink" title="Pesimistic versus optimistic concurrency control"></a>Pesimistic versus optimistic concurrency control</h5><p>Two-phase locking is called <em>pessimistic</em> concurrency control because if anything might possibly go wrong, it’s better to wait.</p>
<p>Serial execution is also <em>pessimistic</em> as is equivalent to each transaction having an exclusive lock on the entire database.</p>
<p>Serializable snapshot isolation is <em>optimistic</em> concurrency control technique. Instead of blocking if something potentially dangerous happens, transactions continue anyway, in the hope that everything will turn out all right. The database is responsible for checking whether anything bad happened. If so, the transaction is aborted and has to be retried.</p>
<p>If there is enough spare capacity, and if contention between transactions is not too high, optimistic concurrency control techniques tend to perform better than pessimistic ones.</p>
<p>SSI is based on snapshot isolation, reads within a transaction are made from a consistent snapshot of the database. On top of snapshot isolation, SSI adds an algorithm for detecting serialization conflicts among writes and determining which transactions to abort.</p>
<p>The database knows which transactions may have acted on an outdated premise and need to be aborted by:</p>
<ul>
<li><strong>Detecting reads of a stale MVCC object version.</strong> The database needs to track when a transaction ignores another transaction’s writes due to MVCC visibility rules. When a transaction wants to commit, the database checks whether any of the ignored writes have now been committed. If so, the transaction must be aborted.</li>
<li><strong>Detecting writes that affect prior reads.</strong> As with two-phase locking, SSI uses index-range locks except that it does not block other transactions. When a transaction writes to the database, it must look in the indexes for any other transactions that have recently read the affected data. It simply notifies the transactions that the data they read may no longer be up to date.</li>
</ul>
<h5 id="Performance-of-serializable-snapshot-isolation"><a href="#Performance-of-serializable-snapshot-isolation" class="headerlink" title="Performance of serializable snapshot isolation"></a>Performance of serializable snapshot isolation</h5><p>Compared to two-phase locking, the big advantage of SSI is that one transaction doesn’t need to block waiting for locks held by another transaction. Writers don’t block readers, and vice versa.</p>
<p>Compared to serial execution, SSI is not limited to the throughput of a single CPU core. Transactions can read and write data in multiple partitions while ensuring serializable isolation.</p>
<p>The rate of aborts significantly affects the overall performance of SSI. SSI requires that read-write transactions be fairly short (long-running read-only transactions may be okay).</p>
<h2 id="The-trouble-with-distributed-systems"><a href="#The-trouble-with-distributed-systems" class="headerlink" title="The trouble with distributed systems"></a>The trouble with distributed systems</h2><h3 id="Faults-and-partial-failures"><a href="#Faults-and-partial-failures" class="headerlink" title="Faults and partial failures"></a>Faults and partial failures</h3><p>A program on a single computer either works or it doesn’t. There is no reason why software should be flaky (non deterministic).</p>
<p>In a distributed systems we have no choice but to confront the messy reality of the physical world. There will be parts that are broken in an unpredictable way, while others work. Partial failures are <em>nondeterministic</em>. Things will unpredicably fail.</p>
<p>We need to accept the possibility of partial failure and build fault-tolerant mechanism into the software. <strong>We need to build a reliable system from unreliable components.</strong></p>
<h3 id="Unreliable-networks"><a href="#Unreliable-networks" class="headerlink" title="Unreliable networks"></a>Unreliable networks</h3><p>Focusing on <em>shared-nothing systems</em> the network is the only way machines communicate.</p>
<p>The internet and most internal networks are <em>asynchronous packet networks</em>. A message is sent and the network gives no guarantees as to when it will arrive, or whether it will arrive at all. Things that could go wrong:</p>
<ol>
<li>Request lost</li>
<li>Request waiting in a queue to be delivered later</li>
<li>Remote node may have failed</li>
<li>Remote node may have temporarily stoped responding</li>
<li>Response has been lost on the network</li>
<li>The response has been delayed and will be delivered later</li>
</ol>
<p>If you send a request to another node and don’t receive a response, it is <em>impossible</em> to tell why.</p>
<p><strong>The usual way of handling this issue is a <em>timeout</em></strong>: after some time you give up waiting and assume that the response is not going to arrive.</p>
<p>Nobody is immune to network problems. You do need to know how your software reacts to network problems to ensure that the system can recover from them. It may make sense to deliberately trigger network problems and test the system’s response.</p>
<p>If you want to be sure that a request was successful, you need a positive response from the application itself.</p>
<p>If something has gone wrong, you have to assume that you will get no response at all.</p>
<h4 id="Timeouts-and-unbounded-delays"><a href="#Timeouts-and-unbounded-delays" class="headerlink" title="Timeouts and unbounded delays"></a>Timeouts and unbounded delays</h4><p>A long timeout means a long wait until a node is declared dead. A short timeout detects faults faster, but carries a higher risk of incorrectly declaring a node dead (when it could be a slowdown).</p>
<p>Premature declaring a node is problematic, if the node is actually alive the action may end up being performed twice.</p>
<p>When a node is declared dead, its responsibilities need to be transferred to other nodes, which places additional load on other nodes and the network.</p>
<h4 id="Network-congestion-and-queueing"><a href="#Network-congestion-and-queueing" class="headerlink" title="Network congestion and queueing"></a>Network congestion and queueing</h4><ul>
<li>Different nodes try to send packets simultaneously to the same destination, the network switch must queue them and feed them to the destination one by one. The switch will discard packets when filled up.</li>
<li>If CPU cores are busy, the request is queued by the operative system, until applications are ready to handle it.</li>
<li>In virtual environments, the operative system is often paused while another virtual machine uses a CPU core. The VM queues the incoming data.</li>
<li>TCP performs <em>flow control</em>, in which a node limits its own rate of sending in order to avoid overloading a network link or the receiving node. This means additional queuing at the sender.</li>
</ul>
<p>You can choose timeouts experimentally by measuring the distribution of network round-trip times over an extended period.</p>
<p>Systems can continually measure response times and their variability (<em>jitter</em>), and automatically adjust timeouts according to the observed response time distribution.</p>
<h4 id="Synchronous-vs-ashynchronous-networks"><a href="#Synchronous-vs-ashynchronous-networks" class="headerlink" title="Synchronous vs ashynchronous networks"></a>Synchronous vs ashynchronous networks</h4><p>A telephone network estabilishes a <em>circuit</em>, we say is <em>synchronous</em> even as the data passes through several routers as it does not suffer from queuing. The maximum end-to-end latency of the network is fixed (<em>bounded delay</em>).</p>
<p>A circuit is a fixed amount of reserved bandwidth which nobody else can use while the circuit is established, whereas packets of a TCP connection opportunistically use whatever network bandwidth is available.</p>
<p><strong>Using circuits for bursty data transfers wastes network capacity and makes transfer unnecessary slow. By contrast, TCP dinamycally adapts the rate of data transfer to the available network capacity.</strong></p>
<p>We have to assume that network congestion, queueing, and unbounded delays will happen. Consequently, there’s no “correct” value for timeouts, they need to be determined experimentally.</p>
<h3 id="Unreliable-clocks"><a href="#Unreliable-clocks" class="headerlink" title="Unreliable clocks"></a>Unreliable clocks</h3><p>The time when a message is received is always later than the time when it is sent, we don’t know how much later due to network delays. This makes difficult to determine the order of which things happened when multiple machines are involved.</p>
<p>Each machine on the network has its own clock, slightly faster or slower than the other machines. It is possible to synchronise clocks with Network Time Protocol (NTP).</p>
<ul>
<li><strong>Time-of-day clocks</strong>. Return the current date and time according to some calendar (<em>wall-clock time</em>). If the local clock is too far ahead of the NTP server, it may be forcibly reset and appear to jump back to a previous point in time. <strong>This makes it is unsuitable for measuring elapsed time.</strong></li>
<li><strong>Monotonic clocks</strong>. e.g.: <code>System.nanoTime()</code>. They are guaranteed to always move forward. The difference between clock reads can tell you how much time elapsed beween two checks. <strong>The <em>absolute</em> value of the clock is meaningless.</strong> NTP allows the clock rate to be speeded up or slowed down by up to 0.05%, but <strong>NTP cannot cause the monotonic clock to jump forward or backward</strong>. <strong>In a distributed system, using a monotonic clock for measuring elapsed time (e.g.: timeouts), is usually fine</strong>.</li>
</ul>
<p>If some piece of sofware is relying on an accurately synchronized clock, the result is more likely to be silent and subtle data loss than a dramatic crash.</p>
<p>You need to carefully monitor the clock offsets between all the machines.</p>
<h4 id="Timestamps-for-ordering-events"><a href="#Timestamps-for-ordering-events" class="headerlink" title="Timestamps for ordering events"></a>Timestamps for ordering events</h4><p><strong>It is tempting, but dangerous to rely on clocks for ordering of events across multiple nodes.</strong> This usually imply that <em>last write wins</em> (LWW), often used in both multi-leader replication and leaderless databases like Cassandra and Riak, and data-loss may happen.</p>
<p>The definition of “recent” also depends on local time-of-day clock, which may well be incorrect.</p>
<p><em>Logical clocks</em>, based on counters instead of oscillating quartz crystal, are safer alternative for ordering events. Logical clocks do not measure time of the day or elapsed time, only relative ordering of events. This contrasts with time-of-the-day and monotic clocks (also known as <em>physical clocks</em>).</p>
<h4 id="Clock-readings-have-a-confidence-interval"><a href="#Clock-readings-have-a-confidence-interval" class="headerlink" title="Clock readings have a confidence interval"></a>Clock readings have a confidence interval</h4><p>It doesn’t make sense to think of a clock reading as a point in time, it is more like a range of times, within a confidence internval: for example, 95% confident that the time now is between 10.3 and 10.5.</p>
<p>The most common implementation of snapshot isolation requires a monotonically increasing transaction ID.</p>
<p>Spanner implements snapshot isolation across datacenters by using clock’s confidence interval. If you have two confidence internvals where</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A = [A earliest, A latest]</span><br><span class="line">B = [B earliest, B latest]</span><br></pre></td></tr></table></figure>

<p>And those two intervals do not overlap (<code>A earliest</code> &lt; <code>A latest</code> &lt; <code>B earliest</code> &lt; <code>B latest</code>), then B definetively happened after A.</p>
<p>Spanner deliberately waits for the length of the confidence interval before commiting a read-write transaction, so their confidence intervals do not overlap.</p>
<p>Spanner needs to keep the clock uncertainty as small as possible, that’s why Google deploys a GPS receiver or atomic clock in each datacenter.</p>
<h4 id="Process-pauses"><a href="#Process-pauses" class="headerlink" title="Process pauses"></a>Process pauses</h4><p>How does a node know that it is still leader?</p>
<p>One option is for the leader to obtain a <em>lease</em> from other nodes (similar ot a lock with a timeout). It will be the leader until the lease expires; to remain leader, the node must periodically renew the lease. If the node fails, another node can takeover when it expires.</p>
<p>We have to be very careful making assumptions about the time that has passed for processing requests (and holding the lease), as there are many reasons a process would be paused:</p>
<ul>
<li>Garbage collector (stop the world)</li>
<li>Virtual machine can be suspended</li>
<li>In laptops execution may be suspended</li>
<li>Operating system context-switches</li>
<li>Synchronous disk access</li>
<li>Swapping to disk (paging)</li>
<li>Unix process can be stopped (<code>SIGSTOP</code>)</li>
</ul>
<p><strong>You cannot assume anything about timing</strong></p>
<h5 id="Response-time-guarantees"><a href="#Response-time-guarantees" class="headerlink" title="Response time guarantees"></a>Response time guarantees</h5><p>There are systems that require software to respond before a specific <em>deadline</em> (<em>real-time operating system, or RTOS</em>).</p>
<p>Library functions must document their worst-case execution times; dynamic memory allocation may be restricted or disallowed and enormous amount of testing and measurement must be done.</p>
<h5 id="Limiting-the-impact-of-garbage-collection"><a href="#Limiting-the-impact-of-garbage-collection" class="headerlink" title="Limiting the impact of garbage collection"></a>Limiting the impact of garbage collection</h5><p>Garbage collection could be treated like brief planned outages. If the runtime can warn the application that a node soon requires a GC pause, the application can stop sending new requests to that node and perform GC while no requests are in progress.</p>
<p>A variant of this idea is to use the garbage collector only for short-lived objects and to restart the process periodically.</p>
<h3 id="Knowledge-truth-and-lies"><a href="#Knowledge-truth-and-lies" class="headerlink" title="Knowledge, truth and lies"></a>Knowledge, truth and lies</h3><h4 id="The-truth-is-defined-by-the-majority"><a href="#The-truth-is-defined-by-the-majority" class="headerlink" title="The truth is defined by the majority"></a>The truth is defined by the majority</h4><p>A node cannot necessarily trust its own judgement of a situation. Many distributed systems rely on a <em>quorum</em> (voting among the nodes).</p>
<p>Commonly, the quorum is an absolute majority of more than half of the nodes.</p>
<h5 id="Fencing-tokens"><a href="#Fencing-tokens" class="headerlink" title="Fencing tokens"></a>Fencing tokens</h5><p>Assume every time the lock server grant sa lock or a lease, it also returns a <em>fencing token</em>, which is a number that increases every time a lock is granted (incremented by the lock service). Then we can require every time a client sends a write request to the storage service, it must include its current fencing token.</p>
<p>The storage server remembers that it has already processed a write with a higher token number, so it rejects the request with the last token.</p>
<p>If ZooKeeper is used as lock service, the transaciton ID <code>zcid</code> or the node version <code>cversion</code> can be used as a fencing token.</p>
<h4 id="Byzantine-faults"><a href="#Byzantine-faults" class="headerlink" title="Byzantine faults"></a>Byzantine faults</h4><p>Fencing tokens can detect and block a node that is <em>inadvertently</em> acting in error.</p>
<p>Distributed systems become much harder if there is a risk that nodes may “lie” (<em>byzantine fault</em>).</p>
<p>A system is <em>Byzantine fault-tolerant</em> if it continues to operate correctly even if some of the nodes are malfunctioning.</p>
<ul>
<li>Aerospace environments</li>
<li>Multiple participating organisations, some participants may attempt to cheat or defraud others</li>
</ul>
<h2 id="Consistency-and-consensus"><a href="#Consistency-and-consensus" class="headerlink" title="Consistency and consensus"></a>Consistency and consensus</h2><p>The simplest way of handling faults is to simply let the entire service fail. We need to find ways of <em>tolerating</em> faults.</p>
<h3 id="Consistency-guarantees"><a href="#Consistency-guarantees" class="headerlink" title="Consistency guarantees"></a>Consistency guarantees</h3><p>Different data is observed because write requests arrive on different nodes at different times.</p>
<p>Most replicated databases provide at least <em>eventual consistency</em>. The inconsistency is temporary, and eventually resolves itself (<em>convergence</em>).</p>
<p>With weak guarantees, you need to be constantly aware of its limitations. Systems with stronger guarantees may have worse performance or be less fault-tolerant than systems with weaker guarantees.</p>
<h3 id="Linearizability"><a href="#Linearizability" class="headerlink" title="Linearizability"></a>Linearizability</h3><p>Make a system appear as if there were only one copy of the data, and all operaitons on it are atomic.</p>
<ul>
<li><code>read(x) =&gt; v</code> Read from register <em>x</em>, database returns value <em>v</em>.</li>
<li><code>write(x,v) =&gt; r</code> <em>r</em> could be <em>ok</em> or <em>error</em>.</li>
</ul>
<p>If one client read returns the new value, all subsequent reads must also return the new value.</p>
<ul>
<li><code>cas(x_old, v_old, v_new) =&gt; r</code> an atomic <em>compare-and-set</em> operation. If the value of the register <em>x</em> equals <em>v_old</em>, it is atomically set to <em>v_new</em>. If <code>x != v_old</code> the registers is unchanged and it returns an error.</li>
</ul>
<p><strong>Serializability</strong>: Transactions behave the same as if they had executed <em>some</em> serial order.</p>
<p><strong>Linearizability</strong>: Recency guarantee on reads and writes of a register (individual object).</p>
<h4 id="Locking-and-leader-election"><a href="#Locking-and-leader-election" class="headerlink" title="Locking and leader election"></a>Locking and leader election</h4><p>To ensure that there is indeed only one leader, a lock is used. It must be linearizable: all nodes must agree which nodes owns the lock; otherwise is useless.</p>
<p>Apache ZooKeepr and etcd are often used for distributed locks and leader election.</p>
<h4 id="Constraints-and-uniqueness-guarantees"><a href="#Constraints-and-uniqueness-guarantees" class="headerlink" title="Constraints and uniqueness guarantees"></a>Constraints and uniqueness guarantees</h4><p>Unique constraints, like a username or an email address require a situation similiar to a lock.</p>
<p>A hard uniqueness constraint in relational databases requires linearizability.</p>
<h4 id="Implementing-linearizable-systems"><a href="#Implementing-linearizable-systems" class="headerlink" title="Implementing linearizable systems"></a>Implementing linearizable systems</h4><p>The simplest approach would be to have a single copy of the data, but this would not be able to tolerate faults.</p>
<ul>
<li>Single-leader repolication is potentially linearizable.</li>
<li>Consensus algorithms is linearizable.</li>
<li>Multi-leader replication is not linearizable.</li>
<li>Leaderless replication is probably not linearizable.</li>
</ul>
<p>Multi-leader replication is often a good choice for multi-datacenter replication. On a network interruption betwen data-centers will force a choice between linearizability and availability.</p>
<p>With multi-leader configuraiton, each data center can operate normally with interruptions.</p>
<p>With single-leader replication, the leader must be in one of the datacenters. If the application requires linearizable reads and writes, the network interruption causes the application to become unavailable.</p>
<ul>
<li>If your applicaiton <em>requires</em> linearizability, and some replicas are disconnected from the other replicas due to a network problem, the some replicas cannot process request while they are disconnected (unavailable).</li>
<li>If your application <em>does not require</em>, then it can be written in a way tha each replica can process requests independently, even if it is disconnected from other replicas (peg: multi-leader), becoming <em>available</em>.</li>
</ul>
<p><strong>If an application does not require linearizability it can be more tolerant of network problems.</strong></p>
<h4 id="The-unhelpful-CAP-theorem"><a href="#The-unhelpful-CAP-theorem" class="headerlink" title="The unhelpful CAP theorem"></a>The unhelpful CAP theorem</h4><p>CAP is sometimes presented as <em>Consistency, Availability, Partition tolerance: pick 2 out of 3</em>. Or being said in another way <em>either Consistency or Available when Partitioned</em>.</p>
<p>CAP only considers one consistency model (linearizability) and one kind of fault (<em>network partitions</em>, or nodes that are alive but disconnected from each other). It doesn’t say anything about network delays, dead nodes, or other trade-offs. CAP has been historically influential, but nowadays has little practical value for designing systems.</p>
<p>The main reason for dropping linearizability is <em>performance</em>, not fault tolerance. Linearizability is slow and this is true all the time, not on only during a network fault.</p>
<h3 id="Ordering-guarantees"><a href="#Ordering-guarantees" class="headerlink" title="Ordering guarantees"></a>Ordering guarantees</h3><p>Cause comes before the effect. Causal order in the system is what happened before what (<em>causally consistent</em>).</p>
<p><em>Total order</em> allows any two elements to be compared. Peg, natural numbers are totally ordered.</p>
<p>Some cases one set is greater than another one.</p>
<p>Different consistency models:</p>
<ul>
<li>Linearizablity. <em>Total order</em> of operations: if the system behaves as if there is only a single copy of the data.</li>
<li>Causality. Two events are ordered if they are causally related. Causality defines <em>a partial order</em>, not a total one (incomparable if they are concurrent).</li>
</ul>
<p>Linearizability is not the only way of preserving causality. <strong>Causal consistency is the strongest possible consistency model that does not slow down due to network delays, and remains available in the face of network failures.</strong></p>
<p>You need to know which operation <em>happened before</em>.</p>
<p>In order to determine the causal ordering, the database needs to know which version of the data was read by the application. <strong>The version number from the prior operation is passed back to the database on a write.</strong></p>
<p>We can create sequence numbers in a total order that is <em>consistent with causality</em>.</p>
<p>With a single-leader replication, the leader can simply increment a counter for each operation, and thus assign a monotonically increasing sequence number to each operation in the replication log.</p>
<p>If there is not a single leader (multi-leader or leaderless database):</p>
<ul>
<li>Each node can generate its own independent set of sequence numbers. One node can generate only odd numbers and the other only even numbers.</li>
<li>Attach a timestamp from a time-of-day clock.</li>
<li>Preallocate blocks of sequence numbers.</li>
</ul>
<p>The only problem is that the sequence numbers they generate are <em>not consistent with causality</em>. They do not correctly capture ordering of operations across different nodes.</p>
<p>There is simple method for generating sequence numbers that <em>is</em> consistent with causality: <em>Lamport timestamps</em>.</p>
<p>Each node has a unique identifier, and each node keeps a counter of the number of operations it has processed. The lamport timestamp is then simply a pair of (<em>counter</em>, <em>node ID</em>). It provides total order, as if you have two timestamps one with a greater counter value is the greater timestamp. If the counter values are the same, the one with greater node ID is the greater timestamp.</p>
<p>Every node and every client keeps track of the <em>maximum</em> counter value it has seen so far, and includes that maximum on every request. When a node receives a request of response with a maximum counter value greater than its own counter value, it inmediately increases its own counter to that maximum.</p>
<p>As long as the maximum counter value is carried along with every operation, this scheme  ensure that the ordering from the lamport timestamp is consistent with causality.</p>
<p>Total order of oepration only emerges after you have collected all of the operations.</p>
<h4 id="Total-order-broadcast"><a href="#Total-order-broadcast" class="headerlink" title="Total order broadcast"></a>Total order broadcast</h4><ul>
<li>Reliable delivery: If a message is delivered to one node, it is delivered to all nodes.</li>
<li>Totally ordered delivery: Mesages are delivered to every node in the same order.</li>
</ul>
<p>ZooKeeper and etcd implement total order broadcast.</p>
<p>If every message represents a write to the database, and every replica processes the same writes in the same order, then the replcias will remain consistent with each other (<em>state machine replication</em>).</p>
<p>A node is not allowed to retroactgively insert a message into an earlier position in the order if subsequent messages have already been dlivered.</p>
<p>Another way of looking at total order broadcast is that it is a way of creating a <em>log</em>. Delivering a message is like appending to the log.</p>
<h5 id="Implementing-linearizable-storage-using-total-order-broadcast"><a href="#Implementing-linearizable-storage-using-total-order-broadcast" class="headerlink" title="Implementing linearizable storage using total order broadcast"></a>Implementing linearizable storage using total order broadcast</h5><p>If you have total order broadcast, you can build linearizable storage on top of it.</p>
<p>Because log entries are delivered to all nodes in the same order, if therer are several concurrent writes, all nodes will agree on which one came first. Choosing the first of the conflicting writes as the winner and aborting later ones ensures that all nodes agree on whether a write was commited or aborted.</p>
<p>This procedure ensures linearizable writes, it doesn’t guarantee linearizable reads.</p>
<p>To make reads linearizable:</p>
<ul>
<li>You can sequence reads through the log by appending a message, reading the log, and performing the actual read when the message is delivered back to you (etcd works something like this).</li>
<li>Fetch the position of the latest log message in a linearizable way, you can query that position to be delivered to you, and then perform the read (idea behind ZooKeeper’s <code>sync()</code>).</li>
<li>You can make your read from a replica that is synchronously updated on writes.</li>
</ul>
<h5 id="Implementing-total-order-broadcast-using-linearizable-storage"><a href="#Implementing-total-order-broadcast-using-linearizable-storage" class="headerlink" title="Implementing total order broadcast using linearizable storage"></a>Implementing total order broadcast using linearizable storage</h5><p>For every message you want to send through total order broadcast, you increment-and-get the linearizable integer and then attach the value you got from the register as a sequence number to the message. You can send the message to all nodes, and the recipients will deliver the message consecutively by sequence number.</p>
<h3 id="Distributed-transactions-and-consensus"><a href="#Distributed-transactions-and-consensus" class="headerlink" title="Distributed transactions and consensus"></a>Distributed transactions and consensus</h3><p>Basically <em>getting several nodes to agree on something</em>.</p>
<p>There are situations in which it is important for nodes to agree:</p>
<ul>
<li>Leader election: All nodes need to agree on which node is the leader.</li>
<li>Atomic commit: Get all nodes to agree on the outcome of the transacction, either they all abort or roll back.</li>
</ul>
<h4 id="Atomic-commit-and-two-phase-commit-2PC"><a href="#Atomic-commit-and-two-phase-commit-2PC" class="headerlink" title="Atomic commit and two-phase commit (2PC)"></a>Atomic commit and two-phase commit (2PC)</h4><p>A transaction either succesfully <em>commit</em>, or <em>abort</em>. Atomicity prevents half-finished results.</p>
<h5 id="From-single-node-to-distributed-atomic-commit"><a href="#From-single-node-to-distributed-atomic-commit" class="headerlink" title="From single-node to distributed atomic commit"></a>From single-node to distributed atomic commit</h5><p>On a single node, transaction commitment depends on the <em>order</em> in which data is writen to disk: first the data, then the commit record.</p>
<h5 id="Introduction-to-two-phase-commit"><a href="#Introduction-to-two-phase-commit" class="headerlink" title="Introduction to two-phase commit"></a>Introduction to two-phase commit</h5><p>2PC uses a coordinartor (<em>transaction manager</em>). When the application is ready to commit, the coordinator begins phase 1: it sends a <em>prepare</em> request to each of the nodes, asking them whether they are able to commit.</p>
<ul>
<li>If all participants reply “yes”, the coordinator sends out a <em>commit</em> request in phase 2, and the commit takes place.</li>
<li>If any of the participants replies “no”, the coordinator sends an <em>abort</em> request to all nodes in phase 2.</li>
</ul>
<h5 id="A-system-of-promises"><a href="#A-system-of-promises" class="headerlink" title="A system of promises"></a>A system of promises</h5><p>When a participant votes “yes”, it promises that it will definitely be able to commit later; and once the coordiantor decides, that decision is irrevocable. Those promises ensure the atomicity of 2PC.</p>
<p>If one of the participants or the network fails during 2PC (prepare requests fail or time out), the coordinator aborts the transaction. If any of the commit or abort request fail, the coordinator retries them indefinitely.</p>
<h5 id="Cordinator-failure"><a href="#Cordinator-failure" class="headerlink" title="Cordinator failure"></a>Cordinator failure</h5><p>If the coordinator fails before sending the prepare requests, a participant can safely abort the transaction.</p>
<p>The only way 2PC can complete is by waiting for the coordinator to revover in case of failure. This is why the coordinator must write its commit or abort decision to a transaction log on disk before sending commit or abort requests to participants.</p>
<h5 id="Three-phase-commit"><a href="#Three-phase-commit" class="headerlink" title="Three-phase commit"></a>Three-phase commit</h5><p>2PC is also called a <em>blocking</em> atomic commit protocol, as 2Pc can become stuck waiting for the coordinator to recover.</p>
<p>There is an alternative called <em>three-phase commit</em> (3PC) that requires a <em>perfect failure detector</em>.</p>
<h4 id="Distributed-Transactions-in-Practice"><a href="#Distributed-Transactions-in-Practice" class="headerlink" title="Distributed Transactions in Practice"></a>Distributed Transactions in Practice</h4><p>Distributed transactions carry a heavy performance penalty due the disk forcing in 2PC required for crash recovery and additional network round-trips.</p>
<p>XA (X&#x2F;Open XA for eXtended Architecture) is a standard for implementing two-phase commit across heterogeneous technologies. Supported by many traditional relational databases (PostgreSQL, MySQL, DB2, SQL Server, and Oracle) and message brokers (ActiveMQ, HornetQ, MSQMQ, and IBM MQ).</p>
<p>The problem with <em>locking</em> is that database transactions usually take a row-level exclusive lock on any rows they modify, to prevent dirty writes.</p>
<p>While those locks are held, no other transaction can modify those rows.</p>
<p>When a coordinator fails, <em>orphaned</em> in-doubt transactions do ocurr, and the only way out is for an administrator to manually decide whether to commit or roll back the transaction.</p>
<h4 id="Fault-tolerant-consensus"><a href="#Fault-tolerant-consensus" class="headerlink" title="Fault-tolerant consensus"></a>Fault-tolerant consensus</h4><p>One or more nodes may <em>propose</em> values, and the consensus algorithm <em>decides</em> on those values.</p>
<p>Consensus algorithm must satisfy the following properties:</p>
<ul>
<li>Uniform agreement: No two nodes decide differently.</li>
<li>Integrity: No node decides twice.</li>
<li>Validity: If a node decides the value <em>v</em>, then <em>v</em> was proposed by some node.</li>
<li>Termination: Every node that does not crash eventually decides some value.</li>
</ul>
<p>If you don’t care about fault tolerance, then satisfying the first three properties is easy: you can just hardcode one node to be the “dictator” and let that node make all of the decisions.</p>
<p>The termination property formalises the idea of fault tolerance. Even if some nodes fail, the other nodes must still reach a decision. Termination is a liveness property, whereas the other three are safety properties.</p>
<h5 id="Consensus-algorithms-and-total-broadcast"><a href="#Consensus-algorithms-and-total-broadcast" class="headerlink" title="Consensus algorithms and total broadcast"></a>Consensus algorithms and total broadcast</h5><p><strong>The best-known fault-tolerant consensus algorithms are Viewstamped Replication (VSR), Paxos, Raft and Zab.</strong></p>
<p>Total order broadcast requires messages to be delivered exactly once, in the same order, to all nodes.</p>
<p>So total order broadcast is equivalent to repeated rounds of consensus:</p>
<ul>
<li>Due to agreement property, all nodes decide to deliver the same messages in the same order.</li>
<li>Due to integrity, messages are not duplicated.</li>
<li>Due to validity, messages are not corrupted.</li>
<li>Due to termination, messages are not lost.</li>
</ul>
<h5 id="Single-leader-replication-and-consensus"><a href="#Single-leader-replication-and-consensus" class="headerlink" title="Single-leader replication and consensus"></a>Single-leader replication and consensus</h5><p>All of the consensus protocols dicussed so far internally use a leader, but they don’t guarantee that the lader is unique. Protocols define an <em>epoch number</em> (<em>ballot number</em> in Paxos, <em>view number</em> in Viewstamped Replication, and <em>term number</em> in Raft). Within each epoch, the leader is unique.</p>
<h5 id="Epoch-numbering-and-quorums"><a href="#Epoch-numbering-and-quorums" class="headerlink" title="Epoch numbering and quorums"></a>Epoch numbering and quorums</h5><p>Every time the current leader is thought to be dead, a vote is started among the nodes to elect a new leader. This election is given an incremented epoch number, and thus epoch numbers are totallly ordered and monotonically increasing. If there is a conflict, the leader with the higher epoch number prevails.</p>
<p>A node cannot trust its own judgement. It must collect votes from a <em>quorum</em> of nodes. For every decision that a leader wants to make, it must send the proposed value to the other nodes and wait for a quorum of nodes to respond in favor of the proposal.</p>
<p>There are two rounds of voting, once to choose a leader, and second time to vote on a leader’s proposal. The quorums for those two votes must overlap.</p>
<p>The biggest difference with 2PC, is that 2PC requires a “yes” vote for <em>every</em> participant.</p>
<h5 id="Limitations-of-consensus"><a href="#Limitations-of-consensus" class="headerlink" title="Limitations of consensus"></a>Limitations of consensus</h5><p>The benefits of consensus come at a cost. The process by which nodes vote on proposals before they are decided is kind of synchronous replication.</p>
<p>Consensus always require a strict majority to operate.</p>
<p>Most consensus algorithms assume a fixed set of nodes that participate in voting, which means that you can’t just add or remove nodes in the cluster. <em>Dynamic membership</em> extensions are much less well understood than static membership algorithms.</p>
<p>Consensus systems rely on timeouts to detect failed nodes. In geographically distributed systems, it often happens that a node falsely believes the leader to have failed due to a network issue. This implies frequest leader elecctions resulting in terrible performance, spending more time choosing a leader than doing any useful work.</p>
<h4 id="Membership-and-coordination-services"><a href="#Membership-and-coordination-services" class="headerlink" title="Membership and coordination services"></a>Membership and coordination services</h4><p>ZooKeeper or etcd are often described as “distributed key-value stores” or “coordination and configuration services”.</p>
<p>They are designed to hold small amounts of data that can fit entirely in memory, you wouldn’t want to store all of your application’s data here. Data is replicated across all the nodes using a fault-tolerant total order broadcast algorithm.</p>
<p>ZooKeeper is modeled after Google’s Chubby lock service and it provides some useful features:</p>
<ul>
<li>Linearizable atomic operations: Usuing an atomic compare-and-set operation, you can implement a lock.</li>
<li>Total ordering of operations: When some resource is protected by a lock or lease, you need a <em>fencing token</em> to prevent clients from conflicting with each other in the case of a process pause. The fencing token is some number that monotonically increases every time the lock is acquired.</li>
<li>Failure detection: Clients maintain a long-lived session on ZooKeeper servers. When a ZooKeeper node fails, the session remains active. When ZooKeeper declares the session to be dead all locks held are automatically released.</li>
<li>Change notifications: Not only can one client read locks and values, it can also watch them for changes.</li>
</ul>
<p>ZooKeeper is super useful for distributed coordination.</p>
<h5 id="Allocating-works-to-nodes"><a href="#Allocating-works-to-nodes" class="headerlink" title="Allocating works to nodes"></a>Allocating works to nodes</h5><p>ZooKeeper&#x2F;Chubby model works well when you have several instances of a process or service, and one of them needs to be chosen as a leader or primary. If the leader fails, one of the other nodes should take over. This is useful for single-leader databases and for job schedulers and similar stateful systems.</p>
<p>ZooKeeper runs on a fixed number of nodes, and performs its majority votes among those nodes while supporting a potentially large number of clients.</p>
<p>The kind of data managed by ZooKeeper is quite slow-changing like “the node running on 10.1.1.23 is the leader for partition 7”. It is not intended for storing the runtime state of the application. If application state needs to be replicated there are other tools (like Apache BookKeeper).</p>
<h5 id="Service-discovery"><a href="#Service-discovery" class="headerlink" title="Service discovery"></a>Service discovery</h5><p>ZooKeeper, etcd, and Consul are also often used for <em>service discovery</em>, find out which IP address you need to connect to in order to reach a particular service. In cloud environments, it is common for virtual machines to continually come an go, you often don’t know the IP addresses of your services ahead of time. Your services when they start up they register their network endpoints ina  service registry, where they can then be found by other services.</p>
<h5 id="Membership-services"><a href="#Membership-services" class="headerlink" title="Membership services"></a>Membership services</h5><p>ZooKeeper and friends can be seen as part of a long history of research into <em>membership services</em>, determining which nodes are currently active and live members of a cluster.</p>
<h2 id="Batch-processing"><a href="#Batch-processing" class="headerlink" title="Batch processing"></a>Batch processing</h2><p>Different types of systems:</p>
<ul>
<li>Service (online): waits for a request, sends a response back</li>
<li>Batch processing system (offline): takes a large amount of input data, runs a <em>job</em> to process it, and produces some output.</li>
<li>Stream processing systems (near-real-time): a stream processor consumes input and produces outputs. A stream job operates on events shortly after they happen.</li>
</ul>
<h3 id="Batch-processing-with-Unix-tools"><a href="#Batch-processing-with-Unix-tools" class="headerlink" title="Batch processing with Unix tools"></a>Batch processing with Unix tools</h3><p>We can build a simple log analysis job to get the five most popular pages on your site</p>
<h4 id="Simmple-Log-Analysis"><a href="#Simmple-Log-Analysis" class="headerlink" title="Simmple Log Analysis"></a>Simmple Log Analysis</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/nginx/access.log |</span><br><span class="line">  awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> |</span><br><span class="line">  <span class="built_in">sort</span>             |</span><br><span class="line">  <span class="built_in">uniq</span> -c          |</span><br><span class="line">  <span class="built_in">sort</span> -r -n       |</span><br><span class="line">  <span class="built_in">head</span> -n 5        |</span><br></pre></td></tr></table></figure>

<p>You could write the same thing with a simple program.</p>
<p>The difference is that with Unix commands automatically handle larger-than-memory datasets and automatically paralelizes sorting across multiple CPU cores.</p>
<h4 id="The-Unix-Philosophy"><a href="#The-Unix-Philosophy" class="headerlink" title="The Unix Philosophy"></a>The Unix Philosophy</h4><p>Programs must have the same data format to pass information to one another. In Unix, that interface is a file (file descriptor), an ordered sequence of bytes.</p>
<p>By convention Unix programs treat this sequence of bytes as ASCII text.</p>
<p>The unix approach works best if a program simply uses <code>stdin</code> and <code>stdout</code>. This allows a shell user to wire up the input and output in whatever way they want; the program doesn’t know or care where the input is coming from and where the output is going to.</p>
<p>Part of what makes Unix tools so successful is that they make it quite easy to see what is going on.</p>
<h3 id="Map-reduce-and-distributed-filesystems"><a href="#Map-reduce-and-distributed-filesystems" class="headerlink" title="Map reduce and distributed filesystems"></a>Map reduce and distributed filesystems</h3><p>A single MapReduce job is comparable to a single Unix process.</p>
<p>Running a MapReduce job normally does not modify the input and does not have any side effects other than producing the output.</p>
<p>While Unix tools use <code>stdin</code> and <code>stdout</code> as input and output, MapReduce jobs read and write files on a distributed filesystem. In Hadoop, that filesystem is called HDFS (Haddoop Distributed File System).</p>
<p>HDFS is based on the <em>shared-nothing</em> principe. Implemented by centralized storage appliance, often using custom hardware and special network infrastructure.</p>
<p>HDFS consists of a daemon process running on each machine, exposing a network service that allows other nodes to access files stored on that machine. A central server called the <em>NameNode</em> keeps track of which file blocks are stored on which machine.</p>
<p>File blocks are replciated on multiple machines. Replication may mean simply several copies of the same data on multiple machines, or an <em>erasure coding</em> scheme such as Reed-Solomon codes, which allow lost data to be recovered.</p>
<h4 id="MapReduce-Job-Execution"><a href="#MapReduce-Job-Execution" class="headerlink" title="MapReduce Job Execution"></a>MapReduce Job Execution</h4><p>MapReduce is a programming framework with which you can write code to process large datasets in a distributed filesystem like HDFS.</p>
<ol>
<li>Read a set of input files, and break it up into <em>records</em>.</li>
<li>Call the mapper function to extract a key and value from each input record.</li>
<li>Sort all of the key-value pairs by key.</li>
<li>Call the reducer function to iterate over the sorted key-value pairs.</li>
</ol>
<p>To create a MapReduce job, you need to implement two callback functions.</p>
<ul>
<li>Mapper: Called once for every input record, and its job is to extract the key and value from the input record.</li>
<li>Reducer: Takes the key-value pairs produced by the mappers, collects all the values belonging to the same key, and calls the reducer with an interator over that collection of vaues.</li>
</ul>
<h5 id="Distributed-execution-of-MapReduce"><a href="#Distributed-execution-of-MapReduce" class="headerlink" title="Distributed execution of MapReduce"></a>Distributed execution of MapReduce</h5><p>MapReduce can parallelise a computation across many machines, without you having to write code to explicitly handle the parallelism. THe mapper and reducer only operate on one record at a time; they don’t need to know where their input is coming from or their output is going to.</p>
<p>In Hadoop MapReduce, the mapper and reducer are each a Java class that implements a particular interface.</p>
<p>The MapReduce scheduler tries to run each mapper on one of the machines that stores a replica of the input file, <em>putting the computation near the data</em>.</p>
<p>The reduce side of the computation is also partitioned. While the number of map tasks is determined by the number of input file blocks, the number of reduce tasks is configured by the job author. To ensure that all key-value pairs with the same key end up in the same reducer, the framework uses a hash of the key.</p>
<p>The dataset is likely too large to be sorted with a conventional sorting algorithm on a single machine. Sorting is performed in stages.</p>
<p>Whenever a mapper finishes reading its input file and writing its sorted output files, the MapReduce scheduler notifies the reducers that they can start fetching the output files from that mapper. The reducers connect to each of the mappers and download the files of sorted key-value pairs for their partition. Partitioning by reducer, sorting and copying data partitions from mappers to reducers is called <em>shuffle</em>.</p>
<p>The reduce task takes the files from the mappers and merges them together, preserving the sort order.</p>
<h5 id="MapReduce-workflows"><a href="#MapReduce-workflows" class="headerlink" title="MapReduce workflows"></a>MapReduce workflows</h5><p>MapReduce jobs can be chained together into <em>workflows</em>, the output of one job becomes the input to the next job. In Hadoop this chaining is done implicitly by directory name: the first job writes its output to a designated directory in HDFS, the second job reads that same directory name as its input.</p>
<p>Compared with the Unix example, it could be seen as in each sequence of commands each command output is written to a temporary file, and the next command reads from the temporary file.</p>
<h4 id="Reduce-Side-Joins-and-Grouping"><a href="#Reduce-Side-Joins-and-Grouping" class="headerlink" title="Reduce-Side Joins and Grouping"></a>Reduce-Side Joins and Grouping</h4><p>It is common in datasets for one record to have an association with another record: a <em>foreign key</em> in a relational model, a <em>document reference</em> in a document model, or an <em>edge</em> in graph model.</p>
<p>If the query involves joins, it may require multiple index lookpus. MapReduce has no concept of indexes.</p>
<p>When a MapReduce job is given a set of files as input, it reads the entire content of all of those files, like a <em>full table scan</em>.</p>
<p>In analytics it is common to want to calculate aggregates over a large number of records. Scanning the entire input might be quite reasonable.</p>
<h5 id="Example-analysis-of-user-activity-events"><a href="#Example-analysis-of-user-activity-events" class="headerlink" title="Example: analysis of user activity events"></a>Example: analysis of user activity events</h5><p>In order to achieve good throughput in a batch process, the computation must be local to one machine. Requests over the network are too slow and nondeterministic. Queries to other database for example would be prohibitive.</p>
<p>A better approach is to take a copy of the data (peg: the database) and put it in the same distributed filesystem.</p>
<h5 id="Bringing-related-data-together-in-the-same-place"><a href="#Bringing-related-data-together-in-the-same-place" class="headerlink" title="Bringing related data together in the same place"></a>Bringing related data together in the same place</h5><p>MapReduce programming model has separated the physical network communication aspects of the computation (getting the data to the right machine) from the application logic (processing the data once you have it).</p>
<h5 id="Handling-skew"><a href="#Handling-skew" class="headerlink" title="Handling skew"></a>Handling skew</h5><p>In an example of a social network, small number of celebrities may have many millions of followers. Such disproportionately active database records are known as <em>linchpin objects</em> or <em>hot keys</em>.</p>
<p>A single reducer can lead to significant <em>skew</em> that is, one reducer that must process significantly more records than the others.</p>
<p>The <em>skewed join</em> method in Pig first runs a sampling job to determine which keys are hot and then records related to the hot key need to be replicated to <em>all</em> reducers handling that key.</p>
<p>Handling the hot key over several reducers is called <em>shared join</em> method. In Crunch is similar but requires the hot keys to be specified explicitly.</p>
<p>Hive’s skewed join optimisation requries hot keys to be specified explicitly and it uses map-side join. If you <em>can</em> make certain assumptions about your input data, it is possible to make joins faster. A MapReducer job with no reducers and no sorting, each mapper simply reads one input file and writes one output file.</p>
<h4 id="The-Output-of-Batch-Workflows"><a href="#The-Output-of-Batch-Workflows" class="headerlink" title="The Output of Batch Workflows"></a>The Output of Batch Workflows</h4><p>The output of a batch process is often not a report, but some other kind of structure.</p>
<h5 id="Buiidling-search-indexes"><a href="#Buiidling-search-indexes" class="headerlink" title="Buiidling search indexes"></a>Buiidling search indexes</h5><p>Google’s original use of MapReduce was to build indexes for its search engine. Hadoop MapReduce remains a good way of building indexes for Lucene&#x2F;Solr.</p>
<p>If you need to perform a full-text search, a batch process is very effective way of building indexes: the mappers partition the set of documents as needed, each reducer builds the index for its partition, and the index files are written to the distributed filesystem. It pararellises very well.</p>
<p>Machine learning systems such as clasifiers and recommendation systems are a common use for batch processing.</p>
<h5 id="Key-value-stores-as-batch-process-output"><a href="#Key-value-stores-as-batch-process-output" class="headerlink" title="Key-value stores as batch process output"></a>Key-value stores as batch process output</h5><p>The output of those batch jobs is often some kind of database.</p>
<p>So, how does the output from the batch process get back into a database?</p>
<p>Writing from the batch job directly to the database server is a bad idea:</p>
<ul>
<li>Making a network request for every single record is magnitude slower than the normal throughput of a batch task.</li>
<li>Mappers or reducers concurrently write to the same output database an it can be easily overwhelmed.</li>
<li>You have to worry about the results from partially completed jobs being visible to other systems.</li>
</ul>
<p>A much better solution is to build a brand-new database <em>inside</em> the batch job an write it as files to the job’s output directory, so it can be loaded in bulk into servers that handle read-only queries. Various key-value stores support building database files in MapReduce including Voldemort, Terrapin, ElephanDB and HBase bulk loading.</p>
<h5 id="Philosophy-of-batch-process-outputs"><a href="#Philosophy-of-batch-process-outputs" class="headerlink" title="Philosophy of batch process outputs"></a>Philosophy of batch process outputs</h5><p>By treating inputs as immutable and avoiding side effects (such as writing to external databases), batch jobs not only achieve good performance but also become much easier to maintain.</p>
<p>Design principles that worked well for Unix also seem to be working well for Hadoop.</p>
<h4 id="Comparing-Hadoop-to-Dstributed-Databases"><a href="#Comparing-Hadoop-to-Dstributed-Databases" class="headerlink" title="Comparing Hadoop to Dstributed Databases"></a>Comparing Hadoop to Dstributed Databases</h4><p>The MapReduce paper was not at all new. The sections we’ve seen had been already implemented in so-called <em>massively parallel processing</em> (MPP) databases.</p>
<p>The biggest difference is that MPP databases focus on parallel execution of analytic SQL queries on a cluster of machines, while the combination of MapReduce and a distributed filesystem provides something much more like a general-purpose operating system that can run arbitraty programs.</p>
<h5 id="Diversity-of-storage"><a href="#Diversity-of-storage" class="headerlink" title="Diversity of storage"></a>Diversity of storage</h5><p>Hadoop opened up the possibility of indiscriminately dumpint data into HDFS. MPP databases typically require careful upfront modeling of the data and query patterns before importing data into the database’s proprietary storage format.</p>
<p>In MapReduce instead of forcing the producer of a dataset to bring it into a standarised format, the interpretation of the data becomes the consumer’s problem.</p>
<h5 id="Diversity-of-processing-models"><a href="#Diversity-of-processing-models" class="headerlink" title="Diversity of processing models"></a>Diversity of processing models</h5><p>If you have HDFS and MapReduce, you <em>can</em> build a SQL query execution engine on top of it, and indeed this is what the Hive project did.</p>
<h5 id="Deisigning-for-frequent-faults"><a href="#Deisigning-for-frequent-faults" class="headerlink" title="Deisigning for frequent faults"></a>Deisigning for frequent faults</h5><p>If a node crashes while a query is executing, most MPP databases abort the entire query. MPP databases also prefer to keep as much data as possible in memory.</p>
<p>MapReduce can tolerate the failure of a map or reduce task without it affecting the job. It is also very eager to write data to disk, partly for fault tolerance, and partly because the dataset might not fit in memory anyway.</p>
<p>MapReduce is more appropriate for larger jobs.</p>
<p>At Google, a MapReduce task that runs for an hour has an approximately 5% risk of being terminated to make space for higher-priority process.</p>
<p>Ths is why MapReduce is designed to tolerate frequent unexpected task termination.</p>
<h3 id="Beyond-MapReduce"><a href="#Beyond-MapReduce" class="headerlink" title="Beyond MapReduce"></a>Beyond MapReduce</h3><p>In response to the difficulty of using MapReduce directly, various higher-level programming models emerged on top of it: Pig, Hive, Cascading, Crunch.</p>
<p>MapReduce has poor performance for some kinds of processing. It’s very robust, you can use it to process almost arbitrarily large quantities of data on an unreliable multi-tenant system with frequent task terminations, and it will still get the job done.</p>
<h4 id="Materialization-of-Intermediate-State"><a href="#Materialization-of-Intermediate-State" class="headerlink" title="Materialization of Intermediate State"></a>Materialization of Intermediate State</h4><p>The files on the distributed filesystem are simply <em>intermediate state</em>: a means of passing data from one job to the next.</p>
<p>The process of writing out the intermediate state to files is called <em>materialisation</em>.</p>
<p>MapReduce’s approach of fully materialising state has some downsides compared to Unix pipes:</p>
<ul>
<li>A MapReduce job can only start when all tasks in the preceding jobs have completed, whereas processes connected by a Unix pipe are started at the same time.</li>
<li>Mappers are often redundant: they just read back the same file that was just written by a reducer.</li>
<li>Files are replicated across several nodes, which is often overkill for such temporary data.</li>
</ul>
<h5 id="Dataflow-engines"><a href="#Dataflow-engines" class="headerlink" title="Dataflow engines"></a>Dataflow engines</h5><p>To fix these problems with MapReduce, new execution engines for distributed batch computations were developed, Spark, Tez and Flink. These new ones can handle an entire workflow as one job, rather than breaking it up into independent subjobs (<em>dataflow engines</em>).</p>
<p>These functions need not to take the strict roles of alternating map and reduce, they are assembled in flexible ways, in functions called <em>operators</em>.</p>
<h5 id="Fault-tolerance"><a href="#Fault-tolerance" class="headerlink" title="Fault tolerance"></a>Fault tolerance</h5><p>Spark, Flink, and Tex avoid writing intermediate state to HDFS, so they take a different approach to tolerating faults: if a machine fails and the intermediate state on that machine is lost, it is recomputed from other data that is still available.</p>
<p>The framework must keep track of how a given piece of data was computed. Spark uses the resilient distributed dataset (RDD) to track ancestry data, while Flink checkpoints operator state, allowing it to resume running an operator that ran into a fault during its execution.</p>
<h4 id="Graphs-and-iterative-processing"><a href="#Graphs-and-iterative-processing" class="headerlink" title="Graphs and iterative processing"></a>Graphs and iterative processing</h4><p>It’s interesting to look at graphs in batch processing context, where the goal is to perform some kind of offline processing or analysis on an entire graph. This need often arises in machine learning applications such as recommednation engines, or in ranking systems.</p>
<p>“repeating until done” cannot be expressed in plain MapReduce as it runs in a single pass over the data and some extra trickery is necessary.</p>
<h5 id="The-Pregel-processing-model"><a href="#The-Pregel-processing-model" class="headerlink" title="The Pregel processing model"></a>The Pregel processing model</h5><p>An optimisation for batch processing graphs, the <em>bulk synchronous parallel</em> (BSP) has become popular. It is implemented by Apache Giraph, Spark’s GraphX API, and Flink’s Gelly API (_Pregel model, as Google Pregel paper popularized it).</p>
<p>One vertex can “send a message” to another vertex, and typically those messages are sent along the edges in a graph.</p>
<p>The difference from MapReduce is that a vertex remembers its state in memory from one iteration to the next.</p>
<h5 id="Fault-tolerance-1"><a href="#Fault-tolerance-1" class="headerlink" title="Fault tolerance"></a>Fault tolerance</h5><p>The fact that vertices can only communicate by message passing helps improve the performance of Pregel jobs, since messages can be batched.</p>
<p>Fault tolerance is achieved by periodically checkpointing the state of all vertices at the end of an interation.</p>
<h5 id="Parallel-execution"><a href="#Parallel-execution" class="headerlink" title="Parallel execution"></a>Parallel execution</h5><p>The framework may partition the graph in arbitrary ways.</p>
<p>Graph algorithms often have a lot of cross-machine communication overhead, and the intermediate state is often bigger than the original graph.</p>
<p>If your graph can fit into memory on a single computer, it’s quite likely that a single-machine algorithm will outperform a distributed batch process. If the graph is too big to fit on a single machine, a distributed approach such as Pregel is unavoidable.</p>
<h2 id="Stream-processing"><a href="#Stream-processing" class="headerlink" title="Stream processing"></a>Stream processing</h2><p>We can run the processing continuously, abandoning the fixed time slices entirely and simply processing every event as it happens, that’s the idea behind <em>stream processing</em>. Data that is incrementally made available over time.</p>
<h3 id="Transmitting-event-streams"><a href="#Transmitting-event-streams" class="headerlink" title="Transmitting event streams"></a>Transmitting event streams</h3><p>A record is more commonly known as an <em>event</em>. Something that happened at some point in time, it usually contains a timestamp indicating when it happened acording to a time-of-day clock.</p>
<p>An event is generated once by a <em>producer</em> (<em>publisher</em> or <em>sender</em>), and then potentially processed by multiple <em>consumers</em> (<em>subcribers</em> or <em>recipients</em>). Related events are usually grouped together into a <em>topic</em> or a <em>stream</em>.</p>
<p>A file or a database is sufficient to connect producers and consumers: a producer writes every event that it generates to the datastore, and each consumer periodically polls the datastore to check for events that have appeared since it last ran.</p>
<p>However, when moving toward continual processing, polling becomes expensive. It is better for consumers to be notified when new events appear.</p>
<p>Databases offer <em>triggers</em> but they are limited, so specialized tools have been developed for the purpose of delivering event notifications.</p>
<h4 id="Messaging-systems"><a href="#Messaging-systems" class="headerlink" title="Messaging systems"></a>Messaging systems</h4><p>Within the <em>publish</em>&#x2F;<em>subscribe</em> model, we can differentiate the systems by asking two questions:</p>
<ol>
<li><em>What happens if the producers send messages faster than the consumers can process them?</em> The system can drop messages, buffer the messages in a queue, or apply <em>backpressure</em> (<em>flow control</em>, blocking the producer from sending more messages).</li>
<li><em>What happens if nodes crash or temporarily go offline, are any messages lost?</em> Durability may require some combination of writing to disk and&#x2F;or replication.</li>
</ol>
<h5 id="Direct-messaging-from-producers-to-consumers"><a href="#Direct-messaging-from-producers-to-consumers" class="headerlink" title="Direct messaging from producers to consumers"></a>Direct messaging from producers to consumers</h5><p>A number of messaging systems use direct communication between producers and consumers without intermediary nodes:</p>
<ul>
<li>UDP multicast, where low latency is important, application-level protocols can recover lost packets.</li>
<li>Brokerless messaging libraries such as ZeroMQ</li>
<li>StatsD and Brubeck use unreliable UDP messaging for collecting metrics</li>
<li>If the consumer expose a service on the network, producers can make a direct HTTP or RPC request to push messages to the consumer. This is the idea behind webhooks, a callback URL of one service is registered with another service, and makes a request to that URL whenever an event occurs</li>
</ul>
<p>These direct messaging systems require the application code to be aware of the possibility of message loss. The faults they can tolerate are quite limited as they assume that producers and consumers are constantly online.</p>
<p>If a consumer is offline, it may miss messages. Some protocols allow the producer to retry failed message deliveries, but it may break down if the producer crashes losing the buffer or messages.</p>
<h5 id="Message-brokers"><a href="#Message-brokers" class="headerlink" title="Message brokers"></a>Message brokers</h5><p>An alternative is to send messages via a <em>message broker</em> (or <em>message queue</em>), which is a kind of database that is optimized for handling message streams. It runs as a server, with producers and consumers connecting to it as clients. Producers write messages to the broker, and consumers receive them by reading them from the broker.</p>
<p>By centralizing the data, these systems can easily tolerate clients that come and go, and the question of durability is moved to the broker instead. Some brokers only keep messages in memory, while others write them down to disk so that they are not lost in case of a broker crash.</p>
<p>A consequence of queueing is that consuemrs are generally <em>asynchronous</em>: the producer only waits for the broker to confirm that it has buffered the message and does not wait for the message to be processed by consumers.</p>
<h5 id="Message-brokers-compared-to-databases"><a href="#Message-brokers-compared-to-databases" class="headerlink" title="Message brokers compared to databases"></a>Message brokers compared to databases</h5><p>Some brokers can even participate in two-phase commit protocols using XA and JTA. This makes them similar to databases, aside from some practical differences:</p>
<ul>
<li>Most message brokers automatically delete a message when it has been successfully delivered to its consumers. This makes them not suitable for long-term storage.</li>
<li>Most message brokers assume that their working set is fairly small. If the broker needs to buffer a lot of messages, each individual message takes longer to process, and the overall throughput may degrade.</li>
<li>Message brokers often support some way of subscribing to a subset of topics matching some pattern.</li>
<li>Message brokers do not support arbitrary queries, but they do notify clients when data changes.</li>
</ul>
<p>This is the traditional view of message brokers, encapsulated in standards like JMS and AMQP, and implemented in RabbitMQ, ActiveMQ, HornetQ, Qpid, TIBCO Enterprise Message Service, IBM MQ, Azure Service Bus, and Google Cloud Pub&#x2F;Sub.</p>
<h5 id="Multiple-consumers"><a href="#Multiple-consumers" class="headerlink" title="Multiple consumers"></a>Multiple consumers</h5><p>When multiple consumers read messages in the same topic, two main patterns are used:</p>
<ul>
<li>Load balancing: Each message is delivered to <em>one</em> of the consumers. The broker may assign messages to consumers arbitrarily.</li>
<li>Fan-out: Each message is delivered to <em>all</em> of the consumers.</li>
</ul>
<h5 id="Acknowledgments-and-redelivery"><a href="#Acknowledgments-and-redelivery" class="headerlink" title="Acknowledgments and redelivery"></a>Acknowledgments and redelivery</h5><p>In order to ensure that the message is not lost, message brokers use <em>acknowledgements</em>: a client must explicitly tell the broker when it has finished processing a message so that the broker can remove it from the queue.</p>
<p>The combination of load balancing with redelivery inevitably leads to messages being reordered. To avoid this issue, you can use a separate queue per consumer (not use the load balancing feature).</p>
<h4 id="Partitioned-logs"><a href="#Partitioned-logs" class="headerlink" title="Partitioned logs"></a>Partitioned logs</h4><p>A key feature of batch process is that you can run them repeatedly without the risk of damaging the input. This is not the case with AMQP&#x2F;JMS-style messaging: receiving a message is destructive if the acknowledgement causes it to be deleted from the broker.</p>
<p>If you add a new consumer to a messaging system, any prior messages are already gone and cannot be recovered.</p>
<h5 id="Using-logs-for-message-storage"><a href="#Using-logs-for-message-storage" class="headerlink" title="Using logs for message storage"></a>Using logs for message storage</h5><p>We can have a hybrid, combining the durable storage approach of databases with the low-latency notifications facilities of messaging, this is the idea behind <em>log-based message brokers</em>.</p>
<p>A log is simply an append-only sequence of records on disk. The same structure can be used to implement a message broker: a producer sends a message by appending it to the end of the log, and consumer receives messages by reading the log sequentially. If a consumer reaches the end of the log, it waits for a notification that a new message has been appended.</p>
<p>To scale to higher throughput than a single disk can offer, the log can be <em>partitioned</em>. Different partitions can then be hosted on different machines. A topic can then be defined as a group of partitions that all carry messages of the same type.</p>
<p>Within each partition, the broker assigns monotonically increasing sequence number, or <em>offset</em>, to every message.</p>
<p>Apache Kafka, Amazon Kinesis Streams, and Twitter’s DistributedLog, are log-based message brokers that work like this.</p>
<h5 id="Logs-compared-to-traditional-messaging"><a href="#Logs-compared-to-traditional-messaging" class="headerlink" title="Logs compared to traditional messaging"></a>Logs compared to traditional messaging</h5><p>The log-based approach trivially supports fan-out messaging, as several consumers can independently read the log reading without affecting each other. Reading a message does not delete it from the log. To achieve load balancing the broker can assign entire partitions to nodes in the consumer group. Each client then consumes <em>all</em> the messages in the partition it has been assigned. This approach has some downsides.</p>
<ul>
<li>The number of nodes sharing the work of consuming a topic can be at most the number of log partitions in that topic.</li>
<li>If a single message is slow to process, it holds up the processing of subsequent messages in that partition.</li>
</ul>
<p>In situations where messages may be expensive to process and you want to pararellize processing on a message-by-message basis, and where message ordering is not so important, the JMS&#x2F;AMQP style of message broker is preferable. In situations with high message throughput, where each message is fast to process and where message ordering is important, the log-based approach works very well.</p>
<h5 id="Consumer-offsets"><a href="#Consumer-offsets" class="headerlink" title="Consumer offsets"></a>Consumer offsets</h5><p>It is easy to tell which messages have been processed: all messages with an offset less than a consumer current offset have already been processed, and all messages with a greater offset have not yet been seen.</p>
<p>The offset is very similar to the <em>log sequence number</em> that is commonly found in single-leader database replication. The message broker behaves like a leader database, and the consumer like a follower.</p>
<p>If a consumer node fails, another node in the consumer group starts consuming messages at the last recorded offset. If the consumer had processed subsequent messages but not yet recorded their offset, those messages will be processed a second time upon restart.</p>
<h5 id="Disk-space-usage"><a href="#Disk-space-usage" class="headerlink" title="Disk space usage"></a>Disk space usage</h5><p>If you only ever append the log, you will eventually run out of disk space. From time to time old segments are deleted or moved to archive.</p>
<p>If a slow consumer cannot keep with the rate of messages, and it falls so far behind that its consumer offset poitns to a deleted segment, it will miss some of the messages.</p>
<p>The throughput of a log remains more or less constant, since every message is written to disk anyway. This is in contrast to messaging systems that keep messages in memory by default and only write them to disk if the queue grows too large: systems are fast when queues are short and become much slower when they start writing to disk, throughput depends on the amount of history retained.</p>
<h5 id="When-consumers-cannot-keep-up-with-producers"><a href="#When-consumers-cannot-keep-up-with-producers" class="headerlink" title="When consumers cannot keep up with producers"></a>When consumers cannot keep up with producers</h5><p>If a consumer cannot keep up with producers, the consumer can drop messages, buffer them or applying backpressure.</p>
<p>You can monitor how far a consumer is behind the head of the log, and raise an alert if it falls behind significantly.</p>
<p>If a consumer does fall too far behind and start missing messages, only that consumer is affected.</p>
<h5 id="Replaying-old-messages"><a href="#Replaying-old-messages" class="headerlink" title="Replaying old messages"></a>Replaying old messages</h5><p>With AMQP and JMS-style message brokers, processing and acknowledging messages is a destructive operation, since it causes the messages to be deleted on the broker. In a log-based message broker, consuming messages is more like reading from a file.</p>
<p>The offset is under the consumer’s control, so you can easily be manipulated if necessary, like for replaying old messages.</p>
<h3 id="Databases-and-streams"><a href="#Databases-and-streams" class="headerlink" title="Databases and streams"></a>Databases and streams</h3><p>A replciation log is a stream of a database write events, produced by the leader as it processes transactions. Followers apply that stream of writes to their own copy of the database and thus end up with an accurate copy of the same data.</p>
<h4 id="Keeping-Systems-in-Sync"><a href="#Keeping-Systems-in-Sync" class="headerlink" title="Keeping Systems in Sync"></a>Keeping Systems in Sync</h4><p>If periodic full database dumps are too slow, an alternative that is sometimes used is <em>dual writes</em>. For example, writing to the database, then updating the search index, then invalidating the cache.</p>
<p>Dual writes have some serious problems, one of which is race conditions. If you have concurrent writes, one value will simply silently overwrite another value.</p>
<p>One of the writes may fail while the other succeeds and two systems will become inconsistent.</p>
<p>The problem with most databases replication logs is that they are considered an internal implementation detail, not a public API.</p>
<h4 id="Change-Data-Capture"><a href="#Change-Data-Capture" class="headerlink" title="Change Data Capture"></a>Change Data Capture</h4><p>Recently there has been a growing interest in <em>change data capture</em> (CDC), which is the process of observing all data changes written to a database and extracting them in a form in which they can be replicated to other systems.</p>
<p>For example, you can capture the changes in a database and continually apply the same changes to a search index.</p>
<h5 id="Implementing-change-data-capture"><a href="#Implementing-change-data-capture" class="headerlink" title="Implementing change data capture"></a>Implementing change data capture</h5><p>We can call log consumers <em>derived data systems</em>: the data stored in the search index and the data warehouse is just another view. Change data capture is a mechanism for ensuring that all changes made to the system of record are also reflected in the derived data systems.</p>
<p>Change data capture makes one database the leader, and turns the others into followers.</p>
<p>Database triggers can be used to implement change data capture, but they tend to be fragile and have significant performance overheads. Parsing the replication log can be a more robust approach.</p>
<p>LinkedIn’s Databus, Facebook’s Wormhole, and Yahoo!’s Sherpa use this idea at large scale. Bottled Watter implements CDC for PostgreSQL decoding the write-ahead log, Maxwell and Debezium for something similar for MySQL by parsing the binlog, Mongoriver reads the MongoDB oplog, and GoldenGate provide similar facilities for Oracle.</p>
<h5 id="Initial-snapshot"><a href="#Initial-snapshot" class="headerlink" title="Initial snapshot"></a>Initial snapshot</h5><p>Keeping all changes forever would require too much disk space, and replaying it would take too long, so the log needs to be truncated.</p>
<p>You can start with a consistent snapshot of the database, and it must correspond to a known position or offset in the change log.</p>
<h5 id="Log-compaction"><a href="#Log-compaction" class="headerlink" title="Log compaction"></a>Log compaction</h5><p>The storage engine periodically looks for log records with the same key, throws away any duplicates, and keeps only the most recent update for each key.</p>
<p>An update with a special null value (a <em>tombstone</em>) indicates that a key was deleted.</p>
<p>The same idea works in the context of log-based mesage brokers and change data capture.</p>
<h5 id="API-support-for-change-streams"><a href="#API-support-for-change-streams" class="headerlink" title="API support for change streams"></a>API support for change streams</h5><p>RethinkDB allows queries to subscribe to notifications, Firebase and CouchDB provide data synchronisation based on change feed.</p>
<p>Kafka Connect integrates change data capture tools for a wide range of database systems with Kafka.</p>
<h4 id="Event-sourcing"><a href="#Event-sourcing" class="headerlink" title="Event sourcing"></a>Event sourcing</h4><p>There are some parallels between the ideas we’ve discussed here and <em>event sourcing</em>.</p>
<p>Similarly to change data capture, event sourcing involves storing all changes to the application state as a log of change events. Event sourcing applyies the idea at a different level of abstraction.</p>
<p>Event sourcing makes it easier to evolve applications over time, helps with debugging by making it easier to understand after the fact why something happened, and guards against application bugs.</p>
<p>Specialized databases such as Event Store have been developed to support applications using event sourcing.</p>
<h5 id="Deriving-currnt-state-from-the-event-log"><a href="#Deriving-currnt-state-from-the-event-log" class="headerlink" title="Deriving currnt state from the event log"></a>Deriving currnt state from the event log</h5><p>Applications that use event sourcing need to take the log of events and transform it into application state that is suitable for showing to a user.</p>
<p>Replying the event log allows you to reconstruct the current state of the system.</p>
<p>Applications that use event sourcing typically have some mechanism for storing snapshots.</p>
<h5 id="Commands-and-events"><a href="#Commands-and-events" class="headerlink" title="Commands and events"></a>Commands and events</h5><p>Event sourcing philosophy is careful to distinguish between <em>events</em> and <em>commands</em>. When a request from a user first arrives, it is initially a command: it may still fail (like some integrity condition is violated). If the validation is successful, it becomes an event, which is durable and immutable.</p>
<p>A consumer of the event stream is not allowed to reject an event: Any validation of a command needs to happen synchronously, before it becomes an event. For example, by using a serializable transaction that atomically validates the command and publishes the event.</p>
<p>Alternatively, the user request to serve a seat could be split into two events: first a tentative reservation, and then a separate confirmation event once the reservation has been validated. This split allows the validation to take place in an asynchronous process.</p>
<h4 id="State-Streams-and-Immutability"><a href="#State-Streams-and-Immutability" class="headerlink" title="State, Streams, and Immutability"></a>State, Streams, and Immutability</h4><p>Whenever you have state changes, that state is the result of the events that mutated it over time.</p>
<p>Mutable state and an append-only log of immutable events do not contradict each other.</p>
<p>As an example, financial bookkeeping is recorded as an append-only <em>ledger</em>. It is a log of events describing money, good, or services that have changed hands. Profit and loss or the balance sheet are derived from the ledger by adding them up.</p>
<p>If a mistake is made, accountants don’t erase or change the incorrect transaction, instead, they add another transaction that compensates for the mistake.</p>
<p>If buggy code writes bad data to a database, recovery is much harder if the code is able to destructively overwrite data.</p>
<p>Immutable events also capture more information than just the current state. If you persisted a cart into a regular database, deleting an item would effectively loose that event.</p>
<h5 id="Deriving-several-views-from-the-same-event-log"><a href="#Deriving-several-views-from-the-same-event-log" class="headerlink" title="Deriving several views from the same event log"></a>Deriving several views from the same event log</h5><p>You can derive views from the same event log, Druid ingests directly from Kafka, Pistachio is a distributed key-value sotre that uses Kafka as a commit log, Kafka Connect sinks can export data from Kafka to various different databases and indexes.</p>
<p>Storing data is normally quite straightforward if you don’t have to worry about how it is going to be queried and accessed. You gain a lot of flexibility by separating the form in which data is written from the form it is read, this idea is known as <em>command query responsibility segregation</em> (CQRS).</p>
<p>There is this fallacy that data must be written in the same form as it will be queried.</p>
<h5 id="Concurrency-control"><a href="#Concurrency-control" class="headerlink" title="Concurrency control"></a>Concurrency control</h5><p>The biggest downside of event sourcing and change data capture is that consumers of the event log are usually asynchronous, a user may make a write to the log, then read from a log derived view and find that their write has not yet been reflected.</p>
<h5 id="Limitations-of-immutability"><a href="#Limitations-of-immutability" class="headerlink" title="Limitations of immutability"></a>Limitations of immutability</h5><p>The limitations on immutable event history depends on the amount of churn in the dataset. Some workloads mostly add data and rarely update or delete; they are easy to make immutable. Other workloads have a high rate of updates and deletes on a comparaively small dataset; in these cases immutable history becomes an issue because of fragmentation, performance compaction and garbage collection.</p>
<p>There may also be circumstances in which you need data to be deleted for administrative reasons.</p>
<p>Sometimes you may want to rewrite history, Datomic calls this feature <em>excision</em>.</p>
<h3 id="Processing-Streams"><a href="#Processing-Streams" class="headerlink" title="Processing Streams"></a>Processing Streams</h3><p>What you can do with the stream once you have it:</p>
<ol>
<li>You can take the data in the events and write it to the database, cache, search index, or similar storage system, from where it can then be queried by other clients.</li>
<li>You can push the events to users in some way, for example by sending email alerts or push notifications, or to a real-time dashboard.</li>
<li>You can process one or more input streams to produce one or more output streams.</li>
</ol>
<p>Processing streams to produce other, derived streams is what an <em>operator job</em> does. The one crucial difference to batch jobs is that a stream never ends.</p>
<h4 id="Use-of-Stream-Processing"><a href="#Use-of-Stream-Processing" class="headerlink" title="Use of Stream Processing"></a>Use of Stream Processing</h4><p>Stream processing has long been used for monitoring purposes, where an organization wants to be alerted if certain things happen.</p>
<h5 id="Complex-event-processing"><a href="#Complex-event-processing" class="headerlink" title="Complex event processing"></a>Complex event processing</h5><p><em>Complex event processing</em> (CEP) is an approach for analising event streams where you can specify rules to search for certain patterns of events in them.</p>
<p>When a match is found, the engine emits a <em>complex event</em>.</p>
<p>Queries are stored long-term, and events from the input streams continuously flow past them in search of a query that matches an event pattern.</p>
<p>Implementations of CEP include Esper, IBM InfoSphere Streams, Apama, TIBCO StreamBase, and SQLstream.</p>
<h5 id="Stream-analytics"><a href="#Stream-analytics" class="headerlink" title="Stream analytics"></a>Stream analytics</h5><p>The boundary between CEP and stream analytics is blurry, analytics tends to be less interested in finding specific event sequences and is more oriented toward aggregations and statistical metrics.</p>
<p>Frameworks with analytics in mind are: Apache Storm, Spark Streaming, Flink, Concord, Samza, and Kafka Streams. Hosted services include Google Cloud Dataflow and Azure Stream Analytics.</p>
<h5 id="Maintaining-materialized-views"><a href="#Maintaining-materialized-views" class="headerlink" title="Maintaining materialized views"></a>Maintaining materialized views</h5><p>In principle, any state processor could be used for materialized view maintenance, although the need to maintain events forever runs counter to the assumptions of some analytics-oriented frameworks that mostly operate on windows of a limited duration.</p>
<h5 id="Search-on-streams"><a href="#Search-on-streams" class="headerlink" title="Search on streams"></a>Search on streams</h5><p>Sometimes there is a need to search for individual events continually, such as full-text search queries over streams.</p>
<h5 id="Message-passing-and-RPC"><a href="#Message-passing-and-RPC" class="headerlink" title="Message passing and RPC"></a>Message passing and RPC</h5><p>Message-passing systems are also based on messages and events, we normally don’t think of them as stream processors.</p>
<p>There is some crossover area between RPC-like systems and stream processing. Apache Storm has a feature called <em>distributed RPC</em>.</p>
<h4 id="Reasoning-About-Time"><a href="#Reasoning-About-Time" class="headerlink" title="Reasoning About Time"></a>Reasoning About Time</h4><p>In a batch process, the time at which the process is run has nothing to do with the time at which the events actually occurred.</p>
<p>Many stream processing frameworks use the local system clock on the processing machine (<em>processing time</em>) to determine windowing. It is a simple approach that breaks down if there is any significant processing lag.</p>
<h5 id="Event-time-versus-processing-time"><a href="#Event-time-versus-processing-time" class="headerlink" title="Event time versus processing time"></a>Event time versus processing time</h5><p>Confusing event time and processing time leads to bad data. Processing time may be unreliable as the stream processor may queue events, restart, etc. It’s better to take into account the original event time to count rates.</p>
<h5 id="Knowing-when-you’re-ready"><a href="#Knowing-when-you’re-ready" class="headerlink" title="Knowing when you’re ready"></a>Knowing when you’re ready</h5><p>You can never be sure when you have received all the events.</p>
<p>You can time out and declare a window ready after you have not seen any new events for a while, but it could still happen that some events are delayed due a network interruption. You need to be able to handle such <em>stranggler</em> events that arrive after the window has already been declared complete.</p>
<ol>
<li>You can ignore the stranggler events, tracking the number of dropped events as a metric.</li>
<li>Publish a <em>correction</em>, an updated value for the window with stranglers included. You may also need to retract the previous output.</li>
</ol>
<h5 id="Whose-clock-are-you-using-anyway"><a href="#Whose-clock-are-you-using-anyway" class="headerlink" title="Whose clock are you using, anyway?"></a>Whose clock are you using, anyway?</h5><p>To adjust for incofrrect device clocks, one approach is to log three timestamps:</p>
<ul>
<li>The time at which the event occurred, according to the device clock</li>
<li>The time at which the event was sent to the server, according to the device clock</li>
<li>The time at which the event was received by the server, according to the server clock.</li>
</ul>
<p>You can estimate the offset between the device clock and the server clock, then apply that offset to the event timestamp, and thus estimate the true time at which the event actually ocurred.</p>
<h5 id="Types-of-windoes"><a href="#Types-of-windoes" class="headerlink" title="Types of windoes"></a>Types of windoes</h5><p>Several types of windows are in common use:</p>
<ul>
<li>Tumbling window: Fixed length. If you have a 1-minute tumbling window, all events between 10:03:00 and 10:03:59 will be grouped in one window, next window would be 10:04:00-10:04:59</li>
<li>Hopping window: Fixed length, but allows windows to overlap in order to provide some smoothing. If you have a 5-minute window with a hop size of 1 minute, it would contain the events between 10:03:00 and 10:07:59, next window would cover 10:04:00-10:08:59</li>
<li>Sliding window: Events that occur within some interval of each other. For example, a 5-minute sliding window would cover 10:03:39 and 10:08:12 because they are less than 4 minutes apart.</li>
<li>Session window: No fixed duration. All events for the same user, the window ends when the user has been inactive for some time (30 minutes). Common in website analytics</li>
</ul>
<h4 id="Steam-Joins"><a href="#Steam-Joins" class="headerlink" title="Steam Joins"></a>Steam Joins</h4><p>The fact that new events can appear anytime on a stream makes joins on stream challenging.</p>
<h5 id="Stream-stream-joins"><a href="#Stream-stream-joins" class="headerlink" title="Stream-stream joins"></a>Stream-stream joins</h5><p>You want to detect recent trends in searched-for URLs. You log an event containing the query. Someone clicks one of the search results, you log another event recording the click. You need to bring together the events for the search action and the click action.</p>
<p>For this type of join, a stream processor needs to maintain <em>state</em>: All events that occurred in the last hour, indexed by session ID. Whenever a search event or click event occurs, it is added to the appropriate index, and the stream processor also checks the other index to see if another event for the same session ID has already arrived. If there is a matching event, you emit an event saying search result was clicked.</p>
<h5 id="Stream-table-joins"><a href="#Stream-table-joins" class="headerlink" title="Stream-table joins"></a>Stream-table joins</h5><p>Sometimes know as <em>enriching</em> the activity events with information from the database.</p>
<p>Imagine two datasets: a set of usr activity events, and a database of user profiles. Activity events include the user ID, and the the resulting stream should have the augmented profile information based upon the user ID.</p>
<p>The stream process needs to look at one activity event at a time, look up the event’s user ID in the database, and add the profile information to the activity event. The database lookup could be implemented by querying a remote database., however this would be slow and risk overloading the database.</p>
<p>Another approach is to load a copy of the database into the stream processor so that it can be queried locally without a network round-trip. The stream processor’s local copy of the database needs to be kept up to date; this can be solved with change data capture.</p>
<h5 id="Table-table-join"><a href="#Table-table-join" class="headerlink" title="Table-table join"></a>Table-table join</h5><p>The stream process needs to maintain a database containing the set of followers for each user so it knows which timelines need to be updated when a new tweet arrives.</p>
<h5 id="Time-dependence-of-joins"><a href="#Time-dependence-of-joins" class="headerlink" title="Time-dependence of joins"></a>Time-dependence of joins</h5><p>The previous three types of join require the stream processor to maintain some state.</p>
<p>If state changes over time, and you join with some state, what point in time do you use for the join?</p>
<p>If the ordering of events across streams is undetermined, the join becomes nondeterministic.</p>
<p>This issue is known as <em>slowly changing dimension</em> (SCD), often addressed by using a unique identifier for a particular version of the joined record. For example, we can turn the system deterministic if every time the tax rate changes, it is given a new identifier, and the invoice includes the identifier for the tax rate at the time of sale. But as a consequence makes log compation impossible.</p>
<h4 id="Fault-tolerance-2"><a href="#Fault-tolerance-2" class="headerlink" title="Fault tolerance"></a>Fault tolerance</h4><p>Batch processing frameworks can tolerate faults fairly easy:if a task in a MapReduce job fails, it can simply be started again on another machine, input files are immutable and the output is written to a separate file.</p>
<p>Even though restarting tasks means records can be processed multiple times, the visible effect in the output is as if they had only been processed once (<em>exactly-once-semantics</em> or <em>effectively-once</em>).</p>
<p>With stream processing waiting until a task is finished before making its output visible is not an option, stream is infinite.</p>
<h5 id="Microbatching-and-checkpointing"><a href="#Microbatching-and-checkpointing" class="headerlink" title="Microbatching and checkpointing"></a>Microbatching and checkpointing</h5><p>One solution is to break the stream into small blocks, and treat each block like a minuature batch process (<em>micro-batching</em>). This technique is used in Spark Streaming, and the batch size is typically around one second.</p>
<p>An alternative approach, used in Apache Flint, is to periodically generate rolling checkpoints of state and write them to durable storage. If a stream operator crashes, it can restart from its most recent checkpoint.</p>
<p>Microbatching and chekpointing approaches provide the same exactly-once semantics as batch processing. However, as soon as output leaves the stream processor, the framework is no longer able to discard the output of a failed batch.</p>
<h5 id="Atomic-commit-revisited"><a href="#Atomic-commit-revisited" class="headerlink" title="Atomic commit revisited"></a>Atomic commit revisited</h5><p>In order to give appearance of exactly-once processing, things either need to happen atomically or none of them must happen. Things should not go out of sync with each other. Distributed transactions and two-phase commit can be used.</p>
<p>This approach is used in Google Cloud Dataflow and VoltDB, and there are plans to add similar features to Apache Kafka.</p>
<h5 id="Idempotence"><a href="#Idempotence" class="headerlink" title="Idempotence"></a>Idempotence</h5><p>Our goal is to discard the partial output of failed tasks so that they can be safely retroed without taking effect twice. Distributed transactions are one way of achieving that goal, but another way is to rely on <em>idempotence</em>.</p>
<p>An idempotent operation is one that you can perform multiple times, and it has the same effect as if you performed it only once.</p>
<p>Even if an operation is not naturally idempotent, it can often be made idempotent with a bit of extra metadata. You can tell wether an update has already been applied.</p>
<p>Idempotent operations can be an effective way of achieving exactly-once semantics with only a small overhead.</p>
<h5 id="Rebuilding-state-after-a-failure"><a href="#Rebuilding-state-after-a-failure" class="headerlink" title="Rebuilding state after a failure"></a>Rebuilding state after a failure</h5><p>Any stream process that requires state must ensure that this state can be recovered after a failure.</p>
<p>One option is to keep the state in a remote datastore and replicate it, but it is slow.</p>
<p>An alternative is to keep state local to the stream processor and replicate it periodically.</p>
<p>Flink periodically captures snapshots and writes them to durable storage such as HDFS; Samza and Kafka Streams replicate state changes by sending them to a dedicated Kafka topic with log compaction. VoltDB replicates state by redundantly processing each input message on several nodes.</p>
<h2 id="The-future-of-data-systems"><a href="#The-future-of-data-systems" class="headerlink" title="The future of data systems"></a>The future of data systems</h2><h3 id="Data-integration"><a href="#Data-integration" class="headerlink" title="Data integration"></a>Data integration</h3><p>Trying to do everything in one piece of software almost guarantees that the implementation will be poor.</p>
<h4 id="Combining-Specialized-Tools-by-Deriving-Data"><a href="#Combining-Specialized-Tools-by-Deriving-Data" class="headerlink" title="Combining Specialized Tools by Deriving Data"></a>Combining Specialized Tools by Deriving Data</h4><h5 id="Reasoning-about-dataflows"><a href="#Reasoning-about-dataflows" class="headerlink" title="Reasoning about dataflows"></a>Reasoning about dataflows</h5><p>Updating a derived data system based on an event log can often be made determinisitic and idempotent.</p>
<h5 id="Derived-data-versus-distributed-transavtions"><a href="#Derived-data-versus-distributed-transavtions" class="headerlink" title="Derived data versus distributed transavtions"></a>Derived data versus distributed transavtions</h5><p>Distributed transactions decide on an ordering of writes by using locks for mutual exclusion, while CDC and event sourcing use a log for ordering. Distributed transactions use atomic commit to ensure exactly once semantics, while log-based systems are based on deterministic retry and idempotence.</p>
<p>Transaction systems provide linearizability, useful guarantees as reading your own writes. On the other hand, derived systems are often updated asynchronously, so they do not by default offer the same timing guarantees.</p>
<p>In the absence of widespread support for a good distributed transaction protocol, log-based derived data is the most promising approach for integrating different data systems.</p>
<h5 id="The-limits-of-total-ordering"><a href="#The-limits-of-total-ordering" class="headerlink" title="The limits of total ordering"></a>The limits of total ordering</h5><p>With systems taht are small enough, consturcting a totally ordered event log is entirely feasible. However, as systems are scaled towards bigger and more complex worloads, limitiations emerge:</p>
<ul>
<li>Constructing a totally ordered log requires all events to pass through a <em>single leader node</em> that decides on the ordering.</li>
<li>An undefined ordering of events that originate on multiple datacenters.</li>
<li>When two events originate in different services, there is no defined order for those events.</li>
<li>Some applications maintain client-side state. Clients and servers are very likely to see events in different orders.</li>
</ul>
<p>Deciding on a total order of events is known as <em>total order broadcast</em>, which is equivalent to consensus. It is still an open research problem to design consensus algorithms that can scale beyond the throughput of a single node.</p>
<h4 id="Batch-and-stream-processing"><a href="#Batch-and-stream-processing" class="headerlink" title="Batch and stream processing"></a>Batch and stream processing</h4><p>The fundamental difference between batch processors and batch processes is that the stream processors operate on unbounded datasets whereas batch processes inputs are of a known finite size.</p>
<p>Spark performs stream processing on top of batch processing. Apache Flink performs batch processing in top of stream processing.</p>
<h5 id="Maintaining-derived-state"><a href="#Maintaining-derived-state" class="headerlink" title="Maintaining derived state"></a>Maintaining derived state</h5><p>Batch processing has a quite strong functional flavour. The output depends only on the input, there are no side-effects. Stream processing is similar but it allows managed, fault-tolerant state.</p>
<p>Derived data systems could be maintained synchronously. However, asynchrony is what makes systems based on event logs robust: it allows a fault in one part of the system to be contained locally.</p>
<h5 id="Preprocessing-data-for-application-evolution"><a href="#Preprocessing-data-for-application-evolution" class="headerlink" title="Preprocessing data for application evolution"></a>Preprocessing data for application evolution</h5><p>Stream processing allows changes in the input to be reflected in derived views with low delay, whereas batch processing allows large amounts of accumulated historical data to be reprocessed in order to derive new views onto an existing dataset.</p>
<p>Derived views allow <em>gradual</em> evolution. If you want to restructure a dataset, you do not need to perform the migration as a sudden switch. Instead, you can maintain the old schema and the new schema side by side as two independent derived views onto the same underlying data, eventually you can drop the old view.</p>
<h5 id="Lambda-architecture"><a href="#Lambda-architecture" class="headerlink" title="Lambda architecture"></a>Lambda architecture</h5><p>The whole idea behind lambda architecture is that incoming data should be recorded by appending immutable events to an always-growing dataset, similarly to event sourcing. From these events, read-optimized views are derived. Lambda architecture proposes running two different systems in parallel: a batch processing system such as Hadoop MapReduce, and a stream-processing system as Storm.</p>
<p>The stream processor produces an approximate update to the view: the batch processor produces a corrected version of the derived view.</p>
<p>The stream process can use fast approximation algorithms while the batch process uses slower exact algorithms.</p>
<h3 id="Unbundling-databases"><a href="#Unbundling-databases" class="headerlink" title="Unbundling databases"></a>Unbundling databases</h3><h4 id="Composing-Data-Storage-Technologies"><a href="#Composing-Data-Storage-Technologies" class="headerlink" title="Composing Data Storage Technologies"></a>Composing Data Storage Technologies</h4><h5 id="Creating-an-index"><a href="#Creating-an-index" class="headerlink" title="Creating an index"></a>Creating an index</h5><p>The database has to scan over a consistent snapshot of a table, pick out all of the field values being indexed, sort them, and write out the index.</p>
<h5 id="The-meta-database-of-everything"><a href="#The-meta-database-of-everything" class="headerlink" title="The meta-database of everything"></a>The meta-database of everything</h5><p>Batch and stream processors are like elaborate implementations of triggers, stored procedures, and materialized view maintenance routines. The derived data systems they maintain are like different index types.</p>
<p>There are two avenues by which different storate and processing tools can nevertheless be composed into a cohesive system:</p>
<ul>
<li>Federated databases: unifying reads. It is possible to provide a unified query interface to a wide variety of underlying storate engines and processing methods, this is known as <em>federated database</em> or <em>polystore</em>. An example is PostgreSQL’s <em>foreign data wrapper</em>.</li>
<li>Unbundled databases: unifying writes. When we compose several storage systems, we need to ensure that all data changes end up in all the right places, even in the face of faults, it is like <em>unbundling</em> a database’s index-maintenance features in a way that can synchronize writes across disparate technologies.</li>
</ul>
<h5 id="Make-unbundling-work"><a href="#Make-unbundling-work" class="headerlink" title="Make unbundling work"></a>Make unbundling work</h5><p>Keeping the writes to several storage systems in sync is the harder engineering problem.</p>
<p>Synchronizing writes requires distributed transactions across heterogeneous storage systems which may be the wrong solution. An asynchronous event log with idempotent writes is a much more robust and practical approach.</p>
<p>The big advantage is <em>loose coupling</em> between various components:</p>
<ol>
<li>Asynchronous event streams make the system as a whole more robust to outages or performance degradation of individual components.</li>
<li>Unbundling data systems allows different software components and services to be developed, improved and maintained independently from each other by different teams.</li>
</ol>
<h5 id="Unbundled-versus-integrated-systems"><a href="#Unbundled-versus-integrated-systems" class="headerlink" title="Unbundled versus integrated systems"></a>Unbundled versus integrated systems</h5><p>If there is a single technology that does everything you need, you’re most likely best off simply using that product rather than trying to reimplement it yourself from lower-level components. The advantages of unbundling and composition only come into the picture when there is no single piece of software that satisfies all your requirements.</p>
<h5 id="What’s-missing"><a href="#What’s-missing" class="headerlink" title="What’s missing?"></a>What’s missing?</h5><p>We don’t yet have the unbundled-database equivalent of the Unix shell(i.e., a high-level language for composing storage and processing systems in a sinple and declarative way)</p>
<h4 id="Designing-Applications-Around-Dataflow"><a href="#Designing-Applications-Around-Dataflow" class="headerlink" title="Designing Applications Around Dataflow"></a>Designing Applications Around Dataflow</h4><h5 id="Application-code-as-a-derivation-function"><a href="#Application-code-as-a-derivation-function" class="headerlink" title="Application code as a derivation function"></a>Application code as a derivation function</h5><p>Although relational databases commonly support triggers, stored procedures, and user-defined functions, which can be used to execute application code within the database, they have been somewhat of an afterthought in database design.</p>
<h5 id="Separation-of-application-code-and-state"><a href="#Separation-of-application-code-and-state" class="headerlink" title="Separation of application code and state"></a>Separation of application code and state</h5><p>It makes sense to have some parts of a system that specialize in durable data storage, and other parts that specialize in running application code. The two can interact while still remaining independent.</p>
<p>The trend has been to keep stateless application logic separate from state management (databases): not putting application logic in the database and not putting persistent state in the application.</p>
<h4 id="Dataflow-interplay-between-state-changes-and-application-code"><a href="#Dataflow-interplay-between-state-changes-and-application-code" class="headerlink" title="Dataflow, interplay between state changes and application code"></a>Dataflow, interplay between state changes and application code</h4><p>Instead of treating the database as a passive variable that is manipulated by the application, application code responds to state changes in one place by triggering state changes in another place.</p>
<h4 id="Stream-processors-and-services"><a href="#Stream-processors-and-services" class="headerlink" title="Stream processors and services"></a>Stream processors and services</h4><p>A customer is purchasing an item that is priced in one currency but paid in another currency. In order to perform the currency conversion, you need to know the current exchange rate.</p>
<p>This could be implemented in two ways:</p>
<ul>
<li>Microservices approach, the code that processes the purchase would probably wuery an exchange-rate service or a database in order to obtain the current rate for a particular currency.</li>
<li>Dataflow approach, the code that processes purchases would subscribe to a stream of exchange rate updates ahead of time, and record the current rate in a local database whenever it changes. When it comes to processing the purchase, it only needs to query the local database.</li>
</ul>
<p>The dataflow is not only faster, but it is also more robust to the failure of another service.</p>
<h4 id="Observing-derived-state"><a href="#Observing-derived-state" class="headerlink" title="Observing derived state"></a>Observing derived state</h4><p>The derived dataset is the place where the write path and the read path meet. It represents a trade-off between the amount of work that needs to be done at write time and the amount that needs to be done at read time.</p>
<h5 id="Materialized-views-and-caching"><a href="#Materialized-views-and-caching" class="headerlink" title="Materialized views and caching"></a>Materialized views and caching</h5><p>A full-text search index is a good example: the write path updates the index, and the read path searches the index for keywords.</p>
<p>If you don’t have an index, a search query would have to scan over all documents, which is very expensive. No index means less work on the write path (no index to update), but a lot more work on the read path.</p>
<p>Another option would be to precompute the search results for only a fixed set of the most common queries. The uncommon queries can still be served from the inxed. This is what we call a <em>cache</em> although it could also be called a materialized view.</p>
<p>Viewed like this, the role of caches, indexes, and materialized views is simple: they shift the boundary between the read path and the write path.</p>
<h5 id="Read-are-events-too"><a href="#Read-are-events-too" class="headerlink" title="Read are events too"></a>Read are events too</h5><p>It is also possible to represent read requests as streams of events, and send both the read events and write events through a stream processor; the processor responds to read events by emiting the result of the read to an output stream.</p>
<p>It would allow you to reconstruct what the user saw before they made a particular decision.</p>
<p>Enables better tracking of casual dependencies.</p>
<h3 id="Aiming-for-correctness"><a href="#Aiming-for-correctness" class="headerlink" title="Aiming for correctness"></a>Aiming for correctness</h3><p>If your application can tolerate occasionally corrupting or losing data in unpredictable ways, life is a lot simpler. If you need stronger assurances of correctness, the serializability and atomic commit are established approaches.</p>
<p>While traditional transaction approach is not going away, there are some ways of thinking about correctness in the context of dataflow architectures.</p>
<h4 id="The-end-to-end-argument-for-databases"><a href="#The-end-to-end-argument-for-databases" class="headerlink" title="The end-to-end argument for databases"></a>The end-to-end argument for databases</h4><p>Bugs occur, and people make mistakes. Favour of immutable and append-only data, because it is easier to recover from such mistakes.</p>
<h5 id="Exactly-once-execution-of-an-operationn"><a href="#Exactly-once-execution-of-an-operationn" class="headerlink" title="Exactly-once execution of an operationn"></a>Exactly-once execution of an operationn</h5><p>We’ve seen the idea of <em>exactly-once</em> (or <em>effectively-once</em>) semantics. If something goes wrong while processing a message, you can either give up or try again. If you try again, there is the risk that it actually succeeded the first time, the message ends up being processed twice.</p>
<p><em>Exactly-once</em> means arranging the computation such that the final effect is the same as if no faults had occurred.</p>
<p>One of the most effective approaches is to make the operation <em>idempotent</em>, to ensure that it has the same effect, no matter whether it is executed once or multiple times. Idempotence requires some effort and care: you may need to maintain some additional metadata (operation IDs), and ensure fencing when failing over from one node to another.</p>
<h5 id="Duplicate-suppresion-Operation-identifiers"><a href="#Duplicate-suppresion-Operation-identifiers" class="headerlink" title="Duplicate suppresion &amp;&amp; Operation identifiers"></a>Duplicate suppresion &amp;&amp; Operation identifiers</h5><p>Two-phase commit unfortunately is not sufficient to ensure that the transaction will only be executed once.</p>
<p>You need to consider <em>end-to-end</em> flow of the request.</p>
<p>You can generate a unique identifier for an operation (such as a UUID) and include it as a hidden form field in the client application, or calculate a hash of all the relevant form fields to derive the operation ID. If the web browser submits the POST request twice, the two requests will have the same operation ID. You can then pass that operation ID all the way through to the database and check that you only ever execute one operation with a given ID. You can then save those requests to be processed, uniquely identified by the operation ID.</p>
<h5 id="The-end-to-end-argument"><a href="#The-end-to-end-argument" class="headerlink" title="The end-to-end argument"></a>The end-to-end argument</h5><p>TCP and some stream processors are mpt enough to prevent a user from submitting a duplicate request if the first one times out. Solving the problem requires an end-to-end solution: a transaction indentifier that is passed all the way from the end-user client to the database.</p>
<h5 id="Applying-end-to-end-thinking-in-data-systems"><a href="#Applying-end-to-end-thinking-in-data-systems" class="headerlink" title="Applying end-to-end thinking in data systems"></a>Applying end-to-end thinking in data systems</h5><p>Low-level reliability mechanisms such as those in TCP, work quite well, and so the remaining higher-level faults occur fairly rarely.</p>
<p>Transactions have long been seen as a good abstraction, they are useful but not enough.</p>
<p>It is worth exploring fault-tolerance abstractions that make it easy to provide application-specific end-to-end correctness properties, but also maintain good performance and good operational characteristics in a large-scale distributed environment.</p>
<h4 id="Enforcing-constraints"><a href="#Enforcing-constraints" class="headerlink" title="Enforcing constraints"></a>Enforcing constraints</h4><h5 id="Uniqueness-constraints-require-consensus"><a href="#Uniqueness-constraints-require-consensus" class="headerlink" title="Uniqueness constraints require consensus"></a>Uniqueness constraints require consensus</h5><p>The most common way of achieving consensus is to make a single node the leader, and put it in charge of making all decisions. If you need to tolerate the leader failing, you’re back at the consensus problem again.</p>
<p>Uniqueness checking can be scaled out by partitioning based on the value that needs to be unique. For example, if you need usernames to be unique, you can partition by hash or username.</p>
<p>Asynchronous multi-master replication is ruled out as different masters may concurrently accept conflicting writes, so values are no longer unique. If you want to be able to immediately reject any writes that would violate the constraint, synchronous coordination is unavoidable.</p>
<h5 id="Uniqueness-in-log-based-messaging"><a href="#Uniqueness-in-log-based-messaging" class="headerlink" title="Uniqueness in log-based messaging"></a>Uniqueness in log-based messaging</h5><p>A stream processor consumes all the messages in a log partition sequentially on a single thread. A stream processor can unambiguously and deterministically decide which one of several conflicting operations came first.</p>
<ol>
<li>Every request for a username is encoded as a message.</li>
<li>A stream processor sequentially reads the requests in the log. For every request for a username tht is available, it records the name as taken and emits a success message to an output stream. For every request for a username that is already taken, it emits a rejection message to an output stream.</li>
<li>The client waits for a success or rejection message corresponding to its request.</li>
</ol>
<p>The approach works not only for uniqueness constraints, but also for many other kinds of constraints.</p>
<h5 id="Multi-partition-request-processing"><a href="#Multi-partition-request-processing" class="headerlink" title="Multi-partition request processing"></a>Multi-partition request processing</h5><p>There are potentially three partitions: the one containing the request ID, the one containing the payee account, and one containing the payer account.</p>
<p>The traditional approach to databases, executing this transaction would require an atomic commit across all three partitions.</p>
<p>Equivalent correctness can be achieved with partitioned logs, and without an atomic commit.</p>
<ol>
<li>The request to transfer money from account A to account B is given a unique request ID by the client, and appended to a log partition based on the request ID.</li>
<li>A stream processor reads the log of requests. For each request message it emits two messages to output streams: a debit instruction to the payer account A (partitioned by A), and a credit instruction to the payee account B (partitioned by B). The original request ID is included in those emitted messages.</li>
<li>Further processors consume the streams of credit and debit instructions, deduplicate by request ID, and apply the chagnes to the account balances.</li>
</ol>
<h4 id="Timeliness-and-integrity"><a href="#Timeliness-and-integrity" class="headerlink" title="Timeliness and integrity"></a>Timeliness and integrity</h4><p>Consumers of a log are asynchronous by design, so a sender does not wait until its message has been proccessed by consumers. However, it is possible for a client to wait for a message to appear on an output stream.</p>
<p><em>Consistency</em> conflates two different requirements:</p>
<ul>
<li>Timeliness: users observe the system in an up-to-date state.</li>
<li>Integrity: Means absence of corruption. No data loss, no contradictory or false data. The derivation must be correct.</li>
</ul>
<p>Violations of timeless are “eventual consistency” whereas violations of integrity are “perpetual inconsistency”.</p>
<h5 id="Correctness-and-dataflow-systems"><a href="#Correctness-and-dataflow-systems" class="headerlink" title="Correctness and dataflow systems"></a>Correctness and dataflow systems</h5><p>When processing event streams asynchronously, there is no guarantee of timeliness, unless you explicitly build consumers that wait for a message to arrive before returning. But integrity is in fact central to streaming systems.</p>
<p><em>Exactly-once</em> or <em>effectively-once</em> semantics is a mechanism for preserving integrity. Fault-tolerant message delivery and duplicate supression are important for maintaining the integrity of a data system in the face of faults.</p>
<p>Stream processing systems can preserve integrity without requiring distributed transactions and an atomic commit protocol, which means they can potentially achieve comparable correctness with much better performance and operational robustness. Integrity can be achieved through a combination of mechanisms:</p>
<ul>
<li>Representing the content of the write operation as a single message, this fits well with event-sourcing</li>
<li>Deriving all other state updates from that single message using deterministic derivation functions</li>
<li>Passing a client-generated request ID, enabling end-to-end duplicate supression and idempotence</li>
<li>Making messages immutable and allowing derived data to be reprocessed from time to time</li>
</ul>
<h5 id="Loosely-interprested-constraints"><a href="#Loosely-interprested-constraints" class="headerlink" title="Loosely interprested constraints"></a>Loosely interprested constraints</h5><p>In many businesses contexts, it is actually acceptable to temporarily violate a constraint and fix it up later by apologizing. The cost of the apology (money or reputation), it is often quite low.</p>
<h5 id="Coordination-avoiding-data-systems"><a href="#Coordination-avoiding-data-systems" class="headerlink" title="Coordination-avoiding data-systems"></a>Coordination-avoiding data-systems</h5><ol>
<li>Dataflow systems can maintain integrity guarantees on derived data without atomic commit, linearizability, or synchronous cross-partition coordination.</li>
<li>Although strict uniqueness constraints require timeliness and coordination, many applications are actually fine with loose constraints than may be temporarily violated and fixed up later.</li>
</ol>
<p>Dataflow systems can provide the data management services for many applications without requiring coordination, while still giving strong integrity guarantees. <em>Coordination-avoiding</em> data systems can achieve better performance and fault tolerance than systems that need to perform synchronous coordination.</p>
<h4 id="Trust-but-verify"><a href="#Trust-but-verify" class="headerlink" title="Trust, but verify"></a>Trust, but verify</h4><p>Checking the integrity of data is know as <em>auditing</em>.</p>
<p>If you want to be sure that your data is still there, you have to actually read it and check. It is important to try restoring from your backups from time to time. Don’t just blindly trust that it is working.</p>
<p><em>Self-validating</em> or <em>self-auditing</em> systems continually check their own integrity.</p>
<p>ACID databases has led us toward developing applications on the basis of blindly trusting technology, neglecting any sort of auditability in the process.</p>
<p>By contrast, event-based systems can provide better auditability (like with event sourcing).</p>
<p>Cryptographic auditing and integrity checking often relies on <em>Merkle trees</em>. Outside of the hype for cryptocurrencies, <em>certificate transparency</em> is a security technology that relies on Merkle trees to check the validity of TLS&#x2F;SSL certificates.</p>
<h3 id="Doing-the-right-thing"><a href="#Doing-the-right-thing" class="headerlink" title="Doing the right thing"></a>Doing the right thing</h3><p>Many datasets are about people: their behaviour, their interests, their identity. We must treat such data with humanity and respect. Users are humans too, and human dignitity is paramount.</p>
<p>There are guidelines to navigate these issues such as ACM’s Software Engineering Code of Ethics and Professional Practice.</p>
<p>It is not sufficient for software engineers to focus exclusively on the technology and ignore its consequences: the ethical responsibility is ours to bear also.</p>
<h4 id="Predictive-Analytics"><a href="#Predictive-Analytics" class="headerlink" title="Predictive Analytics"></a>Predictive Analytics</h4><p>In countries that respect human rights, the criminal justice system presumes innocence until proven guilty; on the other hand, automated systems can systematically and artbitrarily exclude a person from participating in society without any proof of guilt, and with little chance of appeal.</p>
<h5 id="Bias-and-discrimination"><a href="#Bias-and-discrimination" class="headerlink" title="Bias and discrimination"></a>Bias and discrimination</h5><p>If there is a systematic bias in the input to an algorithm, the system will most likely learn and amplify bias in its output.</p>
<p>It seems ridiculous to believe that an algorithm could somehow take biased data as input and produce fair and impartial output from it. Yet this believe often seems to be implied by proponents of data-driven decision making.</p>
<p>If we want the future to be better than the past, moral imagination is required, and that’s something only humans can provide. Data and models should be our tools, not our masters.</p>
<h5 id="Responsibility-and-accountability"><a href="#Responsibility-and-accountability" class="headerlink" title="Responsibility and accountability"></a>Responsibility and accountability</h5><p>If a human makes a mistake, they can be held accountable. Algorithms make mistakes too, but who is accountable if they go wrong?</p>
<p>A credit score summarizes “How did you behave in the past?” whereas predictive analytics usually work on the basis of “Who is similar to you, and how did people like you behave in the past?” Drawing parallels to others’ behaviour implies stereotyping people.</p>
<p>We will also need to figure out how to prevent data being used to harm people, and realize its positive potential instead, this power could be used to focus aid an support to help people who most need it.</p>
<h5 id="Feedback-loops"><a href="#Feedback-loops" class="headerlink" title="Feedback loops"></a>Feedback loops</h5><p>When services become good at predicting what content users want to se, they may end up showing people only opinions they already agree with, leading to echo chambers in which stereotypes, misinformation and polaristaion can breed.</p>
<p>Many consequences can be predicted by thinking about the entire system (not just the computerized parts), an approach known as <em>systems thinking</em>.</p>
<h4 id="Privacy-and-tracking"><a href="#Privacy-and-tracking" class="headerlink" title="Privacy and tracking"></a>Privacy and tracking</h4><p>When a system only stores data that a user has explicitly entered, because they want the system to store and process it in a certain way, the system is performing a service for the user: the user is the customer.</p>
<p>But when a user’s activity is tracked and logged as a side effect of other things they are doing, the relationship is less clear. The service no longer just does what the users tells it to do, but it takes on interests of its own, which may conflict with the user’s interest.</p>
<p>If the service is funded through advertising, the advertirsers are the actual customers, and the users’ interests take second place.</p>
<p>The user is given a free service and is coaxed into engaging with it as much as possible. The tracking of the user serves the needs of the advertirses who are funding the service. This is basically <em>surveillance</em>.</p>
<h5 id="Surveillance"><a href="#Surveillance" class="headerlink" title="Surveillance"></a>Surveillance</h5><p>As a thougt experiment, try replacing the word <em>data</em> with <em>surveillance</em>.</p>
<p>Even the most totalitarian and repressive regimes could only dream of putting a microphone in every room and forcing every person to constantly carry a device capable of tracking their location and movements. Yet we apparently voluntarily, even enthusiastically, throw ourselves into this world of total surveillance. The difference is just that the data is being collected by corporations rather than government agencies.</p>
<p>Perhaps you feel you have nothing to hide, you are totally in line with existing power structures, you are not a marginalized minority, and you needn’t fear persecution. Not everyone is so fortunate.</p>
<h5 id="Consent-and-freedom-of-choice"><a href="#Consent-and-freedom-of-choice" class="headerlink" title="Consent and freedom of choice"></a>Consent and freedom of choice</h5><p>Without understanding what happens to their data, users cannot give any meaningful consent. Often, data from one user also says things about other people who are not users of the service and who have not agreed to any terms.</p>
<p>For a user who does not consent to surveillance, the only real alternative is simply to not use the service. But this choice is not free either: if a service is so popular that it is “regarded by most people as essential for basic social participation”, then it is not reasonable to expect people to opt out of this service. Especially when a service has network effects, there is a social cost to people choosing <em>not</em> to use it.</p>
<p>Declining to use a service due to its tracking of users is only an option for the small number of people who are priviledged enough to have the time and knowledge to understand its privacy policy, and who can affort to potentially miss out on social participation or professional opportunities that may have arisen if they had participated in the service. For people in a less priviledged position, there is no meaningful freedom of choice: surveillance becomes inescapable.</p>
<h5 id="Privacy-and-use-of-data"><a href="#Privacy-and-use-of-data" class="headerlink" title="Privacy and use of data"></a>Privacy and use of data</h5><p>Having privacy does not mean keeping everything secret; it means having the freedom to choose which things to reveal to whom, what to make public, and what to keep secret.</p>
<p>Companies that acquire data essentially say “trust us to do the right thing with your data” which means that the right to decide what to reveal and what to keep secret is transferred from the individual to the company.</p>
<p>Even if the service promises not to sell the data to third parties, it usually grants itself unrestricted rights to process and analyse the data internally, often going much further than what is overtly visible to users.</p>
<h5 id="Data-as-assets-and-power"><a href="#Data-as-assets-and-power" class="headerlink" title="Data as assets and power"></a>Data as assets and power</h5><p>If targeted advertising is what pays for a service, then behavioral data about people is the service’s core asset.</p>
<p>When collecting data, we need to consider not just today’s political environment, but also future governments too. There is no guarantee that every government elected in the future will respect human rights and civil liberties, so “it is poor civic hygiene to install technologies that could someday facilitate a police state”.</p>
<p>To scrutinize others while avoiding scrutiny oneself is one of the most important forms of power.</p>
<h5 id="Remembering-the-Industrial-Revolution"><a href="#Remembering-the-Industrial-Revolution" class="headerlink" title="Remembering the Industrial Revolution"></a>Remembering the Industrial Revolution</h5><p>In the industrial revolution it took a long time before safeguards were established, such as environmental protection regulations, safety protocols for workplaces, outlawing child labor, and health inspections for food. Undoubtedly the cost of doing business increased when factories could no longer dump their waste into rivers, sell tainted foods, or exploit workers. But society as a whole benefited hugely, and few of us would want to return to a time before those regulations.</p>
<h5 id="Legislation-and-self-regulation"><a href="#Legislation-and-self-regulation" class="headerlink" title="Legislation  and self-regulation"></a>Legislation  and self-regulation</h5><p>We should stop regarding users as metrics to be optimized, and remember that they are humans who deserve respect, dignity, and agency. We should self-regulate our data collection and processing practices in order to establish and maintain the trust of the people who depend on our software. And we should take it upon ourselves to educate end users about how their data is used, rather than keeping them in the dark.</p>
<p>We should allow each individual to maintain their privacy, their control over their own data, and not steal that control from them through surveillance.</p>
<p>We should not retain data forever, but purge it as soon as it is no longer needed.</p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>DDIA</tag>
      </tags>
  </entry>
  <entry>
    <title>How to leetcode</title>
    <url>/2022/12/20/How-to-leetcode/</url>
    <content><![CDATA[<h3 id="The-motivation"><a href="#The-motivation" class="headerlink" title="The motivation"></a>The motivation</h3><p>A good software developer doesn’t necessarily need to be a good IOer, but in general a good IOer is more likely to be a good software developer. This logic makes coding more and more important in tech interview.</p>
<h3 id="The-daily-routine"><a href="#The-daily-routine" class="headerlink" title="The daily routine"></a>The daily routine</h3><p>Now I need to review first, review 3 days per day until I can catch the current date. Only do new exercise when I need to refresh the calendar of memoCard.</p>
<p>After that, do 2 days exercise per day. Until I can catch the current date.</p>
<p>After that, 2 new problems daily during workday(preferably in the morning). Then do the revision whenever possible.</p>
<h3 id="The-environment"><a href="#The-environment" class="headerlink" title="The environment"></a>The environment</h3><p>I am currently using leetcode website.</p>
<h3 id="How-to-leetcode"><a href="#How-to-leetcode" class="headerlink" title="How to leetcode"></a>How to leetcode</h3><p><a href="https://zhuanlan.zhihu.com/p/492026165">论如何 4 个月高效刷满 500 题并形成长期记忆</a></p>
<ol>
<li><p>始终保持匀速前进，既不松懈倦怠，亦不急于求成</p>
</li>
<li><p>定时归纳总结, 按类训练</p>
</li>
<li><p>深度理解人的记忆规律，高频率高效复习</p>
</li>
<li><p>拥抱孤独，过滤外界杂音，平稳心态</p>
</li>
</ol>
<h3 id="The-order-to-solve-problems"><a href="#The-order-to-solve-problems" class="headerlink" title="The order to solve problems"></a>The order to solve problems</h3><ol>
<li>Go through <a href="https://labuladong.github.io/algo/">LABULADONG 的算法网站</a> once first.</li>
<li><a href="https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md">灵神题单</a></li>
<li>The <a href="https://leetcode.com/explore/featured/">Explore</a> is a great place next. Finish all courses.</li>
<li>Use the daily problem and study plan tool</li>
</ol>
<h3 id="The-steps-to-tackle-one-problem"><a href="#The-steps-to-tackle-one-problem" class="headerlink" title="The steps to tackle one problem"></a>The steps to tackle one problem</h3><ul>
<li>If no idea at all, just check the hints. No need to wait for 5, 10 minutes</li>
</ul>
<h3 id="Advance"><a href="#Advance" class="headerlink" title="Advance"></a>Advance</h3><ul>
<li>Weekly contest, then codeforce</li>
<li>Watch this <a href="https://www.youtube.com/@BackToBackSWE/videos">video series</a> to learn how to speak the story</li>
</ul>
<h3 id="Current-leetcode-blog"><a href="#Current-leetcode-blog" class="headerlink" title="Current leetcode blog"></a>Current leetcode blog</h3><p><a href="https://labuladong.online/algo/dynamic-programming/egg-drop/">经典动态规划：高楼扔鸡蛋</a></p>
<h3 id="Last-problem-solved"><a href="#Last-problem-solved" class="headerlink" title="Last problem solved"></a>Last problem solved</h3><p>New page.</p>
<h3 id="The-problems-not-solved"><a href="#The-problems-not-solved" class="headerlink" title="The problems not solved"></a>The problems not solved</h3><p>1696 and 1425 in <a href="https://appktavsiei5995.pc.xiaoe-tech.com/p/t_pc/course_pc_detail/image_text/i_62a692efe4b01a48520b9b9b?product_id=p_627cd0eae4b0cedf38b0ef74&content_app_id=&type=8&parent_pro_id=p_62654124e4b09dda125f9a8d">【强化练习】单调队列的通用实现及经典习题</a></p>
<p>Biweekly Contest 130 t4: 3145 2900</p>
<p>Biweekly Contest 135 t4: 3225 3100</p>
<p>Weekly Contest 409 t4: 3245 3100 pre-requisite: BIT</p>
<h3 id="The-problems-pending-rewrite"><a href="#The-problems-pending-rewrite" class="headerlink" title="The problems pending rewrite"></a>The problems pending rewrite</h3><p>LC 3187<br>CF 1237D</p>
<h3 id="The-problems-not-recorded"><a href="#The-problems-not-recorded" class="headerlink" title="The problems not recorded"></a>The problems not recorded</h3><p>N&#x2F;A</p>
<h3 id="The-best-way-to-record-the-progression"><a href="#The-best-way-to-record-the-progression" class="headerlink" title="The best way to record the progression"></a>The best way to record the progression</h3><p>Screenshot the next day’s list</p>
<h3 id="The-problems-not-noted"><a href="#The-problems-not-noted" class="headerlink" title="The problems not noted"></a>The problems not noted</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find <span class="built_in">source</span>/_posts/ -name <span class="string">&quot;[0-9]*&quot;</span> |  xargs grep -L <span class="string">&quot;Hints&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="The-problems-not-tagged"><a href="#The-problems-not-tagged" class="headerlink" title="The problems not tagged"></a>The problems not tagged</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find <span class="built_in">source</span>/_posts/ -name <span class="string">&quot;[0-9]*&quot;</span> | xargs grep -A 1 <span class="string">&quot;tags&quot;</span> | grep -e <span class="string">&quot;---&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="C-template"><a href="#C-template" class="headerlink" title="C++ template"></a>C++ template</h3><p>For online GDB</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span> || n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        out &lt;&lt; m * n / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; (n - <span class="number">1</span>) / <span class="number">2</span> * m + m / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tc;</span><br><span class="line">    in &gt;&gt; tc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> size;</span><br><span class="line">        in &gt;&gt; size;</span><br><span class="line">        <span class="built_in">solve</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For local debugging:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//#define TEST</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> TEST</span></span><br><span class="line">string dir = <span class="string">&quot;./&quot;</span>;</span><br><span class="line">string inputFile = dir + <span class="string">&quot;input.txt&quot;</span>;</span><br><span class="line">string outputFile = dir + <span class="string">&quot;output.txt&quot;</span>;</span><br><span class="line">string expectFile = dir + <span class="string">&quot;expect.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(inputFile)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(outputFile)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">output</span><span class="params">(outputFile)</span></span>;</span><br><span class="line"><span class="function">ifstream <span class="title">expect</span><span class="params">(expectFile)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">istream &amp;in = cin;</span><br><span class="line">ostream &amp;out = cout;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">string emptyStr = <span class="string">&quot;nullptr&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prepare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Prepare</span>() &#123;</span><br><span class="line">        <span class="built_in">prepare</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> TEST</span></span><br><span class="line">        <span class="keyword">if</span> (!in.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;empty input file&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!expect.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;empty expect file&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Check</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">Check</span>() &#123;</span><br><span class="line">        <span class="comment">// compare</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> TEST</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; !output.<span class="built_in">eof</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (output.<span class="built_in">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            string l, r;</span><br><span class="line">            <span class="built_in">getline</span>(output, l);</span><br><span class="line">            <span class="built_in">getline</span>(expect, r);</span><br><span class="line">            <span class="keyword">while</span> (!l.<span class="built_in">empty</span>() &amp;&amp; l.<span class="built_in">back</span>() == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                l.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!r.<span class="built_in">empty</span>() &amp;&amp; r.<span class="built_in">back</span>() == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                r.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l.<span class="built_in">empty</span>() &amp;&amp; r.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l == emptyStr) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;case: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; pass&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l != r) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;case: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; wrong &quot;</span> &lt;&lt; <span class="string">&quot;output[&quot;</span> &lt;&lt; l &lt;&lt; <span class="string">&quot;], while expect[&quot;</span> &lt;&lt; r &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Prepare pre;</span><br><span class="line"><span class="type">static</span> Check check;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span> || n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        out &lt;&lt; m * n / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; (n - <span class="number">1</span>) / <span class="number">2</span> * m + m / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tc;</span><br><span class="line">    in &gt;&gt; tc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> size;</span><br><span class="line">        in &gt;&gt; size;</span><br><span class="line">        <span class="built_in">solve</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="To-compare-and-run-the-test"><a href="#To-compare-and-run-the-test" class="headerlink" title="To compare and run the test"></a>To compare and run the test</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> input.txt</span><br><span class="line"><span class="built_in">touch</span> expect.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ main.cpp -std=c++17 -DTEST</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Thoughts</category>
      </categories>
  </entry>
  <entry>
    <title>How to manage time</title>
    <url>/2022/12/23/How-to-manage-time/</url>
    <content><![CDATA[<h3 id="How-I-Have-Time-For-Everything"><a href="#How-I-Have-Time-For-Everything" class="headerlink" title="How I Have Time For Everything"></a>How I Have Time For Everything</h3><ol>
<li><p>Focus Completely For 2-4 Hours Every Day</p>
</li>
<li><p>Do One Thing At A Time</p>
</li>
<li><p>Permanently Declutter Your Schedule</p>
</li>
</ol>
<p><a href="https://www.youtube.com/watch?v=c3pzcV9yi24">LINK</a></p>
]]></content>
      <categories>
        <category>Excerpt</category>
      </categories>
      <tags>
        <tag>Career</tag>
      </tags>
  </entry>
  <entry>
    <title>How to overcome procrastination</title>
    <url>/2022/12/02/How-to-overcome-procrastination/</url>
    <content><![CDATA[<h3 id="What"><a href="#What" class="headerlink" title="What"></a>What</h3><p>Procrastination is when we avoid a task we said we would do, for no good reason, despite expecting our behavior to bring negative consequences.</p>
<h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h3><p>Many people procrastinate because they care too much.</p>
<p>Procrastinators often report a high fear of failure, putting things off because they’re afarid their work won’t live up to their high standards.</p>
<h3 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h3><p>Frequent procrastinators are likely to suffer from anxiety and depression, ongoing feelings of shame, higher stress levels and physical ailments associated with high stress.</p>
<h3 id="Personal-feeling"><a href="#Personal-feeling" class="headerlink" title="Personal feeling"></a>Personal feeling</h3><ol>
<li>I am just too afraid to start the work</li>
<li>I don’t do divide-and-conquer for he work</li>
<li>I should find the pattern for the thing, then next time I can do it quickly</li>
</ol>
<h3 id="How"><a href="#How" class="headerlink" title="How"></a>How</h3><p>To short-circuit this stress response, we need to address and reduce these negative emotions.</p>
<ol>
<li>breaking a task into smaller elements</li>
<li>journal about why it’s stressing you out</li>
<li>try removing nearby distractions that make it easy to impulsively procrastinate</li>
<li>forgiving yourself, and making a plan to do better next time</li>
</ol>
]]></content>
      <categories>
        <category>Thoughts</category>
      </categories>
  </entry>
  <entry>
    <title>How to read a paper</title>
    <url>/2024/09/19/How-to-read-a-paper/</url>
    <content><![CDATA[<h3 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h3><p>Many times I cannot finish reading a doc, or taking too long to read a doc. And by the end of the day I don’t understand the doc and I need to read it again. Find a solution to this problem.</p>
<h3 id="How-to-do-better-next-time"><a href="#How-to-do-better-next-time" class="headerlink" title="How to do better next time"></a>How to do better next time</h3><ol>
<li>Allocate enough time to finish the paper in one iteration</li>
<li>Create a doc to record<ol>
<li>The notes</li>
<li>The deep dive items for later</li>
</ol>
</li>
<li>Keep progressing, don’t get blocked<ol>
<li>Read the doc out and loud</li>
</ol>
</li>
</ol>
<h3 id="The-three-pass-approach"><a href="#The-three-pass-approach" class="headerlink" title="The three pass approach"></a>The three pass approach</h3><ol>
<li><p>The first pass gives you a general idea about the paper.</p>
<ul>
<li>The title, abstract and introduction</li>
<li>Section and sub-section headings</li>
<li>Conclusion</li>
</ul>
</li>
<li><p>The second pass lets you grasp the paper’s content, but not its details.</p>
<ul>
<li>You can ignore the details like proof in this pass</li>
<li>Pay special care at the figures, diagrams</li>
</ul>
</li>
<li><p>The third pass helps you understand the paper in depth.</p>
<ul>
<li>Try to understand the details</li>
</ul>
</li>
</ol>
<ul>
<li><a href="http://ccr.sigcomm.org/online/files/p83-keshavA.pdf">Three pass paper</a></li>
<li><a href="https://forums.fast.ai/t/how-to-read-research-papers-andrew-ng/66892">Andrew Ng’s idea</a></li>
</ul>
]]></content>
      <categories>
        <category>Thoughts</category>
      </categories>
  </entry>
  <entry>
    <title>How to setup personal VPN</title>
    <url>/2023/04/21/How-to-setup-personal-VPN/</url>
    <content><![CDATA[<p>Most ideas and actions are from this doc <a href="https://github.com/haoel/haoel.github.io">科学上网</a></p>
<h2 id="1-Domain"><a href="#1-Domain" class="headerlink" title="1. Domain"></a>1. Domain</h2><p>Since I am going to use gost server, it requires one domain. I purchased one domain at goDaddy.com, it costs $5 per year.</p>
<h2 id="2-VPC-related"><a href="#2-VPC-related" class="headerlink" title="2. VPC related"></a>2. VPC related</h2><p>I am using AWS LightSail, couple reasons:</p>
<ol>
<li>It’s cheap and first 3 months usage is free</li>
<li>It’s easy to setup, like DNS related stuff</li>
</ol>
<h3 id="2-1-Create-instance"><a href="#2-1-Create-instance" class="headerlink" title="2.1 Create instance"></a>2.1 Create instance</h3><p>I would very like to use one instance from HKG, but now LightSail is not available in HKG, so i launched one instance in NRT.</p>
<h3 id="2-2-Assign-static-IP-address"><a href="#2-2-Assign-static-IP-address" class="headerlink" title="2.2 Assign static IP address"></a>2.2 Assign static IP address</h3><p>Under the networking tab, create one static IP address and assign it to the instance. Also, enable 443 port from outside.</p>
<h3 id="2-3-Create-domain"><a href="#2-3-Create-domain" class="headerlink" title="2.3 Create domain"></a>2.3 Create domain</h3><p>Under the DNS tab, create a DNS. After creation, go to goDaddy control console and change the name server to use the name servers for this DNS.</p>
<h3 id="2-4-Gost-setup"><a href="#2-4-Gost-setup" class="headerlink" title="2.4 Gost setup"></a>2.4 Gost setup</h3><p>Login the instance. Git clone haoel’s repo, then run the install script under &#x2F;scripts folder.</p>
<h2 id="3-Client"><a href="#3-Client" class="headerlink" title="3. Client"></a>3. Client</h2><h3 id="3-1-Chrome"><a href="#3-1-Chrome" class="headerlink" title="3.1 Chrome"></a>3.1 Chrome</h3><p>I would recommend switchyOmega extension for Chrome, just fill in the host, the user and password then the work is done.</p>
<h3 id="3-2-Github"><a href="#3-2-Github" class="headerlink" title="3.2 Github"></a>3.2 Github</h3><p>To use proxy for other programs, we need to launch a gost client on the machine. It’s recommended to use docker.</p>
<ol>
<li>Install docker</li>
<li>Run docker for different services<ol>
<li><p>Shadowsocks</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 1984:1984 --name gost-ss --restart=always -d ginuerzh/gost -L=ss://aes-128-gcm:password@:1984 -F <span class="string">&#x27;https://user:password@host:443&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Socks5 for github</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 1080:1080 --name gost-socks --restart=always -d ginuerzh/gost -L=socks5://:1080 -F <span class="string">&#x27;https://user:password@host:443&#x27;</span></span><br></pre></td></tr></table></figure>

<p> Then change the ssh config file for github access</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    Hostname github.com</span><br><span class="line">    ProxyCommand nc -x localhost:1085 %h %p</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="3-3-IOS"><a href="#3-3-IOS" class="headerlink" title="3.3 IOS"></a>3.3 IOS</h3><p>Download Shadowrocket, and setup the proxy.</p>
]]></content>
      <tags>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>How to write a design doc/ORR</title>
    <url>/2022/12/02/How-to-write-a-design-doc-ORR/</url>
    <content><![CDATA[<h3 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h3><p>It can take 2~3 weeks for me to finish one design doc&#x2F;ORR. When there’s a need to write such a doc, I would postpone the work as late as possible. And when there’s no way to push it off, I wouldn’t start the work until the last evening + morning. Such behavior damages my mental health and also the doc quality.</p>
<h3 id="How-to-do-better-next-time"><a href="#How-to-do-better-next-time" class="headerlink" title="How to do better next time"></a>How to do better next time</h3><ul>
<li>Have some brain storming&#x2F;coding session with teammates early</li>
<li>Setup the key stakeholder review day, internal review day early, so i can schedule work backwards</li>
<li>Find some training from internal source, if there’s any, can use 1~2 days for this</li>
<li>Find some example, can use half day for this</li>
<li>Start to write, even just copying the example</li>
<li>Break the tasks into smaller pieces. Start to lay out the architecture, so i can fill in each section later</li>
<li>Setup a goal: what I must finish within today</li>
</ul>
]]></content>
      <categories>
        <category>Thoughts</category>
      </categories>
  </entry>
  <entry>
    <title>Learning from STJE failure</title>
    <url>/2023/04/21/Learning-from-STJE-failure/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="44ac31c326231c787d39257cc111686badaea6adf6a952f65ac01d226d4f0c2e">85fbf07caa70baa1ae613fbbfb8d9d937b53c3e801c535e726658d7bccc84a014e14ed5c6dbaf5a5f44cc85918254ec9f194a44b60d3705387e2f552a4bbbd34df96d182282490edd6c9875520f7517b332a4e1f06db8b8f901764752a14bfd5302702680baafadf7fc3d9df90a9c4b6ad19c2a79959de63aa32930830e7dba5703f86d00751e1d7e6991b4d7d209643eb0e2e6d337c0c9f7100a1857375793052d49205b372c8cc8f88029699f945f79527b93280f6ca0a3c0e80fbc89f19891fc7df40080081527ecbf395eedfedc37e56663443ed09178d5939eb4d9261ec591105663838bf7b4b9aae16accfecc393f60b614ecfefc90593410cfcdc2bef463600579a4907290d86ea0e09c7fb529e4ff4df077abde8fb8718641cd7c2180b65ff457ef23c70196297ca10b30abc4a7f881a9ae5ce6f693128c8f63836ed93dd71c8cc346ff7b4aa7d7fafce1a44b3cddc44b4b50efd0306261c6061e3e1bd558262166cbbc0e21238989f0df119aedc3c3c82c7abd7967766781d239ee82a0269b709bdadb2d3ac5e2e54fecdde954e2d42f8a584841b6dec1f68508b7568c14a283634375b7f6c3ec9aef17070c571e707a0904d56441c62a9d9b12e278a6d91c9d0b411a1377ad7f515a4c11f8c26c3c81c24ffcb441f1e1ff6fd75309f6f9aa5c912fee77849768aa77041fda43878989cee5a657db6fe8c1fc2394d1b310f2b65acfd5a7d656bbca9e0b59de1440d46d1c5ee7ab07aef8997b2bd8e1c49e757559331d11214f74bb9a1fb0eaebc82b13e6fd3af93cf2764a438c6669474ededd1220314a98ab0b33978d258926fc11a7343015ee271b18c861bd8539b8be010251137ab9944f34f0515553f5a2e38a2fe3cd9b2f55b06726990afb2b4df9d2b4470004341199564dbf70c1f7d8d395e47121a501913f5ed8685fcb4403ba0c2e5942e0992d5f4b27f082899af5cb5ef63c8dadbbcabd7ffd37b156e426f027673e9009d20819e9bd02932f3ef53185509f7f8f3d5b9681e514b764c6447bc382c51b9e7caa728668ba119d838e51776ab1ea8c0cdf81b61f75d47d25db4168fe6c257cf49a35bbf2aecb9df7cb07146ba6011715524c9fcf9e77eee098de7f1d726591052ca3636d1910392d3b2e02be9b2e08a5ffb075d4a36cb5ea93a7d5994eb2cfcaa56425612f593993a2243e36a64722b4107a0176fce59452f725b5caff31ff11dbc2b938c337f0b4b3b3525039706bcece60f66963edaa022bc166d5abd7299dda0ffe5659afb5c306b8c15c44b2f8828c8cc2897a8659935c6eced09622d6322637c901eeaa3c0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Career</tag>
        <tag>Personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 01 - 2023/07/25</title>
    <url>/2023/07/25/Learnship-01-2023-07-25/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Target-Interview"><a href="#Business-Language-Coaching-Target-Interview" class="headerlink" title="Business Language Coaching Target Interview"></a>Business Language Coaching Target Interview</h2><h3 id="What-is-Business-Language-Coaching"><a href="#What-is-Business-Language-Coaching" class="headerlink" title="What is Business Language Coaching?"></a>What is Business Language Coaching?</h3><p>Learnship’s Business Language Coaching is designed for business professionals and executives from around the globe who regularly conduct business with English speakers. It is delivered by experienced native-level language coaches and targets developing professional communicative competence across a range of business areas or situations directly related to your career goals.</p>
<p>Whether you need to prepare for an upcoming high-stakes presentation, or need to add range and nuance to your language and communication ability in industry or department-specific areas, Business Language Coaching can help you. The exact focus of your course can be discussed directly with your coach.</p>
<h3 id="What-learning-resources-does-Business-Language-Coaching-use"><a href="#What-learning-resources-does-Business-Language-Coaching-use" class="headerlink" title="What learning resources does Business Language Coaching use?"></a>What learning resources does Business Language Coaching use?</h3><p>Our standard comprehensive courses take advantage of the structure that CERF-linked course materials provide. By contrast, Business Language Coaching sessions apply a range of tailored learning resources to the language-learning experience. These include the following and more:</p>
<ul>
<li>Case studies</li>
<li>Your documents</li>
<li>Discussion frameworks</li>
<li>Newspaper articles</li>
</ul>
<h3 id="Where-can-language-coaching-help-you"><a href="#Where-can-language-coaching-help-you" class="headerlink" title="Where can language coaching help you?"></a>Where can language coaching help you?</h3><ul>
<li>To develop nuance in spoken business English</li>
<li>To strengthen the ability to build arguments at meetings</li>
<li>To improve active listening</li>
<li>To write effective business reports</li>
<li>To write strategically effective emails</li>
<li>To present multiple options to a senior group of business people</li>
<li>To explain opportunities and risks of a proposed action</li>
<li>To interrupt politely at meetings</li>
<li>To summarize effectively</li>
<li>To defend your interests firmly and politely</li>
<li>To refer to statistics and diagrams to support a point</li>
<li>To deal with sensitive interpersonal situations professionally and confidently</li>
<li>To compare and contrast alternative options</li>
<li>To write a project proposal</li>
<li>To negotiate terms and conditions</li>
<li>To lead virtual meetings</li>
<li>To facilitate  effective meetings</li>
<li>To pitch a concept as part of a sales presentation</li>
<li>To describe technical processes</li>
<li>To handle small talk situations calmly and positively</li>
</ul>
<h2 id="The-topics"><a href="#The-topics" class="headerlink" title="The topics"></a>The topics</h2><h3 id="Needs-for-the-course"><a href="#Needs-for-the-course" class="headerlink" title="Needs for the course"></a>Needs for the course</h3><ul>
<li>difficulty accessing vocabulary in meetings &lt;– use flashcards, spaced repetition</li>
<li>develop presentation skills(e.g. sprint review meeting, giving a demo of your work)<ul>
<li>cadence</li>
<li>can’t breath! not sure when to stop</li>
<li>pausing + intonation</li>
</ul>
</li>
<li>asking questions and communicating in a more native way<ul>
<li>the right wording</li>
<li>politeness</li>
<li>appropriateness(directness, softening language)<ul>
<li>def: using the right language for the situation</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="All-about-you"><a href="#All-about-you" class="headerlink" title="All about you"></a>All about you</h3><h4 id="My-name"><a href="#My-name" class="headerlink" title="My name:"></a>My name:</h4><p>My name is Yitao Zhou.</p>
<h4 id="My-nationality"><a href="#My-nationality" class="headerlink" title="My nationality:"></a>My nationality:</h4><p>I was born and raised in China.</p>
<h4 id="My-current-location"><a href="#My-current-location" class="headerlink" title="My current location:"></a>My current location:</h4><p>I am currently living at Boston, MA, U.S.</p>
<h4 id="My-experience"><a href="#My-experience" class="headerlink" title="My experience:"></a>My experience:</h4><p>I was previously a student majored in Computer Science. After I got my undergraduate degree in China, I came to the U.S. to pursue my master’s degree. After the graduation, I worked for Amazon and live in Boston. I am a Mandarin native speaker, I have been learning English for several years.</p>
<h4 id="My-hobbies"><a href="#My-hobbies" class="headerlink" title="My hobbies:"></a>My hobbies:</h4><p>I enjoy taking a short walk with my wife everyday. Also, we would watch 2~3 episodes each day, mostly detective stories(like True Detective, The Killing etc). During the weekend, we would take one day to do a small trip to nearby cities. The other day we just cook and rest at home. I am trying to develop a habit of reading recently.</p>
<h4 id="Language-use"><a href="#Language-use" class="headerlink" title="Language use:"></a>Language use:</h4><p>Now I am a software development engineer working for Amazon Web Service, more specifically, the EFS organization.</p>
<h2 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h2><ul>
<li>We are used to watching…&#x2F;we typically watch…</li>
<li>breathe</li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 02 - 2023/08/01</title>
    <url>/2023/08/01/Learnship-02-2023-08-01/</url>
    <content><![CDATA[<h2 id="Small-talk-notes"><a href="#Small-talk-notes" class="headerlink" title="Small talk notes"></a>Small talk notes</h2><p>Only after all these steps <strong>are we</strong> convinced.<br>Only with these metrics <strong>can you</strong> measure.</p>
<h2 id="Business-Language-Coaching-Session-2-Your-Presentation"><a href="#Business-Language-Coaching-Session-2-Your-Presentation" class="headerlink" title="Business Language Coaching - Session 2 - Your Presentation"></a>Business Language Coaching - Session 2 - Your Presentation</h2><ul>
<li>Listen to and workshop your presentation</li>
<li>Explore how pausing can help you communicate more successfully</li>
</ul>
<h3 id="Starting-point"><a href="#Starting-point" class="headerlink" title="Starting point"></a>Starting point</h3><p>Set the scene for your presentation. Tell me about:</p>
<h4 id="The-context-topic"><a href="#The-context-topic" class="headerlink" title="The context &amp; topic"></a>The context &amp; topic</h4><ul>
<li>Sprint review</li>
<li>Showcase progression on specific work</li>
</ul>
<h4 id="The-audience-and-Your-aims"><a href="#The-audience-and-Your-aims" class="headerlink" title="The audience and Your aims"></a>The audience and Your aims</h4><ul>
<li>Give general information in a non-technical way</li>
</ul>
<h4 id="Concerns"><a href="#Concerns" class="headerlink" title="Concerns"></a>Concerns</h4><ul>
<li>Did I give enough background information? Did I make it clear enough?</li>
<li>Did I give the full story?</li>
</ul>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><h4 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h4><ul>
<li>signposting phrases</li>
<li>rhetorical questions: “So maybe you would ask…?”</li>
<li>grammatically flawless</li>
<li>pronunciation good</li>
</ul>
<h4 id="To-improve"><a href="#To-improve" class="headerlink" title="To improve"></a>To improve</h4><ul>
<li>pausing</li>
<li>pronunciation &amp; intonation</li>
<li>keywords: cost reduction, extent, AZ, delegate &amp; destination, benefit</li>
<li>explaining terminology</li>
<li>repeating key words</li>
<li>use analogies or examples</li>
</ul>
<h3 id="Voice-Power-Pausing"><a href="#Voice-Power-Pausing" class="headerlink" title="Voice Power: Pausing"></a>Voice Power: Pausing</h3><h4 id="Quotes"><a href="#Quotes" class="headerlink" title="Quotes"></a>Quotes</h4><blockquote>
<p>Without good delivery, the best speaker cannot be of any account at all. - Cicero, Roman orator</p>
</blockquote>
<blockquote>
<p>No word was ever as effective as a rightly timed pause. - Mark Twain, American author</p>
</blockquote>
<blockquote>
<p>I learned that the spaces between words were as important as the words themselves. Gerry Spence, undefeated lawyer</p>
</blockquote>
<h3 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h3><ul>
<li><p>Only after these steps we are convinced; Only with these metrics you can measure</p>
</li>
<li><p>it’s worse</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 03 - 2023/08/10</title>
    <url>/2023/08/10/Learnship-03-2023-08-10/</url>
    <content><![CDATA[<h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p>Read and learn the grammar notes about <em>Inversion</em>.</p>
<h3 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h3><p>The most common uses of inversion word order are in questions and short answers.</p>
<ol>
<li><p>In inversion word order, the auxiliary comes before the subject.</p>
<p> <em>Have you</em> got any paperclips? ~ No. ~ Neither <em>have I</em>.</p>
</li>
<li><p><em>Do</em> &#x2F; <em>does</em> is used as an auxiliary with simple-tense verbs.</p>
<p> <em>Does Chris</em> like the new receptionist?</p>
</li>
<li><p>Ordinary verbs <em>be</em> and <em>have</em> and modal auxiliaries do not require do.</p>
<p> <em>Was I</em> the best candidate?<br> <em>Can you</em> help me?</p>
</li>
</ol>
<p>As well as in questions, inversion is used in a variety of structures, often rather formally.</p>
<h3 id="Negative-expressions"><a href="#Negative-expressions" class="headerlink" title="Negative expressions"></a>Negative expressions</h3><ol>
<li><p>Inversion is used after the negative words <em>neither</em> and <em>nor</em>, and after phrases with <em>not</em> and <em>no</em>.</p>
<p> <em>In no way do I</em> accept their conclusions. <em>Neither do I</em> think the report should be circulated.</p>
</li>
<li><p>We also use inversion after adverbs such as <em>seldom</em>, <em>rarely</em>, <em>scarcely</em>, <em>hardly(ever)</em>, <em>little</em> that restrict the meaning &#x2F; reference of the verb that follows.</p>
<p> <em>Rarely have I</em> been to such a well-organized product launch.<br> <em>Little did we</em> know that she had accepted a position with our rivals.</p>
</li>
</ol>
<h3 id="Only"><a href="#Only" class="headerlink" title="Only"></a>Only</h3><ul>
<li><p>When <em>only</em> is used with time expressions or prepositional phrases, the verb that follows is inverted.</p>
<p>  Only before 30 September <em>can you</em> hand in a non-calculated tax return.<br>  Only by traveling overland <em>can you</em> really appreciate a country.</p>
</li>
</ul>
<h3 id="Participles"><a href="#Participles" class="headerlink" title="Participles"></a>Participles</h3><ul>
<li><p>When participles are moved to the front position, inversion takes place in formal English.</p>
<p>  Waiting for us in his office <em>was my boss</em>.</p>
</li>
</ul>
<h3 id="Conditions"><a href="#Conditions" class="headerlink" title="Conditions"></a>Conditions</h3><ul>
<li><p>Instead of saying <em>if I has</em>, <em>if she was</em>, etc., we can use inversion.</p>
</li>
<li><p>Note that <em>was</em> becomes <em>were</em>.</p>
<p>  <em>Had the minister</em> announced the tax increases more openly, he would have faced a storm of criticism.<br>  <em>Had I</em> been told about the dress code, I wouldn’t have felt such a fool.<br>  <em>Were she</em> to be fired, she’d probably sue.</p>
</li>
<li><p>We can use the inverted structure <em>should</em> + subject as another way of expressing condition.</p>
<p>  <em>Should we</em> require further information, we will contact you again.(&#x3D; if we require…)</p>
</li>
<li><p>These forms are especially common with passive structure.</p>
</li>
</ul>
<h2 id="The-Exercise"><a href="#The-Exercise" class="headerlink" title="The Exercise"></a>The Exercise</h2><h3 id="Rewrite-the-sentences-so-that-the-meaning-is-the-same-using-an-inversion-and-the-words-or-phrases-in-brackets"><a href="#Rewrite-the-sentences-so-that-the-meaning-is-the-same-using-an-inversion-and-the-words-or-phrases-in-brackets" class="headerlink" title="Rewrite the sentences so that the meaning is the same, using an inversion and the words or phrases in brackets"></a>Rewrite the sentences so that the meaning is the same, using an inversion and the words or phrases in brackets</h3><ol>
<li><p>Eric didn’t get your email. And he didn’t get your voicemail message either. (neither)</p>
<p> Eric didn’t get your email, and neither did he get your voicemail message.</p>
</li>
<li><p>I don’t know how often she’s away from her desk. And I don’t care, really. (nor)</p>
<p> I don’t know how often she’s away from her desk. Nor do I care, really.</p>
</li>
<li><p>It’s not often that so many strong applicants have applied for a post with us. (seldom)</p>
<p> Seldom have so many strong applicants <del>apply</del> applied for a post with us.</p>
</li>
<li><p>Visitors must never go beyond reception without a pass. (under no circumstances)</p>
<p> Under no circumstances <del>can</del> should visitors go beyond reception without a pass.</p>
</li>
<li><p>It’s the first time that I’ve seen such a wonderful production. (never)</p>
<p> Never had I seen such a wonderful production.|Never have I seen such a wonderful production.</p>
</li>
<li><p>I won’t be satisfied until we’re the market leader. (not until)</p>
<p> Not until we’re the market leader will I be satisfied.</p>
</li>
<li><p>They offer a very generous pension scheme. And they also offer flexitime. (not only)</p>
<p> Not only do they offer a very generous pension scheme, they also offer flexitime.</p>
</li>
<li><p>We’ve never failed to live up to our core values of decency, innovation, and trust. (at no time)</p>
<p> At no time have we failed to live up to our core values of decency, innovation, and trust.</p>
</li>
</ol>
<h3 id="Rewrite-sentences-1-5-from-this-value-statement-Use-the-words-and-phrases-and-an-inversion-See-the-example"><a href="#Rewrite-sentences-1-5-from-this-value-statement-Use-the-words-and-phrases-and-an-inversion-See-the-example" class="headerlink" title="Rewrite sentences 1-5 from this value statement. Use the words and phrases and an inversion. See the example."></a>Rewrite sentences 1-5 from this value statement. Use the words and phrases and an inversion. See the example.</h3><p><strong>Example:</strong></p>
<blockquote>
<p>1 At PAFO Organics, not only are we committed to providing the best-tasting produce, we’re also inspired to source the most ethical food available.</p>
</blockquote>
<p>  only by, rarely, <del>not only</del>, nor, under no circumstances</p>
<p><sup>1</sup>At PAFO Organics we are committed to providing the best-tasting produce and we’re also inspired to source the most ethical food available. <sup>2</sup>We won’t accept food that hasn’t been created with sustainability of resources in mind, under any circumstances. <sup>3</sup>And we won’t allow our food to travel thousands of miles unnecessarily. We’re passionate about sourcing the finest-tasting ingredients on offer. <sup>4</sup>We can only do this by testing our produce regularly. <sup>5</sup>But we don’t often have to change suppliers; most of the small farmers who provide our vegetables are skilled agriculturists — many of them have won regional and national awards.</p>
<blockquote>
<p>2 Under no circumstances will we accept food that hasn’t been created with sustainability of resources in mind.</p>
</blockquote>
<blockquote>
<p>3 Nor will we allow our food to travel thousands of miles unnecessarily.</p>
</blockquote>
<blockquote>
<p>4 Only by testing our produce regularly can we do this.</p>
</blockquote>
<blockquote>
<p>5 <del>Rarely have we had to change suppliers.</del> But rarely do we have to change suppliers.</p>
</blockquote>
<h3 id="Type-the-correct-answers-to-complete-the-sentences"><a href="#Type-the-correct-answers-to-complete-the-sentences" class="headerlink" title="Type the correct answers to complete the sentences."></a>Type the correct answers to complete the sentences.</h3><ol>
<li><p>Were you to take the job. you would have to move to Oxford.</p>
</li>
<li><p>Under no circumstances are you allowed to use the Internet.</p>
</li>
<li><p>Not only have we increased sales, we’ve also reduced waste.</p>
</li>
<li><p>Had we known about the pollution issues, we wouldn’t have done it.</p>
</li>
<li><p>At no time will we produce unethical products.</p>
</li>
</ol>
<h3 id="Click-on-the-mistake-in-each-sentence-then-correct-it"><a href="#Click-on-the-mistake-in-each-sentence-then-correct-it" class="headerlink" title="Click on the mistake in each sentence, then correct it"></a>Click on the mistake in each sentence, then correct it</h3><p>There are several issues that need dealing with. Not only have we been unable to meet our orders this month,<br>but we’ve also had difficulties with our suppliers. Had we been given more notice about the supplier situation,<br>we could have coped. But at no time did they contact us to tell us about the problems.<br>As for the shortfall in orders, part of the problem is the supply, but under no circumstances should we have allowed<br>this to happen. Were these problems to occur again, we’d be putting our business at serious risk.</p>
<h3 id="Complete-this-text-with-these-words-and-phrases"><a href="#Complete-this-text-with-these-words-and-phrases" class="headerlink" title="Complete this text with these words and phrases"></a>Complete this text with these words and phrases</h3><p>Have you ever arrived at work thinking something was wrong? It recently happened to me. On Saturday morning, when I arrived at the City Concert Hall, there were a lot of musicians waiting outside. No sooner had I opened the front door than the musicians started to come in and complain. Not only were they unhappy that their next concert had been cancelled, but they were also very angry that they hadn’t been paid for weeks. I tried to explain that I only looked after the Concert Hall and I had nothing to do with money or music. They said that a lot of tickets had been sold, but they had no idea where the money had gone. Nor did I, I kept telling them. Not until two days later did we all find out that the concert organizer had run off with all the money.</p>
<h3 id="Complete-this-text-by-adding-one-of-these-expressions-in-each-space"><a href="#Complete-this-text-by-adding-one-of-these-expressions-in-each-space" class="headerlink" title="Complete this text by adding one of these expressions in each space."></a>Complete this text by adding one of these expressions in each space.</h3><p>Only occasionally did she find herself reading someone else’s newspaper, over their shoulder, as she sat in the station waiting room. Mostly she was just not very interested, nor was she willing to risk getting caught. Why is it so embarrassing to get caught doing that, she wondered to herself. It isn’t against the law or anything. But facing her today was something that really caught her attention. One of our greatest fears in modern life, the headline said, was having to speak in public. The article offered ways to develop your confidence. Seldom had she ever had to speak to an audience, but it was her turn to give a ten minute presentation in her Spanish class that afternoon. Not only would she have to speak to an audience, she would have to do it in a foreign language. She felt the room getting hotter as she leaned forward to get a closer look. Suddenly blocking her view was part of a large black beard and the big nose of the newspaper’s owner. ‘Oops. Oh, here comes my train,’ she said quickly, as she stood up and stumbled towards the door. Public speaking isn’t scary, she thought to herself, it is public reading that makes me really nervous.</p>
<h3 id="Listen-to-an-extract-from-a-conference-call-Write-the-one-question-and-the-one-statement-from-the-dialogue-that-are-expressed-in-the-inversion-form-Listen-again-to-check-your-answers"><a href="#Listen-to-an-extract-from-a-conference-call-Write-the-one-question-and-the-one-statement-from-the-dialogue-that-are-expressed-in-the-inversion-form-Listen-again-to-check-your-answers" class="headerlink" title="Listen to an extract from a conference call. Write the one question and the one statement from the dialogue that are expressed in the inversion form. Listen again to check your answers."></a>Listen to an extract from a conference call. Write the one question and the one statement from the dialogue that are expressed in the inversion form. Listen again to check your answers.</h3><audio controls>
  <source src="/audio/session3_1.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<p>Question:</p>
<p>Are we all agreed?</p>
<p>Statement:</p>
<p>Had I been given more notice on these other jobs, this wouldn’t have happened.</p>
<h2 id="Business-Language-Coaching-Session-3-Voice-Power"><a href="#Business-Language-Coaching-Session-3-Voice-Power" class="headerlink" title="Business Language Coaching - Session 3 - Voice Power"></a>Business Language Coaching - Session 3 - Voice Power</h2><ul>
<li>Listen to and workshop your presentation</li>
<li>Explore how pausing can help you communicate more successfully</li>
</ul>
<p>[TODO] need to find my presentation notes</p>
<h3 id="Starting-Point"><a href="#Starting-Point" class="headerlink" title="Starting Point"></a>Starting Point</h3><ul>
<li><p>What were your key takeaways from last week’s session where we workshopped your presentation?</p>
</li>
<li><p>How have you got on with the homework assignment?</p>
</li>
</ul>
<h3 id="Voice-Power-Pausing"><a href="#Voice-Power-Pausing" class="headerlink" title="Voice Power: Pausing"></a>Voice Power: Pausing</h3><p><strong>Work with a partner. Listen to part of a presentation about public speaking. One of you should mark the pauses on the script below like this |. The other should underline the stressed words and phrases.</strong></p>
<audio controls>
  <source src="/audio/session3_2.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<p>You *<strong>know</strong>, | there are a lot of <strong>myths</strong> about speaking in public. | Myth number <strong>one</strong> | is that what you actually <strong>say</strong> | is only <strong>seven</strong> percent of the message. | <strong>Thirty-eight</strong> percent is how you <strong>sound</strong> | and <strong>fifty-five</strong> percent is how you <strong>look</strong>. | But think about it. | I mean, | if that was <strong>true</strong>, | you could go to a talk in <strong>Swahili</strong> | and still understand <strong>ninety-three</strong> percent! | Myth number <strong>two</strong> is that public speaking is most people’s <strong>greatest</strong> fear | - just above <strong>death</strong>. | The comedian Jerry Seinfeld has a great <strong>joke</strong> about that. | He <strong>says</strong>, | “Come <strong>on</strong>, | if it <strong>really</strong> was their greatest fear, | at a <strong>funeral</strong> | the person giving the <strong>eulogy</strong> | would rather be in the <strong>box</strong>!”</p>
<h3 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h3><ul>
<li><p>in Britain</p>
</li>
<li><p>at no time &#x3D; never</p>
</li>
<li><p>If these problems occurred again… &#x3D; Were these problems to occur again</p>
</li>
<li><p>avoid dropping ‘s’:<br>  conceptS, serverS</p>
</li>
<li><p>it is decreased by* two-thirds</p>
</li>
<li><p>Swahili<br>  an African language</p>
</li>
<li><p>an eulogy<br>  speech given at a funeral</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 04 - 2023/08/17</title>
    <url>/2023/08/17/Learnship-04-2023-08-17/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-4-Voice-Power-2"><a href="#Business-Language-Coaching-Session-4-Voice-Power-2" class="headerlink" title="Business Language Coaching - Session 4 - Voice Power(2)"></a>Business Language Coaching - Session 4 - Voice Power(2)</h2><ul>
<li>review your homework assignments</li>
<li>explore how pausing can help you communicate moe successfully</li>
</ul>
<h3 id="Voice-Power-Word-Stress"><a href="#Voice-Power-Word-Stress" class="headerlink" title="Voice Power: Word Stress"></a>Voice Power: Word Stress</h3><p><strong>Look back at the excerpt from last week, in particular at the highlighted words. What do you think are the effects and benefits of adding emphasis or stress to certain words in a sentence?</strong></p>
<audio controls>
  <source src="/audio/session3_2.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<p>You *<strong>know</strong>, | there are a lot of <strong>myths</strong> about speaking in public. | Myth number <strong>one</strong> | is that what you actually <strong>say</strong> | is only <strong>seven</strong> percent of the message. | <strong>Thirty-eight</strong> percent is how you <strong>sound</strong> | and <strong>fifty-five</strong> percent is how you <strong>look</strong>. | But think about it. | I mean, | if that was <strong>true</strong>, | you could go to a talk in <strong>Swahili</strong> | and still understand <strong>ninety-three</strong> percent! | Myth number <strong>two</strong> is that public speaking is most people’s <strong>greatest</strong> fear | - just above <strong>death</strong>. | The comedian Jerry Seinfeld has a great <strong>joke</strong> about that. | He <strong>says</strong>, | “Come <strong>on</strong>, | if it <strong>really</strong> was their greatest fear, | at a <strong>funeral</strong> | the person giving the <strong>eulogy</strong> | would rather be in the <strong>box</strong>!”</p>
<p>The benefits:</p>
<ul>
<li>people would pay attention</li>
<li>easier to recall and recollect</li>
<li>be more convincing</li>
<li>expressing feeling&#x2F;emotions</li>
</ul>
<h3 id="Voice-Power-Word-Stress-1"><a href="#Voice-Power-Word-Stress-1" class="headerlink" title="Voice Power - Word Stress"></a>Voice Power - Word Stress</h3><p>**In English, word stress is an important part of how we communicate, and changing what we stress can radically change what we mean. In each extract below underline the main stress in the two sentences.</p>
<audio controls>
  <source src="/audio/session4_1.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<p>a We haven’t seen a <strong>massive</strong> improvement yet. But it’s a <strong>good</strong> start.</p>
<p>b We <strong>haven’t</strong> seen a massive improvement <strong>yet</strong>. But my guess is we soon <strong>will</strong>.</p>
<hr>
<p>c The <strong>market</strong> may be declining. But fortunately our <strong>market share</strong> isn’t.</p>
<p>d The market may be <strong>declining</strong>. Or this could just be a <strong>temporary blip</strong>.</p>
<hr>
<p>e We do pretty well in the <strong>States</strong>. But we don’t do so well in <strong>Europe</strong>.</p>
<p>f We do <strong>pretty well</strong> in the States. But not <strong>as well as</strong> we could be doing.</p>
<hr>
<p>g Turnover is <strong>up</strong> on Q3. But profits are <strong>down</strong>.</p>
<p>h Turnover is up on <strong>Q3</strong>. But that was a particularly <strong>bad</strong> quarter.</p>
<hr>
<p>i It’s <strong>hard</strong> to gain a foothold in India. But not <strong>impossible</strong>.</p>
<p>j It’s hard to gain a foothold <strong>in India</strong>. But harder <strong>still</strong> to gain one in <strong>China</strong>.</p>
<hr>
<p>k There are <strong>a couple of</strong> points I’d like to make. And <strong>both</strong> concern cash flow.</p>
<p>l There are a couple of points <strong>I’d like</strong> to make. And <strong>then</strong> I’ll hand you over to Jan.</p>
<p><strong>Work in opposing teams. You are going to re-enact two dramatic presentations from the classic business movie Other People’s Money.</strong></p>
<p>The scene:</p>
<blockquote>
<p>Andrew Jorgenson is the patriarchal chairman of New England Wire and Cable. Once highly successful, his company has not kept up with new technology and both revenues and share price are down. Lawrence Garfield, known to his enemies as ‘Larry the Liquidator’, a corporate financier and one of the major stockholders, is trying to persuade the other stockholders at the annual general meeting to vote him in as the new chairman, so he can carry out his plan to sell off the company’s considerable assets before its share price falls any further. Of course, this will mean the closure of the firm and the loss of thousands of jobs.</p>
</blockquote>
<p><strong>Work together annotating this famous movie scene using the points below. Then rehearse and read it aloud.</strong></p>
<p>TODO: listen to the audio and mark</p>
<p>I want to <strong>share</strong> with you some of my thoughts <strong>concerning</strong> the vote that you’re going to make in the company that <strong>you</strong> own. This proud <strong>company</strong>, which has survived the <strong>death</strong> of its founder, numerous <strong>recessions</strong>, one major <strong>depression</strong>, and two world <strong>wars</strong>, is in <strong>imminent</strong> danger of self-destructing - on <strong>this</strong> day, in the town of its birth. There is the <strong>instrument</strong> of our destruction. I want <strong>you</strong> to look at <strong>him</strong> in all of his glory, Larry the Liquidator, the <strong>entrepreneur</strong> of post-industrial America, playing <strong>God</strong> with other people’s money. This man leaves <strong>nothing</strong>. He creates <strong>nothing</strong>, he builds <strong>nothing</strong>, he runs <strong>nothing</strong>.</p>
<audio controls>
  <source src="/audio/session4_2.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<h3 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h3><ul>
<li>several months back</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 05 - 2023/09/05</title>
    <url>/2023/09/05/Learnship-05-2023-09-05/</url>
    <content><![CDATA[<h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p>These are the main condition forms.</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Situation</th>
<th>Result</th>
</tr>
</thead>
<tbody><tr>
<td>zero</td>
<td>if + present</td>
<td>present</td>
</tr>
<tr>
<td></td>
<td>if you hand in work late,</td>
<td>you make a bad impression</td>
</tr>
<tr>
<td>first</td>
<td>if + present</td>
<td>will + infinitive</td>
</tr>
<tr>
<td></td>
<td>if we lose the contract,</td>
<td>we’ll be in trouble</td>
</tr>
<tr>
<td>second</td>
<td>if + past tense</td>
<td>would + infinitive</td>
</tr>
<tr>
<td></td>
<td>if we lost the contract,</td>
<td>my job would be on the line.</td>
</tr>
<tr>
<td>third</td>
<td>if + past perfect</td>
<td>would have + infinitive</td>
</tr>
<tr>
<td></td>
<td>if we’d got the contract</td>
<td>we would have made a lot of money</td>
</tr>
</tbody></table>
<h3 id="Zero-conditionals"><a href="#Zero-conditionals" class="headerlink" title="Zero conditionals"></a>Zero conditionals</h3><ol>
<li><p>Use zero conditionals when the relationship between the situation and result is always true or always the same; there is no element of chance or doubt.</p>
<p> If we <em>hit</em> our targets, we <em>get</em> a bonus.</p>
</li>
<li><p>We can also use two past tenses, to talk about something that always used to be true.</p>
<p> We <em>got</em> time off in lieu if we <em>worked</em> weekends.</p>
</li>
<li><p>Informally, we can use this structure where a first conditional would be more appropriate in a formal situation.</p>
<p> If we <em>lose</em> the contract, <em>we’re</em> in trouble.</p>
</li>
</ol>
<h3 id="First-conditional"><a href="#First-conditional" class="headerlink" title="First conditional"></a>First conditional</h3><ol>
<li><p>Use the first conditional when a situation is very likely to have the result given.</p>
<p> If you <em>arrive</em> late, <em>you’ll miss</em> the first part of the meeting. ;</p>
</li>
<li><p>The present continuous and present perfect are possible in the if-clause.</p>
<p> If <em>Jenny’s working</em> on this project, she’ll learn a lot of useful stuff.<br> If <em>Amit’s broken</em> his leg, you’ll have to give the presentation.</p>
</li>
<li><p>Other modal expressions such as <em>can</em>, <em>may</em>, <em>be going to</em> are possible in the result clause.</p>
<p> If we don’t gain market share, we <em>may</em> be in a sticky situation.<br> <em>I’m going to</em> change distributors if Kikibo don’t get their act together.</p>
</li>
</ol>
<h3 id="Second-conditional"><a href="#Second-conditional" class="headerlink" title="Second conditional"></a>Second conditional</h3><ol>
<li><p>Use the second conditional when a situation is hypothetical or imagined.</p>
<p> If taxes <em>rose</em>, we <em>would consider</em> relocating.</p>
</li>
<li><p>The second conditional is also useful to make suggestions, offers, warnings, etc. more distant and polite.</p>
<p> If you arrived at meetings on time, <em>we’d</em> get much more done.</p>
</li>
<li><p>Might and could are also possible in the result clause.</p>
<p> We <em>could</em> save hundreds of hours if we adopted the new system.</p>
</li>
</ol>
<h3 id="Mixed-conditionals"><a href="#Mixed-conditionals" class="headerlink" title="Mixed conditionals"></a>Mixed conditionals</h3><ol>
<li><p>It is possible to use the <em>if-clause</em> of a second conditional (<em>if</em> + past simple) with the result clause of a third conditional (<em>would</em> + perfect infinitive). This is an example of a mixed conditional.</p>
<blockquote>
<p>If you <em>cared</em> more about your work, you <em>would have been promoted</em> years ago.</p>
</blockquote>
<p> Note that here we are talking about a general hypothetical situation, with an imagined past result.</p>
</li>
<li><p>More often we use the <em>if-clause</em> of a third conditional (<em>if</em> + past perfect) with the result clause of a second conditional (<em>would</em> + present &#x2F; continuous infinitive).</p>
<blockquote>
<p>If I <em>had got</em> the job, I <em>would earn</em> €100,000 by now. (would + present infinitive)</p>
</blockquote>
<blockquote>
<p>If I <em>had got</em> the job, I <em>would be commuting</em> for four hours a day. (would + continuous infinitive)</p>
</blockquote>
</li>
</ol>
<p>Note that here we are imagining something that didn’t happen in the past, with a present result.</p>
<h3 id="Passives"><a href="#Passives" class="headerlink" title="Passives"></a>Passives</h3><ul>
<li><p>Passive forms are possible in all types of conditional sentence, in either clause.</p>
<blockquote>
<p>If the contract <em>is lost</em>, we’ll be in trouble.</p>
</blockquote>
<blockquote>
<p>If we adopted the new system, hundreds of hours <em>could be saved</em>.</p>
</blockquote>
</li>
</ul>
<h3 id="Other-words-instead-of-if"><a href="#Other-words-instead-of-if" class="headerlink" title="Other words instead of if"></a>Other words instead of <em>if</em></h3><ol>
<li><p>In many conditional sentences, when can replace <em>if</em>. This makes a situation sound more likely. The same is true of every time.</p>
<blockquote>
<p><em>When</em> we hit our targets, we get a bonus.</p>
</blockquote>
<blockquote>
<p><em>Every time</em> we hit our targets, we get a bonus.</p>
</blockquote>
</li>
<li><p>In zero, first, and second conditionals, we can use unless to mean ‘except if’ or ‘if not’.</p>
<blockquote>
<p><em>Unless</em> we keep our contract with Zimiercz, we’ll be without a Polish partner company.</p>
</blockquote>
</li>
<li><p>Participles such as <em>providing</em>, <em>provided</em>, <em>assuming</em>, and <em>supposing</em>, and phrases such as <em>on the condition that</em> and <em>as long as</em>, can also replace <em>if</em>.</p>
<blockquote>
<p><em>Providing</em> the building goes well, our new offices will be ready in May 2012.</p>
</blockquote>
<blockquote>
<p><em>As long</em> as the pound stays strong, our projections will be realistic.</p>
</blockquote>
</li>
</ol>
<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><h3 id="Match-1-10-to-a-j"><a href="#Match-1-10-to-a-j" class="headerlink" title="Match 1-10 to a-j"></a>Match 1-10 to a-j</h3><ol>
<li><p>If we appear to have green credentials, ethically-minded customers are more likely to buy our products.</p>
</li>
<li><p>If I remember to copy you in on the email, you should have got it some time yesterday.</p>
</li>
<li><p>If we raise dividends, we keep shareholders happy.</p>
</li>
<li><p>We’ll be able to minimize damage, providing you stick to the measures I’ve put in place.</p>
</li>
<li><p>In their culture, if you’re introduced to someone, you shake hands with them.</p>
</li>
<li><p>We may lose market share, if Kirput and Sinderzy merge.</p>
</li>
<li><p>If everyone turned off their computer at night, we would save the equivalent of two directors’ salaries.</p>
</li>
<li><p>If we don’t start providing incentives, no one will want to move to the new offices.</p>
</li>
<li><p>If I had take the job at Kurwenal, I would never have met my wife.</p>
</li>
<li><p>If he’s been at work all night, his concentration probably won’t be 100%.</p>
</li>
</ol>
<h3 id="Correct-these-sentences-using-the-clues-in-brackets"><a href="#Correct-these-sentences-using-the-clues-in-brackets" class="headerlink" title="Correct these sentences using the clues in brackets"></a>Correct these sentences using the clues in brackets</h3><ol>
<li><p>If I know Chris’s email address, I’d give it to you. (I don’t know it.)</p>
<p> If I knew Chris’ email address, I’d give it to you.</p>
</li>
<li><p>If we disagreed, we say so. (This is how it worked in my last job.)</p>
<p> If we disagreed, we would say so.</p>
</li>
<li><p>If John turns up on time, I am amazed (It’s very unlikely.)</p>
<p> If John turns up on time, I’ll be amazed.</p>
</li>
<li><p>If we hadn’t changed suppliers, we wouldn’t had so many outstanding orders. (We have a lot of them.)</p>
<p> If we hadn’t changed suppliers, we wouldn’t have so many outstanding orders.</p>
</li>
<li><p>If the directors have had a pay rise last year when we had our bonuses cancelled, a lot of people would have left the company. (The directors didn’t have a pay rise and people didn’t leave.)</p>
<p> If the directors had had a pay rise last year when we had our bonuses cancelled, a lot of people would have left the company.</p>
</li>
<li><p>If they offer you the job, would you take it? (It might happen.)</p>
<p> If they offer you the job, will you take it?</p>
</li>
</ol>
<h3 id="Choose-the-correct-words-to-complete-the-sentences"><a href="#Choose-the-correct-words-to-complete-the-sentences" class="headerlink" title="Choose the correct words to complete the sentences"></a>Choose the correct words to complete the sentences</h3><ol>
<li><p>If we don’t keep the staff happy, then they will start looking for new jobs.</p>
</li>
<li><p>If I hadn’t taken the course, I would never have had these new opportunities.</p>
</li>
<li><p>In Japan, if your boss ever makes a suggestion, never disagree with him directly.</p>
</li>
<li><p>If everyone turns off their TVs at night, then they will reduce their carbon footprint.</p>
</li>
<li><p>If I’d wanted you to go, I would have told you.</p>
</li>
</ol>
<h3 id="Type-in-the-correct-words-to-complete-the-conversation"><a href="#Type-in-the-correct-words-to-complete-the-conversation" class="headerlink" title="Type in the correct words to complete the conversation"></a>Type in the correct words to complete the conversation</h3><p>A: What’s the situation?</p>
<p>B: Well, if we accept the offer, we might lose our independence.</p>
<p>A: And if we don’t?</p>
<p>B: Well, we will probably struggle to break even this year.</p>
<p>A: Right, I see.</p>
<p>B: If we’d moved production overseas, we wouldn’t be in this predicament.</p>
<p>A: But if we had moved it, we would have had other problems to deal with.</p>
<h3 id="We-can-mark-a-condition-without-using-an-if-clause-Using-a-dictionary-if-necessary-put-the-conditional-expressions-from-these-sentences-into-one-of-the-three-categories-below"><a href="#We-can-mark-a-condition-without-using-an-if-clause-Using-a-dictionary-if-necessary-put-the-conditional-expressions-from-these-sentences-into-one-of-the-three-categories-below" class="headerlink" title="We can mark a condition without using an if-clause. Using a dictionary if necessary, put the conditional expressions from these sentences into one of the three categories below."></a>We can mark a condition without using an if-clause. Using a dictionary if necessary, put the conditional expressions from these sentences into one of the three categories below.</h3><ol>
<li><strong>Assuming</strong> the information is correct, we have to reconsider our plans.</li>
<li><strong>Given</strong> clear weather and good winds, the flight may arrive early.</li>
<li><strong>Providing (that)</strong>&#x2F;<strong>provided (that)</strong> everyone is available, the next meeting will be on Monday.</li>
<li>Start slowly; <strong>otherwise</strong>, you won’t be able to make it to the end.</li>
<li><strong>Suppose</strong> your computer crashes, how will you get your files out of it?</li>
<li><strong>Supposing</strong> you won the lottery, what would you do?</li>
<li>You can keep playing your music <strong>as long as</strong>&#x2F;<strong>so long as</strong> no-one complains.</li>
<li><strong>What if</strong> I sent the file by email — could you look at it before tomorrow’s meeting?</li>
<li><strong>With</strong> a little help, we could make this school a much better place.</li>
<li><strong>Without</strong> your advice, I wouldn’t have known how to do it.</li>
</ol>
<p>A: Simple condition (‘if this is the case’): 1, 2, 5, 6, 8, 9<br>B: Exclusive condition (‘only if this is the case’): 3, 7<br>C: Exceptional condition (‘if this is not the case’): 4, 10</p>
<h3 id="Choose-the-correct-answer-to-complete-the-following-statements-all-of-which-were-made-using-the-conditional-during-a-meeting-at-Floralope-Then-listen-to-the-meeting-and-check-your-answers"><a href="#Choose-the-correct-answer-to-complete-the-following-statements-all-of-which-were-made-using-the-conditional-during-a-meeting-at-Floralope-Then-listen-to-the-meeting-and-check-your-answers" class="headerlink" title="Choose the correct answer to complete the following statements, all of which were made using the conditional during a meeting at Floralope. Then listen to the meeting and check your answers."></a>Choose the correct answer to complete the following statements, all of which were made using the conditional during a meeting at Floralope. Then listen to the meeting and check your answers.</h3><audio controls>
  <source src="/audio/session5_3.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<ol>
<li><p>If the IT system is updated, you’ll be more efficient in terms of your customer admin.</p>
</li>
<li><p>Provided we check out the feasibility of these options thoroughly, I’m convinced we can find a system upgrade that will work for us.</p>
</li>
<li><p>There’s no point in investing in a system upgrade if we don’t have the space, the personnel, or the finances to carry it through.</p>
</li>
<li><p>If we’d invested in our production facilities five years ago, like we wanted to, we would have knocked down the old building and had one purpose-built.</p>
</li>
<li><p>If training isn’t on the agenda, we should forget the whole idea.</p>
</li>
<li><p>If we made them our key users, we could gradually train up the rest.</p>
</li>
<li><p>How would it work if you took on some younger people?</p>
</li>
<li><p>If you’d recruited more young employees at the start, they would have had some IT knowledge from school.</p>
</li>
<li><p>If we only had a couple of people initially who could use the system, how could they cope with the extra work?</p>
</li>
<li><p>If we hadn’t invested in the system, we’d be way behind the competition.</p>
</li>
<li><p>Assuming we decided to commit to the full amount, we could also look at ways to save money in other areas.</p>
</li>
<li><p>If we work more efficiently with our customer, our reputation can only improve too.</p>
</li>
</ol>
<h2 id="Business-Language-Coaching-Session-5-Choosing-The-Focus-Word"><a href="#Business-Language-Coaching-Session-5-Choosing-The-Focus-Word" class="headerlink" title="Business Language Coaching - Session 5 - Choosing The Focus Word"></a>Business Language Coaching - Session 5 - Choosing The Focus Word</h2><ul>
<li><p>build on our work on pausing and intonation by diving more deeply into word stress</p>
</li>
<li><p>be able to deliver presentations in a clear &amp; dynamic way</p>
</li>
</ul>
<h3 id="Starting-Point"><a href="#Starting-Point" class="headerlink" title="Starting Point"></a>Starting Point</h3><p>What were your takeaways from our last session on voice power? Have you had any opportunities to put any of the learning points into practice?</p>
<p><strong>Work in opposing teams. You are going to re-enact two dramatic presentations from the classic business movie Other People’s Money.</strong></p>
<p>The scene:</p>
<blockquote>
<p>Andrew Jorgenson is the patriarchal chairman of New England Wire and Cable. Once highly successful, his company has not kept up with new technology and both revenues and share price are down. Lawrence Garfield, known to his enemies as ‘Larry the Liquidator’, a corporate financier and one of the major stockholders, is trying to persuade the other stockholders at the annual general meeting to vote him in as the new chairman, so he can carry out his plan to sell off the company’s considerable assets before its share price falls any further. Of course, this will mean the closure of the firm and the loss of thousands of jobs.</p>
</blockquote>
<p><strong>Work together annotating this famous movie scene using the points below. Then rehearse and read it aloud.</strong></p>
<p>TODO: listen to the audio and mark</p>
<p>The company is <strong>dead</strong>. | I <strong>didn’t</strong> kill it. Don’t blame <strong>me</strong>. | It was dead when I <strong>got</strong> here. | It’s <strong>too</strong> late for prayers. For even if the prayers are <strong>answered</strong>, and a miracle <strong>occurred</strong>, and the yen did <strong>this</strong>, and the dollar did <strong>that</strong>, and the infrastructure did <strong>the other</strong> thing, we would still be <strong>dead</strong>. | You know <strong>why</strong>? Fiber <strong>optics</strong>. New <strong>technologies</strong>. <strong>Obsolescence</strong>. We’re <strong>dead</strong> all right. We’re just not <strong>broke</strong>. And you know the <strong>surest</strong> way to go broke? Keep getting an <strong>increasing</strong> share of a <strong>shrinking</strong> market. I’m not your <strong>best</strong> friend. I’m your <strong>only</strong> friend. I don’t make <strong>anything</strong>? I’m making you <strong>money</strong>.</p>
<audio controls>
  <source src="/audio/session4_2.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<h3 id="Listen-to-this-dialogue-Notice-which-word-is-the-focus-word-in-each-sentence"><a href="#Listen-to-this-dialogue-Notice-which-word-is-the-focus-word-in-each-sentence" class="headerlink" title="Listen to this dialogue. Notice which word is the focus word in each sentence."></a>Listen to this dialogue. Notice which word is the focus word in each sentence.</h3><audio controls>
  <source src="/audio/session5_1.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<h4 id="The-Lost-Hat"><a href="#The-Lost-Hat" class="headerlink" title="The Lost Hat"></a>The Lost Hat</h4><p>A: I lost my <strong>hat</strong>.</p>
<p>B: What <strong>kind</strong> of hat?</p>
<p>A: It was a <strong>rain</strong> hat?</p>
<p>B: What <strong>color</strong> rain hat?</p>
<p>A: It was <strong>white</strong>. White <strong>plastic</strong>.</p>
<p>B: Hmmm. There was a white hat in the <strong>car</strong>.</p>
<p>A: <strong>Which</strong> car?</p>
<p>B: The one I <strong>sold</strong>!</p>
<h3 id="Listen-and-practice-this-dialogue-Use-a-change-in-pitch-and-an-extra-long-vowel-sound-to-emphasize-the-underlined-focus-words"><a href="#Listen-and-practice-this-dialogue-Use-a-change-in-pitch-and-an-extra-long-vowel-sound-to-emphasize-the-underlined-focus-words" class="headerlink" title="Listen and practice this dialogue. Use a change in pitch and an extra long vowel sound to emphasize the underlined focus words."></a>Listen and practice this dialogue. Use a change in pitch and an extra long vowel sound to emphasize the underlined focus words.</h3><audio controls>
  <source src="/audio/session5_2.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<h4 id="Child-at-the-shoe-store"><a href="#Child-at-the-shoe-store" class="headerlink" title="Child at the shoe store"></a>Child at the shoe store</h4><p>Child: I want some <strong>shoes</strong>.</p>
<p>Parent: What <strong>kind</strong> of shoes?</p>
<p>Child: The <strong>beautiful</strong> kind!</p>
<p>Parent: <strong>Black</strong> or <strong>brown</strong>?</p>
<p>Child: <strong>Neither</strong>. I’m <strong>tired</strong> of black and brown. I want <strong>red</strong> shoes. <strong>Shiny</strong> red shoes.</p>
<p>Note: The fourth line above has two focus words, “black” and “brown”. Both focus words are emphasized.</p>
<h3 id="Underline-the-focus-words-in-these-dialogues-Some-of-the-statements-may-have-two-focus-words"><a href="#Underline-the-focus-words-in-these-dialogues-Some-of-the-statements-may-have-two-focus-words" class="headerlink" title="Underline the focus words in these dialogues. Some of the statements may have two focus words."></a>Underline the focus words in these dialogues. Some of the statements may have two focus words.</h3><h4 id="A-Traveler"><a href="#A-Traveler" class="headerlink" title="A Traveler"></a>A Traveler</h4><p>Travel Agent: Where do you want to <strong>go</strong>?<br>Traveler: <strong>China</strong>.<br>Travel Agent: <strong>Where</strong> in China? To the <strong>north</strong> or to the <strong>south</strong>?<br>Traveler: <strong>Neither</strong>. I’ve <strong>seen</strong> the north and south. I’m going <strong>east</strong>.</p>
<h4 id="Two-people-on-the-street"><a href="#Two-people-on-the-street" class="headerlink" title="Two people on the street."></a>Two people on the street.</h4><p>Woman: What are they <strong>building</strong>?<br>Man: They’re building a <strong>school</strong>.<br>Woman: What <strong>kind</strong> of school? <strong>Elementary</strong> or <strong>high</strong> school?<br>Man: <strong>Neither</strong>. I think it’s a <strong>trade</strong> school.</p>
<h2 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h2><ul>
<li>to enter* Europe</li>
<li>Switzerland</li>
<li>If I had trained to become a lawyer, I would have bought my first house in my twenties(3rd conditional)</li>
<li>If I had trained to become a lawyer, I would be happier now. (mixed conditional - consequence in present)</li>
<li>If they offered you the job would you take it?</li>
<li>obsolescence</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 06 - 2023/09/26</title>
    <url>/2023/09/26/Learnship-06-2023-09-26/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-6-Using-Mixed-Conditions-in-Meetings"><a href="#Business-Language-Coaching-Session-6-Using-Mixed-Conditions-in-Meetings" class="headerlink" title="Business Language Coaching - Session 6 - Using Mixed Conditions in Meetings"></a>Business Language Coaching - Session 6 - Using Mixed Conditions in Meetings</h2><ul>
<li>practice expressing attitudes towards the past, present and future using a range of conditional forms</li>
<li>be able to evaluate the first three quarters of your working year</li>
</ul>
<h3 id="Starting-Point"><a href="#Starting-Point" class="headerlink" title="Starting Point"></a>Starting Point</h3><p>How have you been getting on with your work on conditions? Are you feeling more confident about choosing the right conditional form for the situation?</p>
<h3 id="Business-communication-Discussing-options"><a href="#Business-communication-Discussing-options" class="headerlink" title="Business communication - Discussing options"></a>Business communication - Discussing options</h3><p>Key expressions:</p>
<h4 id="Setting-the-context-discussing-strategy"><a href="#Setting-the-context-discussing-strategy" class="headerlink" title="Setting the context &#x2F; discussing strategy"></a>Setting the context &#x2F; discussing strategy</h4><ul>
<li>Looking at the situation from a long-term perspective …</li>
<li>We need to develop a clear strategy to …</li>
<li>I think we need to look at the bigger picture.</li>
<li>We have to bear in mind the long-term viability …</li>
</ul>
<h4 id="Stating-discussing-options"><a href="#Stating-discussing-options" class="headerlink" title="Stating &#x2F; discussing options"></a>Stating &#x2F; discussing options</h4><ul>
<li>We have a number of options.</li>
<li>I think our options are quite clear here.</li>
<li>How would it work if you&#x2F;we …?</li>
<li>Basically we don’t have much choice …</li>
<li>We can either … or we …</li>
<li>We’re in a really strong position to …</li>
</ul>
<h4 id="Discussing-feasibility-evaluating-options"><a href="#Discussing-feasibility-evaluating-options" class="headerlink" title="Discussing feasibility &#x2F; evaluating options"></a>Discussing feasibility &#x2F; evaluating options</h4><ul>
<li>There’s no point in …-ing, if we don’t&#x2F;can’t …</li>
<li>Provided we …, I’m convinced we can …</li>
<li>I’m not sure that would work.</li>
<li>Realistically, would we be able to finance this strategy?</li>
<li>Assuming we decided to …, we could also …</li>
</ul>
<h4 id="Reaching-decisions"><a href="#Reaching-decisions" class="headerlink" title="Reaching decisions"></a>Reaching decisions</h4><ul>
<li>So, the general consensus is that …</li>
<li>Are there any other points to consider?</li>
<li>Right. So we’re decided.</li>
</ul>
<h3 id="Mixed-conditions-in-meetings-what-could-you-say-here"><a href="#Mixed-conditions-in-meetings-what-could-you-say-here" class="headerlink" title="Mixed conditions in meetings: what could you say here?"></a>Mixed conditions in meetings: what could you say here?</h3><h4 id="Work-with-a-partner-Take-turns-to-discuss-these-situations-Use-conditionals-to-talk-about-past-present-or-future-consequences"><a href="#Work-with-a-partner-Take-turns-to-discuss-these-situations-Use-conditionals-to-talk-about-past-present-or-future-consequences" class="headerlink" title="Work with a partner. Take turns to discuss these situations. Use conditionals to talk about past, present or future consequences."></a>Work with a partner. Take turns to discuss these situations. Use conditionals to talk about past, present or future consequences.</h4><p>Example: Last year, your company outsourced catering. Now the standard of food in the canteen is lower and the number of employees eating there has halved.</p>
<p>If we hadn’t outsourced catering, we would still have a good canteen.</p>
<ol>
<li><p>Your company is making a loss. It needs to cut costs before it goes bankrupt.</p>
<p> If you don’t cut costs, it will go bankrupt.</p>
</li>
<li><p>The government is considering raising interest rates. but they are concerned about the effects on consumer spending.</p>
<p> If the government raised the interest rates, consumer spending would&#x2F;might go down.</p>
</li>
<li><p>Your department hired a bad manager. Since his arrival, three people have left.</p>
<p> If the department hadn’t hired a bad manager, three people wouldn’t have left.</p>
</li>
<li><p>You chose the wrong career path. You are bored and frustrated with your job.</p>
<p> If you hadn’t chosen the wrong career you would have been happy with your job&#x2F;you would be happy.</p>
</li>
<li><p>Some staff will be relocated to Berlin (it might be you). You have friends there.</p>
<p> You will be happy if you’re relocated to Berlin</p>
</li>
<li><p>Your annual pay review is coming up. You want to go on holiday to the Caribbean, but you can’t afford it at the moment.</p>
<p> If the annual pay review hd been finished, I would have been able to afford the trip to the Caribbean. &#x2F; If I got a bonus, I would be able to afford the trip to the Caribbean.</p>
</li>
</ol>
<h3 id="Mixed-conditions-in-meetings-conducting-a-yearly-review"><a href="#Mixed-conditions-in-meetings-conducting-a-yearly-review" class="headerlink" title="Mixed conditions in meetings: conducting a yearly review"></a>Mixed conditions in meetings: conducting a yearly review</h3><p>YP fitness studio is having its yearly review meeting. Work with a partner. Talk about what happened and the future plan.</p>
<p>YP fitness studio review meeting</p>
<h4 id="Last-year"><a href="#Last-year" class="headerlink" title="Last year"></a>Last year</h4><ol>
<li><p>Past action&#x2F;inaction and past result</p>
<ul>
<li>invest in new equipment -&gt; able to increase membership fee</li>
<li>failed to develop competitive January special offer -&gt; lost potential customer to competition</li>
</ul>
</li>
<li><p>Past action&#x2F;inaction and present results</p>
<ul>
<li>failed to address HR crisis and recruit new personal trainers -&gt; only three personal trainers - all overworked, several customers on waiting lists</li>
<li>developed partnership with local school -&gt; overweight teenagers now following fitness programme</li>
</ul>
</li>
</ol>
<h4 id="Next-year"><a href="#Next-year" class="headerlink" title="Next year"></a>Next year</h4><ol>
<li><p>Suggestions&#x2F;predictions for next year plus results</p>
<ul>
<li>develop new membership packages -&gt; increase number of members</li>
<li>start more  initiatives with teenagers -&gt; improve gym reputation and get new young members</li>
<li>employee more trainers -&gt; more personal programmes for customers and more profit</li>
<li>renovate pool area -&gt; improve reputation, increase swimming prices</li>
</ul>
</li>
</ol>
<h3 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h3><ul>
<li>we went* to</li>
<li>the tomb(pr)</li>
<li>bi-weekly, twice a week</li>
<li>fortnightly, every other week</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 07 - 2023/10/05</title>
    <url>/2023/10/05/Learnship-07-2023-10-05/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-7-Giving-an-Impromptu-Presentation-1"><a href="#Business-Language-Coaching-Session-7-Giving-an-Impromptu-Presentation-1" class="headerlink" title="Business Language Coaching - Session 7 - Giving an Impromptu Presentation (1)"></a>Business Language Coaching - Session 7 - Giving an Impromptu Presentation (1)</h2><ul>
<li>learn strategies and language for giving impromptu presentations</li>
<li>learn and practice phrases to set context &amp; signal intention</li>
</ul>
<h3 id="Starting-Point"><a href="#Starting-Point" class="headerlink" title="Starting Point"></a>Starting Point</h3><p>What is an impromptu presentation? How is it different to both a standard presentation and discussion in a meeting?</p>
<h3 id="Impromptu-Presentations-What-makes-them-different-…"><a href="#Impromptu-Presentations-What-makes-them-different-…" class="headerlink" title="Impromptu Presentations: What makes them different …"></a>Impromptu Presentations: What makes them different …</h3><p>Below is a table which covers some of the differences between the two types of presentations. Decide which presentation fits with each description (P- standard presentation, I - impromptu presentation)</p>
<h4 id="Style-delivery"><a href="#Style-delivery" class="headerlink" title="Style &amp; delivery"></a>Style &amp; delivery</h4><ul>
<li>Informal &amp; conversational:    I</li>
<li>Formal &amp; structured:          P</li>
</ul>
<h4 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h4><ul>
<li>Exhaustive, detailed:         P</li>
<li>Selective, general:           I</li>
</ul>
<h4 id="Control-Interaction"><a href="#Control-Interaction" class="headerlink" title="Control &#x2F; Interaction"></a>Control &#x2F; Interaction</h4><ul>
<li>In full control of presentation:                  P</li>
<li>Control is shared between presenter and audience: I</li>
</ul>
<h3 id="Giving-an-impromptu-presentation-language-difference"><a href="#Giving-an-impromptu-presentation-language-difference" class="headerlink" title="Giving an impromptu presentation: language difference"></a>Giving an impromptu presentation: language difference</h3><p>Read the three pairs of expressions below. In each pair there is one phrase from a standard presentation and another from an impromptu presentation. Which is which?</p>
<p>1a. <em>So, if it’s OK, I’ll just briefly sketch out the main points.</em><br>1b. First of all, I’d like to outline the main topics for today’s discussion.</p>
<p>2a. Let me move on now to the next point …<br>2b. <em>Ok, so, the next thing to mention is …</em></p>
<p>3a. <em>I hope that covers everything?</em><br>3b. That brings me to the end of my talk. Thanks for listening.</p>
<h3 id="Giving-an-impromptu-presentation-Audio-example"><a href="#Giving-an-impromptu-presentation-Audio-example" class="headerlink" title="Giving an impromptu presentation: Audio example"></a>Giving an impromptu presentation: Audio example</h3><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>Ovanta is an international financial services company which has been created from the recent merger of three smaller companies. The company holds regular briefing meetings to update the senior management team on key initiatives following the merger.</p>
<p>The Operations Director, lan Dungannon, has invited two project team leaders to the latest briefing. Anya is in charge of a project looking at training needs across the organization; Pavia is leading an initiative to improve relations between management and the union. Both Anya and Pavla are knowledgeable about their subjects, but neither has been specifically asked to make a presentation at this meeting.</p>
<audio controls>
  <source src="/audio/session7_1.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<h4 id="8-3-8-4-Listen-to-Extracts-1-adn-2-from-the-management-briefing-at-Ovanta-Choose-the-best-answer-for-questions-1-5"><a href="#8-3-8-4-Listen-to-Extracts-1-adn-2-from-the-management-briefing-at-Ovanta-Choose-the-best-answer-for-questions-1-5" class="headerlink" title="8.3 - 8.4 Listen to Extracts 1 adn 2 from the management briefing at Ovanta. Choose the best answer for questions 1-5."></a>8.3 - 8.4 Listen to Extracts 1 adn 2 from the management briefing at Ovanta. Choose the best answer for questions 1-5.</h4><ol>
<li><p>How does Anya begin her impromptu talk?</p>
<p> a. She explains in detail what she is going to say.<br> b. <em>She gives an informal overview of the current situation.</em></p>
</li>
<li><p>How would you describe Anya’s way of signalling what she wants to talk about?</p>
<p> a. <em>informal and conversational</em><br> b. formal and structured</p>
</li>
<li><p>How does Anya deal with Ian’s questions?</p>
<p> a. <em>She’s negative and defensive.</em><br> b. She’s positive and constructive.</p>
</li>
</ol>
<h4 id="Audio-scripts"><a href="#Audio-scripts" class="headerlink" title="Audio scripts"></a>Audio scripts</h4><p>Extract 1<br>Ian: … And that brings us to training. Since Anya’s here, perhaps we can look at the new training initiative requested by the various team leaders? Anya, can you give us an overview of where we are with this?</p>
<p>Anya: OK, yes. Well, <strong>to be honest</strong>, we haven’t got as far as I’d hoped. <strong>Erm, where we are at the moment is</strong> … er, we’ve just completed the initial consultation stage. However, <strong>what I can tell you</strong> is that the initiative will be complete and in place before the annual review. <strong>I’d like to</strong> be able to give you a more precise date, but <strong>unfortunately</strong> I can’t do that at the moment. You’ll appreciate that I still need to <strong>run the details by</strong> Jean-Paul and the team leaders first …</p>
<p>… So, now, <strong>perhaps</strong> it would be a good idea if I just went through some of the other training programmes we are running.</p>
<p>Ian: Yes, OK.</p>
<p>Anya: Good. Now, <strong>how can I put this</strong>? We have a quite ‘flexible’ approach to our training programme this year - we’re trying to tailor it more to individual and team needs. <strong>So if it’s OK</strong>, I’d just like to <strong>sketch out</strong> the core elements of the plans … <strong>Just feel free to interrupt me with any question</strong>. Now, I don’t know if you’ve heard of a ‘balanced scorecard’? Let me just <strong>touch on</strong> this approach and how it works in practice …</p>
<p>… and that’s more or less it. <strong>I think that’s covered everything</strong>. Er, and it’s <strong>just occurred to me</strong> that…</p>
<p>Ian: Anya, you haven’t said anything about management training?</p>
<p>Anya: I was coming to that. Erm, it’s obviously a key area, and I have to admit that we haven’t got as far as planning the specifics yet - we just haven’t had the time. But yeah, <strong>you’re quite right</strong>, we need to address this … it might not be a bad idea to <strong>send out</strong> a questionnaire to the senior staff for their recommendations.</p>
<p>lan: And you’ve still got time to do that, have you?</p>
<p>Anya: <strong>That’s a good point</strong>. I think so. Let me check, and <strong>I’ll get back to you</strong>. And how about if I send you a draft, too? I’m pretty sure that I could do that before the end of the week.</p>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 08 - 2023/10/11</title>
    <url>/2023/10/11/Learnship-08-2023-10-11/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-8-Giving-an-Impromptu-Presentation-2"><a href="#Business-Language-Coaching-Session-8-Giving-an-Impromptu-Presentation-2" class="headerlink" title="Business Language Coaching - Session 8 - Giving an Impromptu Presentation (2)"></a>Business Language Coaching - Session 8 - Giving an Impromptu Presentation (2)</h2><ul>
<li>learn strategies and language for giving impromptu presentations</li>
<li>do some real impromptu presentations</li>
</ul>
<h3 id="Starting-Point"><a href="#Starting-Point" class="headerlink" title="Starting Point"></a>Starting Point</h3><p>What were your takeaways from last week’s session on impromptu presentations? What are the key things the presenter should be trying to do in order to make the presentation successful?</p>
<h3 id="Task-Giving-Impromptu-Presentations"><a href="#Task-Giving-Impromptu-Presentations" class="headerlink" title="Task: Giving Impromptu Presentations"></a>Task: Giving Impromptu Presentations</h3><p>Key expressions</p>
<h4 id="Setting-the-context"><a href="#Setting-the-context" class="headerlink" title="Setting the context"></a>Setting the context</h4><ul>
<li>So, the first thing&#x2F;main thing is …</li>
<li>I think you should be aware that …</li>
<li>Where we are at the moment is …</li>
<li>What I can tell you is that …</li>
<li>I’d like to be able to … but unfortunately I can’t …</li>
<li>You’ll appreciate that I still need to …</li>
</ul>
<h4 id="Signalling-intention"><a href="#Signalling-intention" class="headerlink" title="Signalling intention"></a>Signalling intention</h4><ul>
<li>Perhaps it would be a good idea if I just … ?</li>
<li>So, I’d just like to sketch out …</li>
<li>Let me just touch on …</li>
<li>I think that’s covered everything.</li>
<li>I also want to point out that …</li>
<li>Well, in a nutshell …</li>
</ul>
<h4 id="Responding-to-questions-and-challenges"><a href="#Responding-to-questions-and-challenges" class="headerlink" title="Responding to questions and challenges"></a>Responding to questions and challenges</h4><ul>
<li>I was coming to that.</li>
<li>I have to admit that …</li>
<li>You’re quite right, we need to address this.</li>
<li>That’s a good point.</li>
</ul>
<h4 id="Highlighting-key-points"><a href="#Highlighting-key-points" class="headerlink" title="Highlighting key points"></a>Highlighting key points</h4><ul>
<li>So, the first thing is …</li>
<li>And I think you should be aware that …</li>
<li>So, that’s one key point right there.</li>
<li>… and I think this is a really important point …</li>
<li>So, the main thing to remember is …</li>
</ul>
<h4 id="Responding-to-requests-for-details"><a href="#Responding-to-requests-for-details" class="headerlink" title="Responding to requests for details"></a>Responding to requests for details</h4><ul>
<li>Let me check … and I’ll get back to you.</li>
<li>I can’t remember exactly, but off the top of my head …</li>
<li>I can double check if you like?</li>
<li>I don’t have the exact figures, but what if I … ?</li>
</ul>
<p>There are three scenarios below for which you’ll need to give a 2-3 minute impromptu presentation. You’ll have 90 seconds to prepare. Use the phrases and strategies we’ve learnt to help you. I’ll give you feedback and notes to help you hone your skills.</p>
<h4 id="Situation-1"><a href="#Situation-1" class="headerlink" title="Situation 1"></a>Situation 1</h4><p>Update to your manager&#x2F;team leader in a meeting</p>
<h4 id="Situation-2"><a href="#Situation-2" class="headerlink" title="Situation 2"></a>Situation 2</h4><p>explain your role to a new team member who is job-shadowing</p>
<h2 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h2><ul>
<li>snow (uncountable - no ‘snows’)</li>
<li>it’s likely to block* people</li>
<li>costumes</li>
<li>I can easily get* lost</li>
<li>in a nutshell</li>
<li>to sketch out - to outline</li>
<li>from what I know …</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 09 - 2023/10/16</title>
    <url>/2023/10/16/Learnship-09-2023-10-16/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-9-Giving-an-Impromptu-Presentation-3"><a href="#Business-Language-Coaching-Session-9-Giving-an-Impromptu-Presentation-3" class="headerlink" title="Business Language Coaching - Session 9 - Giving an Impromptu Presentation (3)"></a>Business Language Coaching - Session 9 - Giving an Impromptu Presentation (3)</h2><ul>
<li>learn strategies and language for giving impromptu presentations</li>
<li>do some real impromptu presentations</li>
</ul>
<h3 id="Starting-Point"><a href="#Starting-Point" class="headerlink" title="Starting Point"></a>Starting Point</h3><p>Thinking back over the last couple of sessions, what about impromptu presentations do you think you’ve down well and what have you found more difficult?</p>
<ul>
<li>cannot go deeply into details -&gt; reiterate key points, summarize</li>
<li>interaction between presenter and audience</li>
<li>formulate structure in your head e.g. for v.s. against, bullets, pros &amp; cons, before &#x2F; after</li>
</ul>
<h3 id="Task-Giving-Impromptu-Presentations"><a href="#Task-Giving-Impromptu-Presentations" class="headerlink" title="Task: Giving Impromptu Presentations"></a>Task: Giving Impromptu Presentations</h3><p>There are three scenarios below for which you’ll need to give a 2-3 minute impromptu presentation. You’ll have 90 seconds to prepare. Use the phrases and strategies we’ve learnt to help you. I’ll give you feedback and notes to help you hone your skills.</p>
<h4 id="Situation-3"><a href="#Situation-3" class="headerlink" title="Situation 3"></a>Situation 3</h4><p>make a case to management for why you should be considered for promotion in the near future</p>
<h4 id="Situation-4-Presenting-a-Slide"><a href="#Situation-4-Presenting-a-Slide" class="headerlink" title="Situation 4 - Presenting a Slide"></a>Situation 4 - Presenting a Slide</h4><p>Context:</p>
<ul>
<li>You are researching customer reactions to your new product.</li>
<li>You don’t have as much quantifiable data as you’d originally planned, but will submit the final report by the agreed deadline.</li>
<li>You are making good progress, but can’t give exact figures now — you’re still processing the feedback.</li>
<li>You need to wait for more questionnaires to come back before finishing the report.</li>
</ul>
<p>Key points you intend to cover</p>
<ul>
<li>give an overview of responses to the product so far</li>
<li>explain some of the difficulties involved</li>
<li>talk about ‘effective questionnaires’</li>
</ul>
<h2 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h2><ul>
<li>a cable car</li>
<li>before that we could* only rely on</li>
<li>an overview* of</li>
<li>to oversee - to keep an eye on&#x2F;supervise</li>
<li>to overlook - to miss&#x2F;skip over some important information&#x2F;task</li>
<li>bring about v.s. bring up</li>
<li>quantifiable(pr)</li>
<li>more convincing*</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 10 - 2023/10/19</title>
    <url>/2023/10/19/Learnship-10-2023-10-19/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-10-Using-Discourse-Markers-for-Cohesive-Speaking-Writing"><a href="#Business-Language-Coaching-Session-10-Using-Discourse-Markers-for-Cohesive-Speaking-Writing" class="headerlink" title="Business Language Coaching - Session 10 - Using Discourse Markers for Cohesive Speaking &amp; Writing"></a>Business Language Coaching - Session 10 - Using Discourse Markers for Cohesive Speaking &amp; Writing</h2><ul>
<li>learn about discourse markers and how to use them to improve your speaking</li>
<li>build on our work on impromptu presentations</li>
</ul>
<h3 id="STARTING-POINT"><a href="#STARTING-POINT" class="headerlink" title="STARTING POINT"></a>STARTING POINT</h3><p>We’ve looked at many aspects of your communication while practising impromptu presentations. What have you identified as the areas you need to focus on?</p>
<h3 id="Discourse-Markers-What-are-they"><a href="#Discourse-Markers-What-are-they" class="headerlink" title="Discourse Markers: What are they?"></a>Discourse Markers: What are they?</h3><h4 id="Read-the-text-below-It-contains-several-discourse-markers-Can-you-identify-them-Don’t-worry-if-you-don’t-know-what-discourse-markers-are-yet"><a href="#Read-the-text-below-It-contains-several-discourse-markers-Can-you-identify-them-Don’t-worry-if-you-don’t-know-what-discourse-markers-are-yet" class="headerlink" title="Read the text below. It contains several discourse markers. Can you identify them? (Don’t worry if you don’t know what discourse markers are yet!)"></a>Read the text below. It contains several discourse markers. Can you identify them? (Don’t worry if you don’t know what discourse markers are yet!)</h4><p><strong>To tell you the truth</strong>, I really don’t like the way advertisers manipulate us into buying their products. <strong>After all</strong>, it’s just that, manipulation! <strong>Admittedly</strong>, it’s their job to sell products, but <strong>quite honestly</strong>, I find it to be a cynical industry so I try not to be taken in by it. <strong>Obviously</strong>, there’s not much we consumers can do about it… advertising is everywhere. <strong>Talking of</strong> ads; have you see the new Coca-Cola one?”</p>
<h3 id="Linking-words-and-relative-clauses"><a href="#Linking-words-and-relative-clauses" class="headerlink" title="Linking words and relative clauses"></a>Linking words and relative clauses</h3><h4 id="First-read-the-information-about-linking-words-and-phrases"><a href="#First-read-the-information-about-linking-words-and-phrases" class="headerlink" title="First, read the information about linking words and phrases."></a>First, read the information about linking words and phrases.</h4><p>Examples of linking words are: <em>and</em>, <em>but</em>, <em>because</em>, <em>so</em>, <em>However</em>, <em>Therefore</em>, <em>In general</em>, etc. These words and phrases join one idea to another. They help the reader to understand the structure of an argument. When linking words come at the beginning of a sentence they are usually followed by a comma.</p>
<h4 id="Complete-the-table-with-words-from-the-boxes"><a href="#Complete-the-table-with-words-from-the-boxes" class="headerlink" title="Complete the table with words from the boxes"></a>Complete the table with words from the boxes</h4><p>Sequences:              Firstly         Secondly                    Finally<br>Taking generally:       In general      Above all                   On the whole<br>Contrast:               However         On another point            On the other hand<br>Adding another point:   In addition     Furthermore                 Nevertheless<br>Important example:      Especially      In particular               Typically</p>
<p>Surprising but true:    In fact         Actually                    As a matter of fact<br>Something obvious:      Clearly         Obviously                   Of course<br>Result&#x2F;Consequence:     As a result     For this reason             Therefore<br>New topic:              In relation to  As far as … is concerned  With reference to<br>Summarizing:            In brief        In short                    So, to sum up</p>
<h4 id="Complete-these-extracts-from-an-internal-presentation-to-a-sales-department-with-a-discourse-marker-from-the-box-Use-the-information-in-brackets-to-help-you"><a href="#Complete-these-extracts-from-an-internal-presentation-to-a-sales-department-with-a-discourse-marker-from-the-box-Use-the-information-in-brackets-to-help-you" class="headerlink" title="Complete these extracts from an internal presentation to a sales department with a discourse marker from the box. Use the information in brackets to help you."></a>Complete these extracts from an internal presentation to a sales department with a discourse marker from the box. Use the information in brackets to help you.</h4><p>Our department has faced a lot of criticism recently. <strong>Quite honestly</strong> (<em>I’m giving you some very frank information</em>), it’s the worst we’ve had for a long time, so things must change…</p>
<p><strong>Admittedly</strong> (<em>I know this point weakens my position</em>), we should have recognized our sales had been consistently low, but we didn’t and we’ve got to face the consequences. <strong>Of course</strong> (<em>this point is expected</em>), management want to know what we’re going to do about things. <strong>Obviously</strong> (<em>this is clear</em>), I’m not going to blame anyone, <strong>after all</strong> (<em>I’m adding some additional, true information</em>), it’s no one’s fault…</p>
<p>So, moving on, <strong>basically</strong> (<em>this is the main idea</em>), we’re suggesting we regroup. This will refresh the team and <strong>as I was saying</strong> (<em>I’ve already mentioned this</em>), the low sales are no one’s fault, so there’s no one person who should feel unhappy about moving teams. As a matter of fact (here’s another true piece of information), we are also thinking of redefining our sales strategy too. <strong>Mind you</strong> (<em>I’m contrasting that information with a less strong message</em>), we don’t want to change things too much so the sales staff start to feel alienated…</p>
<p><strong>Anyway</strong> (<em>I’m changing subject</em>), on Monday it’s going to be a brand new start <strong>so to speak</strong> (<em>not literally, but figuratively</em>) and to <strong>tell you the truth</strong> (<em>I’m telling you exactly how I feel</em>) I can’t wait to begin!</p>
<h3 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h3><ul>
<li><p>last night &#x2F; yesterday evening</p>
</li>
<li><p>it’s really jarring</p>
</li>
<li><p>discourse &#x3D; speech</p>
</li>
<li><p>discourse control</p>
</li>
<li><p>that being said …&#x2F;admittedly</p>
</li>
<li><p>criticism</p>
</li>
<li><p>mind you</p>
</li>
</ul>
<h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><p>Read and learn the grammar notes about discourse markers.</p>
<h3 id="Truthfulness"><a href="#Truthfulness" class="headerlink" title="Truthfulness"></a>Truthfulness</h3><ol>
<li><p><em>Honestly</em> and <em>frankly</em> are used to claim that the speaker is telling the truth. Often they introduce criticism or negative remarks. <em>Quite</em> adds emphasis to both words.</p>
<p> <em>Frankly</em>, I didn’t like the venue.</p>
<p> <em>Quite honestly</em>, I thought your comments were ill-judged.</p>
</li>
<li><p><em>To tell you the truth</em> and <em>to be honest</em> have a similar function.</p>
<p> <em>To tell you the truth</em>, I didn’t enjoy the conference.</p>
<p> To be honest, the meeting was a complete waste of time.</p>
</li>
</ol>
<h3 id="Strengthening-arguments"><a href="#Strengthening-arguments" class="headerlink" title="Strengthening arguments"></a>Strengthening arguments</h3><p>All of the following discourse markers stress the importance of the point that follows.</p>
<ol>
<li><p>We can use <em>in fact</em>, <em>as a matter of fact</em>, and <em>after all</em> to suggest that an opinion is not personal, but is based on evidence.</p>
<p> <em>As a matter of fact</em>, house prices fell by 2.5% last month. ;</p>
</li>
<li><p>We can use <em>if you ask me</em> and <em>I must say</em> to suggest that it is personal.</p>
<p> <em>If you ask me</em>, the government is to blame for ruining the economy.</p>
</li>
<li><p>We can use <em>clearly</em>, <em>of course</em>, <em>naturally</em>, <em>obviously</em>, <em>undoubtedly</em>, and <em>after all</em> to suggest that what will follow is not controversial or will not be questioned.<br> <em>Clearly</em>, the next two years will be critical for the future of the economy.</p>
</li>
</ol>
<h3 id="Concession"><a href="#Concession" class="headerlink" title="Concession"></a>Concession</h3><ol>
<li><p>We can use <em>admittedly</em>, <em>to be sure</em>, <em>it’s true that</em>, to acknowledge that someone has made a good point before disagreeing with them, or to concede a negative point before making a different point. The sentence that follows often begins with <em>but</em> or <em>however</em>.</p>
<p> <em>Admittedly</em>, the result could have been better. <em>However</em>, we retained our position as market leader.</p>
</li>
<li><p>We can concede that someone else has a point before making our own point, to make our own point sound stronger or more carefully thought out. To do this, <em>admittedly</em>, <em>to be sure</em>, and <em>it’s true that … but &#x2F; however</em> are possible.</p>
<p> A: We’re in danger of missing the deadline.</p>
<p> B: <em>It’s true that</em> we’re dealing with an incredibly large workload at the moment, <em>but</em> I know that we can meet this deadline.</p>
</li>
</ol>
<h3 id="Discourse-patterns"><a href="#Discourse-patterns" class="headerlink" title="Discourse patterns"></a>Discourse patterns</h3><p>Some discourse markers draw attention to the discourse itself - the pattern of what is said.</p>
<ol>
<li><p>We can use the following to rephrase or paraphrase an argument: <em>as I was saying</em>, <em>as it were</em>, <em>I mean</em>, <em>if you like</em>, <em>so to speak</em>, <em>that’s to say</em>, <em>to put it another way</em>, <em>well</em>.</p>
<p> Your holiday could cause a real problem for … <em>well, I mean</em>, we need to amend the schedules, really.</p>
</li>
<li><p>We can use the following to link to a new topic: <em>now</em>, <em>anyway</em>, <em>mind you</em>, <em>moving on</em>, <em>actually</em>, <em>indeed</em>.</p>
<p> So, that’s the plan for the next two months. <em>Anyway</em>, didn’t you want to ask me about the sales figures?</p>
</li>
<li><p>We can use the following to return to a previous topic: <em>anyway</em>, <em>as I was saying</em>.</p>
<p> The contract was signed yesterday and … oh, David, you’ve decided to join us! <em>Anyway, as I was saying</em>, the contract has just been i signed and …</p>
</li>
<li><p>We can use the following to introduce a conclusion: <em>so</em>, <em>anyway</em>, <em>basically</em>, <em>in conclusion</em>, <em>to sum up</em>.</p>
<p> That was what my report uncovered, so <em>basically</em>, we have to consolidate our product list over the next year.</p>
</li>
</ol>
<h3 id="Acknowledging-non-literal-meanings"><a href="#Acknowledging-non-literal-meanings" class="headerlink" title="Acknowledging non-literal meanings"></a>Acknowledging non-literal meanings</h3><p>Some discourse markers show that language is being used in a way that is different from its usual, literal meaning: <em>so to speak</em>, <em>as it were</em>, <em>if you will &#x2F; like</em>.</p>
<pre><code>A: George seems quite volatile.
B: Yeah, he’s a bomb waiting to go off, *so to speak*.
</code></pre>
<h2 id="The-Exercise"><a href="#The-Exercise" class="headerlink" title="The Exercise"></a>The Exercise</h2><h3 id="Choose-the-correct-answer-from-the-words-in-italics"><a href="#Choose-the-correct-answer-from-the-words-in-italics" class="headerlink" title="Choose the correct answer from the words in italics."></a>Choose the correct answer from the words in italics.</h3><p>Jason</p>
<p>Time’s running out for the in-house magazine! <strong>Basically</strong>, the editorial team have had enough of waiting for articles and have started writing them themselves. It’s <strong>obviously</strong> been forgotten that they have real jobs to do too! <strong>Anyway</strong>, could you send whatever you’ve collected? <strong>After all</strong>, anything is better than nothing at all.</p>
<p><strong>Quite honestly</strong>, I don’t know why they don’t scale it down to publishing it twice a year. We discussed this a few months ago but no one seemed very keen. <strong>As a matter of fact</strong>, when Henri left the meeting he was so upset! <strong>Admittedly</strong>, someone said they found the themes he suggested for articles boring!</p>
<p>Have you heard, Ivica’s abandoning us, <strong>so to speak</strong>? She’s taking a year off to travel. She says if she doesn’t do it now she never will. <strong>Mind you</strong>, I don’t blame her. Her department’s changed so much since the shake-up. <strong>Of course</strong>, she didn’t say that was the reason for leaving, but we all think it is. <strong>To tell you the truth</strong>, I’d think of traveling the world if I worked for her boss!</p>
<p>Tanya</p>
<h3 id="Complete-this-conversation-with-the-correct-answer-from-the-options-in-1-10"><a href="#Complete-this-conversation-with-the-correct-answer-from-the-options-in-1-10" class="headerlink" title="Complete this conversation with the correct answer from the options in 1-10"></a>Complete this conversation with the correct answer from the options in 1-10</h3><p>A: Look, James — we’re really having problems here. <strong>If you ask me</strong>, I think we should cancel our stand at the Mumbai conference.<br>B: <strong>Quite honestly</strong>, that seems like a bit of a radical solution — I’m really not sure about it.<br>A: I know what you mean, but <strong>after all</strong>, we’re just not going to be ready to put together a decent stand by May.<br>B: <strong>To tell you the truth</strong>, I’m still not convinced. <strong>After all</strong>, all of our most important customers will be expecting us to have a big presence there.<br>A: Yes, but our stand is going to look terrible. <strong>Obviously</strong>, that’s not going to give our company a very good image in the industry. <strong>Basically</strong>, I think we should consider other methods of promotion and avoid the conference — we could print extra copies of our catalogue and advertising posters, for example.<br>B: OK - those are good ideas, and <strong>admittedly</strong> that would be the easier option, but I really think we should do those in addition to having the stand. If we all work really hard I’m sure we can get it ready in time for Mumbai.<br>A: I really don’t think having the stand will be possible. <strong>Mind you</strong>, if we could get more people involved in the preparation it might be possible, I suppose. <strong>Anyway</strong>, we need to sort this out immediately. Could you find out if we would be able to expand the team?</p>
<h3 id="Type-the-correct-words-to-complete-the-sentences"><a href="#Type-the-correct-words-to-complete-the-sentences" class="headerlink" title="Type the correct words to complete the sentences"></a>Type the correct words to complete the sentences</h3><ol>
<li><p>Now <strong>as I was saying</strong>, it is important to reach a large audience with this campaign.</p>
</li>
<li><p>The CEO is very keen on procedures and regulations - a real disciplinarian, <strong>so to speak</strong>.</p>
</li>
<li><p>The word is that he will resign, <strong>quite honestly</strong>, though I don’t believe it.</p>
</li>
<li><p>Our sales are falling rapidly and <strong>obviously</strong> that is not good news.</p>
</li>
<li><p><strong>Anyway</strong>, maybe we should move on to the next item on the agenda now.</p>
</li>
</ol>
<h3 id="Type-the-correct-words-to-complete-the-conversation"><a href="#Type-the-correct-words-to-complete-the-conversation" class="headerlink" title="Type the correct words to complete the conversation"></a>Type the correct words to complete the conversation</h3><p>A: <strong>To tell you the truth</strong>, this won’t be easy, but I am sure we can do it.</p>
<p>B: <strong>After all</strong>, we have the staffing and the resources, don’t we?</p>
<p>A: Absolutely. <strong>As a matter of fact</strong>, I think we’re in a strong position in that respect.</p>
<p>B: But <strong>mind you</strong>, there might be one or two obstacles in the development phase.</p>
<p>A: <strong>Of course</strong>, but I’m sure we’ll be able to deal with them fairly easily.</p>
<h3 id="Choose-the-correct-discourse-marker-to-complete-the-sentences"><a href="#Choose-the-correct-discourse-marker-to-complete-the-sentences" class="headerlink" title="Choose the correct discourse marker to complete the sentences."></a>Choose the correct discourse marker to complete the sentences.</h3><ol>
<li><p>The quality of her work is always excellent. <strong>As regards to</strong> her timeliness, that’s another story.</p>
</li>
<li><p>Our sales have increased significantly. <strong>On the other hand</strong>, employee turnover had also increased.</p>
</li>
<li><p><strong>If you ask me</strong>, I don’t think your idea is a practical one.</p>
</li>
<li><p><strong>While</strong> the company promised bonuses, they subsequently changed their minds.</p>
</li>
<li><p><strong>Admittedly</strong>, this has been a difficult year for all concerned.</p>
</li>
<li><p>Your revised report is excellent, <strong>whereas</strong> I was not particularly impressed with the original version.</p>
</li>
<li><p><strong>Of course</strong>, I’ll support you in any way I can.</p>
</li>
<li><p><strong>Clearly</strong>, we need to upgrade our product if we’re going to complete.</p>
</li>
</ol>
<h3 id="Listen-to-extracts-from-Ranjit-Shetty-an-entrepreneur-giving-a-presentation-Correct-each-extract-so-that-it-matches-what-you-hear-Listen-again-to-check-your-answers"><a href="#Listen-to-extracts-from-Ranjit-Shetty-an-entrepreneur-giving-a-presentation-Correct-each-extract-so-that-it-matches-what-you-hear-Listen-again-to-check-your-answers" class="headerlink" title="Listen to extracts from Ranjit Shetty, an entrepreneur, giving a presentation. Correct each extract so that it matches what you hear. Listen again to check your answers."></a>Listen to extracts from Ranjit Shetty, an entrepreneur, giving a presentation. Correct each extract so that it matches what you hear. Listen again to check your answers.</h3><audio controls>
  <source src="/audio/session10_1.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<ol>
<li><p>I’ve been doing some research into our position in the market and what opportunities are available to us, and to tell you the truth, I’m excited.</p>
</li>
<li><p>I’m excited because what comes across from talking to you is your collective enthusiasm in what we do and your genuine wish for us to succeed. After all, without your support my plans won’t be possible.</p>
</li>
<li><p>Admittedly, things are going well now, but I am thinking five years down the line.</p>
</li>
<li><p>We could be missing out on a great opportunity if we don’t diversify - mind you, this won’t be cheap and it won’t be easy.</p>
</li>
<li><p>Of course, I can’t expect you to buy into this plan without some facts.</p>
</li>
<li><p>Basically, studies show that most companies only invest a small percentage of their advertising budget in print media.</p>
</li>
<li><p>As a matter of fact, most of our customers want agencies that offer a variety of advertising media. They want options.</p>
</li>
<li><p>Obviously, this information should ring alarm bells for us.</p>
</li>
<li><p>At the moment, we’re third in our region for print media. Quite honestly, I’m not happy with that.</p>
</li>
<li><p>Ravi, our key account manager, actually comes from the field of online advertising so he’s going to be our guru, so to speak.</p>
</li>
<li><p>Now, as I was saying before, we’ve secured external investment for our diversification plan and we’ve employed a consultant.</p>
</li>
<li><p>I accept that you may not like an outsider telling you what is the right thing to do, but we have to recognize that this person is an expert, and they may well see things, opportunities, that we might not. Anyway, he’s on our side.</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 11 - 2023/10/23</title>
    <url>/2023/10/23/Learnship-11-2023-10-23/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-11-Using-Discourse-Markers-for-Cohesive-Speaking-Writing-2"><a href="#Business-Language-Coaching-Session-11-Using-Discourse-Markers-for-Cohesive-Speaking-Writing-2" class="headerlink" title="Business Language Coaching - Session 11 - Using Discourse Markers for Cohesive Speaking &amp; Writing(2)"></a>Business Language Coaching - Session 11 - Using Discourse Markers for Cohesive Speaking &amp; Writing(2)</h2><ul>
<li>learn about discourse markers and how to use them to improve your speaking</li>
<li>do some impromptu speaking activities</li>
</ul>
<h3 id="Starting-Point"><a href="#Starting-Point" class="headerlink" title="Starting Point"></a>Starting Point</h3><p>How did you get on with the exercises on discourse markers? Have you had the chance to practice using a range of discourse markers in your meetings at work?</p>
<h3 id="Matching"><a href="#Matching" class="headerlink" title="Matching"></a>Matching</h3><p>In paris, match the pairs of sentences. Once you have matched all the sentences, highlight the discourse markers.</p>
<ol>
<li><p>I’m not addicted to social media at all. <strong>On the contrary</strong>, there are plenty of other things I’d rather be doing with my time.</p>
</li>
<li><p><strong>In addition to</strong> being quite stressful, social media can be very time-consuming.</p>
</li>
<li><p>Social media can boost your career prospects. <strong>As it so happens</strong>, I found my current job via a friend’s post.</p>
</li>
<li><p>I’ve always been an advocate of new technology. <strong>Having said that</strong>, I do think it has to be used with caution.</p>
</li>
<li><p>It’s true that technology has its downsides. <strong>Even so</strong>, I know I couldn’t live without it.</p>
</li>
<li><p>Phones are quite expansive. <strong>What’s more</strong>, they break quite easily.</p>
</li>
<li><p>Technology has many uses in business. <strong>Likewise</strong>, it has many applications within education too.</p>
</li>
<li><p>Some people are nervous about using it, but <strong>by and large</strong>, most people are in favour of technology.</p>
</li>
<li><p>I bought the new model <strong>on account of</strong> its high-quality camera.</p>
</li>
<li><p>I read about the dangers of too much screen time. <strong>Accordingly</strong>, I now only let my children watch 30 minutes of television a day.</p>
</li>
</ol>
<h3 id="Speaking-game"><a href="#Speaking-game" class="headerlink" title="Speaking game"></a>Speaking game</h3><p>Look at the illustrations on the next page and the list of discourse markers. In your group, take turns in rolling the die and saying the sentence and discourse marker that correspond to the number on the die. Once you use one of the discourse markers, tick it off from the list. Whoever ticks off all the discourse markers first, wins the game!</p>
<p>Remember, the first throw is to help you choose which sentence to say; the second throw is to help you choose which discourse marker to use. Follow the example your teacher gives you.</p>
<p>Topic: Being a YouTuber or a streamer is not believed to be a very stable profession.</p>
<ul>
<li>Accordingly</li>
<li>even so</li>
</ul>
<p>Topic: Many people argue that buying local products supports local communities.</p>
<ul>
<li>on the whole</li>
<li>nevertheless</li>
<li>on account of</li>
</ul>
<h3 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h3><ul>
<li>the butcher</li>
<li>gourmet burger</li>
<li>merchandise</li>
<li>on the contrary; quite the opposite&#x2F;reverse</li>
<li>in addition to; on top of</li>
<li>as it so happens; as a matter of fact</li>
<li>having said that; admittedly</li>
<li>even so; although</li>
<li>what’s more; on top of that</li>
<li>likewise; at the same time</li>
<li>by and large; on the whole; more or less</li>
<li>on account of; due to</li>
<li>accordingly; so</li>
<li>talking of…(change topic while referring to something recently said)</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 12 - 2023/10/25</title>
    <url>/2023/10/25/Learnship-12-2023-10-25/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-12-Presenting-a-Demo"><a href="#Business-Language-Coaching-Session-12-Presenting-a-Demo" class="headerlink" title="Business Language Coaching - Session 12 - Presenting a Demo"></a>Business Language Coaching - Session 12 - Presenting a Demo</h2><ul>
<li>discuss key elements of preparing and presenting a demo</li>
<li>learn the ABCD method for opening a presentation</li>
</ul>
<h3 id="Impromptu-presentation-practice"><a href="#Impromptu-presentation-practice" class="headerlink" title="Impromptu presentation practice"></a>Impromptu presentation practice</h3><p>Topic: A six-figure salary isn’t the only incentive to enter the  medical profession</p>
<ul>
<li>by and large</li>
<li>on the contrary</li>
<li>nevertheless&#x2F;even so</li>
</ul>
<h3 id="Starting-Point"><a href="#Starting-Point" class="headerlink" title="Starting Point"></a>Starting Point</h3><p>Reflecting on both your experience and what we’ve worked on so far in the course, what do you see as the essential elements to preparing and presenting an effective demo?</p>
<h3 id="Opening-and-closing"><a href="#Opening-and-closing" class="headerlink" title="Opening and closing"></a>Opening and closing</h3><blockquote>
<p>People tend to remember openers more than any other part of a presentation, except perhaps for the closing remarks. - Andrew Leigh, Maynard Leigh Associates</p>
</blockquote>
<blockquote>
<p>The secret is: have a good beginning, a good ending and keep them as close together as possible! - George Burns, actor and comedian</p>
</blockquote>
<h4 id="According-to-communication-expert-Andrew-Leigh-there-are-four-stages-to-opening-a-presentation-He-calls-these-the-A-B-C-and-D-of-openings-What-do-you-think-those-letters-stand-for"><a href="#According-to-communication-expert-Andrew-Leigh-there-are-four-stages-to-opening-a-presentation-He-calls-these-the-A-B-C-and-D-of-openings-What-do-you-think-those-letters-stand-for" class="headerlink" title="According to communication expert Andrew Leigh, there are four stages to opening a presentation. He calls these the A, B, C and D of openings. What do you think those letters stand for?"></a>According to communication expert Andrew Leigh, there are four stages to opening a presentation. He calls these the A, B, C and D of openings. What do you think those letters stand for?</h4><ol>
<li><p>Capture your audience’s interest instantly &#x3D; ATTENTION</p>
<p> In the  60 minutes it will take me to give this presentation. 7,000 US businesses will go bust.</p>
<p> Somebody once said: ‘A brand is a promise’. But what happens when that promise is broken?</p>
</li>
<li><p>Explain what they will gain from the talk &#x3D; BENEFIT</p>
<p> By end of this morning’s talk you’ll know how to say ‘No’ and feel good about it.</p>
<p> What I hope you’ll get from  this afternoon’s session is a clearer idea of how CRM works.</p>
</li>
<li><p>Show them you have the authority to speak &#x3D; CREDIBILITY</p>
<p> In my 15 years in Silicon Valley, I learned quite a bit about managing risk.</p>
<p> I was fortunate enough to be part of the team at VW that developed the original Golf GTI.</p>
</li>
<li><p>Give them a route map of the presentation &#x3D; DIRECTION</p>
<p> My presentation this afternoon is in three main parts. Feel free to interrupt as we go along.</p>
<p> Today we’re looking at options A and B. And I’ll be happy to take questions at the  end.</p>
</li>
</ol>
<h4 id="What-ways-are-there-of-capturing-your-audience’s-interest-right-at-the-start-of-a-talk-With-a-partner-complete-the-mind-map-using-the-phrases-in-the-boxes"><a href="#What-ways-are-there-of-capturing-your-audience’s-interest-right-at-the-start-of-a-talk-With-a-partner-complete-the-mind-map-using-the-phrases-in-the-boxes" class="headerlink" title="What ways are there of capturing your audience’s interest right at the start of a talk? With a partner complete  the mind map, using the phrases in the boxes."></a>What ways are there of capturing your audience’s interest right at the start of a talk? With a partner complete  the mind map, using the phrases in the boxes.</h4><ul>
<li><strong>a photograph or cartoon</strong></li>
<li><strong>a problem or puzzle</strong></li>
<li>somebody well-known, a video</li>
<li><strong>a surprising fact or statistic</strong></li>
<li>a news headline</li>
<li><strong>a question, a joke</strong></li>
<li>a popular myth</li>
<li>to raise their hand</li>
<li><strong>a story or anecdote</strong></li>
<li>to talk to a neighbor</li>
</ul>
<h3 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h3><ul>
<li>mini-presentation, opening to a demo, use AB and AD</li>
</ul>
<h2 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h2><ul>
<li>top ten highest earning categories</li>
<li>we thought we <strong>had</strong> fixed the problem</li>
<li>pessimistic</li>
<li>in a volatile way</li>
<li>persuade &lt;–&gt; dissuade<br>  E.g. She dissuaded me from becoming a doctor.</li>
<li>on* average</li>
<li>to go bust<br>  to fail, to go under</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 13 - 2023/10/31</title>
    <url>/2023/10/31/Learnship-13-2023-10-31/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-13-Closing-A-Presentation"><a href="#Business-Language-Coaching-Session-13-Closing-A-Presentation" class="headerlink" title="Business Language Coaching - Session 13 - Closing A Presentation"></a>Business Language Coaching - Session 13 - Closing A Presentation</h2><ul>
<li>review your presentation</li>
<li>compare some different communicative strategies for closing a presentation</li>
</ul>
<h3 id="Impromptu-presentation-practice"><a href="#Impromptu-presentation-practice" class="headerlink" title="Impromptu presentation practice"></a>Impromptu presentation practice</h3><p>Topic: Consumers are becoming increasingly aware of how their choices impact the environment</p>
<ul>
<li>having said that</li>
<li>as it so happens</li>
<li>generally speaking</li>
</ul>
<h3 id="Opening-and-closing"><a href="#Opening-and-closing" class="headerlink" title="Opening and closing"></a>Opening and closing</h3><blockquote>
<p>Try to make your last line or two truly eloquent, meaningful, touching, accurate and wise. Always memorize your last few lines. This is the time to deliver straight to them: eye to eye, person to person. Try to leave them with a thought that will continue to provide an echo after you stop. - Sonya Hamlin, Sonya Hamlin Communications</p>
</blockquote>
<p>Many of the techniques you can use to open a presentation will also work well to close one. But this is your last chance to get your message across. How far do you agree with what Harvard Law School presentations coach Sonya Hamlin has to say about closing a talk?</p>
<h4 id="Listen-to-the-closing-moments-of-four-presentations-and-number-the-techniques-in-the-order-you-hear-them"><a href="#Listen-to-the-closing-moments-of-four-presentations-and-number-the-techniques-in-the-order-you-hear-them" class="headerlink" title="Listen to the closing moments of four presentations and number the techniques in the order you hear them."></a>Listen to the closing moments of four presentations and number the techniques in the order you hear them.</h4><audio controls>
  <source src="/audio/session13_1.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<p>[x] call for action</p>
<p>Extract 1: Ladies and gentlemen, to take this project to the next stage we need your total commitment to the ideas behind it. But we need more than that. We need you to go back to your divisions and units and project teams and become champions for this new initiative, to spread the word and build confidence in the new direction we are about to take. Without you and your people we cannot make this strategy work. Without your actions, it’s all just words. We’re counting on you to make this happen … Thank you very much.</p>
<p>[x] dramatic summary</p>
<p>Extract 2: OK, I’m going to break off in a moment. So let’s take a look back at what we’ve spoken about this morning. We’ve looked at the five ways a product can fail. First, we looked at extension failures - trying to stretch your brand too far, as Harley Davidson did when it tried to make perfume! We also looked at PR failures and the R.J. Reynolds Joe Camel campaign, marketing cigarettes to young people. Then we looked at cultural failures and KFC in Hong Kong. We moved on to look at people failures at Planet Hollywood and Fashion Café. Finally, we looked at failures of ideas. And it is from these that we can learn the biggest lesson. The list of failed product ideas is almost endless. Kellogg’s Cereal Mates, Pepsi AM, the Barbie computer, Clairol’s ‘Touch of Yoghurt’ shampoo - all jokes in their respective industries. But behind each of these spectacular failures was the basis for a brilliant idea. To create future successes we have only to revisit the failures of the past … Thanks very much.</p>
<p>[x] heart-felt message</p>
<p>Extract 3: You know, I’ve been where you are now. I’ve sat in a six-by-six cubicle with a list of cold leads and telephone just waiting for me to pick it up and start calling. But in my day it was easier. I can remember when it was just a question of going out there and getting the business. It took dedication, indestructible self-confidence and a lot of hard work, but the business was there to be had. Today, you have to create the business. So, if you take just one thing from this talk today, take this. I used to be a salesman - and a very good one. But you’re more than that. You’re entrepreneurs, creating business each and every day. For you, the challenges and the opportunities are so much greater. Enjoy the risks you have to take, for with greater risks come greater rewards … Thank you very much.</p>
<p>[x] famous wise words</p>
<p>Extract 4: It was Ricardo Semler, the Brazilian CEO and author of the bestselling <em>Maverick!</em>, who said: ‘Democracy has yet to penetrate the workplace.’ He said:’There are companies which are prepared to change the way they work. They realize that nothing can be based on what used to be, that there is a better way. But 99% of companies are not ready. They are caught in a kind of industrial Jurassic Park.’ Well said. There are enough dinosaurs in this industry of ours already. If we want to be part of the one percent, we have to evolve. And today’s talk has been about how to speed up our evolution … Thank you.</p>
<h2 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h2><ul>
<li>preference towards* the two seasons</li>
<li>a peninsula</li>
<li>it’s pretty much enough</li>
<li>men are more overpowering*&#x2F;women are overpowered</li>
<li>to sort the garbage into</li>
<li>global warming</li>
<li>switch to using clean energy</li>
<li>to get* people’s attention</li>
<li>to have people in the palm of your hands</li>
<li>eloquent</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 14 - 2023/11/02</title>
    <url>/2023/11/02/Learnship-14-2023-11-02/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-14-Closing-A-Presentation-2"><a href="#Business-Language-Coaching-Session-14-Closing-A-Presentation-2" class="headerlink" title="Business Language Coaching - Session 14 - Closing A Presentation (2)"></a>Business Language Coaching - Session 14 - Closing A Presentation (2)</h2><ul>
<li>compare some different communicative strategies for closing a presentation</li>
<li>build a presentation close together</li>
</ul>
<h3 id="Impromptu-presentation-practice"><a href="#Impromptu-presentation-practice" class="headerlink" title="Impromptu presentation practice"></a>Impromptu presentation practice</h3><p>Topic: International charities are not always the most deserving of our donations.</p>
<ul>
<li>conversely</li>
<li>in addition to</li>
<li>with that in mind</li>
<li>nevertheless</li>
</ul>
<h3 id="Group-the-expressions-according-to-which-closing-technique-they-can-best-be-used-for"><a href="#Group-the-expressions-according-to-which-closing-technique-they-can-best-be-used-for" class="headerlink" title="Group the expressions according to which closing technique they can best be used for."></a>Group the expressions according to which closing technique they can best be used for.</h3><p>Summary:</p>
<ul>
<li>Let’s take a look back at what we’ve spoken about this morning.</li>
<li>Here, at a glance, are the main points I’ve made …</li>
<li>So, how to sum up?</li>
<li>In a nutshell, then …</li>
</ul>
<p>Wisdom:</p>
<ul>
<li>I’m reminded of the words of …</li>
<li>We have a saying where I come from …</li>
<li>In the famous words of …</li>
</ul>
<p>Action:</p>
<ul>
<li>Now let’s get out there and …!</li>
<li>I’m counting on you to …</li>
<li>So, next time you …, remember to …</li>
</ul>
<p>Emotion:</p>
<ul>
<li>If you take just one thing from this talk, take this …</li>
<li>In the end, this is what matters</li>
<li>So what does all this really mean for you - personally?</li>
</ul>
<h3 id="Task-Creating-a-close-for-one-of-your-demos"><a href="#Task-Creating-a-close-for-one-of-your-demos" class="headerlink" title="Task: Creating a close for one of your demos"></a>Task: Creating a close for one of your demos</h3><p>Using what you’ve learned about how to create a memorable presentation close, choose one of the approaches and brainstorm ideas for what you could say at the end of your demo.</p>
<ul>
<li>OK, so we’re going to save X each year and with that we can Y …</li>
<li>So, how to actually put this into practice? &#x2F; So, how do we get there?</li>
</ul>
<p>Summary -&gt; next steps</p>
<h2 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h2><ul>
<li>the snow season is much* longer</li>
<li>to be deserving of</li>
<li>conversely(no need for ‘but’)</li>
<li>at fault: responsible for</li>
<li>I have done* the categorizing</li>
<li>so, I’m looking forwarding to updating you …</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Learnship 15 - 2023/11/06</title>
    <url>/2023/11/06/Learnship-15-2023-11-06/</url>
    <content><![CDATA[<h2 id="Business-Language-Coaching-Session-15-Closing-A-Presentation-3"><a href="#Business-Language-Coaching-Session-15-Closing-A-Presentation-3" class="headerlink" title="Business Language Coaching - Session 15 - Closing A Presentation (3)"></a>Business Language Coaching - Session 15 - Closing A Presentation (3)</h2><ul>
<li>review your presentation close</li>
<li>work on developing a ‘smooth structure’ to your presentation</li>
</ul>
<h3 id="Warm-Up"><a href="#Warm-Up" class="headerlink" title="Warm-Up"></a>Warm-Up</h3><p>How far have you got with your draft presentation close? Would you like to run your ideas past me?</p>
<h3 id="Impromptu-presentation-practice"><a href="#Impromptu-presentation-practice" class="headerlink" title="Impromptu presentation practice"></a>Impromptu presentation practice</h3><p>Topic: Politicians are often at fault for a country’s misfortunes.</p>
<h3 id="Pronunciation"><a href="#Pronunciation" class="headerlink" title="Pronunciation"></a>Pronunciation</h3><ul>
<li>two categories of</li>
<li>as well<ul>
<li>a cup full</li>
<li>seagull</li>
</ul>
</li>
</ul>
<h3 id="Smooth-structure"><a href="#Smooth-structure" class="headerlink" title="Smooth structure"></a>Smooth structure</h3><blockquote>
<p>A presentation is very much like a journey. We need to explain: ‘Where are we going?’ And then along that journey as we move through it, we need to explain how we’re moving on. Are we making progress? And, finally, when we get to the end, we’ve got to close our presentation in a way that’s more engaging than ‘Any questions?’ So finding something that reiterates those key points at the end is absolutely essential. - Rob Geraghty, The Wow Factor</p>
</blockquote>
<ol>
<li><p>If a presentation is a kind of journey, then the ability to signpost that journey is clearly critical. Complete the ‘signpost language’ below:</p>
<ul>
<li>I’ am going to start off by …<ul>
<li>outlining our main goals today.</li>
<li>giving you a brief overview.</li>
<li>asking you all a question.</li>
</ul>
</li>
<li>Let’s Move on to the subject of …</li>
<li>OK, turning for a moment to the question of …</li>
<li>To return to my main point here.</li>
<li>Let’s expand on that a little.</li>
<li>To digress for a moment.</li>
<li>In closing, I’ll just …<ul>
<li>summarize the main points we’ve looked at.</li>
<li>ask you to remember one thing.</li>
<li>leave you with this …</li>
</ul>
</li>
<li>I’ll be coming on to TODO - creating anticipation</li>
<li>Going back to what I was saying earlier. - reinforcing</li>
</ul>
</li>
<li><p>Referring to points you made earlier in your presentation is a good way to show the coherence of your talk and strengthen your arguments. Mentioning what you’ll be talking about next can build anticipation, as long as you don’t get too much ahead of yourself! Decide whether the phrases below refer back or point forward and circle the appropriate arrow.</p>
<ol>
<li>Earlier we saw …           &lt;-</li>
<li>This leads us on to …      -&gt;</li>
<li>As you’ll recall …         &lt;-</li>
<li>Later we’ll see …          -&gt;</li>
<li>You’ll remember …          &lt;-</li>
<li>So, the next question is … -&gt;</li>
<li>As we discussed …          &lt;-</li>
<li>This brings us on to …     -&gt;</li>
<li>This goes back to …        &lt;-</li>
<li>By the end of this talk … -&gt;</li>
</ol>
</li>
<li><p>Being able to show a logical link between your main points is very important in a presentation. Link the presentation extracts below and label the ‘link phrases’ with the appropriate function.</p>
<ol>
<li>Turnover for Q3 is well up, <strong>thanks mostly to</strong> increased sales in Russia. <em>effect -&gt; cause</em></li>
<li>Avoiding risk is a mistake, <strong>especially</strong> in the long term. <em>point -&gt; specification</em></li>
<li>We need to constantly reassess <strong>in particular</strong> on what it is we do best. <em>point -&gt; specification</em></li>
<li>A rise in the price of oil <strong>has resulted in</strong> reduced profitability. <em>cause -&gt; effect</em></li>
<li>Demand is down 3% in Japan, <strong>whereas</strong> in the rest of Asia it’s tripled. <em>point -&gt; contrast</em></li>
<li>There’s no market for low quality, <strong>and what’s more</strong>, there never will be. <em>point -&gt; addition</em></li>
<li>The recent flood of cheap imports <strong>may lead to</strong> a price war. <em>cause -&gt; effect</em></li>
<li>We need to move fast <strong>so that</strong> we don’t lose our competitive lead. <em>action -&gt; purpose</em></li>
<li>Our share price has soared <strong>as a result of</strong> the merger announcement. <em>effect -&gt; cause</em></li>
<li>Now is the time to focus - <strong>in order to</strong> take advantage of this opportunity. <em>action -&gt; purpose</em></li>
<li>Our website’s receiving more hits, <strong>and yet</strong> these have not converted into sales. <em>point -&gt; contrast</em></li>
<li>It’s an enormous market; <strong>plus</strong>, it’s a growing one. <em>point -&gt; addition</em></li>
</ol>
</li>
</ol>
<h3 id="Vocabulary-Notes"><a href="#Vocabulary-Notes" class="headerlink" title="Vocabulary&#x2F;Notes"></a>Vocabulary&#x2F;Notes</h3><ul>
<li>not many* people there</li>
<li>in 2019 I could* always find a seat</li>
<li>at the click of a button - very easily, quickly</li>
<li>COMmunist(pr)</li>
<li>the economy(pr)</li>
<li>they should be accountable for</li>
<li>on the flip side&#x2F;on the other hand</li>
<li>they are trying to impose*</li>
<li>at* the end of the day</li>
<li>to participate in* such elections</li>
<li>as* time goes by</li>
<li>ultimately, essentially, basically, in a nutshell</li>
<li>President Biden (no definite article)</li>
<li>Ireland (no article)</li>
<li>a trip</li>
</ul>
]]></content>
      <tags>
        <tag>Learnship</tag>
      </tags>
  </entry>
  <entry>
    <title>Manage up</title>
    <url>/2022/12/09/Manage-up/</url>
    <content><![CDATA[<p>市面上有很多讲Manage Up的书，但大多都注重在针对manager的缺点进行manage up（比如如何应对撒手不管的老板，如何应对micro-management，之类的）。我工作这几年碰上的几个老板都还不错，但依然需要actively manage up才能让合作效率最大化——这里想分享一下如何manage up才可以更好地leverage自己的老板，即便是很优秀的老板，可能主要适用湾区互联网公司偏tech的部门 (research, engineer, data)</p>
<h3 id="首先定义本文context中的“好老板”："><a href="#首先定义本文context中的“好老板”：" class="headerlink" title="首先定义本文context中的“好老板”："></a>首先定义本文context中的“好老板”：</h3><p>核心特质：</p>
<ul>
<li><p>对下属在某些方面出众的能力会给予认可</p>
</li>
<li><p>对于下属的不足，客观地看待并给出中肯的建议，而不是踩&#x2F;PUA</p>
</li>
<li><p>相信Manager应该是“Support”而不是“Manage”</p>
</li>
<li><p>愿意用自己的影响力为下属争取利益</p>
</li>
<li><p>自己在Organization中的地位相对稳定&#x2F;巩固</p>
</li>
<li><p>管理带宽并没有很紧张（一般就是管理人数不要太多，比如超过20个）</p>
</li>
</ul>
<p>另外有一些属于有算加分，但不是必须的特质</p>
<ul>
<li><p>对技术细节有很好的把握</p>
</li>
<li><p>个人性格 alpha &gt; beta （alpha性格的manager一般而言在外面为下属争取利益更给力）</p>
</li>
</ul>
<p>假如你的老板大致符合上面的特质，那么希望下面的内容能够帮助你更好的manage up&#x2F;leverage你的老板， 从而让你的career更爽。</p>
<h3 id="Manage-Up-Tips"><a href="#Manage-Up-Tips" class="headerlink" title="Manage Up Tips"></a>Manage Up Tips</h3><ol>
<li>Constantly ask for feedbacks, 无论正面负面</li>
</ol>
<ul>
<li><p>你可以把你的老板想象成程序员debug时候的小黄鸭，是你的peer，是一门让你更好地了解自己的明镜。所以你老板的feedback应该对你是有指导作用的。</p>
</li>
<li><p>如果你的老板目前对你没有什么feedback，因为你问TA了，TA会更主动去为你收集feedback（从其他人那里），这也是让你得到更多建设性意见的机</p>
</li>
<li><p>可以提早address负面的feedback。Performance Review的时候你肯定不希望突然跑出来一条你完全没有context的负面feedback喷你对吧——所以尽早知道这些潜在的负面feedback，然后要么自己改进，要么跟manager argue说这个人是在搞事情，我希望你可以保护我的case</p>
</li>
<li><p>对于正面的feedback应该尽可能发扬光大——特别如果你是senior+的IC，你一般在Org里面是要有自己的人设的（你是TL路线还是Fixer路线还是Coding Machine路线，之类的），而你的Manager对你的强项的判断，对你的人设的建立影响很大。当然如果manager判断错了，你也得及早纠正</p>
</li>
</ul>
<ol start="2">
<li>争取信任</li>
</ol>
<p>你的老板是个好老板，但不等于老板对于下属都是一碗水端平的（真的一碗水端平很打击积极性），而是一般会给更信任的人更大的responsibility，来帮助TA lead&#x2F;support一下组里面的其他人；更重要的project（因为不能fail）；或者更大的自由度去做自己喜欢做的事情。所以赢得这种信任对于自己来说是有好处的。</p>
<p>这种信任的来源一般就是靠建立success track record —— 对于老板交代的项目稳定地能deliver，最好有时可以exceed老板心目中的expectation，TA对你的印象自然就会有加分。</p>
<p>BTW，别想着踩低别人提高自己——好的老板对于这种有毒的行为是会给负面评价的。</p>
<ol start="3">
<li>管理期望</li>
</ol>
<p>好的老板会事先跟你align好期望，而不是TA强加一个不可能完成的任务给你然后让你Fail。我们应该好好利用这个机会跟老板客观地讨论项目正确的expectation是什么样子，以及有哪些潜在的Blocker和Risk。以下是一个例子：</p>
<p>老板：项目XXX 可以在一个月以内做完么</p>
<p>我：理论上可行（别把话说死），但是属于非常乐观的情况。这个项目依赖于AAA，BBB，他们可能要延迟两周的时间。我们跑实验&#x2F;开发过程中很可能会遇上一些新的feedback需要解决，最好再预留两周的时间应对这些。两个月是一个比较稳妥的估计。如果在环节C&#x2F;D&#x2F;E出了幺蛾子，可能得延迟到三个月</p>
<p>老板：那我给你加人，能一个月做完么</p>
<p>我：（拿出人月神话）有一些关键部件加人没有用。其他一些简单的活加人可以加速——如果你额外派一个Engineer，我可以预计时间缩短到1.5月</p>
<p>老板：OK</p>
<p>以上就是一个商量expectation的例子。值得注意的是这个过程中你还可以名正言顺地找老板要资源帮你做事情。这里面还有另外一个principle就是expectation一般都是一个范围，而不是精确的一个点——我一般倾向于给保守的估计，因为under-promise + over-deliver总是比over-promise + under-deliver要好。</p>
<ol start="4">
<li>Ask for Recognition</li>
</ol>
<p>当你做了一些不错的工作，你应该尽可能借助老板来扩大你的影响力。你可以建议老板在TA自己的工作汇报中提到你的project作为一个highlight，或者让老板提名你的项目去整个Org的All-hand讲一下。你在和老板说这件事情的时候，可以把它frame成是在提高整个组的影响力和visibility（which is true），那么你的老板自然更愿意为你也为整个组谋求这种Recognition跟visibility。</p>
<ol start="5">
<li>就合作方式达成统一</li>
</ol>
<p>Manage Up的很多书都建议自己去适应老板的工作方式，即使跟自己的工作习惯差的很远。但是如果是个好老板而且你们之间相互信任，则可以开诚布公地讨论一些合作方式上的问题，比如我可以说：</p>
<ul>
<li><p>我不喜欢被ad-hoc ping，影响我干活，要当面聊事情咱们可以约一个会</p>
</li>
<li><p>我自己的决策框架是ABCD……（都列出来），如果你对我某个项目的决定有修改建议的话，那最后可以顺便指出我的决策框架中哪一步出了错，或者说出你的决策框架，我们在方法论上统一一下</p>
</li>
<li><p>…</p>
</li>
</ul>
<p>在这些方面如果可以统一的话，那么自己的生活会变爽很多，需要花在跟老板维护良好合作的关系上的精力也会变少，有更多时间可以做别的事情。</p>
<ol start="6">
<li>找老板要合适自己需求的项目</li>
</ol>
<p>当你跟老板有了足够多的信任之后，其实就可以慢慢主动跟老板提需求说自己想做什么项目。比如说：</p>
<ul>
<li><p>如果你想升职，那你就找老板要一个可以证明Level+1能力的项目</p>
</li>
<li><p>如果你想做一个特定的方向，那就跟老板说让TA帮忙留意一下有没有这样项</p>
</li>
<li><p>如果你生活最近比较忙，你也可以跟老板说想做一个WLB更好一点的项目</p>
</li>
</ul>
<p>关键是一定要主动提出来——好的老板分配项目的时候，除了考虑每个人的能力，也会考虑每个人的兴趣。如果你不说，老板就assume你无所谓，到时候可能分到一个你其实不喜欢的方向&#x2F;项目，那坑的就是自己了。你说了，有时候就算老板手里没有类似的项目，TA可能也会去找大老板要项目给你。</p>
]]></content>
      <categories>
        <category>Excerpt</category>
      </categories>
      <tags>
        <tag>Career</tag>
      </tags>
  </entry>
  <entry>
    <title>Stock market</title>
    <url>/2024/08/27/Stock-market/</url>
    <content><![CDATA[<h2 id="U-S-stock-market-predicted-by-public-account"><a href="#U-S-stock-market-predicted-by-public-account" class="headerlink" title="U.S. stock market predicted by public account"></a>U.S. stock market predicted by public account</h2><p>The daily report is mostly reflection on the yesterday’s market.</p>
<p>8&#x2F;27 Tuesday</p>
<p>No recommendation</p>
<p>8&#x2F;26 Monday</p>
<p>Wait for Nvidia report</p>
<ul>
<li>If up, then buy in until 9&#x2F;17</li>
<li>If down, then don’t buy until 9&#x2F;17</li>
</ul>
<p>8&#x2F;23 Friday</p>
<p>Don’t recommend buying in.</p>
<p>8&#x2F;22 Thursday</p>
<ul>
<li>Nasdaq key support is at 17700</li>
<li>saved a graph</li>
</ul>
<p>8&#x2F;21 Wednesday</p>
<ul>
<li>No important point</li>
</ul>
<p>8&#x2F;20 Tuesday</p>
<ul>
<li>Once recommended AMD at sell price 170(when?)</li>
</ul>
<p>8&#x2F;19 Monday</p>
<ul>
<li>Tuesday (8&#x2F;20) sell</li>
</ul>
<p>8&#x2F;16 Friday</p>
<ul>
<li>Next Wednesday is VIX cut day, every third Wednesday</li>
</ul>
<p>8&#x2F;15 Thursday</p>
<ul>
<li>Previously set Nvidia price at 120(when?)</li>
<li>Spare Nvidia to MSFT, AMD and QCOM</li>
<li>Don’t touch GOOG and TSLA</li>
</ul>
<p>8&#x2F;14 Wednesday</p>
<ul>
<li>Recently MSFT, META and NVDA</li>
</ul>
<p>8&#x2F;13 Tuesday</p>
<ul>
<li>Last Friday NVDA</li>
</ul>
<p>8&#x2F;12 Monday</p>
<ul>
<li>Buy META, NVDA and MSFT</li>
</ul>
]]></content>
      <tags>
        <tag>Finance</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce notes</title>
    <url>/2024/10/15/MapReduce-notes/</url>
    <content><![CDATA[<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>3.3 Fault Tolerance</p>
<p>However, the output for a different reduce task R2 may correspond to the output for R2 produced by a different sequential execution of the non-deterministic program.</p>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>Paper</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/01/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>全灭</title>
    <url>/2019/02/06/%E5%85%A8%E7%81%AD/</url>
    <content><![CDATA[<h3 id="第四章-新澳洲-第一百二十八节"><a href="#第四章-新澳洲-第一百二十八节" class="headerlink" title="第四章 新澳洲 第一百二十八节"></a>第四章 新澳洲 第一百二十八节</h3><p>　　他赶紧又冲到西面一看，大群的敌人已经拥挤到了壕沟边，边往壕沟里丢东西边在上面架起了梯子。这时候另外二个人也赶到了，四个人同时向西面的敌人开火。</p>
<p>　　他们一枪接一枪的射击着，一阵弹雨打倒了十几个土匪，后面的土匪转身逃走了。</p>
<p>　　哨子又响了起来，所有的人丢下打得发烫的步枪往另一边跑去。能够勉强爬出来的士兵在帮忙装弹。这半个时是王五有生以来最忙碌的半小时。跑步、射击、跑步、射击，中士的哨子尖厉的吹着，似乎永远也不会停下来。把所有人累得气喘吁吁，几乎要倒地不起了。最后敌人还是退了下去。</p>
<p>　　“子弹还有多少？”王五问中士。</p>
<p>　　“子弹很多，还有2000多发。”中士说，“枪支也很多，就是没有人用。”</p>
<p>　　“不要节约子弹，敌人上来就打，不能让他们靠近土堤放箭。我们的人太宝贵了。”</p>
<p>　　现在，他们只剩下24个人了，一部分病员相继死去，余下的生命垂危。在战斗中又阵亡了2个。</p>
<p>　　能拿起枪战斗的人，加上几乎没用过步枪的刘槟在内，只有7人了。</p>
<p>　　幸存者被激烈的战斗搞得疲惫不堪，再这样打一天，他们就全军覆没了。</p>
<p>　　“把死人都埋到营地里。”王五命令着，“他们的随身东西收集起来另外埋，要埋藏得好些。”</p>
<p>　　他回到指挥所帐篷里，把工作队的文件、手册、地图之类的东西，还有全体工作队员的证件一股脑的拿到外面的野战灶上，划着一根火柴把这些点着。</p>
<p>　　接着他把身上的证件、流通券之类的东西也丢了进去。炉火熊熊，黑色的纸灰从炉子里飞了出来。</p>
<p>　　用不了多久，我的脑袋就要砍下来了。王五凝视着火光点着了一根烟，想着：我就要死了。</p>
<p>　　除非出现奇迹，否则他们这支小小的队伍的覆没是注定了的事情。</p>
<p>　　他想起了自己的老婆、孩子，想到了自己家里的土地和房屋，他是户富农。道禄村消灭了土匪之后，没了土匪的敲诈勒索，他放手大干起来把家业经营的有声有色。成了当地的农业示范户。天地会还专门找过他，要他入会。而他也跃跃欲试，准备入会之后使用“澳洲农法”，大干一场。</p>
<p>　　王五知道他死后肯定会风风光光的在礼兵的护送下躺在炮车上被安葬到翠岗，当然还有鸣枪和送葬仪式；会付给他的老婆孩子还有父母大笔的阵亡抚恤，他的家眷会一直受到澳洲人的照顾：不会有贪婪的亲戚、族人和村里人来谋夺他的家产，没有人敢欺负他的老婆和孩子，因为他们是“遗族”——穿越帝国的民事体系里，这是一个崇高的称呼。只有那些阵亡者的家眷才能享受这个称呼和随之而来的优待。</p>
<p>　　这些他都知道的——他死后不会有牵挂。</p>
<p>　　他回到充当临时救护所的帐篷里——里面空气污浊，充满了死亡的气味。刘槟蹲在一个刚刚死去的士兵身边，双手掩住面孔正在抽泣。</p>
<p>　　王五很想说点什么安慰下她——但是他什么也说不出来。他不像杜首长和董首长那样任何事都能说出一大堆非常有道理的话来。</p>
<p>　　他想了半天又走了出去。中士正在擦着步枪，他身边放着成堆的步枪，每一支步枪他都仔细的擦了一遍。</p>
<p>　　“一会还得用呢。”他说，“枪不擦干净可不行。”</p>
<p>　　王五说：“要是能有手榴弹就好了。”</p>
<p>　　“听说全在澄迈用光了。现在只给琼山方向的野战军配发。”中士说，“我们营当初去澄迈打仗的时候每人都发了二个。真是好使！丢出一个炸倒一大片——真正的‘掌心雷’！”</p>
<p>　　“多余的东西处理了吗？”</p>
<p>　　“我们只是半排，没有文书之类的东西。”中士淡然地说道，“至于军人证，我已经全部收上了烧掉了。只有这个——”他指着自己的胸前的二个章。</p>
<p>　　这是颁发不久的“澄迈会战胜利纪念章”和“第一次反围剿胜利纪念章”。</p>
<p>　　“这东西土匪肯定不要，我就留着了。”</p>
<p>　　“埋起来留给家里人吧。总是个念想。”</p>
<p>　　“我没有家里人。”中士说着苦涩的一笑，“来不及娶老婆——也幸亏没娶老婆。”</p>
<p>　　说着话的时候，瞭望台上响起来哨子声响了起来：“敌人在列队了！”</p>
<p>　　战斗又一次爆发了。</p>
<p>　　下午土匪们们到村里，把村民们的茅草屋顶全揭了下来，又收割了大量的枯柴野草，一捆一捆的丢在上风的地方点着。潮湿的稻草冒出了浓烈的烟雾。向营地飘去。</p>
<p>　　一开始烟雾的威胁并不大——距离远烟雾没有飘到营地就被大风吹散，但是视线毕竟受到了阻碍。一批又一批土匪们借着烟雾的掩护，逐段逐段的推进，不断的把燃烧的茅草堆向土堤这边堆积过来。最后几乎就在壕沟边点起了柴草堆。</p>
<p>　　王五等人只能盲目的向浓烟里的人群尽可能的快速开枪，但是无法阻碍他们的放烟行动。最后整个营地笼罩的一片呛人的浓烟里面——队员和士兵都戴上了浸过水的纱布口罩。勉强的能够支撑。</p>
<p>　　土匪们终于集中所有兵力一起猛冲了过来。他们在烟雾中前进，自己也被熏得吃不消，但是土匪人多，终于在浓烟的掩护下把壕沟填没了一段，爬上了土堤。</p>
<p>　　土匪们的脸上都蒙着沾水的布片。眨巴着被烟雾刺激的睁不开的眼睛，盲目的挥动着刀枪。一边发出剧烈的咳嗽一边冲了上来。</p>
<p>　　弓箭乱七八糟的朝着营地里乱射，所有能够动弹的人全部退到了西边的土堤的战壕里。王五看了看身边的人只剩下3个人了，</p>
<p>　　中士已经在土堤上被土匪砍下了脑袋。他步枪被一个土匪拿在手里挥舞着。</p>
<p>　　战壕里还有十多支步枪。这些步枪不能落到土匪手里！</p>
<p>　　“大家把用不着抢全部砸烂。”王五说着把自己的短管步枪往石头上狠狠的一摔，枪管和枪托脱离了关系，零件飞散开来。</p>
<p>　　其他人也纷纷把手里多余的枪支砸烂。接着大家把所有的弹药堆到土堤下，然后往上面丢了一个火把。</p>
<p>　　铜火帽犹如鞭炮一般噼里啪啦的剧烈的爆炸开了，火药立刻爆炸了，一千多发米尼弹在火药的推动下犹如施放了一个巨大的烟花，土匪们发出一片惨叫声。</p>
<p>　　王五捡起一支士兵用的长身管米尼步枪，上好了刺刀。其他人也跟着上了刺刀。在他跃出战壕准备拼命的一瞬间，他看到蹲在地上发抖的刘槟举起刺刀，往自己喉咙上猛得刺了下去。</p>
<p>　　王五大吼一声：“杀！”这是他最后的一句话。</p>
<p>　　刘易晓这些日子忙得不可开交。派出去的五六个工作队都已经展开了工作，从临高延伸过来的公路也要进入备料备工的状态。最要紧的是必须赶快准备征粮丈田的工作。</p>
<p>　　儋州千户所拒绝投降，于是余志潜只好发动了一次对千户所的远征。很快就迫使各处卫所的军户投降接受整编。</p>
<p>　　按照政策，逮捕了一批骑在军户头上作威作福的千户、百户、小旗——充作免费劳动力。对普通军户进行了整编。军户的屯田比较集中，是最适合进行大规模经营性种植的良好场所，军户过去是大明的官佃，现在做帝国的国营农场农业工人，也很说得过去。</p>
<p>　　叶雨茗已经从临高派出了“天地会”的工作队，准备对儋州千户所的屯田</p>
<p>　　“千户所城还有各处营寨内的建筑虽然有些陈旧破落，但是结构大体还算完好，修缮起来不用费很大成本，将来都可以利用——总比竹蔑泥巴墙稻草顶的破房子好得多。”余志潜大肆吹嘘自己这次出征的“赫赫战果”。</p>
<p>　　他还在千户所的卫所城和各营寨各留下从一个排到一个连不等的部队，负责对军户们进行改编训练，儋州是“镇黎”的重镇，穿越集团在没有完全统一黎区之前，对黎区依然要做到必须的威慑。所以军户不能简单的撤销了事，还要保证他们继续保持一定的武力。</p>
<p>　　刘易晓表示担忧：“没有经过政治改造，直接组成民兵掌握了武装，太不可靠了。”</p>
<p>　　“没问题，改造慢慢来。现在得先‘镇黎’。”余志潜告诉刘易晓，从投降的一个军户小旗口中知道，自从他们在澄迈打败官军之后，黎区已经有了一些不稳的迹象。有的侗主正在串联，似乎有所企图。</p>
<p>　　“这里到夏末秋初的时候，黎人会小规模的略取汉区村子，所以每到这个时候各处都要‘防黎’。”</p>
<p>　　官军大溃败的消息，使得自万历末年黎人大暴动之后平静了数十年的黎区又开始涌动起暗潮来。黎人不是善男信女，对长期汉黎之间有尖锐矛盾的琼州来说，官军的大败给了他们极好的机会。</p>
<p>　　“通报里说临高的黎人没有异动嘛，而且在黎区开设贸易所的事情也谈好了——”</p>
]]></content>
      <categories>
        <category>Excerpt</category>
      </categories>
      <tags>
        <tag>临高启明</tag>
      </tags>
  </entry>
  <entry>
    <title>胜利阅兵</title>
    <url>/2019/02/13/%E8%83%9C%E5%88%A9%E9%98%85%E5%85%B5/</url>
    <content><![CDATA[<h3 id="第四章-新澳洲-第一百零八节"><a href="#第四章-新澳洲-第一百零八节" class="headerlink" title="第四章 新澳洲 第一百零八节"></a>第四章 新澳洲 第一百零八节</h3><p>　　宗教办在澄迈城下举行的“慰灵法会”取得了很大的成功。元老院认为人已经杀得够多了，用不着再故弄玄虚的折腾死人。所以不管是斩首示众还是把尸体挂在树上从澄迈一路挂到琼山，乃至古风盎然的“京观”都没搞。俘虏和民工们在靠近大海的地方设立了若干个大火葬堆，焚化了尸体，又修筑了几个考究的集体墓穴将骨灰掩埋，又立了“阵亡者纪念碑”。教会、新道教和就地征发的和尚在当地连做了三天法会，累得吴石芒一干人歪歪扭扭，而且焚烧尸体当天的臭味更是让他们好几天没有食欲。</p>
<p>　　死者的仪式是做给活人看的，这次大规模的宗教仪式之后，不仅整个澄迈，包括琼山、定安、文昌等地的百姓也对“髡贼”有了极大的改观，甚至在大陆上，髡贼的仁义之名也传播了出去。</p>
<p>　　大家议论纷纷，说伏波军不但收敛敌方的尸体安葬，还举办法会超度亡魂，立碑纪念，显然不是暴虐无礼之人。</p>
<p>　　伏波军的阵亡者包括失踪人员总计有一百六十一人。原本何影想就地制造棺木然后运回翠岗去安葬。但是刘牧州认为还是就地火化之后将骨灰瓮送回安葬比较好。</p>
<p>　　“这不大好。”何影对当地的民俗有过调查，“土葬的习惯根深蒂固，我们一下改成火葬……”</p>
<p>　　“火葬制度要从现在开始推广起来。”刘牧州说，“这次战争就是一个契机。如果我们要照顾所有的社会旧制度，我们就什么也不用干了。先从我们自己人开始吧！”</p>
<p>　　在为伏波军阵亡者举行的仪式上，留在澄迈的一个步兵营列阵齐射排枪三次，随后十二门火炮鸣炮三次。军旗垂地悼念，一切十分庄严肃穆，最后由军乐队演奏《与我同在》。即使是最傲慢的元老军官们，此时也为他们一贯视作炮灰的土著士兵的死流下了眼泪。</p>
<p>　　军队在悼念阵亡者的仪式上得到了尊严，这尊严不仅仅来自官兵，也来自那些教授给他们全新的杀人武器和战术的人。军队并非简单的工具，它是由人组成的。</p>
<p>　　何鸣心想，但愿元老们都能明白这个道理。他注视着下海边熊熊燃烧的火堆，黑烟冲天，加入大量的樟木和柏木的柴火使得空气中的气味不不像前几天那样熏人欲呕。海风又不时驱散烟雾，使得空气要好很多。他悄悄的问身边的副官：“车准备好了没有？”</p>
<p>　　“汽车已经来了。”副官小声说。</p>
<p>　　仪式一结束他就要回临高去，参加下一步的军事行动计划的拟定。首先是军队推进到琼山、文昌、定安一线的军事行动，然后是组建各县警备连的事宜。</p>
<p>　　仪式结束之后，他立刻回到了临时指挥部里。留在澄迈的第6步兵营营长朱全兴正在等他。</p>
<p>　　“我要马上赶回马袅去。”何鸣简单地说道，“我走之后。澄迈工作队这几天就到，你要尽快帮助工作队在澄迈周围建立起我们的威权，特别是治安整肃。”</p>
<p>　　“是，我一定全力做到。”</p>
<p>　　“你一定要出全力，但是是‘配合’做到。”何鸣着重指出了这点，“一定要分清楚主次。”</p>
<p>　　朱全兴朗声道：“是，我明白！”</p>
<p>　　“你明白就好。这次部队回防，只留下了你的6营，没得休整又要投入治安作战，战士们可能会有点怨言。你要多注意部队的动向。”</p>
<p>　　“魏主任说赴澄迈的慰问团很快就要来了。评功也开始了——这会吸引住士兵们的很大一部分注意力的。”</p>
<p>　　吉普车在坑坑洼洼的驿路上跑着，单道谦的俘虏施工队的公路还没有修到澄迈。外面下起了雨，雨水在风挡玻璃上狂泻奔流，风又把雨水旋进了车内。把他的军服打湿了。何鸣一个人坐在吉普车的后座上。雨点在车棚上的溅落声密集的几乎听不清了。他透过窗户看了看外面，流淌的雨水使得外面的景物一片模糊。他对开车的司机说：“开慢点！”</p>
<p>　　“是，司令员同志。”</p>
<p>　　他闭起了眼睛，看似在闭目养神，实则内心有点波动。</p>
<p>　　几天来已经从马袅传来了不好的消息：风闻有元老对他的作战行动有异议，认为劳师糜饷，战果却不尽如人意，要在元老院发动对他的弹劾。这个传闻，使得已经回到的马袅基地的元老军官们起了很大的议论。很多人起了怨言。</p>
<p>　　何鸣并不在意这样的言论——仗毕竟已经打赢了，争论的无非是成果的大小。他个人对自己的荣誉问题并非十分看重，毕竟他已经是陆军人民委员，再升迁也不可能升到更高的位置上了。而且以他相信自己的资历威望和平日里的为人处事足够挫败任何对他的不良意图。</p>
<p>　　军队现在的首要任务是迅速对全岛实施占领，他想，必须马上开始行动以充分利用这次大捷的余威。想到这里，他把刚才的一点不快丢到脑后。想着回到马袅之后要做些什么，派遣哪些人去组织警备连。</p>
<p>　　兴建中的陆军基地一片龙腾虎跃的情景，从澄迈返回来的部队经过几天的休整已经恢复了日常的训练。官兵们打了一个大胜仗，士气高昂。</p>
<p>　　今天他们没有正式的出操，而是下达了一条命令“整理军容！”</p>
<p>　　大家立刻知道，要有大人物从百仞过来检阅市场军队了。</p>
<p>　　于是所有的人都忙了起来。打扫营房卫生，擦玻璃，清理操场……然后是无穷无尽的个人内务。擦拭枪支武器；洗刷缝补修缮旗帜的——旗帜虽然是战前才制做的，但是一场大战之后早就破损不堪了；军官和士官们将自己的军刀擦亮，营里的皮匠和铁匠忙得不可开交，他们修缮军刀、鞋子和各种装具。</p>
<p>　　连参战的民兵和民伕也在奉命收拾自己的仪容外表。理发、剃须，洗澡，洗涤缝补衣服，民兵和民伕受宠若惊——他们原以为自己只是去干活的人，没料到元老首长们也要“检阅”他们。大家都在传说，说检阅之后会发给丰厚的奖励。</p>
<p>　　杨增在自己的宿舍里理了发，剃了胡子。换上了全新的制服。这制服是他今年新领的，一直没舍得穿。这次检阅的时候他就拿了出来。出征时候穿的衣服已经破烂不堪了，他已经把旧制服给后勤处，领了新的被服券。很多人都领有了新的制服，他却不着急——因为他听营长无意中说过，很快就要换新款式的制服了——要比现在的考究。</p>
<p>　　勤务兵魏大荣正在给他收拾武装带和作战靴。魏大荣是个孩子模样的年轻人。他坐在小板凳上，仔细的给靴子涂油，还用碎瓦片的碾成的粉末打磨武装带上的金属件，使之看上去闪闪发亮。</p>
<p>　　“连长！不知道谁会来检阅我们？”</p>
<p>　　“不知道，大约是执委会的人吧。”杨增身为陆军军官，对穿越集团的政体了解的多一些，“我想大概会有文首长。”</p>
<p>　　“文首长是新的皇上吗？”</p>
<p>　　“不是——”杨增漫不经心地笑了，“当然不是，澳洲人的皇上在澳洲呢，文首长的头衔叫‘主席’。”</p>
<p>　　“主席是什么官？知府？参将？”</p>
<p>　　杨增想不出应该是多大的官。不过他是盗匪出身，在大陆上存身不住才逃到海南来得，见识比一般人多些，“我想大约是大学士之类吧。”</p>
<p>　　魏大荣还是不大满意，因为他不知道大学士是什么。</p>
<p>　　“……好比宰相！”杨增终于想出了一个合适的解释。</p>
<p>　　“是这样。”勤务兵算是稍微明白了点，“你的靴子好了。”</p>
<p>　　杨增穿上靴子，束好武装带，勤务兵给他挂上指挥刀。军官宿舍有穿衣镜，他在镜子里仔细地看了下自己，感觉非常的威武。想到当年自己在苟二庄园里拿着火绳枪看守寨门才不过是三年前的事情，如今却觉得和上辈子事情一样遥远。</p>
<p>　　“挂星星吧。”魏大荣拿来一个木盒子。</p>
<p>　　盒子里装得是新近的颁发的勋章标志。为了增强军人和工作人员的荣誉感，元老院进行了招标制订勋章体系的工作。按照这个体系制作补发了一批勋章和勋略。</p>
<p>　　杨增得到的勋章比较简单：国防服役章——军种标志下飞翔的龙。这是授予在军队按期服役，听从命令，服从指挥，忠诚而完美的完成服役任务的军事人员的，差不多服役满一年的人都能得到。然后是晋升尉官纪念章的勋略：青铜底板上一颗银星。然后是优秀服役嘉奖章：用于嘉奖战斗和训练中的优秀成就，不能获得三等军功章的较小功勋者克获得嘉奖章。勋略为红色底板上的军种暗花。</p>
<p>　　……</p>
<p>　　“连长，你的勋章真多。”看着挂在胸前的勋略，魏大荣羡慕的说。他只有一个入伍培训章而已，论军衔才是二等兵。</p>
<p>　　“都是一般的纪念章。”杨增说，“只要好好干你也能有得了。”在他眼里这些获得勋章里最有价值的是平定临高纪念章，虽然只是纪念章，却代表了资历——只有那些最早为澳洲人服役作战的军人才有可能得到：参加过攻占苟家庄和临高剿匪战斗的人员。杨增是前一场战斗中的俘虏，不过他很快就成了后一场战斗的战士了。</p>
<p>　　不过杨增知道，他很快就要获得一枚真正的不同反响的勋章了。营长已经和他谈过话，将他推荐为二等军功获得者。</p>
<p>　　推荐之后若无异议就肯定能获得了，而且这次获得军功章意义不同反响。是在全军胜利大检阅之后授予的，荣誉远远高于平日里的二等军功。</p>
<p>　　当了连长，有了军功，然后就是一步一步地往上爬了。他想到了自己的营长——也许用不了多久，自己也会当营长了。</p>
<p>　　杨增把手里的指挥刀链子弄得哗啦哗啦的，有些心花怒放，他看着自己的轻步兵绶带，把它小心的拉了拉整齐。接着又把军官左轮枪抽出来仔细地看了看插回枪套里。</p>
<p>　　“怎么样？”</p>
<p>　　“您的模样真威武！”魏大荣由衷的称赞道。</p>
<p>　　“嗯。”杨增再看了一遍自己的模样，“告诉连军士长，下午我要检查营房卫生！叫他一定要打扫干净。”</p>
<p>　　第二天，整个马袅大营就好像一个全新出炉的硬币般闪闪发亮一尘不染。静候着慰问团的到来。</p>
<p>　　五个营在马袅基地的大操场上列队。随着军号的声音，一个一个的连队，刺刀和招展的军旗运动着，按照军官们的命令按照一定的间隔列成队形。每个连队前都有新缝制的军旗，旗幡在风中展示着各式各样奇怪的图案。炮兵的炮车，连车轮都擦得干干净净，整齐的排列的，一门门打磨的发亮的大炮展开着。所有的人都穿着洗刷修饰一新的制服，士兵们的武装带和绑腿束得紧得不能再紧。军官们佩戴着全部的勋章，戴着新发的白手套，指挥刀的刀鞘上的铜饰件擦得雪亮。</p>
<p>　　每个军官和士兵都觉得自己的渺小，觉得自己是这人海中的沙粒而已。同时又感觉到自己力量，感到自己是这个威力无比的巨大整体中的一员。</p>
<p>　　何鸣、东门吹雨、魏爱文、潘达等人眺望着远处，按照电话里的通知，慰问团将在上午十点抵达马袅。</p>
<p>　　“来了，来了。”随着一个传令兵的赶来，一阵低低的私语声传了开来。</p>
<p>　　慰问团的成员们乘坐的农用车离得远远得就停了下来，在场地上官兵们看到一群人向这里走来。</p>
<p>　　何鸣知道，来的是执委会主席文德嗣，中央政务院总理马千瞩，制造总监展无涯和一群人民委员和部长们。整个慰问团的级别非常之高。</p>
<p>　　他看到文德嗣等人已经到了离开第一个方阵不到十米的检阅台，他立刻迎了上去。这时候，东门吹雨在他身后发出“立正！”的口令声。</p>
<p>　　如同雨点洒过，方阵发出一声整齐的声音，犹如波浪卷过。</p>
<p>　　何鸣走到文德嗣面前，敬了个礼：</p>
<p>　　“元老院代表！”何鸣大声地吼道，“请您检阅部队！野战军司令员何鸣！”</p>
<p>　　文德嗣举手还礼。然后在他的陪同下走到了第一营的侧翼，一营的号手吹奏起进行曲来。文德嗣微微举手示意，然后向着营长和士兵们说了几句勉励慰问的话。第1步兵营的大声的呼喊起来：“为元老院人民服务！”接着是有节奏的呼喊声，连续的，犹如巨浪一般，从演习场的一端传到另外一端。</p>
<p>　　杨增站在自己的连队前面。他从来没有这样的骄傲和自豪过。他能感觉到这个队伍里每个人所感到的同样情绪——忘我精神，骄傲地感到自己集体的力量强大，对于创建这支军队的人物的热烈的崇拜。</p>
<p>　　元老们走到杨增的连队前，王洛宾似乎记得眼前这个军官——当初他是最好的米尼步枪射手。</p>
<p>　　“这是——”</p>
<p>　　“杨增。”何鸣介绍道，“步兵第1营的轻步兵连连长。”</p>
<p>　　“你的枪法很准啊！”</p>
<p>　　“是！”他紧张的几乎说不出话来了。</p>
<p>　　文德嗣问：“他有立功吗？”</p>
<p>　　“评了二等功。”</p>
<p>　　“真是一条好汉。”文德嗣说了一句，慢慢的又往前走去了。</p>
<p>　　杨增感到一种巨大的幸福感笼罩在他的心头，让他头晕眼花。此时就算现在要他一个人端着步枪去冲击上千的敌人，他也会毫不犹豫的去做。</p>
<p>　　随着文德嗣等人的行进，欢呼声从一个连队到一个连队，军号吹奏着，军鼓敲打着。声音越来越响亮，汇合成震耳欲聋的呼吼声。</p>
<p>　　士兵们看着首长们，许多人是第一次在近距离地看到半神一般的首长们，他们长得都很高大，穿着最普通的制服，没有武装带，没有靴子，也没有勋章和任何的荣誉标记。他们是这样的简朴，脸上带着严肃或者宽容的神情，向官兵们挥手点头致意。士兵们被一种发自心底的爱戴攥在了心：首长们掌握着无穷无尽的财富，拥有着鬼神之力，但是他们的仪表穿着却不像一个官老爷，甚至不像一个有钱人。这种简朴和平易的力量使得士兵们一个个感到狂喜和亲切，不由自主的发出一阵阵愈来愈响亮的欢呼声。</p>
<p>　　接着元老们来到了民兵和民伕的队列前，这里的队列虽然没有军队整齐，但是爱戴之情依然使得他们发出毫不逊色的巨大欢呼声。</p>
<p>　　文德嗣站住了脚步，向无数个在他看来几乎没有任何区别的黝黑的农夫面孔举手致意：</p>
<p>　　“同志们辛苦了！”</p>
<p>　　演习场上爆发出一阵震耳欲聋的欢呼，这欢呼声不如军队那么整齐，却包含了无与伦比的热情。许多人在队伍中失声痛哭起来——这是他们几十年的人生中从来没有得到过的尊重。而不仅仅是作为一个百姓被迫来服苦役。</p>
<p>　　文德嗣最后说：“你们大家，每一位同志，我代表元老院，代表全体人民，诚心诚意的为你们所做的一切表示感谢。”</p>
<p>　　他看着演习场上的人们：</p>
<p>　　“你们获得了元老院和人民授予你们的军旗，你们无愧于军旗的荣誉和使命。”</p>
]]></content>
      <categories>
        <category>Excerpt</category>
      </categories>
      <tags>
        <tag>临高启明</tag>
      </tags>
  </entry>
  <entry>
    <title>芳草地参观记——球赛</title>
    <url>/2019/02/06/%E8%8A%B3%E8%8D%89%E5%9C%B0%E5%8F%82%E8%A7%82%E8%AE%B0%E2%80%94%E2%80%94%E7%90%83%E8%B5%9B/</url>
    <content><![CDATA[<h3 id="第六章-纷争-第一百一十四节"><a href="#第六章-纷争-第一百一十四节" class="headerlink" title="第六章 纷争 第一百一十四节"></a>第六章 纷争 第一百一十四节</h3><p>　　芳草地的体育场是临高第二大体育场——仅次于元老院当初修来阅兵办庆典的体育场。不过设施就简陋得多了。没有宏伟的主席台，也没有像样的看台：主席台和看台是铁架木板的简易建筑。在遇到校内大型的体育赛事的时候，学生们都是要自带板凳到体育场上来得。</p>
<p>　　芳草地的体育场的利用率很高，二百个内务班的体育课排的满满的，早晚八节课，没有一节课体育场上不是同时有好几个班级在进行运动的。放学之后又缺少人工照明手段，所以此类比赛只有在春季之后白天渐长的时候才能安排。</p>
<p>　　元老院引进的橄榄球赛是英国式橄榄球，相对来说对抗性不强，不需要复杂的护具，配以简单的藤制头盔和棉制护膝也能凑合了。</p>
<p>　　橄榄球赛因为对抗性强，节奏紧张，颇有观赏性，又有强烈的团队合计的精神在内，而且在战术安排上更为复杂，对秉承“军国主义”思路的元老院来说是一项十分合适的体育项目。因而从盐场村开始就推广普及这项比赛。几年下来，在临高的归化民中已经渐渐形成了简陋的赛事体系。各个工厂机关、农庄、部队都有了业余队伍，芳草地学园不但自身有代表队，而且在学园内部也有分年龄层的学校联赛。</p>
<p>　　比赛是在午后一点，黄禀坤要去观赛，参观团除了刘大霖下午要休憩片刻之外，其他人听说有澳洲人的球戏可看都纷纷表示要同去——肯定比在校园内听根本听不懂的课程来得有趣多了。</p>
<p>　　本地缙绅愿意来观摩，董亦直当然是欢迎之极，对于这种可以扩散影响的事情，那真得是多多益善。</p>
<p>　　此刻，观摩团的人已经坐到了体育场旁的看台上——比赛并不组织学生观摩，学习压力又大，所以场内只有三分之一的看台有人，还有些散兵游勇稀稀拉拉的分布在场地四周。</p>
<p>　　因为不是正式的比赛，因而也不设专门的贵宾席，当然也没有人负责接待工作。还是在董元老的亲自过问下，才把参观团引领到距离场地最近的一排看台座位上。</p>
<p>　　一行穿着长衫，留着发髻的缙绅文人坐在看台上，在董元老看来有一种强烈的不适感。</p>
<p>　　果然长衫和发髻和元老院不般配。他暗暗嘀咕着。</p>
<p>　　正当他发散性的思索到了剃发令的时候，一个学生跑过来报告比赛已经准备好了，只等他宣布开始了。</p>
<p>　　董亦直不但是比赛的主持人，还是裁判，实际上他还是两队的教练——由于元老们中间并没有人真正玩过橄榄球的，更别说还是英式的了。只能看了书再当教练而已。董元老这个只会踢几脚足球的人也靠了书本和少量的视频资料就勉强上阵了。</p>
<p>　　第一次开球之后，茉莉轩的士子们坐在看台上呆呆的望着球场——他们虽然看不懂场上的变化，当时大概明白就是两伙人抢一个球，然后拼命往门里踢。这种粗野的“球戏”让士子们目瞪口呆。他们中有的读书广博一点的，或者去过广州之类的大地方的，自然就把这种球戏和蹴鞠联系在一起。</p>
<p>　　蹴鞠虽然在唐宋最为繁荣，但是明代在市井百姓中亦很流行，当时此时蹴鞠已经沦为一种表演性的“戏”或者自娱自乐的活动，失去了宋代以前两队对抗竞争的内容，甚至名气也不大好——专业蹴鞠组织“圆社”就是市井帮闲的角色，大多为大户人家和高级妓院服务。</p>
<p>　　类似黄秉坤这样的“耕读世家”的良家子弟，甚至连蹴鞠这样的活动看都不看的，完全视其为一种下流社会的玩意。</p>
<p>　　澳洲人也玩蹴鞠，让他们的第一个反应是澳洲人自称“大宋苗裔”还是有那么一点来头的，不然何至于要在学校里也开办这种球戏？想来这也是道君皇帝的遗泽。</p>
<p>　　但是，随着球戏的深入，参观团的成员很快意识到，这“澳洲蹴鞠”和他们看过的蹴鞠毫不相干，不要说没什么花式的白打，光双方来回争抢，队员们互相配合这拼命带球达阵的气势倒有点排兵布阵的意思。</p>
<p>　　虽然已经知道髡贼迟早要“造反”，但是看到一群十几岁的小孩子在场地上蹴鞠已经流露出一股强悍的斗杀之气，参观团成员们还是觉得一阵发自内心的忧虑——他们中的大多数倒不是为了大明担忧：大明朝廷距离他们实在有点远，存在感不高——而是这些澳洲人精心培育年轻学生，流露出来的气质已经是和他们是格格不入，这样一群人日后若是做了新朝的官，也成了“士大夫”，自己这些人如何自处？还能不能算得上新朝的“士”？</p>
<p>　　想到这里，几个秀才已经有些坐立不安的感觉了。“学成文武艺，货于帝王家”，这是自古以来读书人的念书的终极目的。如今这即将要另树旗的新“帝王家”看起来根本不稀罕自己的“文武艺”，这书不就白念了？！心思活络，贪慕富贵的，早就在偷偷的想不知道这澳洲学问该从哪几本书开始念才行？</p>
<p>　　黄秉坤正在凝神观看场上的赛事——他渐渐的有点看出门道来了，开始他还只觉得这是一种蛮力之戏，无非是看谁跑得快，力气大而已，但是渐渐的他发觉其中颇有排兵布阵的奥妙。更为难得的是，每队队员在夺球送球时候的配合堪称精妙，前后跑动、夹击、策应……无不行云流水，一气呵成——这要打起仗来，就是一等一的精兵，再想到那队形严整的跑步和做操，黄秉坤忽发奇想：莫非髡贼是以军法治国？</p>
<p>　　忽然感到有人拍了他一下，转过头一看正是王教谕，王先生的脸因为羞愤而扭曲起来了。他低声道：“真是世风日下！败坏人心！”</p>
<p>　　黄秉坤正莫名其妙间，顺着他的目光看去，却见一处看台上，是二十多个女学生，也分为两队，各持红蓝一色的绸花，随着场上的节奏在那里又唱又跳。原本只是盖住膝盖的裙子随着她们的跳动不时翻动起来，露出及膝袜上面一点点小麦色的大腿。</p>
<p>　　在她们的带动下，场边观战的同学们或是叫喊，或是欢呼，十分的热闹。让这边观战的参观团一隅显得特别冷清。</p>
<p>　　黄秉坤对女学生的绝对领域没什么兴趣——他觉得这都不要紧，要紧的是髡贼正在不遗余力的做大明药丸，这样下去，不仅大明要完，就是这华夏的万世一统恐怕也得亡在这伙假宋的手中！</p>
<p>　　王赐见他不说话，正要再说几句，忽然场上响起了号子，有一队宣布换人了。</p>
<p>　　上场的不是别人，正是黄平。黄秉坤还是第一次看到自己的小厮穿着这样的短衣短裤——要在黄家寨里，黄平这样的在宅邸内奔走服役的小厮是绝对不许穿着露腿露胳膊有辱斯文的衣服的。</p>
<p>　　只见自己的小厮黄平穿着的短衣的前胸背后都有个大大的“大食数”，头戴藤盔，关节上全部缠绕着厚厚的带子。黄秉坤忽然发现自己身边这个瘦小的男孩已经长高长壮了，他裸露出得胳膊和大腿上都是结实的肌肉，在场地上奔跑喊叫着。</p>
<p>　　上场不一会儿，黄平就配合着打了一次进攻，虽然没有达阵得分，但是他在进攻中的表现出来的力量和机敏性却让黄秉坤刮目相看——自己怎么从来没发觉这少年有这么大的本事？要知道黄家的家仆们都要练武，黄平是出了名的“无用”，连很简单的太祖长拳都学不来。</p>
<p>　　“澳洲人真有点石成金的本事。”正在感慨的的黄秉坤忽然听到了刘大霖的声音。</p>
<p>　　“山长，您——”</p>
<p>　　“醒了，听说你们都在这里观战，我也来凑个热闹。”刘大霖道。</p>
<p>　　“这里日头大，我们还是到席棚下观战好了。”黄秉坤赶紧扶着刘大霖到了一边的遮阳篷下。刘大霖似乎对这充满了活力的运动颇有兴趣，不时的看着场上的比赛呵呵的笑。黄秉坤却再也没有看下去的欲望。突然，一阵剧烈的欢呼声把黄秉坤从发呆中拉出来，只见穿着红衣的黄平在场地上高高的举着双手快速地跑着，脸上洋溢的幸福是黄秉坤不曾看到过的。他正懵懂间，刘大霖却告诉他了：</p>
<p>　　“这是得分了。”</p>
<p>　　“山长？！”黄秉坤很是惊讶。山长行动不便，很少出门，居然对髡贼的事情知道的这么清楚！</p>
<p>　　“我家管家的孙子就在这里念书，他也喜欢这橄榄球戏，我也知道一二。”</p>
<p>　　黄秉坤正要说什么，黄平挣脱了背后一脸兴奋想要拉住他，抱住他的队友的追逐，跑向自己同学的看台，里面一个女生也伸出双手，跳了出来，和他紧紧的拥抱在一起。这一举动顿时让黄秉坤傻了眼，脑海里顿时一片空白，只觉得有什么东西在胸中坍塌了下来。阳光照耀在整个场地上，亮晃晃的，唯独他站得地方有着一片长长的阴影。</p>
]]></content>
      <categories>
        <category>Excerpt</category>
      </categories>
      <tags>
        <tag>临高启明</tag>
      </tags>
  </entry>
  <entry>
    <title>落幕</title>
    <url>/2019/02/06/%E8%90%BD%E5%B9%95/</url>
    <content><![CDATA[<h3 id="第六章-纷争-第四十三节"><a href="#第六章-纷争-第四十三节" class="headerlink" title="第六章 纷争 第四十三节"></a>第六章 纷争 第四十三节</h3><p>　　于是这个计划就不顾死活的干了起来。要是换成了中国人，大约不会干这样疯狂又没把握的事情，但是统太郎一伙的狗急跳墙的赌博精神一点不亚于他们在另一个时空中的皇国精英们。</p>
<p>　　统太郎又一次跟着宁六斤以帮助送货为名混进了甲字营，如愿见到了福松。</p>
<p>　　“……我们打算就这样救走少主，时间就在今晚。请少主早做准备。”统太郎用日语小声的说着，为了不让他产生害怕的情绪，他又添了一句，“我等已经做了完全的准备，拼了性命也要救少主出岛。”</p>
<p>　　“你去做吧。”福松的脸上露出了与年龄不相称的沉静坚毅的神情。</p>
<p>　　当晚月暗星稀，但是风浪不高。距离大陆最近的古宁头海滩附近的一座小山包上，一个经过伪装的观察哨里，许可正在用望远镜监视着海滩。</p>
<p>　　按照估计：统太郎一伙在甲字营里李代桃僵的将郑森换出人来之后就会来这里实施偷渡，要在夜晚偷渡海峡，不管是用小船还是游泳，他们只能走最近距离，古宁头这里距离大陆最近，他们在这里下水的可能性极大。</p>
<p>　　他的步话机里传来了咔咔的声音，这是尾随逃亡者的特侦队员发来的信号：逃亡者按照预估路线往古宁头来了。</p>
<p>　　许可马上举起了红外望远镜，搜索沙滩：果然有七八个人正在沙滩上借着夜色一路狂奔，其中一人身上似乎还背负着什么。</p>
<p>　　他马上调节焦距，看清楚背上原来是个孩子。</p>
<p>　　“果然来了！”许可暗暗点头。</p>
<p>　　虽然这次行动自己不但放水，还推了一把，不过这伙人胆大妄为，敢想敢干也的确让人很佩服。这最后的偷渡就看他们自己的了，要是运气不好都淹死在海峡里也怪不得别人。</p>
<p>　　统太郎一伙哪里知道有人正在暗中监视，来到海滩上将早就藏在礁石间的竹筒绳索取出七手八脚的往身上捆。统太郎为福松绑好竹筒，小声道：“少主要不要害怕，我们推着您过去。”</p>
<p>　　“我不怕，我会游泳。”</p>
<p>　　“好，我们走吧。”统太郎说着叫来了本多，“本多，你水性最好，由你来带少主。”</p>
<p>　　“是，我一定用命来保护少主。”</p>
<p>　　“大伙听着，我们拼了命也要把少主送回到大陆上！本多要是坚持不住了，你们依次上！”</p>
<p>　　“哈咿！”</p>
<p>　　“混蛋，轻声！”</p>
<p>　　统太郎转过头，看到宁六斤还没有绑上竹筒，说道：“你也绑上，跟我们走。”</p>
<p>　　宁六斤脸色煞白：“小的不会游泳……”</p>
<p>　　统太郎唰得拔出胁差，一刀捅了进去，宁六斤连叫都来不及叫一声就瘫倒在沙滩上。</p>
<p>　　一群人随后下水，朝着对面的海滩游去。几天前，统太郎已经派了一个人偷偷逃回大陆，此时这个人在对面点燃了三堆火把。在海峡中游泳的人只要时刻注意自己眼前的光源是三处就能准确的判断自己的方向有没有发生偏差。</p>
<p>　　许可眼见着他们在波涛中载沉载浮，渐渐远去。他放下了望远镜：“叫特侦队开枪，为他们送行！”</p>
<p>　　海滩上只留下了宁六斤的尸体，士兵们合上他因为痛苦瞪大了的眼睛，他的嘴张得老大，似乎想发出不甘的呐喊。</p>
<p>　　“可惜，这少年挺能干的，培养下也许是个搞情报工作的苗子。”许可看着士兵们抬走宁六斤的尸体。有些惋惜的说道，“把他列入情报局外协人员殉职名册，在墓地找个向阳的地方把他安葬了。”</p>
<p>　　郑森的逃走并没有引起多大的涟漪，反倒是他父亲确切死亡的消息引来的震动更大。张土木和许可根据在各处提取到的几十个指纹进行了逐一比对，终于确认有一组指纹出现在所有郑芝龙经常出现的场合和他常用的物品上，应该就是他本人的指纹。再将这组指纹和无头尸体上的指纹进行了比对，确认两者基本吻合。</p>
<p>　　再从俘虏营地内提出若干名郑芝龙的小妾、贴身小厮等平日亲近的人，对无头尸进行了体态特征辨认。最终确认，这就是郑芝龙本人。</p>
<p>　　这一消息随后传回临高，元老院下令：在临高、高雄和香港，各炮台均鸣炮十一响。宣传部随后发出《郑逆授首》的号外。这一号外不仅在元老院统治区散发，通过对外情报局的渠道，以传单的形式在广东、福建两省沿海地区进行散发。</p>
<p>　　几天后，10月10日一早，工兵在安平、大小金门、厦门和鼓浪屿的各个村镇和营寨同时纵火，引爆了置在房屋内的大批火药——缴获的大批郑军火药质量不佳，运输又很不安全，干脆就地使用。用来爆破较为坚固的建筑。</p>
<p>　　数万斤火药的爆炸声此起彼伏，黑烟裹挟着烈火直冲云霄，漳州湾沿线到处是熊熊燃烧的村镇堡寨。</p>
<p>　　工兵在各处集合点名，随后在海兵的护送下，随着鼓点列队穿过已经开始燃烧的街道，一批一批的登上了海湾里等候的大发艇，在滚滚黑烟中最后一批离开漳州湾的第一舰队拔锚起航，离开了已经几成废墟的漳州湾。</p>
<p>　　霸王行动就这样落下了帷幕。</p>
<p>　　原本船只进出频繁，樯橹林立，商贾云集的漳州湾只剩下一片死寂。沿海各岛和安平城内的公私财物掳掠殆尽，人口全部掳走。按照许可的估计，郑家即使有足够的资金，想要在此重整旗鼓也得一年半载以上。足以让元老院的贸易战发挥出效力来。</p>
<p>　　明秋站在舰桥上望着这黑烟滚滚的场面，心中的感情十分复杂作为一个职业生涯全部在和平中度过的海军军人，因缘巧合的来到了这个新时空，在自己的暮年指挥了这么一场堪称“全胜”的海陆联合战役，在这新世界的海军史上已经是名垂青史了。</p>
<p>　　但是自己指挥的这支“元老院和人民”的海军，在漳州湾上干出的事情堪称“三光”，虽说伏波军没有屠杀滥杀，但是这样对整个地区的建筑物不分军民的大规模破坏和掳走人口依然让他的良心有所不安。特别是成千上万的百姓扶老携幼，带着可怜的一点家财，在刺刀的逼迫下登船，就此背井离乡。整个过程当中少不得有许多人横尸街头，家破人亡……</p>
<p>　　早晨的阳光投射在甲板上，新帝国的朝阳已经出现在海平线上，而他看不到这个政权如日中天的那一刻了，不知道这是幸运还是不幸。</p>
<p>　　“我老了……我在和平繁荣的时代生活的太久了……”他手扶栏杆，看着战舰舰首在轰鸣的蒸汽机的推动下划破海面，翻腾起海浪的时候这样想着。</p>
]]></content>
      <categories>
        <category>Excerpt</category>
      </categories>
      <tags>
        <tag>临高启明</tag>
      </tags>
  </entry>
</search>
